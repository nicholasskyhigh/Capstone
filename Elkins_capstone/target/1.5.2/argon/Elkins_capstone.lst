
c:/Users/Nick/Desktop/Iot/Capstone/Elkins_capstone/target/1.5.2/argon/Elkins_capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004c90  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8cb0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000484  2003dd58  000d8cb4  0001dd58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000614  2003e1dc  2003e1dc  0002e1dc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9138  000d9138  00029138  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9160  000d9160  00029160  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001041d9  00000000  00000000  00029164  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000157f0  00000000  00000000  0012d33d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002298a  00000000  00000000  00142b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c90  00000000  00000000  001654b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005068  00000000  00000000  00168147  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003e465  00000000  00000000  0016d1af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00036d9d  00000000  00000000  001ab614  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010c37d  00000000  00000000  001e23b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e0c0  00000000  00000000  002ee730  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 ff23 	bl	d7e7c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 ff28 	bl	d7e92 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dd58 	.word	0x2003dd58
   d404c:	000d8cb4 	.word	0x000d8cb4
   d4050:	2003e1dc 	.word	0x2003e1dc
   d4054:	2003e1dc 	.word	0x2003e1dc
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 f9fd 	bl	d645c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d8ca4 	.word	0x000d8ca4
   d4084:	000d8c50 	.word	0x000d8c50

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b89c 	b.w	d41c4 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f8fb 	bl	d4288 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 b9a3 	b.w	d63e0 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 beed 	b.w	d5e78 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bef3 	b.w	d5e88 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bef1 	b.w	d5e88 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f001 fe56 	bl	d5d60 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d5ad1 	.word	0x000d5ad1

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40cc:	4770      	bx	lr

000d40ce <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40ce:	4770      	bx	lr

000d40d0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40d0:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40d2:	6984      	ldr	r4, [r0, #24]
   d40d4:	4b0a      	ldr	r3, [pc, #40]	; (d4100 <_ZN9TCPClientD1Ev+0x30>)
   d40d6:	6003      	str	r3, [r0, #0]
   d40d8:	4605      	mov	r5, r0
   d40da:	b17c      	cbz	r4, d40fc <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40dc:	6863      	ldr	r3, [r4, #4]
   d40de:	3b01      	subs	r3, #1
   d40e0:	6063      	str	r3, [r4, #4]
   d40e2:	b95b      	cbnz	r3, d40fc <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d40e4:	6823      	ldr	r3, [r4, #0]
   d40e6:	4620      	mov	r0, r4
   d40e8:	689b      	ldr	r3, [r3, #8]
   d40ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40ec:	68a3      	ldr	r3, [r4, #8]
   d40ee:	3b01      	subs	r3, #1
   d40f0:	60a3      	str	r3, [r4, #8]
   d40f2:	b91b      	cbnz	r3, d40fc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40f4:	6823      	ldr	r3, [r4, #0]
   d40f6:	4620      	mov	r0, r4
   d40f8:	68db      	ldr	r3, [r3, #12]
   d40fa:	4798      	blx	r3
   d40fc:	4628      	mov	r0, r5
   d40fe:	bd38      	pop	{r3, r4, r5, pc}
   d4100:	000d8b24 	.word	0x000d8b24

000d4104 <_ZN9TCPClientD0Ev>:
   d4104:	b510      	push	{r4, lr}
   d4106:	4604      	mov	r4, r0
   d4108:	f7ff ffe2 	bl	d40d0 <_ZN9TCPClientD1Ev>
   d410c:	4620      	mov	r0, r4
   d410e:	211c      	movs	r1, #28
   d4110:	f003 f930 	bl	d7374 <_ZdlPvj>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <_Z5onoffv>:
  display.display();
  

}

void onoff() { 
   d4118:	b510      	push	{r4, lr}
  if (status == false) {
   d411a:	4b0a      	ldr	r3, [pc, #40]	; (d4144 <_Z5onoffv+0x2c>)
   d411c:	781c      	ldrb	r4, [r3, #0]
   d411e:	b984      	cbnz	r4, d4142 <_Z5onoffv+0x2a>
    digitalWrite(relay1,LOW);
   d4120:	4b09      	ldr	r3, [pc, #36]	; (d4148 <_Z5onoffv+0x30>)
   d4122:	4621      	mov	r1, r4
   d4124:	8818      	ldrh	r0, [r3, #0]
   d4126:	f003 f888 	bl	d723a <digitalWrite>
    digitalWrite(relay2,LOW);
   d412a:	4b08      	ldr	r3, [pc, #32]	; (d414c <_Z5onoffv+0x34>)
   d412c:	4621      	mov	r1, r4
   d412e:	8818      	ldrh	r0, [r3, #0]
   d4130:	f003 f883 	bl	d723a <digitalWrite>
    digitalWrite(relay3,LOW);
   d4134:	4b06      	ldr	r3, [pc, #24]	; (d4150 <_Z5onoffv+0x38>)
   d4136:	4621      	mov	r1, r4
   d4138:	8818      	ldrh	r0, [r3, #0]
  }

}
   d413a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void onoff() { 
  if (status == false) {
    digitalWrite(relay1,LOW);
    digitalWrite(relay2,LOW);
    digitalWrite(relay3,LOW);
   d413e:	f003 b87c 	b.w	d723a <digitalWrite>
   d4142:	bd10      	pop	{r4, pc}
   d4144:	2003e3ac 	.word	0x2003e3ac
   d4148:	2003dd58 	.word	0x2003dd58
   d414c:	2003dd5c 	.word	0x2003dd5c
   d4150:	2003dd60 	.word	0x2003dd60

000d4154 <_Z12MQTT_connectv>:

}



void MQTT_connect() { //connection to adafruit.io
   d4154:	b538      	push	{r3, r4, r5, lr}
  int8_t ret;
 
 
  if (mqtt.connected()) {
   d4156:	4817      	ldr	r0, [pc, #92]	; (d41b4 <_Z12MQTT_connectv+0x60>)
   d4158:	f001 f9d3 	bl	d5502 <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   d415c:	bb40      	cbnz	r0, d41b0 <_Z12MQTT_connectv+0x5c>
    return;
  }
 
  Serial.print("Connecting to MQTT... ");
   d415e:	f002 fa8f 	bl	d6680 <_Z16_fetch_usbserialv>
   d4162:	4915      	ldr	r1, [pc, #84]	; (d41b8 <_Z12MQTT_connectv+0x64>)
   d4164:	f002 f87c 	bl	d6260 <_ZN5Print5printEPKc>
 
  while ((ret = mqtt.connect()) != 0) { 
   d4168:	4812      	ldr	r0, [pc, #72]	; (d41b4 <_Z12MQTT_connectv+0x60>)
   d416a:	f001 fba7 	bl	d58bc <_ZN13Adafruit_MQTT7connectEv>
   d416e:	4604      	mov	r4, r0
   d4170:	b1b8      	cbz	r0, d41a2 <_Z12MQTT_connectv+0x4e>
       Serial.println(mqtt.connectErrorString(ret));
   d4172:	f002 fa85 	bl	d6680 <_Z16_fetch_usbserialv>
   d4176:	4621      	mov	r1, r4
   d4178:	4605      	mov	r5, r0
   d417a:	480e      	ldr	r0, [pc, #56]	; (d41b4 <_Z12MQTT_connectv+0x60>)
   d417c:	f001 fada 	bl	d5734 <_ZN13Adafruit_MQTT18connectErrorStringEa>
   d4180:	4601      	mov	r1, r0
   d4182:	4628      	mov	r0, r5
   d4184:	f002 f87f 	bl	d6286 <_ZN5Print7printlnEPKc>
       Serial.println("Retrying MQTT connection in 5 seconds...");
   d4188:	f002 fa7a 	bl	d6680 <_Z16_fetch_usbserialv>
   d418c:	490b      	ldr	r1, [pc, #44]	; (d41bc <_Z12MQTT_connectv+0x68>)
   d418e:	f002 f87a 	bl	d6286 <_ZN5Print7printlnEPKc>
       mqtt.disconnect();
   d4192:	4808      	ldr	r0, [pc, #32]	; (d41b4 <_Z12MQTT_connectv+0x60>)
   d4194:	f001 fadc 	bl	d5750 <_ZN13Adafruit_MQTT10disconnectEv>
       delay(5000);  
   d4198:	f241 3088 	movw	r0, #5000	; 0x1388
   d419c:	f002 f8ea 	bl	d6374 <delay>
   d41a0:	e7e2      	b.n	d4168 <_Z12MQTT_connectv+0x14>
  }
  Serial.println("MQTT Connected!");
   d41a2:	f002 fa6d 	bl	d6680 <_Z16_fetch_usbserialv>
   d41a6:	4906      	ldr	r1, [pc, #24]	; (d41c0 <_Z12MQTT_connectv+0x6c>)
}
   d41a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  
  }
  Serial.println("MQTT Connected!");
   d41ac:	f002 b86b 	b.w	d6286 <_ZN5Print7printlnEPKc>
   d41b0:	bd38      	pop	{r3, r4, r5, pc}
   d41b2:	bf00      	nop
   d41b4:	2003e25c 	.word	0x2003e25c
   d41b8:	000d7f50 	.word	0x000d7f50
   d41bc:	000d7f67 	.word	0x000d7f67
   d41c0:	000d7f90 	.word	0x000d7f90

000d41c4 <setup>:
int waterlevel; //Waterlevel sensor input
int relay1 = D2, relay2 = D3, relay3 = D4; //sets up the relays for each tec
int pushbutton = D9;
bool status = false;

void setup() {
   d41c4:	b510      	push	{r4, lr}
  pinMode(A0, INPUT);
   d41c6:	2100      	movs	r1, #0
   d41c8:	2013      	movs	r0, #19
   d41ca:	f003 f825 	bl	d7218 <pinMode>
  pinMode(relay1, OUTPUT);
   d41ce:	4b13      	ldr	r3, [pc, #76]	; (d421c <setup+0x58>)
  pinMode(relay2, OUTPUT);
  pinMode(relay3, OUTPUT);
   display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d41d0:	4c13      	ldr	r4, [pc, #76]	; (d4220 <setup+0x5c>)
int pushbutton = D9;
bool status = false;

void setup() {
  pinMode(A0, INPUT);
  pinMode(relay1, OUTPUT);
   d41d2:	8818      	ldrh	r0, [r3, #0]
   d41d4:	2101      	movs	r1, #1
   d41d6:	f003 f81f 	bl	d7218 <pinMode>
  pinMode(relay2, OUTPUT);
   d41da:	4b12      	ldr	r3, [pc, #72]	; (d4224 <setup+0x60>)
   d41dc:	2101      	movs	r1, #1
   d41de:	8818      	ldrh	r0, [r3, #0]
   d41e0:	f003 f81a 	bl	d7218 <pinMode>
  pinMode(relay3, OUTPUT);
   d41e4:	4b10      	ldr	r3, [pc, #64]	; (d4228 <setup+0x64>)
   d41e6:	2101      	movs	r1, #1
   d41e8:	8818      	ldrh	r0, [r3, #0]
   d41ea:	f003 f815 	bl	d7218 <pinMode>
   display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d41ee:	223c      	movs	r2, #60	; 0x3c
   d41f0:	4620      	mov	r0, r4
   d41f2:	2102      	movs	r1, #2
   d41f4:	f000 fe6e 	bl	d4ed4 <_ZN16Adafruit_SSD13065beginEhh>
  display.setTextColor(WHITE);
   d41f8:	2101      	movs	r1, #1
   d41fa:	4620      	mov	r0, r4
   d41fc:	f001 f974 	bl	d54e8 <_ZN12Adafruit_GFX12setTextColorEt>
  bme.begin();
   d4200:	480a      	ldr	r0, [pc, #40]	; (d422c <setup+0x68>)
   d4202:	f000 fb7d 	bl	d4900 <_ZN15Adafruit_BME2805beginEv>
  display.display();
   d4206:	4620      	mov	r0, r4
   d4208:	f000 ff36 	bl	d5078 <_ZN16Adafruit_SSD13067displayEv>
  delay(750);
   d420c:	f240 20ee 	movw	r0, #750	; 0x2ee
   d4210:	f002 f8b0 	bl	d6374 <delay>
  
  MQTT_connect();
  


}
   d4214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.setTextColor(WHITE);
  bme.begin();
  display.display();
  delay(750);
  
  MQTT_connect();
   d4218:	f7ff bf9c 	b.w	d4154 <_Z12MQTT_connectv>
   d421c:	2003dd58 	.word	0x2003dd58
   d4220:	2003e1e0 	.word	0x2003e1e0
   d4224:	2003dd5c 	.word	0x2003dd5c
   d4228:	2003dd60 	.word	0x2003dd60
   d422c:	2003e330 	.word	0x2003e330

000d4230 <_Z5ping1v>:
       delay(5000);  
  }
  Serial.println("MQTT Connected!");
}

void ping1() {  //pings adafruit.io to make sure  connection is active
   d4230:	b538      	push	{r3, r4, r5, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4232:	f001 fc55 	bl	d5ae0 <HAL_Timer_Get_Milli_Seconds>
   if ((millis()-last)>30000) {
   d4236:	4b10      	ldr	r3, [pc, #64]	; (d4278 <_Z5ping1v+0x48>)
   d4238:	681a      	ldr	r2, [r3, #0]
   d423a:	1a80      	subs	r0, r0, r2
   d423c:	f247 5230 	movw	r2, #30000	; 0x7530
   d4240:	4290      	cmp	r0, r2
   d4242:	461c      	mov	r4, r3
   d4244:	d917      	bls.n	d4276 <_Z5ping1v+0x46>
      Serial.printf("Pinging MQTT \n");
   d4246:	f002 fa1b 	bl	d6680 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d424a:	4a0c      	ldr	r2, [pc, #48]	; (d427c <_Z5ping1v+0x4c>)
   d424c:	2100      	movs	r1, #0
   d424e:	f002 f844 	bl	d62da <_ZN5Print11printf_implEbPKcz>
      
      if(! mqtt.ping()) {
   d4252:	2101      	movs	r1, #1
   d4254:	480a      	ldr	r0, [pc, #40]	; (d4280 <_Z5ping1v+0x50>)
   d4256:	f001 fa8f 	bl	d5778 <_ZN13Adafruit_MQTT4pingEh>
   d425a:	4605      	mov	r5, r0
   d425c:	b940      	cbnz	r0, d4270 <_Z5ping1v+0x40>
        Serial.printf("Disconnecting \n");
   d425e:	f002 fa0f 	bl	d6680 <_Z16_fetch_usbserialv>
   d4262:	4a08      	ldr	r2, [pc, #32]	; (d4284 <_Z5ping1v+0x54>)
   d4264:	4629      	mov	r1, r5
   d4266:	f002 f838 	bl	d62da <_ZN5Print11printf_implEbPKcz>
        mqtt.disconnect();
   d426a:	4805      	ldr	r0, [pc, #20]	; (d4280 <_Z5ping1v+0x50>)
   d426c:	f001 fa70 	bl	d5750 <_ZN13Adafruit_MQTT10disconnectEv>
   d4270:	f001 fc36 	bl	d5ae0 <HAL_Timer_Get_Milli_Seconds>
      }
      last = millis();
   d4274:	6020      	str	r0, [r4, #0]
   d4276:	bd38      	pop	{r3, r4, r5, pc}
   d4278:	2003e258 	.word	0x2003e258
   d427c:	000d7fa0 	.word	0x000d7fa0
   d4280:	2003e25c 	.word	0x2003e25c
   d4284:	000d7faf 	.word	0x000d7faf

000d4288 <loop>:
  


}

void loop() {
   d4288:	b510      	push	{r4, lr}
  ping1(); // calls on the mqtt ping to keep active connection to adafruit
  onoff();
  display.clearDisplay();
   d428a:	4c0b      	ldr	r4, [pc, #44]	; (d42b8 <loop+0x30>)


}

void loop() {
  ping1(); // calls on the mqtt ping to keep active connection to adafruit
   d428c:	f7ff ffd0 	bl	d4230 <_Z5ping1v>
  onoff();
   d4290:	f7ff ff42 	bl	d4118 <_Z5onoffv>
  display.clearDisplay();
   d4294:	4620      	mov	r0, r4
   d4296:	f000 fdcd 	bl	d4e34 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.println("hello world");
   d429a:	4908      	ldr	r1, [pc, #32]	; (d42bc <loop+0x34>)
   d429c:	4620      	mov	r0, r4
   d429e:	f001 fff2 	bl	d6286 <_ZN5Print7printlnEPKc>
  display.setCursor(0,0);
   d42a2:	2200      	movs	r2, #0
   d42a4:	4620      	mov	r0, r4
   d42a6:	4611      	mov	r1, r2
   d42a8:	f001 f91b 	bl	d54e2 <_ZN12Adafruit_GFX9setCursorEss>
  display.display();
   d42ac:	4620      	mov	r0, r4
  

}
   d42ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ping1(); // calls on the mqtt ping to keep active connection to adafruit
  onoff();
  display.clearDisplay();
  display.println("hello world");
  display.setCursor(0,0);
  display.display();
   d42b2:	f000 bee1 	b.w	d5078 <_ZN16Adafruit_SSD13067displayEv>
   d42b6:	bf00      	nop
   d42b8:	2003e1e0 	.word	0x2003e1e0
   d42bc:	000d7fbf 	.word	0x000d7fbf

000d42c0 <_ZN16Adafruit_SSD1306D0Ev>:
   d42c0:	b510      	push	{r4, lr}
   d42c2:	2124      	movs	r1, #36	; 0x24
   d42c4:	4604      	mov	r4, r0
   d42c6:	f003 f855 	bl	d7374 <_ZdlPvj>
   d42ca:	4620      	mov	r0, r4
   d42cc:	bd10      	pop	{r4, pc}

000d42ce <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d42ce:	b510      	push	{r4, lr}
   d42d0:	21d4      	movs	r1, #212	; 0xd4
   d42d2:	4604      	mov	r4, r0
   d42d4:	f003 f84e 	bl	d7374 <_ZdlPvj>
   d42d8:	4620      	mov	r0, r4
   d42da:	bd10      	pop	{r4, pc}

000d42dc <_GLOBAL__sub_I_display>:
        Serial.printf("Disconnecting \n");
        mqtt.disconnect();
      }
      last = millis();
  }
   d42dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
#include "Apikey.h"


#define BME280_ADDRESS  (0x77)
#define OLED_RESET D4
Adafruit_SSD1306 display(OLED_RESET);
   d42de:	4c1d      	ldr	r4, [pc, #116]	; (d4354 <_GLOBAL__sub_I_display+0x78>)
   d42e0:	4d1d      	ldr	r5, [pc, #116]	; (d4358 <_GLOBAL__sub_I_display+0x7c>)
#define AIO_SERVER      "io.adafruit.com" 
#define AIO_SERVERPORT  1883 
//this is a github test  


TCPClient TheClient; 
   d42e2:	4e1e      	ldr	r6, [pc, #120]	; (d435c <_GLOBAL__sub_I_display+0x80>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42e4:	f001 fb64 	bl	d59b0 <HAL_Pin_Map>
#include "Apikey.h"


#define BME280_ADDRESS  (0x77)
#define OLED_RESET D4
Adafruit_SSD1306 display(OLED_RESET);
   d42e8:	2104      	movs	r1, #4
   d42ea:	4620      	mov	r0, r4
   d42ec:	f000 fd8c 	bl	d4e08 <_ZN16Adafruit_SSD1306C1Ea>
   d42f0:	462a      	mov	r2, r5
   d42f2:	491b      	ldr	r1, [pc, #108]	; (d4360 <_GLOBAL__sub_I_display+0x84>)
   d42f4:	4620      	mov	r0, r4
   d42f6:	f003 f82f 	bl	d7358 <__aeabi_atexit>
Adafruit_BME280 bme;
   d42fa:	481a      	ldr	r0, [pc, #104]	; (d4364 <_GLOBAL__sub_I_display+0x88>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d42fc:	4c1a      	ldr	r4, [pc, #104]	; (d4368 <_GLOBAL__sub_I_display+0x8c>)
   d42fe:	f000 f875 	bl	d43ec <_ZN15Adafruit_BME280C1Ev>
#define AIO_SERVER      "io.adafruit.com" 
#define AIO_SERVERPORT  1883 
//this is a github test  


TCPClient TheClient; 
   d4302:	4630      	mov	r0, r6
   d4304:	f002 fe52 	bl	d6fac <_ZN9TCPClientC1Ev>
   d4308:	462a      	mov	r2, r5
   d430a:	4918      	ldr	r1, [pc, #96]	; (d436c <_GLOBAL__sub_I_display+0x90>)
   d430c:	4630      	mov	r0, r6
   d430e:	f003 f823 	bl	d7358 <__aeabi_atexit>
   d4312:	4b17      	ldr	r3, [pc, #92]	; (d4370 <_GLOBAL__sub_I_display+0x94>)
   d4314:	9300      	str	r3, [sp, #0]
   d4316:	f240 725b 	movw	r2, #1883	; 0x75b
   d431a:	4b16      	ldr	r3, [pc, #88]	; (d4374 <_GLOBAL__sub_I_display+0x98>)
   d431c:	4916      	ldr	r1, [pc, #88]	; (d4378 <_GLOBAL__sub_I_display+0x9c>)
   d431e:	4620      	mov	r0, r4
   d4320:	f001 f982 	bl	d5628 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d4324:	4b15      	ldr	r3, [pc, #84]	; (d437c <_GLOBAL__sub_I_display+0xa0>)
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);
   d4326:	4916      	ldr	r1, [pc, #88]	; (d4380 <_GLOBAL__sub_I_display+0xa4>)
   d4328:	6023      	str	r3, [r4, #0]
   d432a:	462a      	mov	r2, r5
   d432c:	4620      	mov	r0, r4
   d432e:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d4332:	f003 f811 	bl	d7358 <__aeabi_atexit>

Adafruit_MQTT_Subscribe activate = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/activate"); 
   d4336:	4621      	mov	r1, r4
   d4338:	2300      	movs	r3, #0
   d433a:	4a12      	ldr	r2, [pc, #72]	; (d4384 <_GLOBAL__sub_I_display+0xa8>)
   d433c:	4812      	ldr	r0, [pc, #72]	; (d4388 <_GLOBAL__sub_I_display+0xac>)
   d433e:	f001 fb16 	bl	d596e <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Subscribe turnon = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/turnon");
   d4342:	4a12      	ldr	r2, [pc, #72]	; (d438c <_GLOBAL__sub_I_display+0xb0>)
   d4344:	4812      	ldr	r0, [pc, #72]	; (d4390 <_GLOBAL__sub_I_display+0xb4>)
   d4346:	2300      	movs	r3, #0
   d4348:	4621      	mov	r1, r4
        Serial.printf("Disconnecting \n");
        mqtt.disconnect();
      }
      last = millis();
  }
   d434a:	b002      	add	sp, #8
   d434c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

TCPClient TheClient; 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);

Adafruit_MQTT_Subscribe activate = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/activate"); 
Adafruit_MQTT_Subscribe turnon = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/turnon");
   d4350:	f001 bb0d 	b.w	d596e <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
   d4354:	2003e1e0 	.word	0x2003e1e0
   d4358:	2003e1dc 	.word	0x2003e1dc
   d435c:	2003e23c 	.word	0x2003e23c
   d4360:	000d40cd 	.word	0x000d40cd
   d4364:	2003e330 	.word	0x2003e330
   d4368:	2003e25c 	.word	0x2003e25c
   d436c:	000d40d1 	.word	0x000d40d1
   d4370:	000d7fe7 	.word	0x000d7fe7
   d4374:	000d7fcb 	.word	0x000d7fcb
   d4378:	000d7fd7 	.word	0x000d7fd7
   d437c:	000d869c 	.word	0x000d869c
   d4380:	000d40cf 	.word	0x000d40cf
   d4384:	000d8008 	.word	0x000d8008
   d4388:	2003e204 	.word	0x2003e204
   d438c:	000d8023 	.word	0x000d8023
   d4390:	2003e374 	.word	0x2003e374

000d4394 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4394:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4396:	4602      	mov	r2, r0
   d4398:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d439a:	7913      	ldrb	r3, [r2, #4]
   d439c:	6895      	ldr	r5, [r2, #8]
   d439e:	b133      	cbz	r3, d43ae <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d43a0:	b93d      	cbnz	r5, d43b2 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d43a2:	490c      	ldr	r1, [pc, #48]	; (d43d4 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d43a4:	b004      	add	sp, #16
   d43a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d43aa:	f001 bf59 	b.w	d6260 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d43ae:	4b0a      	ldr	r3, [pc, #40]	; (d43d8 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d43b0:	e000      	b.n	d43b4 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d43b2:	4b0a      	ldr	r3, [pc, #40]	; (d43dc <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d43b4:	7b16      	ldrb	r6, [r2, #12]
   d43b6:	4c0a      	ldr	r4, [pc, #40]	; (d43e0 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d43b8:	490a      	ldr	r1, [pc, #40]	; (d43e4 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
   d43ba:	7b52      	ldrb	r2, [r2, #13]
   d43bc:	9202      	str	r2, [sp, #8]
   d43be:	2e01      	cmp	r6, #1
   d43c0:	bf08      	it	eq
   d43c2:	4621      	moveq	r1, r4
   d43c4:	9101      	str	r1, [sp, #4]
   d43c6:	9500      	str	r5, [sp, #0]
   d43c8:	4a07      	ldr	r2, [pc, #28]	; (d43e8 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d43ca:	2100      	movs	r1, #0
   d43cc:	f001 ff85 	bl	d62da <_ZN5Print11printf_implEbPKcz>
  }
   d43d0:	b004      	add	sp, #16
   d43d2:	bd70      	pop	{r4, r5, r6, pc}
   d43d4:	000d8059 	.word	0x000d8059
   d43d8:	000d870f 	.word	0x000d870f
   d43dc:	000d8048 	.word	0x000d8048
   d43e0:	000d8051 	.word	0x000d8051
   d43e4:	000d8055 	.word	0x000d8055
   d43e8:	000d806f 	.word	0x000d806f

000d43ec <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d43ec:	22ff      	movs	r2, #255	; 0xff
   d43ee:	7402      	strb	r2, [r0, #16]
   d43f0:	7442      	strb	r2, [r0, #17]
   d43f2:	7482      	strb	r2, [r0, #18]
   d43f4:	74c2      	strb	r2, [r0, #19]
{ }
   d43f6:	4770      	bx	lr

000d43f8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d43f8:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d43fa:	4d09      	ldr	r5, [pc, #36]	; (d4420 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d43fc:	6829      	ldr	r1, [r5, #0]
   d43fe:	f011 0401 	ands.w	r4, r1, #1
   d4402:	d10a      	bne.n	d441a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4404:	4628      	mov	r0, r5
   d4406:	f7ff fe59 	bl	d40bc <__cxa_guard_acquire>
   d440a:	b130      	cbz	r0, d441a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d440c:	4621      	mov	r1, r4
   d440e:	4805      	ldr	r0, [pc, #20]	; (d4424 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4410:	f001 fd96 	bl	d5f40 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4414:	4628      	mov	r0, r5
   d4416:	f7ff fe56 	bl	d40c6 <__cxa_guard_release>
        return instance;
    }
   d441a:	4802      	ldr	r0, [pc, #8]	; (d4424 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d441c:	bd38      	pop	{r3, r4, r5, pc}
   d441e:	bf00      	nop
   d4420:	2003e3b0 	.word	0x2003e3b0
   d4424:	2003e3b4 	.word	0x2003e3b4

000d4428 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d442c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4430:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4432:	4605      	mov	r5, r0
   d4434:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d4436:	d106      	bne.n	d4446 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4438:	f7ff ffde 	bl	d43f8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d443c:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d443e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4442:	f001 be99 	b.w	d6178 <_ZN8SPIClass8transferEh>
   d4446:	2607      	movs	r6, #7
   d4448:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d444a:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d444e:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4452:	2100      	movs	r1, #0
   d4454:	b280      	uxth	r0, r0
   d4456:	f002 fef0 	bl	d723a <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d445a:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d445e:	fa08 f106 	lsl.w	r1, r8, r6
   d4462:	4039      	ands	r1, r7
   d4464:	b280      	uxth	r0, r0
   d4466:	f002 fee8 	bl	d723a <digitalWrite>
        digitalWrite(_sck, HIGH);
   d446a:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d446e:	2101      	movs	r1, #1
   d4470:	b280      	uxth	r0, r0
   d4472:	f002 fee2 	bl	d723a <digitalWrite>
        if (digitalRead(_miso))
   d4476:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d447a:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d447c:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d447e:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4480:	f002 fef4 	bl	d726c <digitalRead>
   d4484:	b108      	cbz	r0, d448a <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4486:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d448a:	f116 36ff 	adds.w	r6, r6, #4294967295
   d448e:	d2de      	bcs.n	d444e <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4490:	4620      	mov	r0, r4
   d4492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4496 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d4496:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4498:	f7ff ffae 	bl	d43f8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d449c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d44a0:	f001 bd8b 	b.w	d5fba <_ZN8SPIClass14endTransactionEv>

000d44a4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d44a4:	b510      	push	{r4, lr}
   d44a6:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d44a8:	f7ff ffa6 	bl	d43f8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d44ac:	4621      	mov	r1, r4
    }
   d44ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d44b2:	f001 bd9b 	b.w	d5fec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d44b8 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d44b8:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d44ba:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d44be:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d44c0:	b085      	sub	sp, #20
   d44c2:	4604      	mov	r4, r0
   d44c4:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d44c6:	d11d      	bne.n	d4504 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d44c8:	7901      	ldrb	r1, [r0, #4]
   d44ca:	6800      	ldr	r0, [r0, #0]
   d44cc:	f002 f9f5 	bl	d68ba <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d44d0:	6820      	ldr	r0, [r4, #0]
   d44d2:	6803      	ldr	r3, [r0, #0]
   d44d4:	4629      	mov	r1, r5
   d44d6:	689b      	ldr	r3, [r3, #8]
   d44d8:	4798      	blx	r3
        _wire -> endTransmission();
   d44da:	6820      	ldr	r0, [r4, #0]
   d44dc:	f002 f9f8 	bl	d68d0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d44e0:	2202      	movs	r2, #2
   d44e2:	7921      	ldrb	r1, [r4, #4]
   d44e4:	6820      	ldr	r0, [r4, #0]
   d44e6:	f002 f9e5 	bl	d68b4 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d44ea:	6820      	ldr	r0, [r4, #0]
   d44ec:	6803      	ldr	r3, [r0, #0]
   d44ee:	695b      	ldr	r3, [r3, #20]
   d44f0:	4798      	blx	r3
   d44f2:	4605      	mov	r5, r0
   d44f4:	6820      	ldr	r0, [r4, #0]
   d44f6:	6803      	ldr	r3, [r0, #0]
   d44f8:	695b      	ldr	r3, [r3, #20]
   d44fa:	4798      	blx	r3
   d44fc:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4500:	b285      	uxth	r5, r0
   d4502:	e035      	b.n	d4570 <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d4504:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4508:	3301      	adds	r3, #1
   d450a:	d10e      	bne.n	d452a <_ZN15Adafruit_BME2806read16Eh+0x72>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d450c:	4b1a      	ldr	r3, [pc, #104]	; (d4578 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d450e:	4a1b      	ldr	r2, [pc, #108]	; (d457c <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d4510:	9300      	str	r3, [sp, #0]
   d4512:	9202      	str	r2, [sp, #8]
   d4514:	2300      	movs	r3, #0
   d4516:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4518:	4668      	mov	r0, sp
   d451a:	f88d 3004 	strb.w	r3, [sp, #4]
   d451e:	f88d 200c 	strb.w	r2, [sp, #12]
   d4522:	f88d 300d 	strb.w	r3, [sp, #13]
   d4526:	f7ff ffbd 	bl	d44a4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d452a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d452e:	2100      	movs	r1, #0
   d4530:	b280      	uxth	r0, r0
   d4532:	f002 fe82 	bl	d723a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4536:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d453a:	4620      	mov	r0, r4
   d453c:	f7ff ff74 	bl	d4428 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4540:	2100      	movs	r1, #0
   d4542:	4620      	mov	r0, r4
   d4544:	f7ff ff70 	bl	d4428 <_ZN15Adafruit_BME2807spixferEh>
   d4548:	2100      	movs	r1, #0
   d454a:	4605      	mov	r5, r0
   d454c:	4620      	mov	r0, r4
   d454e:	f7ff ff6b 	bl	d4428 <_ZN15Adafruit_BME2807spixferEh>
   d4552:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4556:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4558:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d455c:	2101      	movs	r1, #1
   d455e:	b280      	uxth	r0, r0
   d4560:	f002 fe6b 	bl	d723a <digitalWrite>
        if (_sck == -1)
   d4564:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4568:	3301      	adds	r3, #1
   d456a:	d101      	bne.n	d4570 <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d456c:	f7ff ff93 	bl	d4496 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4570:	4628      	mov	r0, r5
   d4572:	b005      	add	sp, #20
   d4574:	bd30      	pop	{r4, r5, pc}
   d4576:	bf00      	nop
   d4578:	000d8044 	.word	0x000d8044
   d457c:	0007a120 	.word	0x0007a120

000d4580 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4580:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d4582:	f7ff ff99 	bl	d44b8 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d4586:	ba40      	rev16	r0, r0
}
   d4588:	b280      	uxth	r0, r0
   d458a:	bd08      	pop	{r3, pc}

000d458c <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d458c:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d458e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4592:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4594:	b085      	sub	sp, #20
   d4596:	4604      	mov	r4, r0
   d4598:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d459a:	d116      	bne.n	d45ca <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d459c:	7901      	ldrb	r1, [r0, #4]
   d459e:	6800      	ldr	r0, [r0, #0]
   d45a0:	f002 f98b 	bl	d68ba <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d45a4:	6820      	ldr	r0, [r4, #0]
   d45a6:	6803      	ldr	r3, [r0, #0]
   d45a8:	4629      	mov	r1, r5
   d45aa:	689b      	ldr	r3, [r3, #8]
   d45ac:	4798      	blx	r3
        _wire -> endTransmission();
   d45ae:	6820      	ldr	r0, [r4, #0]
   d45b0:	f002 f98e 	bl	d68d0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d45b4:	2201      	movs	r2, #1
   d45b6:	7921      	ldrb	r1, [r4, #4]
   d45b8:	6820      	ldr	r0, [r4, #0]
   d45ba:	f002 f97b 	bl	d68b4 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d45be:	6820      	ldr	r0, [r4, #0]
   d45c0:	6803      	ldr	r3, [r0, #0]
   d45c2:	695b      	ldr	r3, [r3, #20]
   d45c4:	4798      	blx	r3
   d45c6:	b2c5      	uxtb	r5, r0
   d45c8:	e02e      	b.n	d4628 <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d45ca:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d45ce:	3301      	adds	r3, #1
   d45d0:	d10e      	bne.n	d45f0 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d45d2:	4b17      	ldr	r3, [pc, #92]	; (d4630 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d45d4:	4a17      	ldr	r2, [pc, #92]	; (d4634 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d45d6:	9300      	str	r3, [sp, #0]
   d45d8:	9202      	str	r2, [sp, #8]
   d45da:	2300      	movs	r3, #0
   d45dc:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d45de:	4668      	mov	r0, sp
   d45e0:	f88d 3004 	strb.w	r3, [sp, #4]
   d45e4:	f88d 200c 	strb.w	r2, [sp, #12]
   d45e8:	f88d 300d 	strb.w	r3, [sp, #13]
   d45ec:	f7ff ff5a 	bl	d44a4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d45f0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d45f4:	2100      	movs	r1, #0
   d45f6:	b280      	uxth	r0, r0
   d45f8:	f002 fe1f 	bl	d723a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d45fc:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4600:	4620      	mov	r0, r4
   d4602:	f7ff ff11 	bl	d4428 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4606:	2100      	movs	r1, #0
   d4608:	4620      	mov	r0, r4
   d460a:	f7ff ff0d 	bl	d4428 <_ZN15Adafruit_BME2807spixferEh>
   d460e:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4610:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4614:	2101      	movs	r1, #1
   d4616:	b280      	uxth	r0, r0
   d4618:	f002 fe0f 	bl	d723a <digitalWrite>
        if (_sck == -1)
   d461c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4620:	3301      	adds	r3, #1
   d4622:	d101      	bne.n	d4628 <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d4624:	f7ff ff37 	bl	d4496 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d4628:	4628      	mov	r0, r5
   d462a:	b005      	add	sp, #20
   d462c:	bd30      	pop	{r4, r5, pc}
   d462e:	bf00      	nop
   d4630:	000d8044 	.word	0x000d8044
   d4634:	0007a120 	.word	0x0007a120

000d4638 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d4638:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d463a:	21f3      	movs	r1, #243	; 0xf3
   d463c:	f7ff ffa6 	bl	d458c <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4640:	f000 0001 	and.w	r0, r0, #1
   d4644:	bd08      	pop	{r3, pc}

000d4646 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4646:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4648:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d464a:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d464c:	f7ff ff98 	bl	d4580 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4650:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4652:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4654:	4620      	mov	r0, r4
   d4656:	f7ff ff93 	bl	d4580 <_ZN15Adafruit_BME2809read16_LEEh>
   d465a:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d465c:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d465e:	4620      	mov	r0, r4
   d4660:	f7ff ff8e 	bl	d4580 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4664:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d4666:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4668:	4620      	mov	r0, r4
   d466a:	f7ff ff89 	bl	d4580 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d466e:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4670:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4672:	4620      	mov	r0, r4
   d4674:	f7ff ff84 	bl	d4580 <_ZN15Adafruit_BME2809read16_LEEh>
   d4678:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d467a:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d467c:	4620      	mov	r0, r4
   d467e:	f7ff ff7f 	bl	d4580 <_ZN15Adafruit_BME2809read16_LEEh>
   d4682:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4684:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4686:	4620      	mov	r0, r4
   d4688:	f7ff ff7a 	bl	d4580 <_ZN15Adafruit_BME2809read16_LEEh>
   d468c:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d468e:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4690:	4620      	mov	r0, r4
   d4692:	f7ff ff75 	bl	d4580 <_ZN15Adafruit_BME2809read16_LEEh>
   d4696:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d4698:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d469a:	4620      	mov	r0, r4
   d469c:	f7ff ff70 	bl	d4580 <_ZN15Adafruit_BME2809read16_LEEh>
   d46a0:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d46a2:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d46a4:	4620      	mov	r0, r4
   d46a6:	f7ff ff6b 	bl	d4580 <_ZN15Adafruit_BME2809read16_LEEh>
   d46aa:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d46ac:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d46ae:	4620      	mov	r0, r4
   d46b0:	f7ff ff66 	bl	d4580 <_ZN15Adafruit_BME2809read16_LEEh>
   d46b4:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d46b6:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d46b8:	4620      	mov	r0, r4
   d46ba:	f7ff ff61 	bl	d4580 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d46be:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d46c0:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d46c2:	4620      	mov	r0, r4
   d46c4:	f7ff ff62 	bl	d458c <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d46c8:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d46ca:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d46ce:	4620      	mov	r0, r4
   d46d0:	f7ff ff56 	bl	d4580 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d46d4:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d46d6:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d46d8:	4620      	mov	r0, r4
   d46da:	f7ff ff57 	bl	d458c <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d46de:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d46e0:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d46e4:	4620      	mov	r0, r4
   d46e6:	f7ff ff51 	bl	d458c <_ZN15Adafruit_BME2805read8Eh>
   d46ea:	21e5      	movs	r1, #229	; 0xe5
   d46ec:	4605      	mov	r5, r0
   d46ee:	4620      	mov	r0, r4
   d46f0:	f7ff ff4c 	bl	d458c <_ZN15Adafruit_BME2805read8Eh>
   d46f4:	f000 000f 	and.w	r0, r0, #15
   d46f8:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d46fc:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d46fe:	21e6      	movs	r1, #230	; 0xe6
   d4700:	4620      	mov	r0, r4
   d4702:	f7ff ff43 	bl	d458c <_ZN15Adafruit_BME2805read8Eh>
   d4706:	21e5      	movs	r1, #229	; 0xe5
   d4708:	4605      	mov	r5, r0
   d470a:	4620      	mov	r0, r4
   d470c:	f7ff ff3e 	bl	d458c <_ZN15Adafruit_BME2805read8Eh>
   d4710:	1100      	asrs	r0, r0, #4
   d4712:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4716:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d4718:	21e7      	movs	r1, #231	; 0xe7
   d471a:	4620      	mov	r0, r4
   d471c:	f7ff ff36 	bl	d458c <_ZN15Adafruit_BME2805read8Eh>
   d4720:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d4724:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4728 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4728:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d472a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d472e:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4730:	4604      	mov	r4, r0
   d4732:	460e      	mov	r6, r1
   d4734:	4615      	mov	r5, r2
    if (_cs == -1) {
   d4736:	d111      	bne.n	d475c <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4738:	7901      	ldrb	r1, [r0, #4]
   d473a:	6800      	ldr	r0, [r0, #0]
   d473c:	f002 f8bd 	bl	d68ba <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4740:	6820      	ldr	r0, [r4, #0]
   d4742:	6803      	ldr	r3, [r0, #0]
   d4744:	4631      	mov	r1, r6
   d4746:	689b      	ldr	r3, [r3, #8]
   d4748:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d474a:	6820      	ldr	r0, [r4, #0]
   d474c:	6803      	ldr	r3, [r0, #0]
   d474e:	4629      	mov	r1, r5
   d4750:	689b      	ldr	r3, [r3, #8]
   d4752:	4798      	blx	r3
        _wire -> endTransmission();
   d4754:	6820      	ldr	r0, [r4, #0]
   d4756:	f002 f8bb 	bl	d68d0 <_ZN7TwoWire15endTransmissionEv>
   d475a:	e02d      	b.n	d47b8 <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d475c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4760:	3301      	adds	r3, #1
   d4762:	d10e      	bne.n	d4782 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d4764:	4b15      	ldr	r3, [pc, #84]	; (d47bc <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d4766:	4a16      	ldr	r2, [pc, #88]	; (d47c0 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d4768:	9300      	str	r3, [sp, #0]
   d476a:	9202      	str	r2, [sp, #8]
   d476c:	2300      	movs	r3, #0
   d476e:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4770:	4668      	mov	r0, sp
   d4772:	f88d 3004 	strb.w	r3, [sp, #4]
   d4776:	f88d 200c 	strb.w	r2, [sp, #12]
   d477a:	f88d 300d 	strb.w	r3, [sp, #13]
   d477e:	f7ff fe91 	bl	d44a4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4782:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4786:	2100      	movs	r1, #0
   d4788:	b280      	uxth	r0, r0
   d478a:	f002 fd56 	bl	d723a <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d478e:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4792:	4620      	mov	r0, r4
   d4794:	f7ff fe48 	bl	d4428 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d4798:	4629      	mov	r1, r5
   d479a:	4620      	mov	r0, r4
   d479c:	f7ff fe44 	bl	d4428 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d47a0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d47a4:	2101      	movs	r1, #1
   d47a6:	b280      	uxth	r0, r0
   d47a8:	f002 fd47 	bl	d723a <digitalWrite>
    if (_sck == -1)
   d47ac:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d47b0:	3301      	adds	r3, #1
   d47b2:	d101      	bne.n	d47b8 <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d47b4:	f7ff fe6f 	bl	d4496 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d47b8:	b004      	add	sp, #16
   d47ba:	bd70      	pop	{r4, r5, r6, pc}
   d47bc:	000d8044 	.word	0x000d8044
   d47c0:	0007a120 	.word	0x0007a120

000d47c4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d47c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d47c6:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d47ca:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d47ce:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d47d2:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d47d6:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d47da:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d47de:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d47e2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d47e6:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d47ea:	f366 1347 	bfi	r3, r6, #5, #3
   d47ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d47f2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d47f6:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d47fa:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d47fc:	f367 0302 	bfi	r3, r7, #0, #3
   d4800:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4804:	f006 0207 	and.w	r2, r6, #7
   d4808:	21f2      	movs	r1, #242	; 0xf2
   d480a:	f7ff ff8d 	bl	d4728 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d480e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d4812:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4816:	f002 0107 	and.w	r1, r2, #7
   d481a:	009b      	lsls	r3, r3, #2
   d481c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4820:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4824:	4620      	mov	r0, r4
   d4826:	21f5      	movs	r1, #245	; 0xf5
   d4828:	f7ff ff7e 	bl	d4728 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d482c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4830:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4834:	f002 0107 	and.w	r1, r2, #7
   d4838:	009b      	lsls	r3, r3, #2
   d483a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d483e:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4842:	4620      	mov	r0, r4
   d4844:	21f4      	movs	r1, #244	; 0xf4
}
   d4846:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d484a:	f7ff bf6d 	b.w	d4728 <_ZN15Adafruit_BME2806write8Ehh>

000d484e <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d484e:	b530      	push	{r4, r5, lr}
   d4850:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4852:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4856:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4858:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d485a:	d103      	bne.n	d4864 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d485c:	6820      	ldr	r0, [r4, #0]
   d485e:	f001 fff5 	bl	d684c <_ZN7TwoWire5beginEv>
   d4862:	e022      	b.n	d48aa <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d4864:	2101      	movs	r1, #1
   d4866:	b280      	uxth	r0, r0
   d4868:	f002 fce7 	bl	d723a <digitalWrite>
        pinMode(_cs, OUTPUT);
   d486c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4870:	2101      	movs	r1, #1
   d4872:	b280      	uxth	r0, r0
   d4874:	f002 fcd0 	bl	d7218 <pinMode>
        if (_sck == -1) {
   d4878:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d487c:	1c43      	adds	r3, r0, #1
   d487e:	d104      	bne.n	d488a <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4880:	f7ff fdba 	bl	d43f8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4884:	f001 fb66 	bl	d5f54 <_ZN8SPIClass5beginEv>
   d4888:	e00f      	b.n	d48aa <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d488a:	2101      	movs	r1, #1
   d488c:	b280      	uxth	r0, r0
   d488e:	f002 fcc3 	bl	d7218 <pinMode>
            pinMode(_mosi, OUTPUT);
   d4892:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d4896:	2101      	movs	r1, #1
   d4898:	b280      	uxth	r0, r0
   d489a:	f002 fcbd 	bl	d7218 <pinMode>
            pinMode(_miso, INPUT);
   d489e:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d48a2:	2100      	movs	r1, #0
   d48a4:	b280      	uxth	r0, r0
   d48a6:	f002 fcb7 	bl	d7218 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d48aa:	21d0      	movs	r1, #208	; 0xd0
   d48ac:	4620      	mov	r0, r4
   d48ae:	f7ff fe6d 	bl	d458c <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d48b2:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d48b4:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d48b6:	d120      	bne.n	d48fa <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d48b8:	4620      	mov	r0, r4
   d48ba:	22b6      	movs	r2, #182	; 0xb6
   d48bc:	21e0      	movs	r1, #224	; 0xe0
   d48be:	f7ff ff33 	bl	d4728 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d48c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d48c6:	f001 fd55 	bl	d6374 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d48ca:	4620      	mov	r0, r4
   d48cc:	f7ff feb4 	bl	d4638 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d48d0:	4605      	mov	r5, r0
   d48d2:	b108      	cbz	r0, d48d8 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d48d4:	2064      	movs	r0, #100	; 0x64
   d48d6:	e7f6      	b.n	d48c6 <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d48d8:	4620      	mov	r0, r4
   d48da:	f7ff feb4 	bl	d4646 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d48de:	2305      	movs	r3, #5
   d48e0:	9300      	str	r3, [sp, #0]
   d48e2:	461a      	mov	r2, r3
   d48e4:	2103      	movs	r1, #3
   d48e6:	4620      	mov	r0, r4
   d48e8:	9502      	str	r5, [sp, #8]
   d48ea:	9501      	str	r5, [sp, #4]
   d48ec:	f7ff ff6a 	bl	d47c4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d48f0:	2064      	movs	r0, #100	; 0x64
   d48f2:	f001 fd3f 	bl	d6374 <delay>
   d48f6:	2001      	movs	r0, #1
   d48f8:	e000      	b.n	d48fc <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d48fa:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d48fc:	b005      	add	sp, #20
   d48fe:	bd30      	pop	{r4, r5, pc}

000d4900 <_ZN15Adafruit_BME2805beginEv>:
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d4900:	2377      	movs	r3, #119	; 0x77
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d4902:	b510      	push	{r4, lr}
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d4904:	7103      	strb	r3, [r0, #4]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d4906:	4604      	mov	r4, r0
    bool status = false;
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
   d4908:	f002 fd00 	bl	d730c <_Z19__fetch_global_Wirev>
   d490c:	6020      	str	r0, [r4, #0]
	status = init();
   d490e:	4620      	mov	r0, r4
   d4910:	f7ff ff9d 	bl	d484e <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d4914:	b930      	cbnz	r0, d4924 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d4916:	2376      	movs	r3, #118	; 0x76
   d4918:	7123      	strb	r3, [r4, #4]
 		status = init();
   d491a:	4620      	mov	r0, r4
 		}
	return status;
}
   d491c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
	status = init();
 	if(!status){
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 		status = init();
   d4920:	f7ff bf95 	b.w	d484e <_ZN15Adafruit_BME2804initEv>
 		}
	return status;
}
   d4924:	bd10      	pop	{r4, pc}

000d4926 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4926:	f001 b843 	b.w	d59b0 <HAL_Pin_Map>

000d492a <_ZNK18DHTSensorTypeDHT118getTempCERK9DHTSample>:
DHTSensorTypeDHT11::DHTSensorTypeDHT11() : DHTSensorType("DHT11", 1000, 25) {

};

float DHTSensorTypeDHT11::getTempC(const DHTSample &sample) const {
	return (float) ((int8_t) sample[2]);
   d492a:	f991 300e 	ldrsb.w	r3, [r1, #14]
   d492e:	ee00 3a10 	vmov	s0, r3
}
   d4932:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d4936:	4770      	bx	lr

000d4938 <_ZNK18DHTSensorTypeDHT1111getHumidityERK9DHTSample>:

float DHTSensorTypeDHT11::getHumidity(const DHTSample &sample) const {
	return (float) ((int8_t) sample[0]);
   d4938:	f991 300c 	ldrsb.w	r3, [r1, #12]
   d493c:	ee00 3a10 	vmov	s0, r3
}
   d4940:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d4944:	4770      	bx	lr
	...

000d4948 <_ZNK18DHTSensorTypeDHT228getTempCERK9DHTSample>:

DHTSensorTypeDHT22::DHTSensorTypeDHT22() : DHTSensorType("DHT22", 2000, 25) {

};

float DHTSensorTypeDHT22::getTempC(const DHTSample &sample) const {
   d4948:	b508      	push	{r3, lr}
	DHTSample &withSensorType(DHTSensorType *sensorType) { this->sensorType = sensorType; return *this; };

	/**
	 * @brief Get a byte from the bytes array
	 */
	uint8_t operator[](size_t index) const { return bytes[index]; };
   d494a:	7b8a      	ldrb	r2, [r1, #14]
   d494c:	89cb      	ldrh	r3, [r1, #14]
	return (sample[2] & 0x80 ? -combineBytes(sample[2] & 0x7F, sample[3]) : combineBytes(sample[2], sample[3])) * 0.1;
   d494e:	0610      	lsls	r0, r2, #24
   d4950:	ba5b      	rev16	r3, r3
   d4952:	b29b      	uxth	r3, r3
   d4954:	bf41      	itttt	mi
   d4956:	7bcb      	ldrbmi	r3, [r1, #15]
   d4958:	f002 027f 	andmi.w	r2, r2, #127	; 0x7f
   d495c:	ea43 2302 	orrmi.w	r3, r3, r2, lsl #8
   d4960:	ee07 3a90 	vmovmi	s15, r3
DHTSensorTypeDHT11 DHT22Gen3::sensorTypeDHT11;
DHTSensorTypeDHT22 DHT22Gen3::sensorTypeDHT22;


static float combineBytes(uint8_t highByte, uint8_t lowByte) {
	return (float) ((((uint16_t)highByte) << 8) | lowByte);
   d4964:	bf55      	itete	pl
   d4966:	ee07 3a90 	vmovpl	s15, r3
DHTSensorTypeDHT22::DHTSensorTypeDHT22() : DHTSensorType("DHT22", 2000, 25) {

};

float DHTSensorTypeDHT22::getTempC(const DHTSample &sample) const {
	return (sample[2] & 0x80 ? -combineBytes(sample[2] & 0x7F, sample[3]) : combineBytes(sample[2], sample[3])) * 0.1;
   d496a:	eef8 7ae7 	vcvtmi.f32.s32	s15, s15
DHTSensorTypeDHT11 DHT22Gen3::sensorTypeDHT11;
DHTSensorTypeDHT22 DHT22Gen3::sensorTypeDHT22;


static float combineBytes(uint8_t highByte, uint8_t lowByte) {
	return (float) ((((uint16_t)highByte) << 8) | lowByte);
   d496e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
DHTSensorTypeDHT22::DHTSensorTypeDHT22() : DHTSensorType("DHT22", 2000, 25) {

};

float DHTSensorTypeDHT22::getTempC(const DHTSample &sample) const {
	return (sample[2] & 0x80 ? -combineBytes(sample[2] & 0x7F, sample[3]) : combineBytes(sample[2], sample[3])) * 0.1;
   d4972:	eef1 7a67 	vnegmi.f32	s15, s15
   d4976:	ee17 0a90 	vmov	r0, s15
   d497a:	f002 ffbb 	bl	d78f4 <__aeabi_f2d>
   d497e:	a306      	add	r3, pc, #24	; (adr r3, d4998 <_ZNK18DHTSensorTypeDHT228getTempCERK9DHTSample+0x50>)
   d4980:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4984:	f003 f80a 	bl	d799c <__aeabi_dmul>
   d4988:	f003 fa1a 	bl	d7dc0 <__aeabi_d2f>

}
   d498c:	ee00 0a10 	vmov	s0, r0
   d4990:	bd08      	pop	{r3, pc}
   d4992:	bf00      	nop
   d4994:	f3af 8000 	nop.w
   d4998:	9999999a 	.word	0x9999999a
   d499c:	3fb99999 	.word	0x3fb99999

000d49a0 <_ZNK18DHTSensorTypeDHT2211getHumidityERK9DHTSample>:

float DHTSensorTypeDHT22::getHumidity(const DHTSample &sample) const {
   d49a0:	b508      	push	{r3, lr}
	return combineBytes(sample[0], sample[1]) * 0.1;
   d49a2:	8988      	ldrh	r0, [r1, #12]
   d49a4:	ba40      	rev16	r0, r0
   d49a6:	b280      	uxth	r0, r0
   d49a8:	ee07 0a90 	vmov	s15, r0
   d49ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d49b0:	ee17 0a90 	vmov	r0, s15
   d49b4:	f002 ff9e 	bl	d78f4 <__aeabi_f2d>
   d49b8:	a305      	add	r3, pc, #20	; (adr r3, d49d0 <_ZNK18DHTSensorTypeDHT2211getHumidityERK9DHTSample+0x30>)
   d49ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49be:	f002 ffed 	bl	d799c <__aeabi_dmul>
   d49c2:	f003 f9fd 	bl	d7dc0 <__aeabi_d2f>
}
   d49c6:	ee00 0a10 	vmov	s0, r0
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	f3af 8000 	nop.w
   d49d0:	9999999a 	.word	0x9999999a
   d49d4:	3fb99999 	.word	0x3fb99999

000d49d8 <_ZN18DHTSensorTypeDHT22D1Ev>:


/**
 * @brief DHTSensorType object to decode DHT22 sensor data
 */
class DHTSensorTypeDHT22 : public DHTSensorType {
   d49d8:	4770      	bx	lr

000d49da <_ZN18DHTSensorTypeDHT11D1Ev>:
};

/**
 * @brief DHTSensorType object to decode DHT11 sensor data
 */
class DHTSensorTypeDHT11 : public DHTSensorType {
   d49da:	4770      	bx	lr

000d49dc <_ZN18DHTSensorTypeDHT22D0Ev>:


/**
 * @brief DHTSensorType object to decode DHT22 sensor data
 */
class DHTSensorTypeDHT22 : public DHTSensorType {
   d49dc:	b510      	push	{r4, lr}
   d49de:	2110      	movs	r1, #16
   d49e0:	4604      	mov	r4, r0
   d49e2:	f002 fcc7 	bl	d7374 <_ZdlPvj>
   d49e6:	4620      	mov	r0, r4
   d49e8:	bd10      	pop	{r4, pc}

000d49ea <_ZN18DHTSensorTypeDHT11D0Ev>:
};

/**
 * @brief DHTSensorType object to decode DHT11 sensor data
 */
class DHTSensorTypeDHT11 : public DHTSensorType {
   d49ea:	b510      	push	{r4, lr}
   d49ec:	2110      	movs	r1, #16
   d49ee:	4604      	mov	r4, r0
   d49f0:	f002 fcc0 	bl	d7374 <_ZdlPvj>
   d49f4:	4620      	mov	r0, r4
   d49f6:	bd10      	pop	{r4, pc}

000d49f8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d49f8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d49fa:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d49fc:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d49fe:	b113      	cbz	r3, d4a06 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4a00:	2203      	movs	r2, #3
   d4a02:	4601      	mov	r1, r0
   d4a04:	4798      	blx	r3
    }
   d4a06:	4620      	mov	r0, r4
   d4a08:	bd10      	pop	{r4, pc}
	...

000d4a0c <_ZN18DHTSensorTypeDHT11C1Ev>:
	 * @param minSamplePeriodMs Minimum number of milliseconds between queries to the sensor
	 *
	 * @param oneBitThreshold Number of counts for the bit in the I2S buffer to be considered a 1 bit
	 */
	DHTSensorType(const char *name, unsigned long minSamplePeriodMs, unsigned long oneBitThreshold) :
			name(name), minSamplePeriodMs(minSamplePeriodMs), oneBitThreshold(oneBitThreshold) {};
   d4a0c:	4a04      	ldr	r2, [pc, #16]	; (d4a20 <_ZN18DHTSensorTypeDHT11C1Ev+0x14>)
   d4a0e:	6042      	str	r2, [r0, #4]
   d4a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4a14:	6082      	str	r2, [r0, #8]
   d4a16:	2219      	movs	r2, #25
   d4a18:	60c2      	str	r2, [r0, #12]
}

//
// Sensor type decoders
//
DHTSensorTypeDHT11::DHTSensorTypeDHT11() : DHTSensorType("DHT11", 1000, 25) {
   d4a1a:	4a02      	ldr	r2, [pc, #8]	; (d4a24 <_ZN18DHTSensorTypeDHT11C1Ev+0x18>)
   d4a1c:	6002      	str	r2, [r0, #0]

};
   d4a1e:	4770      	bx	lr
   d4a20:	000d80a8 	.word	0x000d80a8
   d4a24:	000d8118 	.word	0x000d8118

000d4a28 <_ZN18DHTSensorTypeDHT22C1Ev>:
   d4a28:	4a04      	ldr	r2, [pc, #16]	; (d4a3c <_ZN18DHTSensorTypeDHT22C1Ev+0x14>)
   d4a2a:	6042      	str	r2, [r0, #4]
   d4a2c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d4a30:	6082      	str	r2, [r0, #8]
   d4a32:	2219      	movs	r2, #25
   d4a34:	60c2      	str	r2, [r0, #12]
float DHTSensorTypeDHT11::getHumidity(const DHTSample &sample) const {
	return (float) ((int8_t) sample[0]);
}


DHTSensorTypeDHT22::DHTSensorTypeDHT22() : DHTSensorType("DHT22", 2000, 25) {
   d4a36:	4a02      	ldr	r2, [pc, #8]	; (d4a40 <_ZN18DHTSensorTypeDHT22C1Ev+0x18>)
   d4a38:	6002      	str	r2, [r0, #0]

};
   d4a3a:	4770      	bx	lr
   d4a3c:	000d80ae 	.word	0x000d80ae
   d4a40:	000d8098 	.word	0x000d8098

000d4a44 <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E>:
	result.sampleResult = sampleResult;
	state = State::IDLE_STATE;
	if (completion) {
		completion(result);
	}
}
   d4a44:	b510      	push	{r4, lr}
   d4a46:	f000 ffb3 	bl	d59b0 <HAL_Pin_Map>
static nrfx_i2s_buffers_t i2sBuffer = {
		.p_rx_buffer = (uint32_t *)sampleBuffer,
		.p_tx_buffer = 0
};

DHTSensorTypeDHT11 DHT22Gen3::sensorTypeDHT11;
   d4a4a:	4b0a      	ldr	r3, [pc, #40]	; (d4a74 <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x30>)
   d4a4c:	4c0a      	ldr	r4, [pc, #40]	; (d4a78 <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x34>)
   d4a4e:	4618      	mov	r0, r3
   d4a50:	f7ff ffdc 	bl	d4a0c <_ZN18DHTSensorTypeDHT11C1Ev>
   d4a54:	4622      	mov	r2, r4
   d4a56:	4909      	ldr	r1, [pc, #36]	; (d4a7c <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x38>)
   d4a58:	4618      	mov	r0, r3
   d4a5a:	f002 fc7d 	bl	d7358 <__aeabi_atexit>
DHTSensorTypeDHT22 DHT22Gen3::sensorTypeDHT22;
   d4a5e:	4b08      	ldr	r3, [pc, #32]	; (d4a80 <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x3c>)
   d4a60:	4618      	mov	r0, r3
   d4a62:	f7ff ffe1 	bl	d4a28 <_ZN18DHTSensorTypeDHT22C1Ev>
   d4a66:	4622      	mov	r2, r4
   d4a68:	4906      	ldr	r1, [pc, #24]	; (d4a84 <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x40>)
   d4a6a:	4618      	mov	r0, r3
	result.sampleResult = sampleResult;
	state = State::IDLE_STATE;
	if (completion) {
		completion(result);
	}
}
   d4a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		.p_rx_buffer = (uint32_t *)sampleBuffer,
		.p_tx_buffer = 0
};

DHTSensorTypeDHT11 DHT22Gen3::sensorTypeDHT11;
DHTSensorTypeDHT22 DHT22Gen3::sensorTypeDHT22;
   d4a70:	f002 bc72 	b.w	d7358 <__aeabi_atexit>
   d4a74:	2003e3cc 	.word	0x2003e3cc
   d4a78:	2003e1dc 	.word	0x2003e1dc
   d4a7c:	000d49db 	.word	0x000d49db
   d4a80:	2003e3bc 	.word	0x2003e3bc
   d4a84:	000d49d9 	.word	0x000d49d9

000d4a88 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4a88:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4a8a:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4a8c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4a90:	2c02      	cmp	r4, #2
   d4a92:	d008      	beq.n	d4aa6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d4a94:	2c03      	cmp	r4, #3
   d4a96:	d00f      	beq.n	d4ab8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4a98:	2c01      	cmp	r4, #1
   d4a9a:	d170      	bne.n	d4b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4a9c:	8904      	ldrh	r4, [r0, #8]
   d4a9e:	3c01      	subs	r4, #1
   d4aa0:	1aa2      	subs	r2, r4, r2
   d4aa2:	b212      	sxth	r2, r2
      break;
   d4aa4:	e00c      	b.n	d4ac0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4aa6:	8944      	ldrh	r4, [r0, #10]
   d4aa8:	3c01      	subs	r4, #1
   d4aaa:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4aac:	8904      	ldrh	r4, [r0, #8]
   d4aae:	1ae4      	subs	r4, r4, r3
   d4ab0:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4ab2:	b212      	sxth	r2, r2
      x -= (w-1);
   d4ab4:	b209      	sxth	r1, r1
      break;
   d4ab6:	e062      	b.n	d4b7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d4ab8:	8944      	ldrh	r4, [r0, #10]
   d4aba:	1ae4      	subs	r4, r4, r3
   d4abc:	1a61      	subs	r1, r4, r1
   d4abe:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4ac0:	2a00      	cmp	r2, #0
   d4ac2:	db5b      	blt.n	d4b7c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d4ac4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4ac8:	4294      	cmp	r4, r2
   d4aca:	f340 8090 	ble.w	d4bee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4ace:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4ad0:	bfbe      	ittt	lt
   d4ad2:	185b      	addlt	r3, r3, r1
   d4ad4:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4ad6:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4ad8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4adc:	18cc      	adds	r4, r1, r3
   d4ade:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4ae0:	bfc4      	itt	gt
   d4ae2:	1a43      	subgt	r3, r0, r1
   d4ae4:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4ae6:	2b00      	cmp	r3, #0
   d4ae8:	f340 8081 	ble.w	d4bee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4aec:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4aee:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4af0:	4f3f      	ldr	r7, [pc, #252]	; (d4bf0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4af2:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4af6:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4afa:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4afc:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4b00:	d017      	beq.n	d4b32 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4b02:	f1c1 0108 	rsb	r1, r1, #8
   d4b06:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4b08:	493a      	ldr	r1, [pc, #232]	; (d4bf4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4b0a:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4b0c:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4b0e:	bf3f      	itttt	cc
   d4b10:	ebc3 0e00 	rsbcc	lr, r3, r0
   d4b14:	21ff      	movcc	r1, #255	; 0xff
   d4b16:	fa41 f10e 	asrcc.w	r1, r1, lr
   d4b1a:	400e      	andcc	r6, r1
   d4b1c:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d4b1e:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4b20:	bf0c      	ite	eq
   d4b22:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d4b24:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4b26:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4b28:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4b2a:	d360      	bcc.n	d4bee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d4b2c:	1a18      	subs	r0, r3, r0
   d4b2e:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d4b30:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4b32:	2b07      	cmp	r3, #7
   d4b34:	d917      	bls.n	d4b66 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4b36:	2d01      	cmp	r5, #1
   d4b38:	bf0c      	ite	eq
   d4b3a:	20ff      	moveq	r0, #255	; 0xff
   d4b3c:	2000      	movne	r0, #0
   d4b3e:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d4b42:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4b44:	3a08      	subs	r2, #8
   d4b46:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4b48:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4b4a:	f801 0c80 	strb.w	r0, [r1, #-128]
   d4b4e:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4b52:	d8f7      	bhi.n	d4b44 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d4b54:	f1a3 0208 	sub.w	r2, r3, #8
   d4b58:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4b5c:	3201      	adds	r2, #1
   d4b5e:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d4b62:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4b66:	2b00      	cmp	r3, #0
   d4b68:	d041      	beq.n	d4bee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4b6a:	4a23      	ldr	r2, [pc, #140]	; (d4bf8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d4b6c:	5cd2      	ldrb	r2, [r2, r3]
   d4b6e:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d4b70:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4b72:	bf0c      	ite	eq
   d4b74:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d4b76:	4393      	bicne	r3, r2
   d4b78:	7023      	strb	r3, [r4, #0]
   d4b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4b7e:	2a00      	cmp	r2, #0
   d4b80:	db35      	blt.n	d4bee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4b82:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4b86:	4294      	cmp	r4, r2
   d4b88:	dd31      	ble.n	d4bee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4b8a:	2900      	cmp	r1, #0
    w += x;
   d4b8c:	bfbc      	itt	lt
   d4b8e:	18c9      	addlt	r1, r1, r3
   d4b90:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4b92:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4b96:	bfb8      	it	lt
   d4b98:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4b9a:	18ce      	adds	r6, r1, r3
   d4b9c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4b9e:	bfc4      	itt	gt
   d4ba0:	1a63      	subgt	r3, r4, r1
   d4ba2:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4ba4:	2b00      	cmp	r3, #0
   d4ba6:	dd22      	ble.n	d4bee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4ba8:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d4baa:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d4bae:	4810      	ldr	r0, [pc, #64]	; (d4bf0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d4bb0:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4bb4:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d4bb6:	2001      	movs	r0, #1
   d4bb8:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d4bbc:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4bbe:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d4bc0:	d109      	bne.n	d4bd6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d4bc2:	3b01      	subs	r3, #1
   d4bc4:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d4bc6:	1c5c      	adds	r4, r3, #1
   d4bc8:	d011      	beq.n	d4bee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4bca:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4bce:	4310      	orrs	r0, r2
   d4bd0:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4bd4:	e7f5      	b.n	d4bc2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d4bd6:	43d2      	mvns	r2, r2
   d4bd8:	b2d2      	uxtb	r2, r2
   d4bda:	3b01      	subs	r3, #1
   d4bdc:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d4bde:	1c58      	adds	r0, r3, #1
   d4be0:	d005      	beq.n	d4bee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4be2:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4be6:	4010      	ands	r0, r2
   d4be8:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4bec:	e7f5      	b.n	d4bda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d4bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4bf0:	2003dd74 	.word	0x2003dd74
   d4bf4:	2003dd6c 	.word	0x2003dd6c
   d4bf8:	2003dd64 	.word	0x2003dd64

000d4bfc <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d4bfe:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4c00:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d4c04:	2c02      	cmp	r4, #2
   d4c06:	d008      	beq.n	d4c1a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d4c08:	2c03      	cmp	r4, #3
   d4c0a:	d00f      	beq.n	d4c2c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d4c0c:	2c01      	cmp	r4, #1
   d4c0e:	d112      	bne.n	d4c36 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d4c10:	8904      	ldrh	r4, [r0, #8]
   d4c12:	1ae4      	subs	r4, r4, r3
   d4c14:	1aa2      	subs	r2, r4, r2
   d4c16:	b212      	sxth	r2, r2
      break;
   d4c18:	e06d      	b.n	d4cf6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4c1a:	8904      	ldrh	r4, [r0, #8]
   d4c1c:	3c01      	subs	r4, #1
   d4c1e:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4c20:	8944      	ldrh	r4, [r0, #10]
   d4c22:	1ae4      	subs	r4, r4, r3
   d4c24:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4c26:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4c28:	b212      	sxth	r2, r2
      break;
   d4c2a:	e004      	b.n	d4c36 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d4c2c:	8944      	ldrh	r4, [r0, #10]
   d4c2e:	3c01      	subs	r4, #1
   d4c30:	1a61      	subs	r1, r4, r1
   d4c32:	b209      	sxth	r1, r1
      break;
   d4c34:	e05f      	b.n	d4cf6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4c36:	2900      	cmp	r1, #0
   d4c38:	db5c      	blt.n	d4cf4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d4c3a:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4c3e:	428c      	cmp	r4, r1
   d4c40:	f340 8091 	ble.w	d4d66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4c44:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4c46:	bfbc      	itt	lt
   d4c48:	18d2      	addlt	r2, r2, r3
   d4c4a:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4c4c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d4c50:	bfb8      	it	lt
   d4c52:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4c54:	18d4      	adds	r4, r2, r3
   d4c56:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4c58:	bfc4      	itt	gt
   d4c5a:	1a83      	subgt	r3, r0, r2
   d4c5c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4c5e:	2b00      	cmp	r3, #0
   d4c60:	f340 8081 	ble.w	d4d66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4c64:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4c66:	4e40      	ldr	r6, [pc, #256]	; (d4d68 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4c68:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4c6a:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d4c6c:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4c70:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4c74:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4c78:	d017      	beq.n	d4caa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4c7a:	f1c4 0408 	rsb	r4, r4, #8
   d4c7e:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4c80:	4c3a      	ldr	r4, [pc, #232]	; (d4d6c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4c82:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4c84:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4c86:	bf3f      	itttt	cc
   d4c88:	ebc2 0e00 	rsbcc	lr, r2, r0
   d4c8c:	24ff      	movcc	r4, #255	; 0xff
   d4c8e:	fa44 f40e 	asrcc.w	r4, r4, lr
   d4c92:	4027      	andcc	r7, r4
   d4c94:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d4c96:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4c98:	bf0c      	ite	eq
   d4c9a:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d4c9c:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4c9e:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4ca0:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4ca2:	d360      	bcc.n	d4d66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d4ca4:	1a10      	subs	r0, r2, r0
   d4ca6:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d4ca8:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4caa:	2a07      	cmp	r2, #7
   d4cac:	d917      	bls.n	d4cde <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4cae:	2d01      	cmp	r5, #1
   d4cb0:	bf0c      	ite	eq
   d4cb2:	24ff      	moveq	r4, #255	; 0xff
   d4cb4:	2400      	movne	r4, #0
   d4cb6:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d4cba:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4cbc:	3908      	subs	r1, #8
   d4cbe:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d4cc0:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4cc2:	f800 4c80 	strb.w	r4, [r0, #-128]
   d4cc6:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4cca:	d8f7      	bhi.n	d4cbc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d4ccc:	f1a2 0108 	sub.w	r1, r2, #8
   d4cd0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d4cd4:	3101      	adds	r1, #1
   d4cd6:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d4cda:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4cde:	2a00      	cmp	r2, #0
   d4ce0:	d041      	beq.n	d4d66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4ce2:	4923      	ldr	r1, [pc, #140]	; (d4d70 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d4ce4:	5c89      	ldrb	r1, [r1, r2]
   d4ce6:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d4ce8:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4cea:	bf0c      	ite	eq
   d4cec:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d4cee:	438a      	bicne	r2, r1
   d4cf0:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d4cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4cf6:	2900      	cmp	r1, #0
   d4cf8:	db35      	blt.n	d4d66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4cfa:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4cfe:	428c      	cmp	r4, r1
   d4d00:	dd31      	ble.n	d4d66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4d02:	2a00      	cmp	r2, #0
    w += x;
   d4d04:	bfbc      	itt	lt
   d4d06:	18d2      	addlt	r2, r2, r3
   d4d08:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4d0a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4d0e:	bfb8      	it	lt
   d4d10:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4d12:	18d6      	adds	r6, r2, r3
   d4d14:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4d16:	bfc4      	itt	gt
   d4d18:	1aa3      	subgt	r3, r4, r2
   d4d1a:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4d1c:	2b00      	cmp	r3, #0
   d4d1e:	dd22      	ble.n	d4d66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4d20:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4d22:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d4d26:	4810      	ldr	r0, [pc, #64]	; (d4d68 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d4d28:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4d2c:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d4d2e:	2201      	movs	r2, #1
   d4d30:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d4d34:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4d36:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d4d38:	d109      	bne.n	d4d4e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d4d3a:	1e5a      	subs	r2, r3, #1
   d4d3c:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d4d3e:	1c5c      	adds	r4, r3, #1
   d4d40:	d011      	beq.n	d4d66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4d42:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4d46:	430a      	orrs	r2, r1
   d4d48:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4d4c:	e7f5      	b.n	d4d3a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d4d4e:	43c9      	mvns	r1, r1
   d4d50:	b2c9      	uxtb	r1, r1
   d4d52:	1e5a      	subs	r2, r3, #1
   d4d54:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d4d56:	1c5a      	adds	r2, r3, #1
   d4d58:	d005      	beq.n	d4d66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4d5a:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4d5e:	400a      	ands	r2, r1
   d4d60:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4d64:	e7f5      	b.n	d4d52 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d4d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d68:	2003dd74 	.word	0x2003dd74
   d4d6c:	2003dd6c 	.word	0x2003dd6c
   d4d70:	2003dd64 	.word	0x2003dd64

000d4d74 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4d76:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4d78:	4606      	mov	r6, r0
   d4d7a:	4614      	mov	r4, r2
   d4d7c:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4d7e:	db3f      	blt.n	d4e00 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4d80:	f000 fbb7 	bl	d54f2 <_ZN12Adafruit_GFX5widthEv>
   d4d84:	4285      	cmp	r5, r0
   d4d86:	da3b      	bge.n	d4e00 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4d88:	2c00      	cmp	r4, #0
   d4d8a:	db39      	blt.n	d4e00 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4d8c:	4630      	mov	r0, r6
   d4d8e:	f000 fbb3 	bl	d54f8 <_ZN12Adafruit_GFX6heightEv>
   d4d92:	4284      	cmp	r4, r0
   d4d94:	da34      	bge.n	d4e00 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4d96:	4630      	mov	r0, r6
   d4d98:	f000 fba9 	bl	d54ee <_ZN12Adafruit_GFX11getRotationEv>
   d4d9c:	2802      	cmp	r0, #2
   d4d9e:	d127      	bne.n	d4df0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4da0:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d4da2:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4da4:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d4da6:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4da8:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d4daa:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4dac:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d4dae:	b204      	sxth	r4, r0
   d4db0:	e006      	b.n	d4dc0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4db2:	2801      	cmp	r0, #1
   d4db4:	d104      	bne.n	d4dc0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d4db6:	8933      	ldrh	r3, [r6, #8]
   d4db8:	3b01      	subs	r3, #1
   d4dba:	1b1b      	subs	r3, r3, r4
   d4dbc:	462c      	mov	r4, r5
   d4dbe:	b21d      	sxth	r5, r3
   d4dc0:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4dc2:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4dc4:	fb94 f0f0 	sdiv	r0, r4, r0
   d4dc8:	b200      	sxth	r0, r0
   d4dca:	4b0e      	ldr	r3, [pc, #56]	; (d4e04 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d4dcc:	f004 0207 	and.w	r2, r4, #7
   d4dd0:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4dd4:	d104      	bne.n	d4de0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4dd6:	4097      	lsls	r7, r2
   d4dd8:	5c5a      	ldrb	r2, [r3, r1]
   d4dda:	4317      	orrs	r7, r2
   d4ddc:	545f      	strb	r7, [r3, r1]
   d4dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d4de0:	5c58      	ldrb	r0, [r3, r1]
   d4de2:	2701      	movs	r7, #1
   d4de4:	fa07 f202 	lsl.w	r2, r7, r2
   d4de8:	ea20 0202 	bic.w	r2, r0, r2
   d4dec:	545a      	strb	r2, [r3, r1]
   d4dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4df0:	2803      	cmp	r0, #3
   d4df2:	d1de      	bne.n	d4db2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d4df4:	8973      	ldrh	r3, [r6, #10]
   d4df6:	3b01      	subs	r3, #1
   d4df8:	1b5b      	subs	r3, r3, r5
   d4dfa:	4625      	mov	r5, r4
   d4dfc:	b21c      	sxth	r4, r3
   d4dfe:	e7df      	b.n	d4dc0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d4e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4e02:	bf00      	nop
   d4e04:	2003dd74 	.word	0x2003dd74

000d4e08 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4e08:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4e0a:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4e0c:	4604      	mov	r4, r0
   d4e0e:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4e10:	2180      	movs	r1, #128	; 0x80
   d4e12:	f000 fa87 	bl	d5324 <_ZN12Adafruit_GFXC1Ess>
   d4e16:	4b06      	ldr	r3, [pc, #24]	; (d4e30 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d4e18:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d4e1a:	23ff      	movs	r3, #255	; 0xff
   d4e1c:	7763      	strb	r3, [r4, #29]
   d4e1e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d4e22:	77e3      	strb	r3, [r4, #31]
   d4e24:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d4e26:	f884 5020 	strb.w	r5, [r4, #32]
}
   d4e2a:	4620      	mov	r0, r4
   d4e2c:	bd38      	pop	{r3, r4, r5, pc}
   d4e2e:	bf00      	nop
   d4e30:	000d8130 	.word	0x000d8130

000d4e34 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d4e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4e38:	2100      	movs	r1, #0
   d4e3a:	4801      	ldr	r0, [pc, #4]	; (d4e40 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d4e3c:	f003 b829 	b.w	d7e92 <memset>
   d4e40:	2003dd74 	.word	0x2003dd74

000d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4e44:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d4e46:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4e4a:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4e4c:	4604      	mov	r4, r0
   d4e4e:	460d      	mov	r5, r1
  if (sid != -1)
   d4e50:	d028      	beq.n	d4ea4 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d4e52:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d4e56:	2101      	movs	r1, #1
   d4e58:	b280      	uxth	r0, r0
   d4e5a:	f002 f9ee 	bl	d723a <digitalWrite>
    digitalWrite(dc, LOW);
   d4e5e:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4e62:	2100      	movs	r1, #0
   d4e64:	b280      	uxth	r0, r0
   d4e66:	f002 f9e8 	bl	d723a <digitalWrite>
    digitalWrite(cs, LOW);
   d4e6a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4e6e:	2100      	movs	r1, #0
   d4e70:	b280      	uxth	r0, r0
   d4e72:	f002 f9e2 	bl	d723a <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4e76:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4e7a:	b12b      	cbz	r3, d4e88 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4e7c:	f7ff fabc 	bl	d43f8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4e80:	4629      	mov	r1, r5
   d4e82:	f001 f979 	bl	d6178 <_ZN8SPIClass8transferEh>
   d4e86:	e005      	b.n	d4e94 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4e88:	462b      	mov	r3, r5
   d4e8a:	2201      	movs	r2, #1
   d4e8c:	7fa1      	ldrb	r1, [r4, #30]
   d4e8e:	7f60      	ldrb	r0, [r4, #29]
   d4e90:	f002 f9ff 	bl	d7292 <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d4e94:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4e98:	2101      	movs	r1, #1
   d4e9a:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d4e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d4ea0:	f002 b9cb 	b.w	d723a <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d4ea4:	f002 fa32 	bl	d730c <_Z19__fetch_global_Wirev>
   d4ea8:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4eac:	f001 fd09 	bl	d68c2 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d4eb0:	f002 fa2c 	bl	d730c <_Z19__fetch_global_Wirev>
   d4eb4:	6803      	ldr	r3, [r0, #0]
   d4eb6:	2100      	movs	r1, #0
   d4eb8:	689b      	ldr	r3, [r3, #8]
   d4eba:	4798      	blx	r3
    Wire.write(c);
   d4ebc:	f002 fa26 	bl	d730c <_Z19__fetch_global_Wirev>
   d4ec0:	6803      	ldr	r3, [r0, #0]
   d4ec2:	4629      	mov	r1, r5
   d4ec4:	689b      	ldr	r3, [r3, #8]
   d4ec6:	4798      	blx	r3
    Wire.endTransmission();
   d4ec8:	f002 fa20 	bl	d730c <_Z19__fetch_global_Wirev>
  }
}
   d4ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d4ed0:	f001 bcfe 	b.w	d68d0 <_ZN7TwoWire15endTransmissionEv>

000d4ed4 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d4ed4:	b538      	push	{r3, r4, r5, lr}
   d4ed6:	4604      	mov	r4, r0
   d4ed8:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d4eda:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d4edc:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d4ee0:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d4ee2:	3301      	adds	r3, #1
   d4ee4:	d037      	beq.n	d4f56 <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d4ee6:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d4eea:	2101      	movs	r1, #1
   d4eec:	b280      	uxth	r0, r0
   d4eee:	f002 f993 	bl	d7218 <pinMode>
    pinMode(cs, OUTPUT);
   d4ef2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4ef6:	2101      	movs	r1, #1
   d4ef8:	b280      	uxth	r0, r0
   d4efa:	f002 f98d 	bl	d7218 <pinMode>
    if (!hwSPI){
   d4efe:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4f02:	b95b      	cbnz	r3, d4f1c <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d4f04:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4f08:	2101      	movs	r1, #1
   d4f0a:	b280      	uxth	r0, r0
   d4f0c:	f002 f984 	bl	d7218 <pinMode>
    	pinMode(sclk, OUTPUT);
   d4f10:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d4f14:	2101      	movs	r1, #1
   d4f16:	b280      	uxth	r0, r0
   d4f18:	f002 f97e 	bl	d7218 <pinMode>
    	}
    if (hwSPI){
   d4f1c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4f20:	b1eb      	cbz	r3, d4f5e <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d4f22:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4f26:	2101      	movs	r1, #1
   d4f28:	b280      	uxth	r0, r0
   d4f2a:	f002 f986 	bl	d723a <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d4f2e:	f7ff fa63 	bl	d43f8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4f32:	2101      	movs	r1, #1
   d4f34:	f001 f81f 	bl	d5f76 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d4f38:	f7ff fa5e 	bl	d43f8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4f3c:	2110      	movs	r1, #16
   d4f3e:	f001 f8f7 	bl	d6130 <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d4f42:	f7ff fa59 	bl	d43f8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4f46:	2100      	movs	r1, #0
   d4f48:	f001 f826 	bl	d5f98 <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4f4c:	f7ff fa54 	bl	d43f8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4f50:	f001 f800 	bl	d5f54 <_ZN8SPIClass5beginEv>
   d4f54:	e003      	b.n	d4f5e <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d4f56:	f002 f9d9 	bl	d730c <_Z19__fetch_global_Wirev>
   d4f5a:	f001 fc77 	bl	d684c <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d4f5e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4f62:	2101      	movs	r1, #1
   d4f64:	b280      	uxth	r0, r0
   d4f66:	f002 f957 	bl	d7218 <pinMode>
  digitalWrite(rst, HIGH);
   d4f6a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4f6e:	2101      	movs	r1, #1
   d4f70:	b280      	uxth	r0, r0
   d4f72:	f002 f962 	bl	d723a <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d4f76:	2001      	movs	r0, #1
   d4f78:	f001 f9fc 	bl	d6374 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d4f7c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4f80:	2100      	movs	r1, #0
   d4f82:	b280      	uxth	r0, r0
   d4f84:	f002 f959 	bl	d723a <digitalWrite>
  // wait 10ms
  delay(10);
   d4f88:	200a      	movs	r0, #10
   d4f8a:	f001 f9f3 	bl	d6374 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d4f8e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4f92:	2101      	movs	r1, #1
   d4f94:	b280      	uxth	r0, r0
   d4f96:	f002 f950 	bl	d723a <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d4f9a:	4620      	mov	r0, r4
   d4f9c:	21ae      	movs	r1, #174	; 0xae
   d4f9e:	f7ff ff51 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d4fa2:	4620      	mov	r0, r4
   d4fa4:	21d5      	movs	r1, #213	; 0xd5
   d4fa6:	f7ff ff4d 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d4faa:	4620      	mov	r0, r4
   d4fac:	2180      	movs	r1, #128	; 0x80
   d4fae:	f7ff ff49 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d4fb2:	4620      	mov	r0, r4
   d4fb4:	21a8      	movs	r1, #168	; 0xa8
   d4fb6:	f7ff ff45 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d4fba:	4620      	mov	r0, r4
   d4fbc:	213f      	movs	r1, #63	; 0x3f
   d4fbe:	f7ff ff41 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d4fc2:	4620      	mov	r0, r4
   d4fc4:	21d3      	movs	r1, #211	; 0xd3
   d4fc6:	f7ff ff3d 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d4fca:	4620      	mov	r0, r4
   d4fcc:	2100      	movs	r1, #0
   d4fce:	f7ff ff39 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d4fd2:	4620      	mov	r0, r4
   d4fd4:	2140      	movs	r1, #64	; 0x40
   d4fd6:	f7ff ff35 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d4fda:	218d      	movs	r1, #141	; 0x8d
   d4fdc:	4620      	mov	r0, r4
   d4fde:	f7ff ff31 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4fe2:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d4fe4:	bf0c      	ite	eq
   d4fe6:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d4fe8:	2114      	movne	r1, #20
   d4fea:	4620      	mov	r0, r4
   d4fec:	f7ff ff2a 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d4ff0:	4620      	mov	r0, r4
   d4ff2:	2120      	movs	r1, #32
   d4ff4:	f7ff ff26 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d4ff8:	4620      	mov	r0, r4
   d4ffa:	2100      	movs	r1, #0
   d4ffc:	f7ff ff22 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d5000:	4620      	mov	r0, r4
   d5002:	21a1      	movs	r1, #161	; 0xa1
   d5004:	f7ff ff1e 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d5008:	4620      	mov	r0, r4
   d500a:	21c8      	movs	r1, #200	; 0xc8
   d500c:	f7ff ff1a 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d5010:	4620      	mov	r0, r4
   d5012:	21da      	movs	r1, #218	; 0xda
   d5014:	f7ff ff16 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d5018:	4620      	mov	r0, r4
   d501a:	2112      	movs	r1, #18
   d501c:	f7ff ff12 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d5020:	2181      	movs	r1, #129	; 0x81
   d5022:	4620      	mov	r0, r4
   d5024:	f7ff ff0e 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5028:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d502a:	bf0c      	ite	eq
   d502c:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d502e:	21cf      	movne	r1, #207	; 0xcf
   d5030:	4620      	mov	r0, r4
   d5032:	f7ff ff07 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d5036:	21d9      	movs	r1, #217	; 0xd9
   d5038:	4620      	mov	r0, r4
   d503a:	f7ff ff03 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d503e:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d5040:	bf0c      	ite	eq
   d5042:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d5044:	21f1      	movne	r1, #241	; 0xf1
   d5046:	4620      	mov	r0, r4
   d5048:	f7ff fefc 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d504c:	4620      	mov	r0, r4
   d504e:	21db      	movs	r1, #219	; 0xdb
   d5050:	f7ff fef8 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d5054:	4620      	mov	r0, r4
   d5056:	2140      	movs	r1, #64	; 0x40
   d5058:	f7ff fef4 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d505c:	4620      	mov	r0, r4
   d505e:	21a4      	movs	r1, #164	; 0xa4
   d5060:	f7ff fef0 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d5064:	4620      	mov	r0, r4
   d5066:	21a6      	movs	r1, #166	; 0xa6
   d5068:	f7ff feec 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d506c:	4620      	mov	r0, r4
   d506e:	21af      	movs	r1, #175	; 0xaf
}
   d5070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5074:	f7ff bee6 	b.w	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d5078 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d5078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d507c:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d507e:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d5080:	f7ff fee0 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d5084:	2100      	movs	r1, #0
   d5086:	4620      	mov	r0, r4
   d5088:	f7ff fedc 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d508c:	217f      	movs	r1, #127	; 0x7f
   d508e:	4620      	mov	r0, r4
   d5090:	f7ff fed8 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d5094:	2122      	movs	r1, #34	; 0x22
   d5096:	4620      	mov	r0, r4
   d5098:	f7ff fed4 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d509c:	2100      	movs	r1, #0
   d509e:	4620      	mov	r0, r4
   d50a0:	f7ff fed0 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d50a4:	2107      	movs	r1, #7
   d50a6:	4620      	mov	r0, r4
   d50a8:	f7ff fecc 	bl	d4e44 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d50ac:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d50b0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d5170 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d50b4:	3301      	adds	r3, #1
   d50b6:	d035      	beq.n	d5124 <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d50b8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d50bc:	2101      	movs	r1, #1
   d50be:	b280      	uxth	r0, r0
   d50c0:	f002 f8bb 	bl	d723a <digitalWrite>
    digitalWrite(dc, HIGH);
   d50c4:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d50c8:	2101      	movs	r1, #1
   d50ca:	b280      	uxth	r0, r0
   d50cc:	f002 f8b5 	bl	d723a <digitalWrite>
    digitalWrite(cs, LOW);
   d50d0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d50d4:	2100      	movs	r1, #0
   d50d6:	b280      	uxth	r0, r0
   d50d8:	f002 f8af 	bl	d723a <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d50dc:	2001      	movs	r0, #1
   d50de:	f000 fcf7 	bl	d5ad0 <HAL_Delay_Microseconds>
   d50e2:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d50e4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d50e8:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d50ec:	b12b      	cbz	r3, d50fa <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d50ee:	f7ff f983 	bl	d43f8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d50f2:	4631      	mov	r1, r6
   d50f4:	f001 f840 	bl	d6178 <_ZN8SPIClass8transferEh>
   d50f8:	e005      	b.n	d5106 <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d50fa:	4633      	mov	r3, r6
   d50fc:	2201      	movs	r2, #1
   d50fe:	7fa1      	ldrb	r1, [r4, #30]
   d5100:	7f60      	ldrb	r0, [r4, #29]
   d5102:	f002 f8c6 	bl	d7292 <shiftOut>
   d5106:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d5108:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d510c:	d1ea      	bne.n	d50e4 <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d510e:	2001      	movs	r0, #1
   d5110:	f000 fcde 	bl	d5ad0 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d5114:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5118:	2101      	movs	r1, #1
   d511a:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d511c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d5120:	f002 b88b 	b.w	d723a <digitalWrite>
   d5124:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d5126:	f002 f8f1 	bl	d730c <_Z19__fetch_global_Wirev>
   d512a:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d512e:	f001 fbc8 	bl	d68c2 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d5132:	f002 f8eb 	bl	d730c <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5136:	6803      	ldr	r3, [r0, #0]
   d5138:	2140      	movs	r1, #64	; 0x40
   d513a:	689b      	ldr	r3, [r3, #8]
   d513c:	4798      	blx	r3
   d513e:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d5140:	f002 f8e4 	bl	d730c <_Z19__fetch_global_Wirev>
   d5144:	19af      	adds	r7, r5, r6
   d5146:	6803      	ldr	r3, [r0, #0]
   d5148:	b2bf      	uxth	r7, r7
   d514a:	689b      	ldr	r3, [r3, #8]
   d514c:	f818 1007 	ldrb.w	r1, [r8, r7]
   d5150:	3601      	adds	r6, #1
   d5152:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d5154:	2e10      	cmp	r6, #16
   d5156:	d1f3      	bne.n	d5140 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d5158:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d515a:	f002 f8d7 	bl	d730c <_Z19__fetch_global_Wirev>
   d515e:	b2ad      	uxth	r5, r5
   d5160:	f001 fbb6 	bl	d68d0 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d5164:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d5168:	d1dd      	bne.n	d5126 <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d516a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d516e:	bf00      	nop
   d5170:	2003dd74 	.word	0x2003dd74

000d5174 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d5174:	f000 bc1c 	b.w	d59b0 <HAL_Pin_Map>

000d5178 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d517c:	b085      	sub	sp, #20
   d517e:	461e      	mov	r6, r3
   d5180:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d5184:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d5188:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d518a:	1a9a      	subs	r2, r3, r2
   d518c:	2a00      	cmp	r2, #0
   d518e:	bfb8      	it	lt
   d5190:	4252      	neglt	r2, r2
   d5192:	9200      	str	r2, [sp, #0]
   d5194:	1a72      	subs	r2, r6, r1
   d5196:	2a00      	cmp	r2, #0
   d5198:	bfb8      	it	lt
   d519a:	4252      	neglt	r2, r2
   d519c:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d519e:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d51a0:	9a00      	ldr	r2, [sp, #0]
   d51a2:	9901      	ldr	r1, [sp, #4]
   d51a4:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d51a6:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d51a8:	dd05      	ble.n	d51b6 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d51aa:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d51ac:	461e      	mov	r6, r3
   d51ae:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d51b0:	4622      	mov	r2, r4
    swap(x0, y0);
   d51b2:	462c      	mov	r4, r5
   d51b4:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d51b6:	42b4      	cmp	r4, r6
   d51b8:	dd05      	ble.n	d51c6 <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d51ba:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d51bc:	461d      	mov	r5, r3
   d51be:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d51c0:	4622      	mov	r2, r4
   d51c2:	4634      	mov	r4, r6
   d51c4:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d51c6:	1b5a      	subs	r2, r3, r5
   d51c8:	2a00      	cmp	r2, #0
   d51ca:	bfb8      	it	lt
   d51cc:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d51ce:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d51d2:	429d      	cmp	r5, r3
   d51d4:	bfb4      	ite	lt
   d51d6:	2301      	movlt	r3, #1
   d51d8:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d51dc:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d51e0:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d51e2:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d51e4:	fa0f f788 	sxth.w	r7, r8
   d51e8:	2202      	movs	r2, #2
   d51ea:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d51ee:	42b4      	cmp	r4, r6
   d51f0:	dc1f      	bgt.n	d5232 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d51f2:	9a01      	ldr	r2, [sp, #4]
   d51f4:	9b00      	ldr	r3, [sp, #0]
   d51f6:	4293      	cmp	r3, r2
   d51f8:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d51fc:	bfc8      	it	gt
   d51fe:	4622      	movgt	r2, r4
   d5200:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5204:	bfc8      	it	gt
   d5206:	4629      	movgt	r1, r5
   d5208:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d520a:	bfdc      	itt	le
   d520c:	462a      	movle	r2, r5
   d520e:	4621      	movle	r1, r4
   d5210:	4648      	mov	r0, r9
   d5212:	47d8      	blx	fp
    }
    err -= dy;
   d5214:	9b03      	ldr	r3, [sp, #12]
   d5216:	1aff      	subs	r7, r7, r3
   d5218:	b2bb      	uxth	r3, r7
   d521a:	b21f      	sxth	r7, r3
    if (err < 0) {
   d521c:	2f00      	cmp	r7, #0
   d521e:	da05      	bge.n	d522c <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d5220:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d5222:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d5226:	4415      	add	r5, r2
   d5228:	b22d      	sxth	r5, r5
      err += dx;
   d522a:	b23f      	sxth	r7, r7
   d522c:	3401      	adds	r4, #1
   d522e:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d5230:	e7dd      	b.n	d51ee <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d5232:	b005      	add	sp, #20
   d5234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5238 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5238:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d523c:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d5240:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5242:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d5246:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5248:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d524a:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d524c:	4691      	mov	r9, r2
   d524e:	460d      	mov	r5, r1
   d5250:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d5252:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d5254:	6823      	ldr	r3, [r4, #0]
   d5256:	9600      	str	r6, [sp, #0]
   d5258:	f10a 32ff 	add.w	r2, sl, #4294967295
   d525c:	444a      	add	r2, r9
   d525e:	69df      	ldr	r7, [r3, #28]
   d5260:	4629      	mov	r1, r5
   d5262:	4643      	mov	r3, r8
   d5264:	4620      	mov	r0, r4
   d5266:	b212      	sxth	r2, r2
   d5268:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d526a:	6823      	ldr	r3, [r4, #0]
   d526c:	9600      	str	r6, [sp, #0]
   d526e:	699f      	ldr	r7, [r3, #24]
   d5270:	464a      	mov	r2, r9
   d5272:	4653      	mov	r3, sl
   d5274:	4629      	mov	r1, r5
   d5276:	4620      	mov	r0, r4
   d5278:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d527a:	6823      	ldr	r3, [r4, #0]
   d527c:	960a      	str	r6, [sp, #40]	; 0x28
   d527e:	f108 31ff 	add.w	r1, r8, #4294967295
   d5282:	4429      	add	r1, r5
   d5284:	699d      	ldr	r5, [r3, #24]
   d5286:	464a      	mov	r2, r9
   d5288:	4653      	mov	r3, sl
   d528a:	b209      	sxth	r1, r1
   d528c:	4620      	mov	r0, r4
   d528e:	46ac      	mov	ip, r5
}
   d5290:	b002      	add	sp, #8
   d5292:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d5296:	4760      	bx	ip

000d5298 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d5298:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d529a:	3b01      	subs	r3, #1
   d529c:	4413      	add	r3, r2
   d529e:	6804      	ldr	r4, [r0, #0]
   d52a0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d52a4:	9501      	str	r5, [sp, #4]
   d52a6:	b21b      	sxth	r3, r3
   d52a8:	9300      	str	r3, [sp, #0]
   d52aa:	6964      	ldr	r4, [r4, #20]
   d52ac:	460b      	mov	r3, r1
   d52ae:	47a0      	blx	r4
}
   d52b0:	b003      	add	sp, #12
   d52b2:	bd30      	pop	{r4, r5, pc}

000d52b4 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d52b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d52b6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d52ba:	6804      	ldr	r4, [r0, #0]
   d52bc:	e88d 0024 	stmia.w	sp, {r2, r5}
   d52c0:	3b01      	subs	r3, #1
   d52c2:	440b      	add	r3, r1
   d52c4:	6964      	ldr	r4, [r4, #20]
   d52c6:	b21b      	sxth	r3, r3
   d52c8:	47a0      	blx	r4
}
   d52ca:	b003      	add	sp, #12
   d52cc:	bd30      	pop	{r4, r5, pc}

000d52ce <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d52ce:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d52d2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d52d6:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d52da:	4605      	mov	r5, r0
   d52dc:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d52de:	460c      	mov	r4, r1
   d52e0:	eb01 0a03 	add.w	sl, r1, r3
   d52e4:	4554      	cmp	r4, sl
   d52e6:	da0b      	bge.n	d5300 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d52e8:	682b      	ldr	r3, [r5, #0]
   d52ea:	f8cd 9000 	str.w	r9, [sp]
   d52ee:	699e      	ldr	r6, [r3, #24]
   d52f0:	4621      	mov	r1, r4
   d52f2:	4643      	mov	r3, r8
   d52f4:	463a      	mov	r2, r7
   d52f6:	4628      	mov	r0, r5
   d52f8:	3401      	adds	r4, #1
   d52fa:	47b0      	blx	r6
   d52fc:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d52fe:	e7f1      	b.n	d52e4 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d5300:	b002      	add	sp, #8
   d5302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5306 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d5306:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d5308:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d530c:	6804      	ldr	r4, [r0, #0]
   d530e:	9101      	str	r1, [sp, #4]
   d5310:	9200      	str	r2, [sp, #0]
   d5312:	2200      	movs	r2, #0
   d5314:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5318:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d531a:	4611      	mov	r1, r2
   d531c:	47a0      	blx	r4
}
   d531e:	b002      	add	sp, #8
   d5320:	bd10      	pop	{r4, pc}

000d5322 <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d5322:	4770      	bx	lr

000d5324 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d5324:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d5326:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5328:	2400      	movs	r4, #0
   d532a:	4d08      	ldr	r5, [pc, #32]	; (d534c <_ZN12Adafruit_GFXC1Ess+0x28>)
   d532c:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d532e:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d5330:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d5332:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d5336:	2201      	movs	r2, #1
   d5338:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d533a:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d533c:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d533e:	8204      	strh	r4, [r0, #16]
   d5340:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d5342:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d5344:	82c1      	strh	r1, [r0, #22]
   d5346:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d5348:	7682      	strb	r2, [r0, #26]
}
   d534a:	bd30      	pop	{r4, r5, pc}
   d534c:	000d8168 	.word	0x000d8168

000d5350 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5354:	b08f      	sub	sp, #60	; 0x3c
   d5356:	4605      	mov	r5, r0
   d5358:	9106      	str	r1, [sp, #24]
   d535a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d535e:	9107      	str	r1, [sp, #28]
   d5360:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d5364:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d5366:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d536a:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d536c:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d5370:	4281      	cmp	r1, r0
   d5372:	dd7c      	ble.n	d546e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d5374:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d5378:	4291      	cmp	r1, r2
   d537a:	dd78      	ble.n	d546e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d537c:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d537e:	fb11 0008 	smlabb	r0, r1, r8, r0
   d5382:	2800      	cmp	r0, #0
   d5384:	dd73      	ble.n	d546e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d5386:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d538a:	2800      	cmp	r0, #0
   d538c:	dd6f      	ble.n	d546e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d538e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5392:	b296      	uxth	r6, r2
   d5394:	930c      	str	r3, [sp, #48]	; 0x30
   d5396:	f106 0308 	add.w	r3, r6, #8
   d539a:	b29b      	uxth	r3, r3
   d539c:	9109      	str	r1, [sp, #36]	; 0x24
   d539e:	2400      	movs	r4, #0
   d53a0:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d53a2:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d53a4:	bf1c      	itt	ne
   d53a6:	4b33      	ldrne	r3, [pc, #204]	; (d5474 <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d53a8:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d53aa:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d53ac:	bf16      	itet	ne
   d53ae:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d53b0:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d53b4:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d53b8:	9604      	str	r6, [sp, #16]
   d53ba:	fa1f f388 	uxth.w	r3, r8
   d53be:	9303      	str	r3, [sp, #12]
   d53c0:	9a03      	ldr	r2, [sp, #12]
   d53c2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d53c6:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d53ca:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d53ce:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d53d0:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d53d2:	920a      	str	r2, [sp, #40]	; 0x28
   d53d4:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d53d6:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d53da:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d53dc:	f019 0f01 	tst.w	r9, #1
   d53e0:	d011      	beq.n	d5406 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d53e2:	f1b8 0f01 	cmp.w	r8, #1
   d53e6:	682b      	ldr	r3, [r5, #0]
   d53e8:	d103      	bne.n	d53f2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d53ea:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d53ee:	9b07      	ldr	r3, [sp, #28]
   d53f0:	e014      	b.n	d541c <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d53f2:	9a07      	ldr	r2, [sp, #28]
   d53f4:	9201      	str	r2, [sp, #4]
   d53f6:	f8cd a000 	str.w	sl, [sp]
   d53fa:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d53fe:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d5402:	4653      	mov	r3, sl
   d5404:	e018      	b.n	d5438 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d5406:	9b07      	ldr	r3, [sp, #28]
   d5408:	9a08      	ldr	r2, [sp, #32]
   d540a:	4293      	cmp	r3, r2
   d540c:	d017      	beq.n	d543e <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d540e:	f1b8 0f01 	cmp.w	r8, #1
   d5412:	682b      	ldr	r3, [r5, #0]
   d5414:	d107      	bne.n	d5426 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d5416:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d541a:	4613      	mov	r3, r2
   d541c:	b23a      	sxth	r2, r7
   d541e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d5420:	4628      	mov	r0, r5
   d5422:	47d8      	blx	fp
   d5424:	e00b      	b.n	d543e <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5426:	9a08      	ldr	r2, [sp, #32]
   d5428:	9201      	str	r2, [sp, #4]
   d542a:	f8cd a000 	str.w	sl, [sp]
   d542e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d5432:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d5436:	4653      	mov	r3, sl
   d5438:	990a      	ldr	r1, [sp, #40]	; 0x28
   d543a:	4628      	mov	r0, r5
   d543c:	47d8      	blx	fp
   d543e:	9b04      	ldr	r3, [sp, #16]
   d5440:	9a03      	ldr	r2, [sp, #12]
   d5442:	4413      	add	r3, r2
   d5444:	b29b      	uxth	r3, r3
   d5446:	9304      	str	r3, [sp, #16]
   d5448:	9b05      	ldr	r3, [sp, #20]
   d544a:	4413      	add	r3, r2
   d544c:	b29b      	uxth	r3, r3
   d544e:	3701      	adds	r7, #1
   d5450:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d5452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d5454:	b2bf      	uxth	r7, r7
   d5456:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d5458:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d545c:	d1be      	bne.n	d53dc <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d545e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5460:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d5462:	3401      	adds	r4, #1
   d5464:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5468:	b264      	sxtb	r4, r4
   d546a:	9309      	str	r3, [sp, #36]	; 0x24
   d546c:	d199      	bne.n	d53a2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d546e:	b00f      	add	sp, #60	; 0x3c
   d5470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5474:	000d8198 	.word	0x000d8198

000d5478 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d5478:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d547a:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d547c:	b085      	sub	sp, #20
   d547e:	4604      	mov	r4, r0
   d5480:	460b      	mov	r3, r1

  if (c == '\n') {
   d5482:	d104      	bne.n	d548e <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d5484:	7e02      	ldrb	r2, [r0, #24]
   d5486:	8a43      	ldrh	r3, [r0, #18]
   d5488:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d548c:	e023      	b.n	d54d6 <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d548e:	290d      	cmp	r1, #13
   d5490:	d024      	beq.n	d54dc <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d5492:	7e05      	ldrb	r5, [r0, #24]
   d5494:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d5498:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d549c:	9502      	str	r5, [sp, #8]
   d549e:	8ac5      	ldrh	r5, [r0, #22]
   d54a0:	9501      	str	r5, [sp, #4]
   d54a2:	8a85      	ldrh	r5, [r0, #20]
   d54a4:	9500      	str	r5, [sp, #0]
   d54a6:	f7ff ff53 	bl	d5350 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d54aa:	7e22      	ldrb	r2, [r4, #24]
   d54ac:	8a23      	ldrh	r3, [r4, #16]
   d54ae:	b291      	uxth	r1, r2
   d54b0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d54b4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d54b8:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d54ba:	b21b      	sxth	r3, r3
   d54bc:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d54be:	b168      	cbz	r0, d54dc <_ZN12Adafruit_GFX5writeEh+0x64>
   d54c0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d54c4:	f06f 0505 	mvn.w	r5, #5
   d54c8:	fb05 0202 	mla	r2, r5, r2, r0
   d54cc:	4293      	cmp	r3, r2
   d54ce:	dd05      	ble.n	d54dc <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d54d0:	8a63      	ldrh	r3, [r4, #18]
   d54d2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d54d6:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d54d8:	2300      	movs	r3, #0
   d54da:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d54dc:	2001      	movs	r0, #1
   d54de:	b005      	add	sp, #20
   d54e0:	bd30      	pop	{r4, r5, pc}

000d54e2 <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d54e2:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d54e4:	8242      	strh	r2, [r0, #18]
   d54e6:	4770      	bx	lr

000d54e8 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d54e8:	82c1      	strh	r1, [r0, #22]
   d54ea:	8281      	strh	r1, [r0, #20]
   d54ec:	4770      	bx	lr

000d54ee <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d54ee:	7e40      	ldrb	r0, [r0, #25]
   d54f0:	4770      	bx	lr

000d54f2 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d54f2:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d54f6:	4770      	bx	lr

000d54f8 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d54f8:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d54fc:	4770      	bx	lr

000d54fe <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d54fe:	f000 ba57 	b.w	d59b0 <HAL_Pin_Map>

000d5502 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d5502:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d5504:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d5508:	6803      	ldr	r3, [r0, #0]
   d550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d550c:	4798      	blx	r3
}
   d550e:	3000      	adds	r0, #0
   d5510:	bf18      	it	ne
   d5512:	2001      	movne	r0, #1
   d5514:	bd08      	pop	{r3, pc}

000d5516 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d5516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5518:	4606      	mov	r6, r0
   d551a:	460f      	mov	r7, r1
   d551c:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d551e:	b1c4      	cbz	r4, d5552 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d5520:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5524:	6803      	ldr	r3, [r0, #0]
   d5526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5528:	4798      	blx	r3
   d552a:	b908      	cbnz	r0, d5530 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d552c:	2000      	movs	r0, #0
   d552e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d5530:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5534:	2cfa      	cmp	r4, #250	; 0xfa
   d5536:	6803      	ldr	r3, [r0, #0]
   d5538:	4625      	mov	r5, r4
   d553a:	bfa8      	it	ge
   d553c:	25fa      	movge	r5, #250	; 0xfa
   d553e:	68db      	ldr	r3, [r3, #12]
   d5540:	462a      	mov	r2, r5
   d5542:	4639      	mov	r1, r7
   d5544:	4798      	blx	r3
   d5546:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d5548:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d554a:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d554c:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d554e:	d0e6      	beq.n	d551e <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d5550:	e7ec      	b.n	d552c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d5552:	2001      	movs	r0, #1
}
   d5554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5556 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d5556:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d555a:	4606      	mov	r6, r0
   d555c:	4688      	mov	r8, r1
   d555e:	4691      	mov	r9, r2
   d5560:	461f      	mov	r7, r3
   d5562:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d5564:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d5566:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d556a:	6803      	ldr	r3, [r0, #0]
   d556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d556e:	4798      	blx	r3
   d5570:	b1d0      	cbz	r0, d55a8 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d5572:	2d00      	cmp	r5, #0
   d5574:	db18      	blt.n	d55a8 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d5576:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d557a:	6803      	ldr	r3, [r0, #0]
   d557c:	691b      	ldr	r3, [r3, #16]
   d557e:	4798      	blx	r3
   d5580:	b160      	cbz	r0, d559c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d5582:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5586:	6803      	ldr	r3, [r0, #0]
   d5588:	695b      	ldr	r3, [r3, #20]
   d558a:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d558c:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d5590:	3401      	adds	r4, #1
   d5592:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d5594:	454c      	cmp	r4, r9
   d5596:	d007      	beq.n	d55a8 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d5598:	463d      	mov	r5, r7
   d559a:	e7ec      	b.n	d5576 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d559c:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d559e:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d55a0:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d55a2:	f000 fee7 	bl	d6374 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d55a6:	e7de      	b.n	d5566 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d55a8:	4620      	mov	r0, r4
   d55aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d55ae <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d55ae:	b570      	push	{r4, r5, r6, lr}
   d55b0:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d55b2:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d55b6:	2296      	movs	r2, #150	; 0x96
   d55b8:	2100      	movs	r1, #0
   d55ba:	4628      	mov	r0, r5
   d55bc:	f002 fc69 	bl	d7e92 <memset>
  strcpy((char *)buffer, servername);
   d55c0:	6861      	ldr	r1, [r4, #4]
   d55c2:	4628      	mov	r0, r5
   d55c4:	f002 fc96 	bl	d7ef4 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d55c8:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d55cc:	8922      	ldrh	r2, [r4, #8]
   d55ce:	6803      	ldr	r3, [r0, #0]
   d55d0:	4629      	mov	r1, r5
   d55d2:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d55d4:	2300      	movs	r3, #0
   d55d6:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d55d8:	3000      	adds	r0, #0
   d55da:	bf18      	it	ne
   d55dc:	2001      	movne	r0, #1
   d55de:	bd70      	pop	{r4, r5, r6, pc}

000d55e0 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d55e0:	b510      	push	{r4, lr}
   d55e2:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d55e4:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d55e8:	6803      	ldr	r3, [r0, #0]
   d55ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55ec:	4798      	blx	r3
   d55ee:	b120      	cbz	r0, d55fa <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d55f0:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d55f4:	6803      	ldr	r3, [r0, #0]
   d55f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d55f8:	4798      	blx	r3
  }
  return true;
}
   d55fa:	2001      	movs	r0, #1
   d55fc:	bd10      	pop	{r4, pc}

000d55fe <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d55fe:	f000 b9d7 	b.w	d59b0 <HAL_Pin_Map>

000d5602 <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d5602:	b570      	push	{r4, r5, r6, lr}
   d5604:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d5606:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d5608:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d560a:	f002 fc7b 	bl	d7f04 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d560e:	1203      	asrs	r3, r0, #8
   d5610:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d5612:	7060      	strb	r0, [r4, #1]
   d5614:	b285      	uxth	r5, r0
   d5616:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d5618:	462a      	mov	r2, r5
   d561a:	4631      	mov	r1, r6
   d561c:	4620      	mov	r0, r4
   d561e:	f002 fc79 	bl	d7f14 <strncpy>
  return p+len;
}
   d5622:	1960      	adds	r0, r4, r5
   d5624:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5628 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d5628:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d562a:	6103      	str	r3, [r0, #16]
  password = pass;
   d562c:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d562e:	4d0d      	ldr	r5, [pc, #52]	; (d5664 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d5630:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d5632:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d5634:	4a0c      	ldr	r2, [pc, #48]	; (d5668 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d5636:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5638:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d563a:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d563c:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d563e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d5642:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d5646:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d564a:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d564e:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d5652:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d5654:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d5656:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d565a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d565e:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d5662:	bd30      	pop	{r4, r5, pc}
   d5664:	000d86c0 	.word	0x000d86c0
   d5668:	000d870f 	.word	0x000d870f

000d566c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d566c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5670:	fa0f fa83 	sxth.w	sl, r3
   d5674:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d5676:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5678:	699d      	ldr	r5, [r3, #24]
   d567a:	2201      	movs	r2, #1
   d567c:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d567e:	4606      	mov	r6, r0
   d5680:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5682:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d5684:	b2c0      	uxtb	r0, r0
   d5686:	2801      	cmp	r0, #1
   d5688:	d001      	beq.n	d568e <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d568a:	2000      	movs	r0, #0
   d568c:	e034      	b.n	d56f8 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d568e:	1c65      	adds	r5, r4, #1
   d5690:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d5694:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d5696:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d569a:	6833      	ldr	r3, [r6, #0]
   d569c:	699b      	ldr	r3, [r3, #24]
   d569e:	2201      	movs	r2, #1
   d56a0:	461f      	mov	r7, r3
   d56a2:	4629      	mov	r1, r5
   d56a4:	4653      	mov	r3, sl
   d56a6:	4630      	mov	r0, r6
   d56a8:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d56aa:	b2c0      	uxtb	r0, r0
   d56ac:	2801      	cmp	r0, #1
   d56ae:	d1ec      	bne.n	d568a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d56b0:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d56b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d56b8:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d56ba:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d56be:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d56c2:	d0e2      	beq.n	d568a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d56c4:	061b      	lsls	r3, r3, #24
   d56c6:	d4e8      	bmi.n	d569a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d56c8:	9b01      	ldr	r3, [sp, #4]
   d56ca:	1b2c      	subs	r4, r5, r4
   d56cc:	1b1b      	subs	r3, r3, r4
   d56ce:	3b01      	subs	r3, #1
   d56d0:	4599      	cmp	r9, r3
   d56d2:	6833      	ldr	r3, [r6, #0]
   d56d4:	d906      	bls.n	d56e4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d56d6:	9a01      	ldr	r2, [sp, #4]
   d56d8:	699f      	ldr	r7, [r3, #24]
   d56da:	3a01      	subs	r2, #1
   d56dc:	1b12      	subs	r2, r2, r4
   d56de:	4653      	mov	r3, sl
   d56e0:	b292      	uxth	r2, r2
   d56e2:	e003      	b.n	d56ec <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d56e4:	699f      	ldr	r7, [r3, #24]
   d56e6:	fa1f f289 	uxth.w	r2, r9
   d56ea:	4653      	mov	r3, sl
   d56ec:	4629      	mov	r1, r5
   d56ee:	4630      	mov	r0, r6
   d56f0:	47b8      	blx	r7
   d56f2:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d56f4:	4420      	add	r0, r4
   d56f6:	b280      	uxth	r0, r0
}
   d56f8:	b003      	add	sp, #12
   d56fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d5700 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d5700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5702:	4605      	mov	r5, r0
   d5704:	460c      	mov	r4, r1
   d5706:	4616      	mov	r6, r2
   d5708:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d570a:	463b      	mov	r3, r7
   d570c:	2296      	movs	r2, #150	; 0x96
   d570e:	4621      	mov	r1, r4
   d5710:	4628      	mov	r0, r5
   d5712:	f7ff ffab 	bl	d566c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d5716:	b148      	cbz	r0, d572c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d5718:	7823      	ldrb	r3, [r4, #0]
   d571a:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d571e:	d005      	beq.n	d572c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d5720:	f000 ffae 	bl	d6680 <_Z16_fetch_usbserialv>
   d5724:	4902      	ldr	r1, [pc, #8]	; (d5730 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d5726:	f000 fdae 	bl	d6286 <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d572a:	e7ee      	b.n	d570a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d572c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d572e:	bf00      	nop
   d5730:	000d8710 	.word	0x000d8710

000d5734 <_ZN13Adafruit_MQTT18connectErrorStringEa>:

  return ((pbuff - buffer)+rlen);
}

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   d5734:	3102      	adds	r1, #2
   d5736:	b2c9      	uxtb	r1, r1
   d5738:	2909      	cmp	r1, #9
   d573a:	bf9a      	itte	ls
   d573c:	4b02      	ldrls	r3, [pc, #8]	; (d5748 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   d573e:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   switch (code) {
   d5742:	4802      	ldrhi	r0, [pc, #8]	; (d574c <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   d5744:	4770      	bx	lr
   d5746:	bf00      	nop
   d5748:	000d86dc 	.word	0x000d86dc
   d574c:	000d8721 	.word	0x000d8721

000d5750 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   d5750:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d5752:	23e0      	movs	r3, #224	; 0xe0
   d5754:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d5758:	2300      	movs	r3, #0
   d575a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d575e:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d5760:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d5762:	695b      	ldr	r3, [r3, #20]
   d5764:	2202      	movs	r2, #2
   d5766:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d576a:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d576c:	6823      	ldr	r3, [r4, #0]
   d576e:	4620      	mov	r0, r4
   d5770:	691b      	ldr	r3, [r3, #16]

}
   d5772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d5776:	4718      	bx	r3

000d5778 <_ZN13Adafruit_MQTT4pingEh>:
  // flush input!
  DEBUG_PRINTLN(F("Flushing input buffer"));
  while (readPacket(buffer, MAXBUFFERSIZE, timeout));
}

bool Adafruit_MQTT::ping(uint8_t num) {
   d5778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d577c:	4604      	mov	r4, r0
   d577e:	460d      	mov	r5, r1
   d5780:	f04f 0800 	mov.w	r8, #0
  return len;

}

uint8_t Adafruit_MQTT::pingPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d5784:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  //flushIncoming(100);

  while (num--) {
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d5788:	f100 0722 	add.w	r7, r0, #34	; 0x22
}

bool Adafruit_MQTT::ping(uint8_t num) {
  //flushIncoming(100);

  while (num--) {
   d578c:	b1d5      	cbz	r5, d57c4 <_ZN13Adafruit_MQTT4pingEh+0x4c>
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d578e:	6823      	ldr	r3, [r4, #0]
  return len;

}

uint8_t Adafruit_MQTT::pingPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d5790:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
  packet[1] = 0;
   d5794:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
  //flushIncoming(100);

  while (num--) {
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d5798:	695b      	ldr	r3, [r3, #20]
   d579a:	2202      	movs	r2, #2
   d579c:	4639      	mov	r1, r7
   d579e:	4620      	mov	r0, r4
   d57a0:	4798      	blx	r3
   d57a2:	4606      	mov	r6, r0
   d57a4:	b910      	cbnz	r0, d57ac <_ZN13Adafruit_MQTT4pingEh+0x34>
   d57a6:	3d01      	subs	r5, #1
   d57a8:	b2ed      	uxtb	r5, r5
   d57aa:	e7ef      	b.n	d578c <_ZN13Adafruit_MQTT4pingEh+0x14>
      continue;

    // Process ping reply.
    len = processPacketsUntil(buffer, MQTT_CTRL_PINGRESP, PING_TIMEOUT_MS);
   d57ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d57b0:	220d      	movs	r2, #13
   d57b2:	4639      	mov	r1, r7
   d57b4:	4620      	mov	r0, r4
   d57b6:	f7ff ffa3 	bl	d5700 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
    if (buffer[0] == (MQTT_CTRL_PINGRESP << 4))
   d57ba:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d57be:	2bd0      	cmp	r3, #208	; 0xd0
   d57c0:	d1f1      	bne.n	d57a6 <_ZN13Adafruit_MQTT4pingEh+0x2e>
   d57c2:	e000      	b.n	d57c6 <_ZN13Adafruit_MQTT4pingEh+0x4e>
      return true;
  }

  return false;
   d57c4:	462e      	mov	r6, r5
}
   d57c6:	4630      	mov	r0, r6
   d57c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d57cc <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d57cc:	b538      	push	{r3, r4, r5, lr}
   d57ce:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d57d0:	4608      	mov	r0, r1
   d57d2:	2310      	movs	r3, #16
   d57d4:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d57d8:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d57da:	4929      	ldr	r1, [pc, #164]	; (d5880 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d57dc:	f7ff ff11 	bl	d5602 <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d57e0:	2304      	movs	r3, #4
   d57e2:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d57e4:	2302      	movs	r3, #2
   d57e6:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d57e8:	69a3      	ldr	r3, [r4, #24]
   d57ea:	b1ab      	cbz	r3, d5818 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d57ec:	781b      	ldrb	r3, [r3, #0]
   d57ee:	b19b      	cbz	r3, d5818 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d57f0:	2306      	movs	r3, #6
   d57f2:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d57f4:	f894 3020 	ldrb.w	r3, [r4, #32]
   d57f8:	2b01      	cmp	r3, #1
   d57fa:	d101      	bne.n	d5800 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d57fc:	230e      	movs	r3, #14
   d57fe:	e002      	b.n	d5806 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d5800:	2b02      	cmp	r3, #2
   d5802:	d101      	bne.n	d5808 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d5804:	231e      	movs	r3, #30
   d5806:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d5808:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d580c:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d580e:	bf02      	ittt	eq
   d5810:	7843      	ldrbeq	r3, [r0, #1]
   d5812:	f043 0320 	orreq.w	r3, r3, #32
   d5816:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d5818:	6923      	ldr	r3, [r4, #16]
   d581a:	781b      	ldrb	r3, [r3, #0]
   d581c:	b11b      	cbz	r3, d5826 <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d581e:	7843      	ldrb	r3, [r0, #1]
   d5820:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d5824:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d5826:	6963      	ldr	r3, [r4, #20]
   d5828:	781b      	ldrb	r3, [r3, #0]
   d582a:	b11b      	cbz	r3, d5834 <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d582c:	7843      	ldrb	r3, [r0, #1]
   d582e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d5832:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d5834:	2301      	movs	r3, #1
   d5836:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d5838:	232c      	movs	r3, #44	; 0x2c
   d583a:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d583c:	68e1      	ldr	r1, [r4, #12]
   d583e:	780b      	ldrb	r3, [r1, #0]
   d5840:	b11b      	cbz	r3, d584a <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d5842:	3004      	adds	r0, #4
   d5844:	f7ff fedd 	bl	d5602 <_ZL11stringprintPhPKct.constprop.3>
   d5848:	e002      	b.n	d5850 <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d584a:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d584c:	7143      	strb	r3, [r0, #5]
      p++;
   d584e:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5850:	69a1      	ldr	r1, [r4, #24]
   d5852:	b131      	cbz	r1, d5862 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d5854:	780b      	ldrb	r3, [r1, #0]
   d5856:	b123      	cbz	r3, d5862 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d5858:	f7ff fed3 	bl	d5602 <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d585c:	69e1      	ldr	r1, [r4, #28]
   d585e:	f7ff fed0 	bl	d5602 <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d5862:	6921      	ldr	r1, [r4, #16]
   d5864:	780b      	ldrb	r3, [r1, #0]
   d5866:	b10b      	cbz	r3, d586c <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d5868:	f7ff fecb 	bl	d5602 <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d586c:	6961      	ldr	r1, [r4, #20]
   d586e:	780b      	ldrb	r3, [r1, #0]
   d5870:	b10b      	cbz	r3, d5876 <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d5872:	f7ff fec6 	bl	d5602 <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d5876:	1b40      	subs	r0, r0, r5
   d5878:	b2c0      	uxtb	r0, r0
   d587a:	1e83      	subs	r3, r0, #2
   d587c:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d587e:	bd38      	pop	{r3, r4, r5, pc}
   d5880:	000d872f 	.word	0x000d872f

000d5884 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5884:	b538      	push	{r3, r4, r5, lr}
   d5886:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d5888:	2382      	movs	r3, #130	; 0x82
   d588a:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d588c:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d588e:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5892:	0a09      	lsrs	r1, r1, #8
   d5894:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d5896:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d589a:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d589c:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d58a0:	3101      	adds	r1, #1
   d58a2:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d58a6:	4611      	mov	r1, r2
   d58a8:	1d20      	adds	r0, r4, #4
   d58aa:	f7ff feaa 	bl	d5602 <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d58ae:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d58b2:	1b00      	subs	r0, r0, r4
   d58b4:	b2c0      	uxtb	r0, r0
   d58b6:	1e83      	subs	r3, r0, #2
   d58b8:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d58ba:	bd38      	pop	{r3, r4, r5, pc}

000d58bc <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d58bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d58c0:	6803      	ldr	r3, [r0, #0]
   d58c2:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d58c4:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d58c6:	4798      	blx	r3
   d58c8:	b918      	cbnz	r0, d58d2 <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d58ca:	f04f 30ff 	mov.w	r0, #4294967295
   d58ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d58d2:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d58d6:	4629      	mov	r1, r5
   d58d8:	4620      	mov	r0, r4
   d58da:	f7ff ff77 	bl	d57cc <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d58de:	6823      	ldr	r3, [r4, #0]
   d58e0:	b282      	uxth	r2, r0
   d58e2:	695b      	ldr	r3, [r3, #20]
   d58e4:	4629      	mov	r1, r5
   d58e6:	4620      	mov	r0, r4
   d58e8:	4798      	blx	r3
   d58ea:	2800      	cmp	r0, #0
   d58ec:	d0ed      	beq.n	d58ca <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d58ee:	f241 7370 	movw	r3, #6000	; 0x1770
   d58f2:	2296      	movs	r2, #150	; 0x96
   d58f4:	4629      	mov	r1, r5
   d58f6:	4620      	mov	r0, r4
   d58f8:	f7ff feb8 	bl	d566c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d58fc:	b2c0      	uxtb	r0, r0
   d58fe:	2804      	cmp	r0, #4
   d5900:	d1e3      	bne.n	d58ca <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d5902:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5904:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d5908:	d1df      	bne.n	d58ca <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d590a:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d590e:	b110      	cbz	r0, d5916 <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d5910:	b240      	sxtb	r0, r0
   d5912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5916:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d591a:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d591e:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d5922:	b1fb      	cbz	r3, d5964 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5924:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d5926:	683a      	ldr	r2, [r7, #0]
   d5928:	4629      	mov	r1, r5
   d592a:	7913      	ldrb	r3, [r2, #4]
   d592c:	6812      	ldr	r2, [r2, #0]
   d592e:	4620      	mov	r0, r4
   d5930:	f7ff ffa8 	bl	d5884 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d5934:	6823      	ldr	r3, [r4, #0]
   d5936:	b282      	uxth	r2, r0
   d5938:	695b      	ldr	r3, [r3, #20]
   d593a:	4629      	mov	r1, r5
   d593c:	4620      	mov	r0, r4
   d593e:	4798      	blx	r3
   d5940:	2800      	cmp	r0, #0
   d5942:	d0c2      	beq.n	d58ca <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d5944:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5948:	2209      	movs	r2, #9
   d594a:	4629      	mov	r1, r5
   d594c:	4620      	mov	r0, r4
   d594e:	f7ff fed7 	bl	d5700 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d5952:	b938      	cbnz	r0, d5964 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5954:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d5956:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d595a:	d1e4      	bne.n	d5926 <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d595c:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d5960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5964:	4547      	cmp	r7, r8
   d5966:	d1da      	bne.n	d591e <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d5968:	2000      	movs	r0, #0
   d596a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d596e <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d596e:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d5970:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d5972:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d5974:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d5976:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d5978:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d597a:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d597c:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d597e:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d5980:	6283      	str	r3, [r0, #40]	; 0x28
   d5982:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d5984:	6303      	str	r3, [r0, #48]	; 0x30
}
   d5986:	bd10      	pop	{r4, pc}

000d5988 <_GLOBAL__sub_I__Z11printBufferPht>:
   d5988:	f000 b812 	b.w	d59b0 <HAL_Pin_Map>

000d598c <_GLOBAL__sub_I__ZN5TWISTC2Ev>:
   d598c:	f000 b810 	b.w	d59b0 <HAL_Pin_Map>

000d5990 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5990:	b508      	push	{r3, lr}
   d5992:	4b02      	ldr	r3, [pc, #8]	; (d599c <netdb_freeaddrinfo+0xc>)
   d5994:	681b      	ldr	r3, [r3, #0]
   d5996:	689b      	ldr	r3, [r3, #8]
   d5998:	9301      	str	r3, [sp, #4]
   d599a:	bd08      	pop	{r3, pc}
   d599c:	00030268 	.word	0x00030268

000d59a0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d59a0:	b508      	push	{r3, lr}
   d59a2:	4b02      	ldr	r3, [pc, #8]	; (d59ac <netdb_getaddrinfo+0xc>)
   d59a4:	681b      	ldr	r3, [r3, #0]
   d59a6:	68db      	ldr	r3, [r3, #12]
   d59a8:	9301      	str	r3, [sp, #4]
   d59aa:	bd08      	pop	{r3, pc}
   d59ac:	00030268 	.word	0x00030268

000d59b0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d59b0:	b508      	push	{r3, lr}
   d59b2:	4b02      	ldr	r3, [pc, #8]	; (d59bc <HAL_Pin_Map+0xc>)
   d59b4:	681b      	ldr	r3, [r3, #0]
   d59b6:	681b      	ldr	r3, [r3, #0]
   d59b8:	9301      	str	r3, [sp, #4]
   d59ba:	bd08      	pop	{r3, pc}
   d59bc:	0003022c 	.word	0x0003022c

000d59c0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d59c0:	b508      	push	{r3, lr}
   d59c2:	4b02      	ldr	r3, [pc, #8]	; (d59cc <HAL_Pin_Mode+0xc>)
   d59c4:	681b      	ldr	r3, [r3, #0]
   d59c6:	689b      	ldr	r3, [r3, #8]
   d59c8:	9301      	str	r3, [sp, #4]
   d59ca:	bd08      	pop	{r3, pc}
   d59cc:	0003022c 	.word	0x0003022c

000d59d0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d59d0:	b508      	push	{r3, lr}
   d59d2:	4b02      	ldr	r3, [pc, #8]	; (d59dc <HAL_Get_Pin_Mode+0xc>)
   d59d4:	681b      	ldr	r3, [r3, #0]
   d59d6:	68db      	ldr	r3, [r3, #12]
   d59d8:	9301      	str	r3, [sp, #4]
   d59da:	bd08      	pop	{r3, pc}
   d59dc:	0003022c 	.word	0x0003022c

000d59e0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d59e0:	b508      	push	{r3, lr}
   d59e2:	4b02      	ldr	r3, [pc, #8]	; (d59ec <HAL_GPIO_Write+0xc>)
   d59e4:	681b      	ldr	r3, [r3, #0]
   d59e6:	691b      	ldr	r3, [r3, #16]
   d59e8:	9301      	str	r3, [sp, #4]
   d59ea:	bd08      	pop	{r3, pc}
   d59ec:	0003022c 	.word	0x0003022c

000d59f0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d59f0:	b508      	push	{r3, lr}
   d59f2:	4b02      	ldr	r3, [pc, #8]	; (d59fc <HAL_GPIO_Read+0xc>)
   d59f4:	681b      	ldr	r3, [r3, #0]
   d59f6:	695b      	ldr	r3, [r3, #20]
   d59f8:	9301      	str	r3, [sp, #4]
   d59fa:	bd08      	pop	{r3, pc}
   d59fc:	0003022c 	.word	0x0003022c

000d5a00 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5a00:	b508      	push	{r3, lr}
   d5a02:	4b02      	ldr	r3, [pc, #8]	; (d5a0c <HAL_SPI_Begin+0xc>)
   d5a04:	681b      	ldr	r3, [r3, #0]
   d5a06:	681b      	ldr	r3, [r3, #0]
   d5a08:	9301      	str	r3, [sp, #4]
   d5a0a:	bd08      	pop	{r3, pc}
   d5a0c:	00030230 	.word	0x00030230

000d5a10 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d5a10:	b508      	push	{r3, lr}
   d5a12:	4b02      	ldr	r3, [pc, #8]	; (d5a1c <HAL_SPI_Set_Bit_Order+0xc>)
   d5a14:	681b      	ldr	r3, [r3, #0]
   d5a16:	689b      	ldr	r3, [r3, #8]
   d5a18:	9301      	str	r3, [sp, #4]
   d5a1a:	bd08      	pop	{r3, pc}
   d5a1c:	00030230 	.word	0x00030230

000d5a20 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d5a20:	b508      	push	{r3, lr}
   d5a22:	4b02      	ldr	r3, [pc, #8]	; (d5a2c <HAL_SPI_Set_Data_Mode+0xc>)
   d5a24:	681b      	ldr	r3, [r3, #0]
   d5a26:	68db      	ldr	r3, [r3, #12]
   d5a28:	9301      	str	r3, [sp, #4]
   d5a2a:	bd08      	pop	{r3, pc}
   d5a2c:	00030230 	.word	0x00030230

000d5a30 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d5a30:	b508      	push	{r3, lr}
   d5a32:	4b02      	ldr	r3, [pc, #8]	; (d5a3c <HAL_SPI_Set_Clock_Divider+0xc>)
   d5a34:	681b      	ldr	r3, [r3, #0]
   d5a36:	691b      	ldr	r3, [r3, #16]
   d5a38:	9301      	str	r3, [sp, #4]
   d5a3a:	bd08      	pop	{r3, pc}
   d5a3c:	00030230 	.word	0x00030230

000d5a40 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5a40:	b508      	push	{r3, lr}
   d5a42:	4b02      	ldr	r3, [pc, #8]	; (d5a4c <HAL_SPI_Send_Receive_Data+0xc>)
   d5a44:	681b      	ldr	r3, [r3, #0]
   d5a46:	695b      	ldr	r3, [r3, #20]
   d5a48:	9301      	str	r3, [sp, #4]
   d5a4a:	bd08      	pop	{r3, pc}
   d5a4c:	00030230 	.word	0x00030230

000d5a50 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5a50:	b508      	push	{r3, lr}
   d5a52:	4b02      	ldr	r3, [pc, #8]	; (d5a5c <HAL_SPI_Init+0xc>)
   d5a54:	681b      	ldr	r3, [r3, #0]
   d5a56:	69db      	ldr	r3, [r3, #28]
   d5a58:	9301      	str	r3, [sp, #4]
   d5a5a:	bd08      	pop	{r3, pc}
   d5a5c:	00030230 	.word	0x00030230

000d5a60 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5a60:	b508      	push	{r3, lr}
   d5a62:	4b02      	ldr	r3, [pc, #8]	; (d5a6c <HAL_SPI_Is_Enabled+0xc>)
   d5a64:	681b      	ldr	r3, [r3, #0]
   d5a66:	6a1b      	ldr	r3, [r3, #32]
   d5a68:	9301      	str	r3, [sp, #4]
   d5a6a:	bd08      	pop	{r3, pc}
   d5a6c:	00030230 	.word	0x00030230

000d5a70 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5a70:	b508      	push	{r3, lr}
   d5a72:	4b02      	ldr	r3, [pc, #8]	; (d5a7c <HAL_SPI_Info+0xc>)
   d5a74:	681b      	ldr	r3, [r3, #0]
   d5a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a78:	9301      	str	r3, [sp, #4]
   d5a7a:	bd08      	pop	{r3, pc}
   d5a7c:	00030230 	.word	0x00030230

000d5a80 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5a80:	b508      	push	{r3, lr}
   d5a82:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <HAL_SPI_Set_Settings+0xc>)
   d5a84:	681b      	ldr	r3, [r3, #0]
   d5a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5a88:	9301      	str	r3, [sp, #4]
   d5a8a:	bd08      	pop	{r3, pc}
   d5a8c:	00030230 	.word	0x00030230

000d5a90 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5a90:	b508      	push	{r3, lr}
   d5a92:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <HAL_SPI_Acquire+0xc>)
   d5a94:	681b      	ldr	r3, [r3, #0]
   d5a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5a98:	9301      	str	r3, [sp, #4]
   d5a9a:	bd08      	pop	{r3, pc}
   d5a9c:	00030230 	.word	0x00030230

000d5aa0 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5aa0:	b508      	push	{r3, lr}
   d5aa2:	4b02      	ldr	r3, [pc, #8]	; (d5aac <HAL_SPI_Release+0xc>)
   d5aa4:	681b      	ldr	r3, [r3, #0]
   d5aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5aa8:	9301      	str	r3, [sp, #4]
   d5aaa:	bd08      	pop	{r3, pc}
   d5aac:	00030230 	.word	0x00030230

000d5ab0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5ab0:	b508      	push	{r3, lr}
   d5ab2:	4b02      	ldr	r3, [pc, #8]	; (d5abc <if_index_to_name+0xc>)
   d5ab4:	681b      	ldr	r3, [r3, #0]
   d5ab6:	695b      	ldr	r3, [r3, #20]
   d5ab8:	9301      	str	r3, [sp, #4]
   d5aba:	bd08      	pop	{r3, pc}
   d5abc:	0003026c 	.word	0x0003026c

000d5ac0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5ac0:	b508      	push	{r3, lr}
   d5ac2:	4b02      	ldr	r3, [pc, #8]	; (d5acc <HAL_RNG_GetRandomNumber+0xc>)
   d5ac4:	681b      	ldr	r3, [r3, #0]
   d5ac6:	685b      	ldr	r3, [r3, #4]
   d5ac8:	9301      	str	r3, [sp, #4]
   d5aca:	bd08      	pop	{r3, pc}
   d5acc:	00030218 	.word	0x00030218

000d5ad0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5ad0:	b508      	push	{r3, lr}
   d5ad2:	4b02      	ldr	r3, [pc, #8]	; (d5adc <HAL_Delay_Microseconds+0xc>)
   d5ad4:	681b      	ldr	r3, [r3, #0]
   d5ad6:	68db      	ldr	r3, [r3, #12]
   d5ad8:	9301      	str	r3, [sp, #4]
   d5ada:	bd08      	pop	{r3, pc}
   d5adc:	00030218 	.word	0x00030218

000d5ae0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5ae0:	b508      	push	{r3, lr}
   d5ae2:	4b02      	ldr	r3, [pc, #8]	; (d5aec <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5ae4:	681b      	ldr	r3, [r3, #0]
   d5ae6:	695b      	ldr	r3, [r3, #20]
   d5ae8:	9301      	str	r3, [sp, #4]
   d5aea:	bd08      	pop	{r3, pc}
   d5aec:	00030218 	.word	0x00030218

000d5af0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5af0:	b508      	push	{r3, lr}
   d5af2:	4b02      	ldr	r3, [pc, #8]	; (d5afc <os_thread_is_current+0xc>)
   d5af4:	681b      	ldr	r3, [r3, #0]
   d5af6:	689b      	ldr	r3, [r3, #8]
   d5af8:	9301      	str	r3, [sp, #4]
   d5afa:	bd08      	pop	{r3, pc}
   d5afc:	00030248 	.word	0x00030248

000d5b00 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5b00:	b508      	push	{r3, lr}
   d5b02:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <os_thread_join+0xc>)
   d5b04:	681b      	ldr	r3, [r3, #0]
   d5b06:	691b      	ldr	r3, [r3, #16]
   d5b08:	9301      	str	r3, [sp, #4]
   d5b0a:	bd08      	pop	{r3, pc}
   d5b0c:	00030248 	.word	0x00030248

000d5b10 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5b10:	b508      	push	{r3, lr}
   d5b12:	4b02      	ldr	r3, [pc, #8]	; (d5b1c <os_thread_cleanup+0xc>)
   d5b14:	681b      	ldr	r3, [r3, #0]
   d5b16:	695b      	ldr	r3, [r3, #20]
   d5b18:	9301      	str	r3, [sp, #4]
   d5b1a:	bd08      	pop	{r3, pc}
   d5b1c:	00030248 	.word	0x00030248

000d5b20 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5b20:	b508      	push	{r3, lr}
   d5b22:	4b02      	ldr	r3, [pc, #8]	; (d5b2c <os_mutex_recursive_create+0xc>)
   d5b24:	681b      	ldr	r3, [r3, #0]
   d5b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5b28:	9301      	str	r3, [sp, #4]
   d5b2a:	bd08      	pop	{r3, pc}
   d5b2c:	00030248 	.word	0x00030248

000d5b30 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5b30:	b508      	push	{r3, lr}
   d5b32:	4b02      	ldr	r3, [pc, #8]	; (d5b3c <os_mutex_recursive_destroy+0xc>)
   d5b34:	681b      	ldr	r3, [r3, #0]
   d5b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5b38:	9301      	str	r3, [sp, #4]
   d5b3a:	bd08      	pop	{r3, pc}
   d5b3c:	00030248 	.word	0x00030248

000d5b40 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5b40:	b508      	push	{r3, lr}
   d5b42:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <inet_inet_ntop+0xc>)
   d5b44:	681b      	ldr	r3, [r3, #0]
   d5b46:	695b      	ldr	r3, [r3, #20]
   d5b48:	9301      	str	r3, [sp, #4]
   d5b4a:	bd08      	pop	{r3, pc}
   d5b4c:	00030264 	.word	0x00030264

000d5b50 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5b50:	b508      	push	{r3, lr}
   d5b52:	4b02      	ldr	r3, [pc, #8]	; (d5b5c <inet_htonl+0xc>)
   d5b54:	681b      	ldr	r3, [r3, #0]
   d5b56:	6a1b      	ldr	r3, [r3, #32]
   d5b58:	9301      	str	r3, [sp, #4]
   d5b5a:	bd08      	pop	{r3, pc}
   d5b5c:	00030264 	.word	0x00030264

000d5b60 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5b60:	b508      	push	{r3, lr}
   d5b62:	4b02      	ldr	r3, [pc, #8]	; (d5b6c <inet_htons+0xc>)
   d5b64:	681b      	ldr	r3, [r3, #0]
   d5b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b68:	9301      	str	r3, [sp, #4]
   d5b6a:	bd08      	pop	{r3, pc}
   d5b6c:	00030264 	.word	0x00030264

000d5b70 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5b70:	b508      	push	{r3, lr}
   d5b72:	4b02      	ldr	r3, [pc, #8]	; (d5b7c <HAL_USART_Init+0xc>)
   d5b74:	681b      	ldr	r3, [r3, #0]
   d5b76:	681b      	ldr	r3, [r3, #0]
   d5b78:	9301      	str	r3, [sp, #4]
   d5b7a:	bd08      	pop	{r3, pc}
   d5b7c:	0003023c 	.word	0x0003023c

000d5b80 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5b80:	b508      	push	{r3, lr}
   d5b82:	4b02      	ldr	r3, [pc, #8]	; (d5b8c <HAL_USART_Write_Data+0xc>)
   d5b84:	681b      	ldr	r3, [r3, #0]
   d5b86:	68db      	ldr	r3, [r3, #12]
   d5b88:	9301      	str	r3, [sp, #4]
   d5b8a:	bd08      	pop	{r3, pc}
   d5b8c:	0003023c 	.word	0x0003023c

000d5b90 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5b90:	b508      	push	{r3, lr}
   d5b92:	4b02      	ldr	r3, [pc, #8]	; (d5b9c <HAL_USART_Available_Data+0xc>)
   d5b94:	681b      	ldr	r3, [r3, #0]
   d5b96:	691b      	ldr	r3, [r3, #16]
   d5b98:	9301      	str	r3, [sp, #4]
   d5b9a:	bd08      	pop	{r3, pc}
   d5b9c:	0003023c 	.word	0x0003023c

000d5ba0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5ba0:	b508      	push	{r3, lr}
   d5ba2:	4b02      	ldr	r3, [pc, #8]	; (d5bac <HAL_USART_Read_Data+0xc>)
   d5ba4:	681b      	ldr	r3, [r3, #0]
   d5ba6:	695b      	ldr	r3, [r3, #20]
   d5ba8:	9301      	str	r3, [sp, #4]
   d5baa:	bd08      	pop	{r3, pc}
   d5bac:	0003023c 	.word	0x0003023c

000d5bb0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5bb0:	b508      	push	{r3, lr}
   d5bb2:	4b02      	ldr	r3, [pc, #8]	; (d5bbc <HAL_USART_Peek_Data+0xc>)
   d5bb4:	681b      	ldr	r3, [r3, #0]
   d5bb6:	699b      	ldr	r3, [r3, #24]
   d5bb8:	9301      	str	r3, [sp, #4]
   d5bba:	bd08      	pop	{r3, pc}
   d5bbc:	0003023c 	.word	0x0003023c

000d5bc0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5bc0:	b508      	push	{r3, lr}
   d5bc2:	4b02      	ldr	r3, [pc, #8]	; (d5bcc <HAL_USART_Flush_Data+0xc>)
   d5bc4:	681b      	ldr	r3, [r3, #0]
   d5bc6:	69db      	ldr	r3, [r3, #28]
   d5bc8:	9301      	str	r3, [sp, #4]
   d5bca:	bd08      	pop	{r3, pc}
   d5bcc:	0003023c 	.word	0x0003023c

000d5bd0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5bd0:	b508      	push	{r3, lr}
   d5bd2:	4b02      	ldr	r3, [pc, #8]	; (d5bdc <HAL_USART_Is_Enabled+0xc>)
   d5bd4:	681b      	ldr	r3, [r3, #0]
   d5bd6:	6a1b      	ldr	r3, [r3, #32]
   d5bd8:	9301      	str	r3, [sp, #4]
   d5bda:	bd08      	pop	{r3, pc}
   d5bdc:	0003023c 	.word	0x0003023c

000d5be0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5be0:	b508      	push	{r3, lr}
   d5be2:	4b02      	ldr	r3, [pc, #8]	; (d5bec <HAL_USART_Available_Data_For_Write+0xc>)
   d5be4:	681b      	ldr	r3, [r3, #0]
   d5be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5be8:	9301      	str	r3, [sp, #4]
   d5bea:	bd08      	pop	{r3, pc}
   d5bec:	0003023c 	.word	0x0003023c

000d5bf0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5bf0:	b508      	push	{r3, lr}
   d5bf2:	4b02      	ldr	r3, [pc, #8]	; (d5bfc <HAL_I2C_Begin+0xc>)
   d5bf4:	681b      	ldr	r3, [r3, #0]
   d5bf6:	68db      	ldr	r3, [r3, #12]
   d5bf8:	9301      	str	r3, [sp, #4]
   d5bfa:	bd08      	pop	{r3, pc}
   d5bfc:	00030228 	.word	0x00030228

000d5c00 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5c00:	b508      	push	{r3, lr}
   d5c02:	4b02      	ldr	r3, [pc, #8]	; (d5c0c <HAL_I2C_Begin_Transmission+0xc>)
   d5c04:	681b      	ldr	r3, [r3, #0]
   d5c06:	699b      	ldr	r3, [r3, #24]
   d5c08:	9301      	str	r3, [sp, #4]
   d5c0a:	bd08      	pop	{r3, pc}
   d5c0c:	00030228 	.word	0x00030228

000d5c10 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5c10:	b508      	push	{r3, lr}
   d5c12:	4b02      	ldr	r3, [pc, #8]	; (d5c1c <HAL_I2C_End_Transmission+0xc>)
   d5c14:	681b      	ldr	r3, [r3, #0]
   d5c16:	69db      	ldr	r3, [r3, #28]
   d5c18:	9301      	str	r3, [sp, #4]
   d5c1a:	bd08      	pop	{r3, pc}
   d5c1c:	00030228 	.word	0x00030228

000d5c20 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5c20:	b508      	push	{r3, lr}
   d5c22:	4b02      	ldr	r3, [pc, #8]	; (d5c2c <HAL_I2C_Write_Data+0xc>)
   d5c24:	681b      	ldr	r3, [r3, #0]
   d5c26:	6a1b      	ldr	r3, [r3, #32]
   d5c28:	9301      	str	r3, [sp, #4]
   d5c2a:	bd08      	pop	{r3, pc}
   d5c2c:	00030228 	.word	0x00030228

000d5c30 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5c30:	b508      	push	{r3, lr}
   d5c32:	4b02      	ldr	r3, [pc, #8]	; (d5c3c <HAL_I2C_Available_Data+0xc>)
   d5c34:	681b      	ldr	r3, [r3, #0]
   d5c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5c38:	9301      	str	r3, [sp, #4]
   d5c3a:	bd08      	pop	{r3, pc}
   d5c3c:	00030228 	.word	0x00030228

000d5c40 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5c40:	b508      	push	{r3, lr}
   d5c42:	4b02      	ldr	r3, [pc, #8]	; (d5c4c <HAL_I2C_Read_Data+0xc>)
   d5c44:	681b      	ldr	r3, [r3, #0]
   d5c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c48:	9301      	str	r3, [sp, #4]
   d5c4a:	bd08      	pop	{r3, pc}
   d5c4c:	00030228 	.word	0x00030228

000d5c50 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5c50:	b508      	push	{r3, lr}
   d5c52:	4b02      	ldr	r3, [pc, #8]	; (d5c5c <HAL_I2C_Peek_Data+0xc>)
   d5c54:	681b      	ldr	r3, [r3, #0]
   d5c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c58:	9301      	str	r3, [sp, #4]
   d5c5a:	bd08      	pop	{r3, pc}
   d5c5c:	00030228 	.word	0x00030228

000d5c60 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5c60:	b508      	push	{r3, lr}
   d5c62:	4b02      	ldr	r3, [pc, #8]	; (d5c6c <HAL_I2C_Flush_Data+0xc>)
   d5c64:	681b      	ldr	r3, [r3, #0]
   d5c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c68:	9301      	str	r3, [sp, #4]
   d5c6a:	bd08      	pop	{r3, pc}
   d5c6c:	00030228 	.word	0x00030228

000d5c70 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5c70:	b508      	push	{r3, lr}
   d5c72:	4b02      	ldr	r3, [pc, #8]	; (d5c7c <HAL_I2C_Is_Enabled+0xc>)
   d5c74:	681b      	ldr	r3, [r3, #0]
   d5c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c78:	9301      	str	r3, [sp, #4]
   d5c7a:	bd08      	pop	{r3, pc}
   d5c7c:	00030228 	.word	0x00030228

000d5c80 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5c80:	b508      	push	{r3, lr}
   d5c82:	4b02      	ldr	r3, [pc, #8]	; (d5c8c <HAL_I2C_Init+0xc>)
   d5c84:	681b      	ldr	r3, [r3, #0]
   d5c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5c88:	9301      	str	r3, [sp, #4]
   d5c8a:	bd08      	pop	{r3, pc}
   d5c8c:	00030228 	.word	0x00030228

000d5c90 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5c90:	b508      	push	{r3, lr}
   d5c92:	4b02      	ldr	r3, [pc, #8]	; (d5c9c <HAL_I2C_Request_Data_Ex+0xc>)
   d5c94:	681b      	ldr	r3, [r3, #0]
   d5c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5c98:	9301      	str	r3, [sp, #4]
   d5c9a:	bd08      	pop	{r3, pc}
   d5c9c:	00030228 	.word	0x00030228

000d5ca0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5ca0:	b508      	push	{r3, lr}
   d5ca2:	4b02      	ldr	r3, [pc, #8]	; (d5cac <sock_setsockopt+0xc>)
   d5ca4:	681b      	ldr	r3, [r3, #0]
   d5ca6:	699b      	ldr	r3, [r3, #24]
   d5ca8:	9301      	str	r3, [sp, #4]
   d5caa:	bd08      	pop	{r3, pc}
   d5cac:	00030238 	.word	0x00030238

000d5cb0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5cb0:	b508      	push	{r3, lr}
   d5cb2:	4b02      	ldr	r3, [pc, #8]	; (d5cbc <sock_close+0xc>)
   d5cb4:	681b      	ldr	r3, [r3, #0]
   d5cb6:	69db      	ldr	r3, [r3, #28]
   d5cb8:	9301      	str	r3, [sp, #4]
   d5cba:	bd08      	pop	{r3, pc}
   d5cbc:	00030238 	.word	0x00030238

000d5cc0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5cc0:	b508      	push	{r3, lr}
   d5cc2:	4b02      	ldr	r3, [pc, #8]	; (d5ccc <sock_connect+0xc>)
   d5cc4:	681b      	ldr	r3, [r3, #0]
   d5cc6:	6a1b      	ldr	r3, [r3, #32]
   d5cc8:	9301      	str	r3, [sp, #4]
   d5cca:	bd08      	pop	{r3, pc}
   d5ccc:	00030238 	.word	0x00030238

000d5cd0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5cd0:	b508      	push	{r3, lr}
   d5cd2:	4b02      	ldr	r3, [pc, #8]	; (d5cdc <sock_recv+0xc>)
   d5cd4:	681b      	ldr	r3, [r3, #0]
   d5cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5cd8:	9301      	str	r3, [sp, #4]
   d5cda:	bd08      	pop	{r3, pc}
   d5cdc:	00030238 	.word	0x00030238

000d5ce0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5ce0:	b508      	push	{r3, lr}
   d5ce2:	4b02      	ldr	r3, [pc, #8]	; (d5cec <sock_send+0xc>)
   d5ce4:	681b      	ldr	r3, [r3, #0]
   d5ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ce8:	9301      	str	r3, [sp, #4]
   d5cea:	bd08      	pop	{r3, pc}
   d5cec:	00030238 	.word	0x00030238

000d5cf0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5cf0:	b508      	push	{r3, lr}
   d5cf2:	4b02      	ldr	r3, [pc, #8]	; (d5cfc <sock_socket+0xc>)
   d5cf4:	681b      	ldr	r3, [r3, #0]
   d5cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5cf8:	9301      	str	r3, [sp, #4]
   d5cfa:	bd08      	pop	{r3, pc}
   d5cfc:	00030238 	.word	0x00030238

000d5d00 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5d00:	b508      	push	{r3, lr}
   d5d02:	4b02      	ldr	r3, [pc, #8]	; (d5d0c <HAL_USB_USART_Init+0xc>)
   d5d04:	681b      	ldr	r3, [r3, #0]
   d5d06:	681b      	ldr	r3, [r3, #0]
   d5d08:	9301      	str	r3, [sp, #4]
   d5d0a:	bd08      	pop	{r3, pc}
   d5d0c:	0003024c 	.word	0x0003024c

000d5d10 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5d10:	b508      	push	{r3, lr}
   d5d12:	4b02      	ldr	r3, [pc, #8]	; (d5d1c <HAL_USB_USART_Available_Data+0xc>)
   d5d14:	681b      	ldr	r3, [r3, #0]
   d5d16:	691b      	ldr	r3, [r3, #16]
   d5d18:	9301      	str	r3, [sp, #4]
   d5d1a:	bd08      	pop	{r3, pc}
   d5d1c:	0003024c 	.word	0x0003024c

000d5d20 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5d20:	b508      	push	{r3, lr}
   d5d22:	4b02      	ldr	r3, [pc, #8]	; (d5d2c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5d24:	681b      	ldr	r3, [r3, #0]
   d5d26:	695b      	ldr	r3, [r3, #20]
   d5d28:	9301      	str	r3, [sp, #4]
   d5d2a:	bd08      	pop	{r3, pc}
   d5d2c:	0003024c 	.word	0x0003024c

000d5d30 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5d30:	b508      	push	{r3, lr}
   d5d32:	4b02      	ldr	r3, [pc, #8]	; (d5d3c <HAL_USB_USART_Receive_Data+0xc>)
   d5d34:	681b      	ldr	r3, [r3, #0]
   d5d36:	699b      	ldr	r3, [r3, #24]
   d5d38:	9301      	str	r3, [sp, #4]
   d5d3a:	bd08      	pop	{r3, pc}
   d5d3c:	0003024c 	.word	0x0003024c

000d5d40 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5d40:	b508      	push	{r3, lr}
   d5d42:	4b02      	ldr	r3, [pc, #8]	; (d5d4c <HAL_USB_USART_Send_Data+0xc>)
   d5d44:	681b      	ldr	r3, [r3, #0]
   d5d46:	69db      	ldr	r3, [r3, #28]
   d5d48:	9301      	str	r3, [sp, #4]
   d5d4a:	bd08      	pop	{r3, pc}
   d5d4c:	0003024c 	.word	0x0003024c

000d5d50 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5d50:	b508      	push	{r3, lr}
   d5d52:	4b02      	ldr	r3, [pc, #8]	; (d5d5c <HAL_USB_USART_Flush_Data+0xc>)
   d5d54:	681b      	ldr	r3, [r3, #0]
   d5d56:	6a1b      	ldr	r3, [r3, #32]
   d5d58:	9301      	str	r3, [sp, #4]
   d5d5a:	bd08      	pop	{r3, pc}
   d5d5c:	0003024c 	.word	0x0003024c

000d5d60 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5d60:	b508      	push	{r3, lr}
   d5d62:	4b02      	ldr	r3, [pc, #8]	; (d5d6c <panic_+0xc>)
   d5d64:	681b      	ldr	r3, [r3, #0]
   d5d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5d68:	9301      	str	r3, [sp, #4]
   d5d6a:	bd08      	pop	{r3, pc}
   d5d6c:	00030260 	.word	0x00030260

000d5d70 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5d70:	b508      	push	{r3, lr}
   d5d72:	4b02      	ldr	r3, [pc, #8]	; (d5d7c <log_message+0xc>)
   d5d74:	681b      	ldr	r3, [r3, #0]
   d5d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5d78:	9301      	str	r3, [sp, #4]
   d5d7a:	bd08      	pop	{r3, pc}
   d5d7c:	00030260 	.word	0x00030260

000d5d80 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5d80:	b508      	push	{r3, lr}
   d5d82:	4b02      	ldr	r3, [pc, #8]	; (d5d8c <set_system_mode+0xc>)
   d5d84:	681b      	ldr	r3, [r3, #0]
   d5d86:	685b      	ldr	r3, [r3, #4]
   d5d88:	9301      	str	r3, [sp, #4]
   d5d8a:	bd08      	pop	{r3, pc}
   d5d8c:	00030220 	.word	0x00030220

000d5d90 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5d90:	b508      	push	{r3, lr}
   d5d92:	4b02      	ldr	r3, [pc, #8]	; (d5d9c <system_delay_ms+0xc>)
   d5d94:	681b      	ldr	r3, [r3, #0]
   d5d96:	695b      	ldr	r3, [r3, #20]
   d5d98:	9301      	str	r3, [sp, #4]
   d5d9a:	bd08      	pop	{r3, pc}
   d5d9c:	00030220 	.word	0x00030220

000d5da0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5da0:	b508      	push	{r3, lr}
   d5da2:	4b03      	ldr	r3, [pc, #12]	; (d5db0 <system_ctrl_set_app_request_handler+0x10>)
   d5da4:	681b      	ldr	r3, [r3, #0]
   d5da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5daa:	9301      	str	r3, [sp, #4]
   d5dac:	bd08      	pop	{r3, pc}
   d5dae:	0000      	.short	0x0000
   d5db0:	00030220 	.word	0x00030220

000d5db4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5db4:	b508      	push	{r3, lr}
   d5db6:	4b03      	ldr	r3, [pc, #12]	; (d5dc4 <system_ctrl_set_result+0x10>)
   d5db8:	681b      	ldr	r3, [r3, #0]
   d5dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5dbe:	9301      	str	r3, [sp, #4]
   d5dc0:	bd08      	pop	{r3, pc}
   d5dc2:	0000      	.short	0x0000
   d5dc4:	00030220 	.word	0x00030220

000d5dc8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5dc8:	b508      	push	{r3, lr}
   d5dca:	4b02      	ldr	r3, [pc, #8]	; (d5dd4 <network_connect+0xc>)
   d5dcc:	681b      	ldr	r3, [r3, #0]
   d5dce:	685b      	ldr	r3, [r3, #4]
   d5dd0:	9301      	str	r3, [sp, #4]
   d5dd2:	bd08      	pop	{r3, pc}
   d5dd4:	00030240 	.word	0x00030240

000d5dd8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5dd8:	b508      	push	{r3, lr}
   d5dda:	4b02      	ldr	r3, [pc, #8]	; (d5de4 <network_connecting+0xc>)
   d5ddc:	681b      	ldr	r3, [r3, #0]
   d5dde:	689b      	ldr	r3, [r3, #8]
   d5de0:	9301      	str	r3, [sp, #4]
   d5de2:	bd08      	pop	{r3, pc}
   d5de4:	00030240 	.word	0x00030240

000d5de8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5de8:	b508      	push	{r3, lr}
   d5dea:	4b02      	ldr	r3, [pc, #8]	; (d5df4 <network_disconnect+0xc>)
   d5dec:	681b      	ldr	r3, [r3, #0]
   d5dee:	68db      	ldr	r3, [r3, #12]
   d5df0:	9301      	str	r3, [sp, #4]
   d5df2:	bd08      	pop	{r3, pc}
   d5df4:	00030240 	.word	0x00030240

000d5df8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5df8:	b508      	push	{r3, lr}
   d5dfa:	4b02      	ldr	r3, [pc, #8]	; (d5e04 <network_ready+0xc>)
   d5dfc:	681b      	ldr	r3, [r3, #0]
   d5dfe:	691b      	ldr	r3, [r3, #16]
   d5e00:	9301      	str	r3, [sp, #4]
   d5e02:	bd08      	pop	{r3, pc}
   d5e04:	00030240 	.word	0x00030240

000d5e08 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5e08:	b508      	push	{r3, lr}
   d5e0a:	4b02      	ldr	r3, [pc, #8]	; (d5e14 <network_on+0xc>)
   d5e0c:	681b      	ldr	r3, [r3, #0]
   d5e0e:	695b      	ldr	r3, [r3, #20]
   d5e10:	9301      	str	r3, [sp, #4]
   d5e12:	bd08      	pop	{r3, pc}
   d5e14:	00030240 	.word	0x00030240

000d5e18 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5e18:	b508      	push	{r3, lr}
   d5e1a:	4b02      	ldr	r3, [pc, #8]	; (d5e24 <network_off+0xc>)
   d5e1c:	681b      	ldr	r3, [r3, #0]
   d5e1e:	699b      	ldr	r3, [r3, #24]
   d5e20:	9301      	str	r3, [sp, #4]
   d5e22:	bd08      	pop	{r3, pc}
   d5e24:	00030240 	.word	0x00030240

000d5e28 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5e28:	b508      	push	{r3, lr}
   d5e2a:	4b02      	ldr	r3, [pc, #8]	; (d5e34 <network_listen+0xc>)
   d5e2c:	681b      	ldr	r3, [r3, #0]
   d5e2e:	69db      	ldr	r3, [r3, #28]
   d5e30:	9301      	str	r3, [sp, #4]
   d5e32:	bd08      	pop	{r3, pc}
   d5e34:	00030240 	.word	0x00030240

000d5e38 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5e38:	b508      	push	{r3, lr}
   d5e3a:	4b02      	ldr	r3, [pc, #8]	; (d5e44 <network_listening+0xc>)
   d5e3c:	681b      	ldr	r3, [r3, #0]
   d5e3e:	6a1b      	ldr	r3, [r3, #32]
   d5e40:	9301      	str	r3, [sp, #4]
   d5e42:	bd08      	pop	{r3, pc}
   d5e44:	00030240 	.word	0x00030240

000d5e48 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5e48:	b508      	push	{r3, lr}
   d5e4a:	4b02      	ldr	r3, [pc, #8]	; (d5e54 <network_set_listen_timeout+0xc>)
   d5e4c:	681b      	ldr	r3, [r3, #0]
   d5e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e50:	9301      	str	r3, [sp, #4]
   d5e52:	bd08      	pop	{r3, pc}
   d5e54:	00030240 	.word	0x00030240

000d5e58 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5e58:	b508      	push	{r3, lr}
   d5e5a:	4b02      	ldr	r3, [pc, #8]	; (d5e64 <network_get_listen_timeout+0xc>)
   d5e5c:	681b      	ldr	r3, [r3, #0]
   d5e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5e60:	9301      	str	r3, [sp, #4]
   d5e62:	bd08      	pop	{r3, pc}
   d5e64:	00030240 	.word	0x00030240

000d5e68 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5e68:	b508      	push	{r3, lr}
   d5e6a:	4b02      	ldr	r3, [pc, #8]	; (d5e74 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5e6c:	681b      	ldr	r3, [r3, #0]
   d5e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5e70:	9301      	str	r3, [sp, #4]
   d5e72:	bd08      	pop	{r3, pc}
   d5e74:	00030244 	.word	0x00030244

000d5e78 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5e78:	b508      	push	{r3, lr}
   d5e7a:	4b02      	ldr	r3, [pc, #8]	; (d5e84 <malloc+0xc>)
   d5e7c:	681b      	ldr	r3, [r3, #0]
   d5e7e:	681b      	ldr	r3, [r3, #0]
   d5e80:	9301      	str	r3, [sp, #4]
   d5e82:	bd08      	pop	{r3, pc}
   d5e84:	0003021c 	.word	0x0003021c

000d5e88 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5e88:	b508      	push	{r3, lr}
   d5e8a:	4b02      	ldr	r3, [pc, #8]	; (d5e94 <free+0xc>)
   d5e8c:	681b      	ldr	r3, [r3, #0]
   d5e8e:	685b      	ldr	r3, [r3, #4]
   d5e90:	9301      	str	r3, [sp, #4]
   d5e92:	bd08      	pop	{r3, pc}
   d5e94:	0003021c 	.word	0x0003021c

000d5e98 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5e98:	b508      	push	{r3, lr}
   d5e9a:	4b02      	ldr	r3, [pc, #8]	; (d5ea4 <vsnprintf+0xc>)
   d5e9c:	681b      	ldr	r3, [r3, #0]
   d5e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5ea0:	9301      	str	r3, [sp, #4]
   d5ea2:	bd08      	pop	{r3, pc}
   d5ea4:	0003021c 	.word	0x0003021c

000d5ea8 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5ea8:	b508      	push	{r3, lr}
   d5eaa:	4b02      	ldr	r3, [pc, #8]	; (d5eb4 <__errno+0xc>)
   d5eac:	681b      	ldr	r3, [r3, #0]
   d5eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5eb0:	9301      	str	r3, [sp, #4]
   d5eb2:	bd08      	pop	{r3, pc}
   d5eb4:	0003021c 	.word	0x0003021c

000d5eb8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5eb8:	2200      	movs	r2, #0
   d5eba:	4611      	mov	r1, r2
   d5ebc:	6840      	ldr	r0, [r0, #4]
   d5ebe:	f7ff bfbb 	b.w	d5e38 <network_listening>

000d5ec2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5ec2:	2200      	movs	r2, #0
   d5ec4:	4611      	mov	r1, r2
   d5ec6:	6840      	ldr	r0, [r0, #4]
   d5ec8:	f7ff bfc6 	b.w	d5e58 <network_get_listen_timeout>

000d5ecc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5ecc:	2200      	movs	r2, #0
   d5ece:	6840      	ldr	r0, [r0, #4]
   d5ed0:	f7ff bfba 	b.w	d5e48 <network_set_listen_timeout>

000d5ed4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5ed4:	2200      	movs	r2, #0
   d5ed6:	f081 0101 	eor.w	r1, r1, #1
   d5eda:	6840      	ldr	r0, [r0, #4]
   d5edc:	f7ff bfa4 	b.w	d5e28 <network_listen>

000d5ee0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5ee0:	2300      	movs	r3, #0
   d5ee2:	461a      	mov	r2, r3
   d5ee4:	4619      	mov	r1, r3
   d5ee6:	6840      	ldr	r0, [r0, #4]
   d5ee8:	f7ff bf96 	b.w	d5e18 <network_off>

000d5eec <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5eec:	2300      	movs	r3, #0
   d5eee:	461a      	mov	r2, r3
   d5ef0:	4619      	mov	r1, r3
   d5ef2:	6840      	ldr	r0, [r0, #4]
   d5ef4:	f7ff bf88 	b.w	d5e08 <network_on>

000d5ef8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ef8:	2200      	movs	r2, #0
   d5efa:	4611      	mov	r1, r2
   d5efc:	6840      	ldr	r0, [r0, #4]
   d5efe:	f7ff bf7b 	b.w	d5df8 <network_ready>

000d5f02 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5f02:	2200      	movs	r2, #0
   d5f04:	4611      	mov	r1, r2
   d5f06:	6840      	ldr	r0, [r0, #4]
   d5f08:	f7ff bf66 	b.w	d5dd8 <network_connecting>

000d5f0c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5f0c:	2200      	movs	r2, #0
   d5f0e:	2102      	movs	r1, #2
   d5f10:	6840      	ldr	r0, [r0, #4]
   d5f12:	f7ff bf69 	b.w	d5de8 <network_disconnect>

000d5f16 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5f16:	2300      	movs	r3, #0
   d5f18:	461a      	mov	r2, r3
   d5f1a:	6840      	ldr	r0, [r0, #4]
   d5f1c:	f7ff bf54 	b.w	d5dc8 <network_connect>

000d5f20 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5f20:	4b02      	ldr	r3, [pc, #8]	; (d5f2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5f22:	2203      	movs	r2, #3
   d5f24:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5f26:	4a02      	ldr	r2, [pc, #8]	; (d5f30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5f28:	601a      	str	r2, [r3, #0]
   d5f2a:	4770      	bx	lr
   d5f2c:	2003e3dc 	.word	0x2003e3dc
   d5f30:	000d8900 	.word	0x000d8900

000d5f34 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d5f34:	2100      	movs	r1, #0
   d5f36:	f7ff bdab 	b.w	d5a90 <HAL_SPI_Acquire>

000d5f3a <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d5f3a:	2100      	movs	r1, #0
   d5f3c:	f7ff bdb0 	b.w	d5aa0 <HAL_SPI_Release>

000d5f40 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5f40:	b510      	push	{r4, lr}
   d5f42:	4604      	mov	r4, r0
{
    _spi = spi;
   d5f44:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d5f46:	4608      	mov	r0, r1
   d5f48:	f7ff fd82 	bl	d5a50 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5f4c:	2300      	movs	r3, #0
   d5f4e:	6063      	str	r3, [r4, #4]
}
   d5f50:	4620      	mov	r0, r4
   d5f52:	bd10      	pop	{r4, pc}

000d5f54 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5f54:	b510      	push	{r4, lr}
   d5f56:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5f58:	7800      	ldrb	r0, [r0, #0]
   d5f5a:	f7ff ffeb 	bl	d5f34 <_ZN8SPIClass4lockEv.isra.0>
   d5f5e:	b948      	cbnz	r0, d5f74 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5f60:	7820      	ldrb	r0, [r4, #0]
   d5f62:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5f66:	f7ff fd4b 	bl	d5a00 <HAL_SPI_Begin>
        unlock();
   d5f6a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d5f70:	f7ff bfe3 	b.w	d5f3a <_ZN8SPIClass6unlockEv.isra.1>
   d5f74:	bd10      	pop	{r4, pc}

000d5f76 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5f76:	b538      	push	{r3, r4, r5, lr}
   d5f78:	4604      	mov	r4, r0
    if (!lock())
   d5f7a:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5f7c:	460d      	mov	r5, r1
    if (!lock())
   d5f7e:	f7ff ffd9 	bl	d5f34 <_ZN8SPIClass4lockEv.isra.0>
   d5f82:	b940      	cbnz	r0, d5f96 <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d5f84:	7820      	ldrb	r0, [r4, #0]
   d5f86:	4629      	mov	r1, r5
   d5f88:	f7ff fd42 	bl	d5a10 <HAL_SPI_Set_Bit_Order>
        unlock();
   d5f8c:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d5f92:	f7ff bfd2 	b.w	d5f3a <_ZN8SPIClass6unlockEv.isra.1>
   d5f96:	bd38      	pop	{r3, r4, r5, pc}

000d5f98 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5f98:	b538      	push	{r3, r4, r5, lr}
   d5f9a:	4604      	mov	r4, r0
    if (!lock())
   d5f9c:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5f9e:	460d      	mov	r5, r1
    if (!lock())
   d5fa0:	f7ff ffc8 	bl	d5f34 <_ZN8SPIClass4lockEv.isra.0>
   d5fa4:	b940      	cbnz	r0, d5fb8 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d5fa6:	7820      	ldrb	r0, [r4, #0]
   d5fa8:	4629      	mov	r1, r5
   d5faa:	f7ff fd39 	bl	d5a20 <HAL_SPI_Set_Data_Mode>
        unlock();
   d5fae:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d5fb4:	f7ff bfc1 	b.w	d5f3a <_ZN8SPIClass6unlockEv.isra.1>
   d5fb8:	bd38      	pop	{r3, r4, r5, pc}

000d5fba <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5fba:	7800      	ldrb	r0, [r0, #0]
   d5fbc:	f7ff bfbd 	b.w	d5f3a <_ZN8SPIClass6unlockEv.isra.1>

000d5fc0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5fc0:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d5fc2:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5fc4:	6018      	str	r0, [r3, #0]
   d5fc6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5fc8:	6818      	ldr	r0, [r3, #0]
   d5fca:	4288      	cmp	r0, r1
   d5fcc:	b2e5      	uxtb	r5, r4
   d5fce:	d906      	bls.n	d5fde <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5fd0:	3401      	adds	r4, #1
   d5fd2:	2c08      	cmp	r4, #8
   d5fd4:	d002      	beq.n	d5fdc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5fd6:	0840      	lsrs	r0, r0, #1
   d5fd8:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5fda:	e7f5      	b.n	d5fc8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5fdc:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5fde:	4b02      	ldr	r3, [pc, #8]	; (d5fe8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5fe0:	5d5b      	ldrb	r3, [r3, r5]
   d5fe2:	7013      	strb	r3, [r2, #0]
   d5fe4:	bd30      	pop	{r4, r5, pc}
   d5fe6:	bf00      	nop
   d5fe8:	000d892c 	.word	0x000d892c

000d5fec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5ff0:	4607      	mov	r7, r0
   d5ff2:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d5ff4:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5ff6:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d5ff8:	f7ff ff9c 	bl	d5f34 <_ZN8SPIClass4lockEv.isra.0>
   d5ffc:	2800      	cmp	r0, #0
   d5ffe:	db62      	blt.n	d60c6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d6000:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d6002:	2214      	movs	r2, #20
   d6004:	2100      	movs	r1, #0
   d6006:	a809      	add	r0, sp, #36	; 0x24
   d6008:	f001 ff43 	bl	d7e92 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d600c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d600e:	4620      	mov	r0, r4
   d6010:	2200      	movs	r2, #0
   d6012:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6014:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d6018:	f7ff fd2a 	bl	d5a70 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d601c:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d6020:	b154      	cbz	r4, d6038 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d6022:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d6026:	b935      	cbnz	r5, d6036 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d6028:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d602c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6030:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d6034:	e003      	b.n	d603e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d6036:	2400      	movs	r4, #0
   d6038:	46a1      	mov	r9, r4
   d603a:	46a0      	mov	r8, r4
   d603c:	2501      	movs	r5, #1
   d603e:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6040:	b105      	cbz	r5, d6044 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d6042:	b9bb      	cbnz	r3, d6074 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d6044:	429d      	cmp	r5, r3
   d6046:	d10b      	bne.n	d6060 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d6048:	68b2      	ldr	r2, [r6, #8]
   d604a:	4542      	cmp	r2, r8
   d604c:	d108      	bne.n	d6060 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d604e:	f88d 9020 	strb.w	r9, [sp, #32]
   d6052:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6056:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d605a:	89b2      	ldrh	r2, [r6, #12]
   d605c:	4291      	cmp	r1, r2
   d605e:	d009      	beq.n	d6074 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d6060:	b153      	cbz	r3, d6078 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d6062:	2400      	movs	r4, #0
   d6064:	7838      	ldrb	r0, [r7, #0]
   d6066:	9401      	str	r4, [sp, #4]
   d6068:	9400      	str	r4, [sp, #0]
   d606a:	4623      	mov	r3, r4
   d606c:	4622      	mov	r2, r4
   d606e:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6070:	f7ff fd06 	bl	d5a80 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d6074:	2000      	movs	r0, #0
   d6076:	e026      	b.n	d60c6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d6078:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d607c:	68b1      	ldr	r1, [r6, #8]
   d607e:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6080:	ab04      	add	r3, sp, #16
   d6082:	f10d 020f 	add.w	r2, sp, #15
   d6086:	f7ff ff9b 	bl	d5fc0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d608a:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d608c:	b105      	cbz	r5, d6090 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d608e:	b9b1      	cbnz	r1, d60be <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d6090:	42a9      	cmp	r1, r5
   d6092:	d008      	beq.n	d60a6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6094:	2400      	movs	r4, #0
   d6096:	7838      	ldrb	r0, [r7, #0]
   d6098:	9401      	str	r4, [sp, #4]
   d609a:	7b74      	ldrb	r4, [r6, #13]
   d609c:	7b33      	ldrb	r3, [r6, #12]
   d609e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d60a2:	9400      	str	r4, [sp, #0]
   d60a4:	e7e4      	b.n	d6070 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d60a6:	68b3      	ldr	r3, [r6, #8]
   d60a8:	4543      	cmp	r3, r8
   d60aa:	d3f3      	bcc.n	d6094 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d60ac:	f88d 9020 	strb.w	r9, [sp, #32]
   d60b0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d60b4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d60b8:	89b3      	ldrh	r3, [r6, #12]
   d60ba:	429a      	cmp	r2, r3
   d60bc:	d1ea      	bne.n	d6094 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d60be:	9b04      	ldr	r3, [sp, #16]
   d60c0:	4543      	cmp	r3, r8
   d60c2:	d1e7      	bne.n	d6094 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d60c4:	e7d6      	b.n	d6074 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d60c6:	b00f      	add	sp, #60	; 0x3c
   d60c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d60cc <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d60cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d60d0:	b088      	sub	sp, #32
    unsigned clock = 0;
   d60d2:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d60d4:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d60d6:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d60d8:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d60da:	460e      	mov	r6, r1
   d60dc:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d60de:	f7ff ff29 	bl	d5f34 <_ZN8SPIClass4lockEv.isra.0>
   d60e2:	4605      	mov	r5, r0
   d60e4:	bb00      	cbnz	r0, d6128 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d60e6:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d60ea:	4601      	mov	r1, r0
   d60ec:	2214      	movs	r2, #20
   d60ee:	a803      	add	r0, sp, #12
   d60f0:	f001 fecf 	bl	d7e92 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d60f4:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d60f6:	462a      	mov	r2, r5
   d60f8:	a903      	add	r1, sp, #12
   d60fa:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d60fc:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d6100:	f7ff fcb6 	bl	d5a70 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6104:	ab02      	add	r3, sp, #8
   d6106:	f10d 0207 	add.w	r2, sp, #7
   d610a:	fb07 f106 	mul.w	r1, r7, r6
   d610e:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d6110:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6114:	f7ff ff54 	bl	d5fc0 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d6118:	7820      	ldrb	r0, [r4, #0]
   d611a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d611e:	f7ff fc87 	bl	d5a30 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d6122:	7820      	ldrb	r0, [r4, #0]
   d6124:	f7ff ff09 	bl	d5f3a <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d6128:	9802      	ldr	r0, [sp, #8]
   d612a:	b008      	add	sp, #32
   d612c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6130 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6130:	b538      	push	{r3, r4, r5, lr}
   d6132:	4604      	mov	r4, r0
    if (!lock())
   d6134:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6136:	460d      	mov	r5, r1
    if (!lock())
   d6138:	f7ff fefc 	bl	d5f34 <_ZN8SPIClass4lockEv.isra.0>
   d613c:	b9c8      	cbnz	r0, d6172 <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d613e:	6861      	ldr	r1, [r4, #4]
   d6140:	b171      	cbz	r1, d6160 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d6142:	4b0c      	ldr	r3, [pc, #48]	; (d6174 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d6144:	5cc2      	ldrb	r2, [r0, r3]
   d6146:	42aa      	cmp	r2, r5
   d6148:	d002      	beq.n	d6150 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d614a:	3001      	adds	r0, #1
   d614c:	2808      	cmp	r0, #8
   d614e:	d1f9      	bne.n	d6144 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d6150:	3001      	adds	r0, #1
   d6152:	b2c0      	uxtb	r0, r0
   d6154:	40c1      	lsrs	r1, r0
   d6156:	2201      	movs	r2, #1
   d6158:	4620      	mov	r0, r4
   d615a:	f7ff ffb7 	bl	d60cc <_ZN8SPIClass13setClockSpeedEjj>
   d615e:	e003      	b.n	d6168 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6160:	4629      	mov	r1, r5
   d6162:	7820      	ldrb	r0, [r4, #0]
   d6164:	f7ff fc64 	bl	d5a30 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d6168:	7820      	ldrb	r0, [r4, #0]
    }
}
   d616a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d616e:	f7ff bee4 	b.w	d5f3a <_ZN8SPIClass6unlockEv.isra.1>
   d6172:	bd38      	pop	{r3, r4, r5, pc}
   d6174:	000d892c 	.word	0x000d892c

000d6178 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6178:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d617a:	7800      	ldrb	r0, [r0, #0]
   d617c:	f7ff fc60 	bl	d5a40 <HAL_SPI_Send_Receive_Data>
}
   d6180:	b2c0      	uxtb	r0, r0
   d6182:	bd08      	pop	{r3, pc}

000d6184 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6184:	7800      	ldrb	r0, [r0, #0]
   d6186:	f7ff bc6b 	b.w	d5a60 <HAL_SPI_Is_Enabled>

000d618a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d618a:	b510      	push	{r4, lr}
   d618c:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d618e:	6800      	ldr	r0, [r0, #0]
   d6190:	b118      	cbz	r0, d619a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6192:	f7ff fe79 	bl	d5e88 <free>
            wakeupSource_ = nullptr;
   d6196:	2300      	movs	r3, #0
   d6198:	6023      	str	r3, [r4, #0]
   d619a:	bd10      	pop	{r4, pc}

000d619c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d619c:	b510      	push	{r4, lr}
   d619e:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d61a0:	f7ff fff3 	bl	d618a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d61a4:	4620      	mov	r0, r4
   d61a6:	bd10      	pop	{r4, pc}

000d61a8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d61a8:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d61aa:	4c09      	ldr	r4, [pc, #36]	; (d61d0 <_GLOBAL__sub_I_System+0x28>)
   d61ac:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d61ae:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d61b2:	6020      	str	r0, [r4, #0]
   d61b4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d61b6:	71a0      	strb	r0, [r4, #6]
   d61b8:	8120      	strh	r0, [r4, #8]
   d61ba:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d61bc:	f7ff fde0 	bl	d5d80 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d61c0:	4620      	mov	r0, r4
   d61c2:	4a04      	ldr	r2, [pc, #16]	; (d61d4 <_GLOBAL__sub_I_System+0x2c>)
   d61c4:	4904      	ldr	r1, [pc, #16]	; (d61d8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d61c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d61ca:	f001 b8c5 	b.w	d7358 <__aeabi_atexit>
   d61ce:	bf00      	nop
   d61d0:	2003e3e4 	.word	0x2003e3e4
   d61d4:	2003e1dc 	.word	0x2003e1dc
   d61d8:	000d619d 	.word	0x000d619d

000d61dc <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d61dc:	b510      	push	{r4, lr}
   d61de:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d61e0:	6800      	ldr	r0, [r0, #0]
   d61e2:	b108      	cbz	r0, d61e8 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d61e4:	f7ff fca4 	bl	d5b30 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d61e8:	4620      	mov	r0, r4
   d61ea:	bd10      	pop	{r4, pc}

000d61ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d61ec:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d61ee:	4c06      	ldr	r4, [pc, #24]	; (d6208 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d61f0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d61f2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d61f4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d61f6:	f7ff fc93 	bl	d5b20 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d61fa:	4620      	mov	r0, r4
   d61fc:	4a03      	ldr	r2, [pc, #12]	; (d620c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d61fe:	4904      	ldr	r1, [pc, #16]	; (d6210 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6204:	f001 b8a8 	b.w	d7358 <__aeabi_atexit>
   d6208:	2003e3f0 	.word	0x2003e3f0
   d620c:	2003e1dc 	.word	0x2003e1dc
   d6210:	000d61dd 	.word	0x000d61dd

000d6214 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6216:	4606      	mov	r6, r0
   d6218:	460d      	mov	r5, r1
   d621a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d621c:	2400      	movs	r4, #0
  while (size--) {
   d621e:	42bd      	cmp	r5, r7
   d6220:	d00c      	beq.n	d623c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6222:	6833      	ldr	r3, [r6, #0]
   d6224:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6228:	689b      	ldr	r3, [r3, #8]
   d622a:	4630      	mov	r0, r6
   d622c:	4798      	blx	r3
     if (chunk>=0)
   d622e:	2800      	cmp	r0, #0
   d6230:	db01      	blt.n	d6236 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6232:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6234:	e7f3      	b.n	d621e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6236:	2c00      	cmp	r4, #0
   d6238:	bf08      	it	eq
   d623a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d623c:	4620      	mov	r0, r4
   d623e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6240 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6240:	b570      	push	{r4, r5, r6, lr}
   d6242:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6244:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6246:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6248:	b149      	cbz	r1, d625e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d624a:	f001 fe5b 	bl	d7f04 <strlen>
   d624e:	682b      	ldr	r3, [r5, #0]
   d6250:	4602      	mov	r2, r0
   d6252:	4621      	mov	r1, r4
   d6254:	4628      	mov	r0, r5
   d6256:	68db      	ldr	r3, [r3, #12]
    }
   d6258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d625c:	4718      	bx	r3
    }
   d625e:	bd70      	pop	{r4, r5, r6, pc}

000d6260 <_ZN5Print5printEPKc>:
   d6260:	b508      	push	{r3, lr}
   d6262:	f7ff ffed 	bl	d6240 <_ZN5Print5writeEPKc>
   d6266:	bd08      	pop	{r3, pc}

000d6268 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6268:	6803      	ldr	r3, [r0, #0]
   d626a:	689b      	ldr	r3, [r3, #8]
   d626c:	4718      	bx	r3

000d626e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d626e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6270:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6272:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6274:	f7ff fff8 	bl	d6268 <_ZN5Print5printEc>
  n += print('\n');
   d6278:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d627a:	4604      	mov	r4, r0
  n += print('\n');
   d627c:	4628      	mov	r0, r5
   d627e:	f7ff fff3 	bl	d6268 <_ZN5Print5printEc>
  return n;
}
   d6282:	4420      	add	r0, r4
   d6284:	bd38      	pop	{r3, r4, r5, pc}

000d6286 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6286:	b538      	push	{r3, r4, r5, lr}
   d6288:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d628a:	f7ff ffd9 	bl	d6240 <_ZN5Print5writeEPKc>
   d628e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6290:	4628      	mov	r0, r5
   d6292:	f7ff ffec 	bl	d626e <_ZN5Print7printlnEv>
  return n;
}
   d6296:	4420      	add	r0, r4
   d6298:	bd38      	pop	{r3, r4, r5, pc}

000d629a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d629a:	b530      	push	{r4, r5, lr}
   d629c:	b08b      	sub	sp, #44	; 0x2c
   d629e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d62a0:	2100      	movs	r1, #0
   d62a2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d62a6:	2a01      	cmp	r2, #1
   d62a8:	bf98      	it	ls
   d62aa:	220a      	movls	r2, #10
   d62ac:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d62b0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d62b4:	fb05 3312 	mls	r3, r5, r2, r3
   d62b8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d62bc:	2b09      	cmp	r3, #9
   d62be:	bf94      	ite	ls
   d62c0:	3330      	addls	r3, #48	; 0x30
   d62c2:	3337      	addhi	r3, #55	; 0x37
   d62c4:	b2db      	uxtb	r3, r3
   d62c6:	4621      	mov	r1, r4
   d62c8:	f804 3901 	strb.w	r3, [r4], #-1
   d62cc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d62ce:	2d00      	cmp	r5, #0
   d62d0:	d1ee      	bne.n	d62b0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d62d2:	f7ff ffb5 	bl	d6240 <_ZN5Print5writeEPKc>
}
   d62d6:	b00b      	add	sp, #44	; 0x2c
   d62d8:	bd30      	pop	{r4, r5, pc}

000d62da <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d62da:	b40c      	push	{r2, r3}
   d62dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d62e0:	b087      	sub	sp, #28
   d62e2:	af00      	add	r7, sp, #0
   d62e4:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d62e8:	4605      	mov	r5, r0
   d62ea:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d62ee:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d62f0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d62f2:	4623      	mov	r3, r4
   d62f4:	464a      	mov	r2, r9
   d62f6:	2114      	movs	r1, #20
   d62f8:	1d38      	adds	r0, r7, #4
   d62fa:	f7ff fdcd 	bl	d5e98 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d62fe:	2813      	cmp	r0, #19
   d6300:	d805      	bhi.n	d630e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6302:	1d39      	adds	r1, r7, #4
   d6304:	4628      	mov	r0, r5
   d6306:	f7ff ff9b 	bl	d6240 <_ZN5Print5writeEPKc>
   d630a:	4604      	mov	r4, r0
   d630c:	e013      	b.n	d6336 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d630e:	f100 0308 	add.w	r3, r0, #8
   d6312:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6316:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6318:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d631c:	1c41      	adds	r1, r0, #1
   d631e:	4623      	mov	r3, r4
   d6320:	464a      	mov	r2, r9
   d6322:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6324:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6326:	f7ff fdb7 	bl	d5e98 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d632a:	4669      	mov	r1, sp
   d632c:	4628      	mov	r0, r5
   d632e:	f7ff ff87 	bl	d6240 <_ZN5Print5writeEPKc>
   d6332:	4604      	mov	r4, r0
   d6334:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6336:	b11e      	cbz	r6, d6340 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6338:	4628      	mov	r0, r5
   d633a:	f7ff ff98 	bl	d626e <_ZN5Print7printlnEv>
   d633e:	4404      	add	r4, r0
    return n;
}
   d6340:	4620      	mov	r0, r4
   d6342:	371c      	adds	r7, #28
   d6344:	46bd      	mov	sp, r7
   d6346:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d634a:	b002      	add	sp, #8
   d634c:	4770      	bx	lr
	...

000d6350 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6350:	4b01      	ldr	r3, [pc, #4]	; (d6358 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6352:	4a02      	ldr	r2, [pc, #8]	; (d635c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6354:	601a      	str	r2, [r3, #0]
   d6356:	4770      	bx	lr
   d6358:	2003e3f4 	.word	0x2003e3f4
   d635c:	000d89a7 	.word	0x000d89a7

000d6360 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6360:	4b02      	ldr	r3, [pc, #8]	; (d636c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6362:	681a      	ldr	r2, [r3, #0]
   d6364:	4b02      	ldr	r3, [pc, #8]	; (d6370 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6366:	601a      	str	r2, [r3, #0]
   d6368:	4770      	bx	lr
   d636a:	bf00      	nop
   d636c:	2003e174 	.word	0x2003e174
   d6370:	2003e3f8 	.word	0x2003e3f8

000d6374 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6374:	2100      	movs	r1, #0
   d6376:	f7ff bd0b 	b.w	d5d90 <system_delay_ms>

000d637a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d637a:	b510      	push	{r4, lr}
   d637c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d637e:	f7fe fb3b 	bl	d49f8 <_ZNSt14_Function_baseD1Ev>
   d6382:	4620      	mov	r0, r4
   d6384:	bd10      	pop	{r4, pc}
	...

000d6388 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6388:	4803      	ldr	r0, [pc, #12]	; (d6398 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d638a:	4a04      	ldr	r2, [pc, #16]	; (d639c <_GLOBAL__sub_I_RGB+0x14>)
   d638c:	4904      	ldr	r1, [pc, #16]	; (d63a0 <_GLOBAL__sub_I_RGB+0x18>)
   d638e:	2300      	movs	r3, #0
   d6390:	6083      	str	r3, [r0, #8]
   d6392:	f000 bfe1 	b.w	d7358 <__aeabi_atexit>
   d6396:	bf00      	nop
   d6398:	2003e3fc 	.word	0x2003e3fc
   d639c:	2003e1dc 	.word	0x2003e1dc
   d63a0:	000d637b 	.word	0x000d637b

000d63a4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d63a4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d63a6:	4b0c      	ldr	r3, [pc, #48]	; (d63d8 <serialEventRun+0x34>)
   d63a8:	b133      	cbz	r3, d63b8 <serialEventRun+0x14>
   d63aa:	f000 f969 	bl	d6680 <_Z16_fetch_usbserialv>
   d63ae:	6803      	ldr	r3, [r0, #0]
   d63b0:	691b      	ldr	r3, [r3, #16]
   d63b2:	4798      	blx	r3
   d63b4:	2800      	cmp	r0, #0
   d63b6:	dc09      	bgt.n	d63cc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d63b8:	4b08      	ldr	r3, [pc, #32]	; (d63dc <serialEventRun+0x38>)
   d63ba:	b163      	cbz	r3, d63d6 <serialEventRun+0x32>
   d63bc:	f000 f9e2 	bl	d6784 <_Z22__fetch_global_Serial1v>
   d63c0:	6803      	ldr	r3, [r0, #0]
   d63c2:	691b      	ldr	r3, [r3, #16]
   d63c4:	4798      	blx	r3
   d63c6:	2800      	cmp	r0, #0
   d63c8:	dc03      	bgt.n	d63d2 <serialEventRun+0x2e>
   d63ca:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d63cc:	f3af 8000 	nop.w
   d63d0:	e7f2      	b.n	d63b8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d63d2:	f3af 8000 	nop.w
   d63d6:	bd08      	pop	{r3, pc}
	...

000d63e0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d63e0:	b508      	push	{r3, lr}
	serialEventRun();
   d63e2:	f7ff ffdf 	bl	d63a4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d63e6:	f7ff fb7b 	bl	d5ae0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d63ea:	4b01      	ldr	r3, [pc, #4]	; (d63f0 <_post_loop+0x10>)
   d63ec:	6018      	str	r0, [r3, #0]
   d63ee:	bd08      	pop	{r3, pc}
   d63f0:	2003e730 	.word	0x2003e730

000d63f4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d63f4:	4802      	ldr	r0, [pc, #8]	; (d6400 <_Z33system_initialize_user_backup_ramv+0xc>)
   d63f6:	4a03      	ldr	r2, [pc, #12]	; (d6404 <_Z33system_initialize_user_backup_ramv+0x10>)
   d63f8:	4903      	ldr	r1, [pc, #12]	; (d6408 <_Z33system_initialize_user_backup_ramv+0x14>)
   d63fa:	1a12      	subs	r2, r2, r0
   d63fc:	f001 bd3e 	b.w	d7e7c <memcpy>
   d6400:	2003f400 	.word	0x2003f400
   d6404:	2003f404 	.word	0x2003f404
   d6408:	000d8cb0 	.word	0x000d8cb0

000d640c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d640c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d640e:	2300      	movs	r3, #0
   d6410:	9300      	str	r3, [sp, #0]
   d6412:	461a      	mov	r2, r3
   d6414:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6418:	f7ff fccc 	bl	d5db4 <system_ctrl_set_result>
}
   d641c:	b003      	add	sp, #12
   d641e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6424 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6424:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6426:	8843      	ldrh	r3, [r0, #2]
   d6428:	2b0a      	cmp	r3, #10
   d642a:	d008      	beq.n	d643e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d642c:	2b50      	cmp	r3, #80	; 0x50
   d642e:	d109      	bne.n	d6444 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6430:	4b09      	ldr	r3, [pc, #36]	; (d6458 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6432:	681b      	ldr	r3, [r3, #0]
   d6434:	b13b      	cbz	r3, d6446 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6436:	b003      	add	sp, #12
   d6438:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d643c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d643e:	f7ff ffe5 	bl	d640c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6442:	e006      	b.n	d6452 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6444:	2300      	movs	r3, #0
   d6446:	9300      	str	r3, [sp, #0]
   d6448:	461a      	mov	r2, r3
   d644a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d644e:	f7ff fcb1 	bl	d5db4 <system_ctrl_set_result>
        break;
    }
}
   d6452:	b003      	add	sp, #12
   d6454:	f85d fb04 	ldr.w	pc, [sp], #4
   d6458:	2003e40c 	.word	0x2003e40c

000d645c <module_user_init_hook>:

void module_user_init_hook()
{
   d645c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d645e:	4c10      	ldr	r4, [pc, #64]	; (d64a0 <module_user_init_hook+0x44>)
   d6460:	4d10      	ldr	r5, [pc, #64]	; (d64a4 <module_user_init_hook+0x48>)
   d6462:	6823      	ldr	r3, [r4, #0]
   d6464:	42ab      	cmp	r3, r5
   d6466:	4b10      	ldr	r3, [pc, #64]	; (d64a8 <module_user_init_hook+0x4c>)
   d6468:	bf0c      	ite	eq
   d646a:	2201      	moveq	r2, #1
   d646c:	2200      	movne	r2, #0
   d646e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6470:	d002      	beq.n	d6478 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6472:	f7ff ffbf 	bl	d63f4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6476:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6478:	f7ff fb22 	bl	d5ac0 <HAL_RNG_GetRandomNumber>
   d647c:	4604      	mov	r4, r0
    srand(seed);
   d647e:	f001 fd11 	bl	d7ea4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6482:	4b0a      	ldr	r3, [pc, #40]	; (d64ac <module_user_init_hook+0x50>)
   d6484:	b113      	cbz	r3, d648c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d6486:	4620      	mov	r0, r4
   d6488:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d648c:	2100      	movs	r1, #0
   d648e:	4807      	ldr	r0, [pc, #28]	; (d64ac <module_user_init_hook+0x50>)
   d6490:	f7ff fcea 	bl	d5e68 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6494:	2100      	movs	r1, #0
   d6496:	4806      	ldr	r0, [pc, #24]	; (d64b0 <module_user_init_hook+0x54>)
}
   d6498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d649c:	f7ff bc80 	b.w	d5da0 <system_ctrl_set_app_request_handler>
   d64a0:	2003f400 	.word	0x2003f400
   d64a4:	9a271c1e 	.word	0x9a271c1e
   d64a8:	2003e410 	.word	0x2003e410
   d64ac:	00000000 	.word	0x00000000
   d64b0:	000d6425 	.word	0x000d6425

000d64b4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d64b4:	4770      	bx	lr

000d64b6 <_ZN9IPAddressD0Ev>:
   d64b6:	b510      	push	{r4, lr}
   d64b8:	2118      	movs	r1, #24
   d64ba:	4604      	mov	r4, r0
   d64bc:	f000 ff5a 	bl	d7374 <_ZdlPvj>
   d64c0:	4620      	mov	r0, r4
   d64c2:	bd10      	pop	{r4, pc}

000d64c4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d64c4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d64c6:	7d03      	ldrb	r3, [r0, #20]
   d64c8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d64ca:	b08d      	sub	sp, #52	; 0x34
   d64cc:	460e      	mov	r6, r1
   d64ce:	f100 0704 	add.w	r7, r0, #4
   d64d2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d64d6:	d002      	beq.n	d64de <_ZNK9IPAddress7printToER5Print+0x1a>
   d64d8:	f100 0508 	add.w	r5, r0, #8
   d64dc:	e018      	b.n	d6510 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d64de:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d64e0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d64e2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d64e6:	232f      	movs	r3, #47	; 0x2f
   d64e8:	462a      	mov	r2, r5
   d64ea:	200a      	movs	r0, #10
   d64ec:	f7ff fb28 	bl	d5b40 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d64f0:	4628      	mov	r0, r5
   d64f2:	f001 fd07 	bl	d7f04 <strlen>
   d64f6:	6833      	ldr	r3, [r6, #0]
   d64f8:	4602      	mov	r2, r0
   d64fa:	68db      	ldr	r3, [r3, #12]
   d64fc:	4629      	mov	r1, r5
   d64fe:	4630      	mov	r0, r6
   d6500:	4798      	blx	r3
   d6502:	e00f      	b.n	d6524 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6504:	b124      	cbz	r4, d6510 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6506:	212e      	movs	r1, #46	; 0x2e
   d6508:	4630      	mov	r0, r6
   d650a:	f7ff fead 	bl	d6268 <_ZN5Print5printEc>
   d650e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6510:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6514:	220a      	movs	r2, #10
   d6516:	4630      	mov	r0, r6
   d6518:	f7ff febf 	bl	d629a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d651c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d651e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6520:	d1f0      	bne.n	d6504 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6522:	4620      	mov	r0, r4
    }
    return n;
}
   d6524:	b00d      	add	sp, #52	; 0x34
   d6526:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6528 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6528:	b510      	push	{r4, lr}
   d652a:	4b05      	ldr	r3, [pc, #20]	; (d6540 <_ZN9IPAddressC1Ev+0x18>)
   d652c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d652e:	2211      	movs	r2, #17
   d6530:	f840 3b04 	str.w	r3, [r0], #4
   d6534:	2100      	movs	r1, #0
   d6536:	f001 fcac 	bl	d7e92 <memset>
{
    clear();
}
   d653a:	4620      	mov	r0, r4
   d653c:	bd10      	pop	{r4, pc}
   d653e:	bf00      	nop
   d6540:	000d8a38 	.word	0x000d8a38

000d6544 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6544:	4603      	mov	r3, r0
   d6546:	4a07      	ldr	r2, [pc, #28]	; (d6564 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6548:	b510      	push	{r4, lr}
   d654a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d654e:	f101 0210 	add.w	r2, r1, #16
   d6552:	f851 4b04 	ldr.w	r4, [r1], #4
   d6556:	f843 4b04 	str.w	r4, [r3], #4
   d655a:	4291      	cmp	r1, r2
   d655c:	d1f9      	bne.n	d6552 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d655e:	780a      	ldrb	r2, [r1, #0]
   d6560:	701a      	strb	r2, [r3, #0]
}
   d6562:	bd10      	pop	{r4, pc}
   d6564:	000d8a38 	.word	0x000d8a38

000d6568 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d6568:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d656a:	2b04      	cmp	r3, #4
   d656c:	d101      	bne.n	d6572 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d656e:	6840      	ldr	r0, [r0, #4]
   d6570:	e008      	b.n	d6584 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d6572:	2b06      	cmp	r3, #6
   d6574:	d10a      	bne.n	d658c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6576:	6843      	ldr	r3, [r0, #4]
   d6578:	b953      	cbnz	r3, d6590 <_ZNK9IPAddresscvbEv+0x28>
   d657a:	6883      	ldr	r3, [r0, #8]
   d657c:	b943      	cbnz	r3, d6590 <_ZNK9IPAddresscvbEv+0x28>
   d657e:	68c3      	ldr	r3, [r0, #12]
   d6580:	b933      	cbnz	r3, d6590 <_ZNK9IPAddresscvbEv+0x28>
   d6582:	6900      	ldr	r0, [r0, #16]
   d6584:	3000      	adds	r0, #0
   d6586:	bf18      	it	ne
   d6588:	2001      	movne	r0, #1
   d658a:	4770      	bx	lr
    } else {
        return false;
   d658c:	2000      	movs	r0, #0
   d658e:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6590:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d6592:	4770      	bx	lr

000d6594 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6594:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6596:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d659a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d659e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d65a2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d65a6:	2304      	movs	r3, #4
   d65a8:	6041      	str	r1, [r0, #4]
   d65aa:	7503      	strb	r3, [r0, #20]
   d65ac:	bd10      	pop	{r4, pc}

000d65ae <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d65ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d65b0:	780d      	ldrb	r5, [r1, #0]
   d65b2:	788b      	ldrb	r3, [r1, #2]
   d65b4:	784a      	ldrb	r2, [r1, #1]
   d65b6:	78c9      	ldrb	r1, [r1, #3]
   d65b8:	9100      	str	r1, [sp, #0]
   d65ba:	4629      	mov	r1, r5
   d65bc:	f7ff ffea 	bl	d6594 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d65c0:	b003      	add	sp, #12
   d65c2:	bd30      	pop	{r4, r5, pc}

000d65c4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d65c4:	7441      	strb	r1, [r0, #17]
   d65c6:	4770      	bx	lr

000d65c8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d65c8:	4770      	bx	lr

000d65ca <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d65ca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d65cc:	2100      	movs	r1, #0
   d65ce:	7c00      	ldrb	r0, [r0, #16]
   d65d0:	f7ff fbae 	bl	d5d30 <HAL_USB_USART_Receive_Data>
}
   d65d4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d65d8:	bf28      	it	cs
   d65da:	f04f 30ff 	movcs.w	r0, #4294967295
   d65de:	bd08      	pop	{r3, pc}

000d65e0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d65e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d65e2:	2101      	movs	r1, #1
   d65e4:	7c00      	ldrb	r0, [r0, #16]
   d65e6:	f7ff fba3 	bl	d5d30 <HAL_USB_USART_Receive_Data>
}
   d65ea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d65ee:	bf28      	it	cs
   d65f0:	f04f 30ff 	movcs.w	r0, #4294967295
   d65f4:	bd08      	pop	{r3, pc}

000d65f6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d65f6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d65f8:	7c00      	ldrb	r0, [r0, #16]
   d65fa:	f7ff fb91 	bl	d5d20 <HAL_USB_USART_Available_Data_For_Write>
}
   d65fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6602:	bd08      	pop	{r3, pc}

000d6604 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6604:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6606:	7c00      	ldrb	r0, [r0, #16]
   d6608:	f7ff fb82 	bl	d5d10 <HAL_USB_USART_Available_Data>
}
   d660c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6610:	bd08      	pop	{r3, pc}

000d6612 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6612:	7c00      	ldrb	r0, [r0, #16]
   d6614:	f7ff bb9c 	b.w	d5d50 <HAL_USB_USART_Flush_Data>

000d6618 <_ZN9USBSerialD0Ev>:
   d6618:	b510      	push	{r4, lr}
   d661a:	2114      	movs	r1, #20
   d661c:	4604      	mov	r4, r0
   d661e:	f000 fea9 	bl	d7374 <_ZdlPvj>
   d6622:	4620      	mov	r0, r4
   d6624:	bd10      	pop	{r4, pc}

000d6626 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6626:	b538      	push	{r3, r4, r5, lr}
   d6628:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d662a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d662c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d662e:	f7ff fb77 	bl	d5d20 <HAL_USB_USART_Available_Data_For_Write>
   d6632:	2800      	cmp	r0, #0
   d6634:	dc01      	bgt.n	d663a <_ZN9USBSerial5writeEh+0x14>
   d6636:	7c60      	ldrb	r0, [r4, #17]
   d6638:	b128      	cbz	r0, d6646 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d663a:	4629      	mov	r1, r5
   d663c:	7c20      	ldrb	r0, [r4, #16]
   d663e:	f7ff fb7f 	bl	d5d40 <HAL_USB_USART_Send_Data>
   d6642:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6646:	bd38      	pop	{r3, r4, r5, pc}

000d6648 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6648:	b510      	push	{r4, lr}
   d664a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d664c:	2300      	movs	r3, #0
   d664e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6650:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6654:	60a3      	str	r3, [r4, #8]
   d6656:	4b05      	ldr	r3, [pc, #20]	; (d666c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6658:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d665a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d665c:	4608      	mov	r0, r1
{
  _serial = serial;
   d665e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6660:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6662:	4611      	mov	r1, r2
   d6664:	f7ff fb4c 	bl	d5d00 <HAL_USB_USART_Init>
}
   d6668:	4620      	mov	r0, r4
   d666a:	bd10      	pop	{r4, pc}
   d666c:	000d8a4c 	.word	0x000d8a4c

000d6670 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6670:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6672:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6674:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6676:	2100      	movs	r1, #0
   d6678:	f001 fc0b 	bl	d7e92 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d667c:	4620      	mov	r0, r4
   d667e:	bd10      	pop	{r4, pc}

000d6680 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6680:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6682:	4d0e      	ldr	r5, [pc, #56]	; (d66bc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6684:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6686:	a801      	add	r0, sp, #4
   d6688:	f7ff fff2 	bl	d6670 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d668c:	6829      	ldr	r1, [r5, #0]
   d668e:	f011 0401 	ands.w	r4, r1, #1
   d6692:	d110      	bne.n	d66b6 <_Z16_fetch_usbserialv+0x36>
   d6694:	4628      	mov	r0, r5
   d6696:	f7fd fd11 	bl	d40bc <__cxa_guard_acquire>
   d669a:	b160      	cbz	r0, d66b6 <_Z16_fetch_usbserialv+0x36>
   d669c:	aa01      	add	r2, sp, #4
   d669e:	4621      	mov	r1, r4
   d66a0:	4807      	ldr	r0, [pc, #28]	; (d66c0 <_Z16_fetch_usbserialv+0x40>)
   d66a2:	f7ff ffd1 	bl	d6648 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d66a6:	4628      	mov	r0, r5
   d66a8:	f7fd fd0d 	bl	d40c6 <__cxa_guard_release>
   d66ac:	4a05      	ldr	r2, [pc, #20]	; (d66c4 <_Z16_fetch_usbserialv+0x44>)
   d66ae:	4906      	ldr	r1, [pc, #24]	; (d66c8 <_Z16_fetch_usbserialv+0x48>)
   d66b0:	4803      	ldr	r0, [pc, #12]	; (d66c0 <_Z16_fetch_usbserialv+0x40>)
   d66b2:	f000 fe51 	bl	d7358 <__aeabi_atexit>
	return _usbserial;
}
   d66b6:	4802      	ldr	r0, [pc, #8]	; (d66c0 <_Z16_fetch_usbserialv+0x40>)
   d66b8:	b007      	add	sp, #28
   d66ba:	bd30      	pop	{r4, r5, pc}
   d66bc:	2003e414 	.word	0x2003e414
   d66c0:	2003e418 	.word	0x2003e418
   d66c4:	2003e1dc 	.word	0x2003e1dc
   d66c8:	000d65c9 	.word	0x000d65c9

000d66cc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d66cc:	4770      	bx	lr

000d66ce <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d66ce:	7441      	strb	r1, [r0, #17]
   d66d0:	4770      	bx	lr

000d66d2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d66d2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d66d4:	7c00      	ldrb	r0, [r0, #16]
   d66d6:	f7ff fa83 	bl	d5be0 <HAL_USART_Available_Data_For_Write>
}
   d66da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66de:	bd08      	pop	{r3, pc}

000d66e0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d66e0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d66e2:	7c00      	ldrb	r0, [r0, #16]
   d66e4:	f7ff fa54 	bl	d5b90 <HAL_USART_Available_Data>
}
   d66e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66ec:	bd08      	pop	{r3, pc}

000d66ee <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d66ee:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d66f0:	7c00      	ldrb	r0, [r0, #16]
   d66f2:	f7ff fa5d 	bl	d5bb0 <HAL_USART_Peek_Data>
}
   d66f6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d66fa:	bf28      	it	cs
   d66fc:	f04f 30ff 	movcs.w	r0, #4294967295
   d6700:	bd08      	pop	{r3, pc}

000d6702 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6702:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6704:	7c00      	ldrb	r0, [r0, #16]
   d6706:	f7ff fa4b 	bl	d5ba0 <HAL_USART_Read_Data>
}
   d670a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d670e:	bf28      	it	cs
   d6710:	f04f 30ff 	movcs.w	r0, #4294967295
   d6714:	bd08      	pop	{r3, pc}

000d6716 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6716:	7c00      	ldrb	r0, [r0, #16]
   d6718:	f7ff ba52 	b.w	d5bc0 <HAL_USART_Flush_Data>

000d671c <_ZN11USARTSerialD0Ev>:
   d671c:	b510      	push	{r4, lr}
   d671e:	2114      	movs	r1, #20
   d6720:	4604      	mov	r4, r0
   d6722:	f000 fe27 	bl	d7374 <_ZdlPvj>
   d6726:	4620      	mov	r0, r4
   d6728:	bd10      	pop	{r4, pc}

000d672a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d672a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d672c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d672e:	4604      	mov	r4, r0
   d6730:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6732:	b925      	cbnz	r5, d673e <_ZN11USARTSerial5writeEh+0x14>
   d6734:	7c00      	ldrb	r0, [r0, #16]
   d6736:	f7ff fa53 	bl	d5be0 <HAL_USART_Available_Data_For_Write>
   d673a:	2800      	cmp	r0, #0
   d673c:	dd05      	ble.n	d674a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d673e:	4631      	mov	r1, r6
   d6740:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6746:	f7ff ba1b 	b.w	d5b80 <HAL_USART_Write_Data>
  }
  return 0;
}
   d674a:	4628      	mov	r0, r5
   d674c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6750 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6750:	b510      	push	{r4, lr}
   d6752:	4604      	mov	r4, r0
   d6754:	4608      	mov	r0, r1
   d6756:	4611      	mov	r1, r2
   d6758:	2200      	movs	r2, #0
   d675a:	6062      	str	r2, [r4, #4]
   d675c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6760:	60a2      	str	r2, [r4, #8]
   d6762:	4a05      	ldr	r2, [pc, #20]	; (d6778 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6764:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6766:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6768:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d676a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d676c:	461a      	mov	r2, r3
   d676e:	f7ff f9ff 	bl	d5b70 <HAL_USART_Init>
}
   d6772:	4620      	mov	r0, r4
   d6774:	bd10      	pop	{r4, pc}
   d6776:	bf00      	nop
   d6778:	000d8a7c 	.word	0x000d8a7c

000d677c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d677c:	7c00      	ldrb	r0, [r0, #16]
   d677e:	f7ff ba27 	b.w	d5bd0 <HAL_USART_Is_Enabled>
	...

000d6784 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6784:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6786:	4d0c      	ldr	r5, [pc, #48]	; (d67b8 <_Z22__fetch_global_Serial1v+0x34>)
   d6788:	6829      	ldr	r1, [r5, #0]
   d678a:	f011 0401 	ands.w	r4, r1, #1
   d678e:	d111      	bne.n	d67b4 <_Z22__fetch_global_Serial1v+0x30>
   d6790:	4628      	mov	r0, r5
   d6792:	f7fd fc93 	bl	d40bc <__cxa_guard_acquire>
   d6796:	b168      	cbz	r0, d67b4 <_Z22__fetch_global_Serial1v+0x30>
   d6798:	4a08      	ldr	r2, [pc, #32]	; (d67bc <_Z22__fetch_global_Serial1v+0x38>)
   d679a:	4b09      	ldr	r3, [pc, #36]	; (d67c0 <_Z22__fetch_global_Serial1v+0x3c>)
   d679c:	4809      	ldr	r0, [pc, #36]	; (d67c4 <_Z22__fetch_global_Serial1v+0x40>)
   d679e:	4621      	mov	r1, r4
   d67a0:	f7ff ffd6 	bl	d6750 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d67a4:	4628      	mov	r0, r5
   d67a6:	f7fd fc8e 	bl	d40c6 <__cxa_guard_release>
   d67aa:	4a07      	ldr	r2, [pc, #28]	; (d67c8 <_Z22__fetch_global_Serial1v+0x44>)
   d67ac:	4907      	ldr	r1, [pc, #28]	; (d67cc <_Z22__fetch_global_Serial1v+0x48>)
   d67ae:	4805      	ldr	r0, [pc, #20]	; (d67c4 <_Z22__fetch_global_Serial1v+0x40>)
   d67b0:	f000 fdd2 	bl	d7358 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d67b4:	4803      	ldr	r0, [pc, #12]	; (d67c4 <_Z22__fetch_global_Serial1v+0x40>)
   d67b6:	bd38      	pop	{r3, r4, r5, pc}
   d67b8:	2003e4c4 	.word	0x2003e4c4
   d67bc:	2003e4c8 	.word	0x2003e4c8
   d67c0:	2003e440 	.word	0x2003e440
   d67c4:	2003e42c 	.word	0x2003e42c
   d67c8:	2003e1dc 	.word	0x2003e1dc
   d67cc:	000d66cd 	.word	0x000d66cd

000d67d0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d67d0:	4770      	bx	lr

000d67d2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d67d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67d4:	4606      	mov	r6, r0
   d67d6:	4615      	mov	r5, r2
   d67d8:	460c      	mov	r4, r1
   d67da:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d67dc:	42bc      	cmp	r4, r7
   d67de:	d006      	beq.n	d67ee <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d67e0:	6833      	ldr	r3, [r6, #0]
   d67e2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d67e6:	689b      	ldr	r3, [r3, #8]
   d67e8:	4630      	mov	r0, r6
   d67ea:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d67ec:	e7f6      	b.n	d67dc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d67ee:	4628      	mov	r0, r5
   d67f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d67f2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d67f2:	2200      	movs	r2, #0
   d67f4:	7c00      	ldrb	r0, [r0, #16]
   d67f6:	f7ff ba13 	b.w	d5c20 <HAL_I2C_Write_Data>

000d67fa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d67fa:	2100      	movs	r1, #0
   d67fc:	7c00      	ldrb	r0, [r0, #16]
   d67fe:	f7ff ba17 	b.w	d5c30 <HAL_I2C_Available_Data>

000d6802 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6802:	2100      	movs	r1, #0
   d6804:	7c00      	ldrb	r0, [r0, #16]
   d6806:	f7ff ba1b 	b.w	d5c40 <HAL_I2C_Read_Data>

000d680a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d680a:	2100      	movs	r1, #0
   d680c:	7c00      	ldrb	r0, [r0, #16]
   d680e:	f7ff ba1f 	b.w	d5c50 <HAL_I2C_Peek_Data>

000d6812 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6812:	2100      	movs	r1, #0
   d6814:	7c00      	ldrb	r0, [r0, #16]
   d6816:	f7ff ba23 	b.w	d5c60 <HAL_I2C_Flush_Data>

000d681a <_ZN7TwoWireD0Ev>:
   d681a:	b510      	push	{r4, lr}
   d681c:	2114      	movs	r1, #20
   d681e:	4604      	mov	r4, r0
   d6820:	f000 fda8 	bl	d7374 <_ZdlPvj>
   d6824:	4620      	mov	r0, r4
   d6826:	bd10      	pop	{r4, pc}

000d6828 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6828:	b510      	push	{r4, lr}
   d682a:	4604      	mov	r4, r0
   d682c:	2300      	movs	r3, #0
   d682e:	6063      	str	r3, [r4, #4]
   d6830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6834:	60a3      	str	r3, [r4, #8]
   d6836:	4b04      	ldr	r3, [pc, #16]	; (d6848 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6838:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d683a:	4608      	mov	r0, r1
   d683c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d683e:	4611      	mov	r1, r2
   d6840:	f7ff fa1e 	bl	d5c80 <HAL_I2C_Init>
}
   d6844:	4620      	mov	r0, r4
   d6846:	bd10      	pop	{r4, pc}
   d6848:	000d8aac 	.word	0x000d8aac

000d684c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d684c:	2300      	movs	r3, #0
   d684e:	461a      	mov	r2, r3
   d6850:	4619      	mov	r1, r3
   d6852:	7c00      	ldrb	r0, [r0, #16]
   d6854:	f7ff b9cc 	b.w	d5bf0 <HAL_I2C_Begin>

000d6858 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6858:	b570      	push	{r4, r5, r6, lr}
   d685a:	460c      	mov	r4, r1
   d685c:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d685e:	2514      	movs	r5, #20
   d6860:	4606      	mov	r6, r0
   d6862:	462a      	mov	r2, r5
   d6864:	2100      	movs	r1, #0
   d6866:	a801      	add	r0, sp, #4
   d6868:	f001 fb13 	bl	d7e92 <memset>
   d686c:	7823      	ldrb	r3, [r4, #0]
   d686e:	f88d 3008 	strb.w	r3, [sp, #8]
   d6872:	6863      	ldr	r3, [r4, #4]
   d6874:	9303      	str	r3, [sp, #12]
   d6876:	68e3      	ldr	r3, [r4, #12]
   d6878:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d687a:	2200      	movs	r2, #0
   d687c:	7a23      	ldrb	r3, [r4, #8]
   d687e:	7c30      	ldrb	r0, [r6, #16]
   d6880:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6884:	a901      	add	r1, sp, #4
   d6886:	9305      	str	r3, [sp, #20]
   d6888:	f7ff fa02 	bl	d5c90 <HAL_I2C_Request_Data_Ex>
}
   d688c:	b006      	add	sp, #24
   d688e:	bd70      	pop	{r4, r5, r6, pc}

000d6890 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d6890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6892:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6894:	f88d 1000 	strb.w	r1, [sp]
   d6898:	f04f 0164 	mov.w	r1, #100	; 0x64
   d689c:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d689e:	bf18      	it	ne
   d68a0:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d68a2:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d68a4:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d68a6:	f88d 3008 	strb.w	r3, [sp, #8]
   d68aa:	f7ff ffd5 	bl	d6858 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d68ae:	b005      	add	sp, #20
   d68b0:	f85d fb04 	ldr.w	pc, [sp], #4

000d68b4 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d68b4:	2301      	movs	r3, #1
   d68b6:	f7ff bfeb 	b.w	d6890 <_ZN7TwoWire11requestFromEhjh>

000d68ba <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d68ba:	2200      	movs	r2, #0
   d68bc:	7c00      	ldrb	r0, [r0, #16]
   d68be:	f7ff b99f 	b.w	d5c00 <HAL_I2C_Begin_Transmission>

000d68c2 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d68c2:	b2c9      	uxtb	r1, r1
   d68c4:	f7ff bff9 	b.w	d68ba <_ZN7TwoWire17beginTransmissionEh>

000d68c8 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d68c8:	2200      	movs	r2, #0
   d68ca:	7c00      	ldrb	r0, [r0, #16]
   d68cc:	f7ff b9a0 	b.w	d5c10 <HAL_I2C_End_Transmission>

000d68d0 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d68d0:	2101      	movs	r1, #1
   d68d2:	f7ff bff9 	b.w	d68c8 <_ZN7TwoWire15endTransmissionEh>

000d68d6 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d68d6:	2100      	movs	r1, #0
   d68d8:	7c00      	ldrb	r0, [r0, #16]
   d68da:	f7ff b9c9 	b.w	d5c70 <HAL_I2C_Is_Enabled>

000d68de <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d68de:	2200      	movs	r2, #0
   d68e0:	4611      	mov	r1, r2
   d68e2:	6840      	ldr	r0, [r0, #4]
   d68e4:	f7ff baa8 	b.w	d5e38 <network_listening>

000d68e8 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d68e8:	2200      	movs	r2, #0
   d68ea:	4611      	mov	r1, r2
   d68ec:	6840      	ldr	r0, [r0, #4]
   d68ee:	f7ff bab3 	b.w	d5e58 <network_get_listen_timeout>

000d68f2 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d68f2:	2200      	movs	r2, #0
   d68f4:	6840      	ldr	r0, [r0, #4]
   d68f6:	f7ff baa7 	b.w	d5e48 <network_set_listen_timeout>

000d68fa <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d68fa:	2200      	movs	r2, #0
   d68fc:	f081 0101 	eor.w	r1, r1, #1
   d6900:	6840      	ldr	r0, [r0, #4]
   d6902:	f7ff ba91 	b.w	d5e28 <network_listen>

000d6906 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6906:	2300      	movs	r3, #0
   d6908:	461a      	mov	r2, r3
   d690a:	2101      	movs	r1, #1
   d690c:	6840      	ldr	r0, [r0, #4]
   d690e:	f7ff ba83 	b.w	d5e18 <network_off>

000d6912 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6912:	2300      	movs	r3, #0
   d6914:	461a      	mov	r2, r3
   d6916:	4619      	mov	r1, r3
   d6918:	6840      	ldr	r0, [r0, #4]
   d691a:	f7ff ba75 	b.w	d5e08 <network_on>

000d691e <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d691e:	2200      	movs	r2, #0
   d6920:	4611      	mov	r1, r2
   d6922:	6840      	ldr	r0, [r0, #4]
   d6924:	f7ff ba68 	b.w	d5df8 <network_ready>

000d6928 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6928:	2200      	movs	r2, #0
   d692a:	4611      	mov	r1, r2
   d692c:	6840      	ldr	r0, [r0, #4]
   d692e:	f7ff ba53 	b.w	d5dd8 <network_connecting>

000d6932 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6932:	2200      	movs	r2, #0
   d6934:	2102      	movs	r1, #2
   d6936:	6840      	ldr	r0, [r0, #4]
   d6938:	f7ff ba56 	b.w	d5de8 <network_disconnect>

000d693c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d693c:	2300      	movs	r3, #0
   d693e:	461a      	mov	r2, r3
   d6940:	6840      	ldr	r0, [r0, #4]
   d6942:	f7ff ba41 	b.w	d5dc8 <network_connect>

000d6946 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6946:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6948:	4605      	mov	r5, r0
   d694a:	b188      	cbz	r0, d6970 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d694c:	6804      	ldr	r4, [r0, #0]
   d694e:	b14c      	cbz	r4, d6964 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d6950:	68a3      	ldr	r3, [r4, #8]
   d6952:	b11b      	cbz	r3, d695c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6954:	2203      	movs	r2, #3
   d6956:	4621      	mov	r1, r4
   d6958:	4620      	mov	r0, r4
   d695a:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d695c:	2110      	movs	r1, #16
   d695e:	4620      	mov	r0, r4
   d6960:	f000 fd08 	bl	d7374 <_ZdlPvj>
   d6964:	4628      	mov	r0, r5
   d6966:	2114      	movs	r1, #20
      }
   d6968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d696c:	f000 bd02 	b.w	d7374 <_ZdlPvj>
   d6970:	bd38      	pop	{r3, r4, r5, pc}

000d6972 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6972:	b110      	cbz	r0, d697a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6974:	6803      	ldr	r3, [r0, #0]
   d6976:	685b      	ldr	r3, [r3, #4]
   d6978:	4718      	bx	r3
   d697a:	4770      	bx	lr

000d697c <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d697c:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d697e:	6803      	ldr	r3, [r0, #0]
   d6980:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6982:	b1bb      	cbz	r3, d69b4 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6984:	6858      	ldr	r0, [r3, #4]
   d6986:	f7ff f8b3 	bl	d5af0 <os_thread_is_current>
   d698a:	b978      	cbnz	r0, d69ac <_ZN6ThreadD1Ev+0x30>
   d698c:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d698e:	7c5a      	ldrb	r2, [r3, #17]
   d6990:	b912      	cbnz	r2, d6998 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6992:	6858      	ldr	r0, [r3, #4]
   d6994:	f7ff f8b4 	bl	d5b00 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6998:	6823      	ldr	r3, [r4, #0]
   d699a:	6858      	ldr	r0, [r3, #4]
   d699c:	f7ff f8b8 	bl	d5b10 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d69a0:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d69a2:	2300      	movs	r3, #0
   d69a4:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d69a6:	b128      	cbz	r0, d69b4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d69a8:	f7ff ffcd 	bl	d6946 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d69ac:	6820      	ldr	r0, [r4, #0]
   d69ae:	b108      	cbz	r0, d69b4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d69b0:	f7ff ffc9 	bl	d6946 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d69b4:	4620      	mov	r0, r4
   d69b6:	bd10      	pop	{r4, pc}

000d69b8 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d69b8:	b538      	push	{r3, r4, r5, lr}
   d69ba:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d69bc:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d69c0:	b108      	cbz	r0, d69c6 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d69c2:	f7fd fb6e 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d69c6:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d69ca:	b108      	cbz	r0, d69d0 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d69cc:	f7ff f8b0 	bl	d5b30 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d69d0:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d69d4:	b135      	cbz	r5, d69e4 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d69d6:	4628      	mov	r0, r5
   d69d8:	f7ff ffd0 	bl	d697c <_ZN6ThreadD1Ev>
   d69dc:	2104      	movs	r1, #4
   d69de:	4628      	mov	r0, r5
   d69e0:	f000 fcc8 	bl	d7374 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d69e4:	6820      	ldr	r0, [r4, #0]
   d69e6:	b108      	cbz	r0, d69ec <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d69e8:	f7ff ffc3 	bl	d6972 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d69ec:	4620      	mov	r0, r4
   d69ee:	bd38      	pop	{r3, r4, r5, pc}

000d69f0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d69f0:	b510      	push	{r4, lr}
   d69f2:	4b04      	ldr	r3, [pc, #16]	; (d6a04 <_ZN5spark9MeshClassD1Ev+0x14>)
   d69f4:	4604      	mov	r4, r0
   d69f6:	f840 3b08 	str.w	r3, [r0], #8
   d69fa:	f7ff ffdd 	bl	d69b8 <_ZN5spark11MeshPublishD1Ev>
   d69fe:	4620      	mov	r0, r4
   d6a00:	bd10      	pop	{r4, pc}
   d6a02:	bf00      	nop
   d6a04:	000d8ad4 	.word	0x000d8ad4

000d6a08 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6a08:	b538      	push	{r3, r4, r5, lr}
   d6a0a:	4c0e      	ldr	r4, [pc, #56]	; (d6a44 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6a0c:	4b0e      	ldr	r3, [pc, #56]	; (d6a48 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6a0e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6a10:	2500      	movs	r5, #0
   d6a12:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6a14:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6a18:	6063      	str	r3, [r4, #4]
   d6a1a:	60a5      	str	r5, [r4, #8]
   d6a1c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6a20:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6a24:	f7ff f87c 	bl	d5b20 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6a28:	4b08      	ldr	r3, [pc, #32]	; (d6a4c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6a2a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6a2e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6a32:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6a34:	4620      	mov	r0, r4
   d6a36:	4a06      	ldr	r2, [pc, #24]	; (d6a50 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6a38:	4906      	ldr	r1, [pc, #24]	; (d6a54 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6a3e:	f000 bc8b 	b.w	d7358 <__aeabi_atexit>
   d6a42:	bf00      	nop
   d6a44:	2003e54c 	.word	0x2003e54c
   d6a48:	000d8bbc 	.word	0x000d8bbc
   d6a4c:	000d8ad4 	.word	0x000d8ad4
   d6a50:	2003e1dc 	.word	0x2003e1dc
   d6a54:	000d69f1 	.word	0x000d69f1

000d6a58 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6a5a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6a5c:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6a5e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6a62:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6a64:	2201      	movs	r2, #1
   d6a66:	f04f 33ff 	mov.w	r3, #4294967295
   d6a6a:	4621      	mov	r1, r4
   d6a6c:	47a8      	blx	r5
}
   d6a6e:	b003      	add	sp, #12
   d6a70:	bd30      	pop	{r4, r5, pc}

000d6a72 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6a72:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6a74:	6803      	ldr	r3, [r0, #0]
   d6a76:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6a78:	f04f 33ff 	mov.w	r3, #4294967295
   d6a7c:	46a4      	mov	ip, r4
}
   d6a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6a82:	4760      	bx	ip

000d6a84 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6a86:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d6a88:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6a8a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d6a8e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6a90:	4621      	mov	r1, r4
   d6a92:	4613      	mov	r3, r2
   d6a94:	2201      	movs	r2, #1
   d6a96:	47a8      	blx	r5
}
   d6a98:	b003      	add	sp, #12
   d6a9a:	bd30      	pop	{r4, r5, pc}

000d6a9c <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d6a9c:	4770      	bx	lr

000d6a9e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6a9e:	b538      	push	{r3, r4, r5, lr}
   d6aa0:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6aa2:	681a      	ldr	r2, [r3, #0]
   d6aa4:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6aa6:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d6aa8:	da05      	bge.n	d6ab6 <_ZN9TCPClient9connectedEv+0x18>
   d6aaa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6aae:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6ab2:	429a      	cmp	r2, r3
   d6ab4:	d001      	beq.n	d6aba <_ZN9TCPClient9connectedEv+0x1c>
   d6ab6:	2501      	movs	r5, #1
   d6ab8:	e00b      	b.n	d6ad2 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d6aba:	6803      	ldr	r3, [r0, #0]
   d6abc:	691b      	ldr	r3, [r3, #16]
   d6abe:	4798      	blx	r3
   d6ac0:	2800      	cmp	r0, #0
   d6ac2:	bf14      	ite	ne
   d6ac4:	2501      	movne	r5, #1
   d6ac6:	2500      	moveq	r5, #0
        if (!rv) {
   d6ac8:	d103      	bne.n	d6ad2 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d6aca:	6823      	ldr	r3, [r4, #0]
   d6acc:	4620      	mov	r0, r4
   d6ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6ad0:	4798      	blx	r3
        }
    }
    return rv;
}
   d6ad2:	4628      	mov	r0, r5
   d6ad4:	bd38      	pop	{r3, r4, r5, pc}

000d6ad6 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d6ad6:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d6ad8:	6818      	ldr	r0, [r3, #0]
}
   d6ada:	43c0      	mvns	r0, r0
   d6adc:	0fc0      	lsrs	r0, r0, #31
   d6ade:	4770      	bx	lr

000d6ae0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6ae0:	4770      	bx	lr

000d6ae2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6ae2:	2000      	movs	r0, #0
   d6ae4:	4770      	bx	lr

000d6ae6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6ae6:	b510      	push	{r4, lr}
   d6ae8:	2114      	movs	r1, #20
   d6aea:	4604      	mov	r4, r0
   d6aec:	f000 fc42 	bl	d7374 <_ZdlPvj>
   d6af0:	4620      	mov	r0, r4
   d6af2:	bd10      	pop	{r4, pc}

000d6af4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6af4:	f7fd bad3 	b.w	d409e <_ZdlPv>

000d6af8 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6af8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6afa:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d6afc:	2200      	movs	r2, #0
   d6afe:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d6b00:	9202      	str	r2, [sp, #8]
   d6b02:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6b04:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6b06:	4604      	mov	r4, r0
   d6b08:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6b0a:	d008      	beq.n	d6b1e <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d6b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6b10:	fbb3 f1f2 	udiv	r1, r3, r2
   d6b14:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d6b16:	fb02 3111 	mls	r1, r2, r1, r3
   d6b1a:	434a      	muls	r2, r1
   d6b1c:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6b1e:	6960      	ldr	r0, [r4, #20]
   d6b20:	2308      	movs	r3, #8
   d6b22:	9300      	str	r3, [sp, #0]
   d6b24:	f241 0205 	movw	r2, #4101	; 0x1005
   d6b28:	446b      	add	r3, sp
   d6b2a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6b2e:	6800      	ldr	r0, [r0, #0]
   d6b30:	f7ff f8b6 	bl	d5ca0 <sock_setsockopt>
    if (ret < 0) {
   d6b34:	2800      	cmp	r0, #0
   d6b36:	db08      	blt.n	d6b4a <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d6b38:	6960      	ldr	r0, [r4, #20]
   d6b3a:	2300      	movs	r3, #0
   d6b3c:	4632      	mov	r2, r6
   d6b3e:	4629      	mov	r1, r5
   d6b40:	6800      	ldr	r0, [r0, #0]
   d6b42:	f7ff f8cd 	bl	d5ce0 <sock_send>
    if (ret < 0) {
   d6b46:	2800      	cmp	r0, #0
   d6b48:	da04      	bge.n	d6b54 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d6b4a:	f7ff f9ad 	bl	d5ea8 <__errno>
   d6b4e:	6803      	ldr	r3, [r0, #0]
   d6b50:	6063      	str	r3, [r4, #4]
   d6b52:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d6b54:	b004      	add	sp, #16
   d6b56:	bd70      	pop	{r4, r5, r6, pc}

000d6b58 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6b58:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6b5a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6b5c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6b5e:	689b      	ldr	r3, [r3, #8]
   d6b60:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6b62:	68a3      	ldr	r3, [r4, #8]
   d6b64:	3b01      	subs	r3, #1
   d6b66:	60a3      	str	r3, [r4, #8]
   d6b68:	b92b      	cbnz	r3, d6b76 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d6b6a:	6823      	ldr	r3, [r4, #0]
   d6b6c:	4620      	mov	r0, r4
   d6b6e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6b74:	4718      	bx	r3
   d6b76:	bd10      	pop	{r4, pc}

000d6b78 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d6b78:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6b7a:	4604      	mov	r4, r0
   d6b7c:	694d      	ldr	r5, [r1, #20]
   d6b7e:	4b05      	ldr	r3, [pc, #20]	; (d6b94 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6b80:	f844 3b04 	str.w	r3, [r4], #4
   d6b84:	358c      	adds	r5, #140	; 0x8c
   d6b86:	4606      	mov	r6, r0
   d6b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b8c:	682b      	ldr	r3, [r5, #0]
   d6b8e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d6b90:	4630      	mov	r0, r6
   d6b92:	bd70      	pop	{r4, r5, r6, pc}
   d6b94:	000d8a38 	.word	0x000d8a38

000d6b98 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6b98:	b510      	push	{r4, lr}
   d6b9a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6b9c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6ba0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6ba4:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6ba6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6ba8:	d005      	beq.n	d6bb6 <_ZN9TCPClient4peekEv+0x1e>
   d6baa:	6962      	ldr	r2, [r4, #20]
   d6bac:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6bb0:	4413      	add	r3, r2
   d6bb2:	7918      	ldrb	r0, [r3, #4]
   d6bb4:	bd10      	pop	{r4, pc}
   d6bb6:	6803      	ldr	r3, [r0, #0]
   d6bb8:	691b      	ldr	r3, [r3, #16]
   d6bba:	4798      	blx	r3
   d6bbc:	2800      	cmp	r0, #0
   d6bbe:	d1f4      	bne.n	d6baa <_ZN9TCPClient4peekEv+0x12>
   d6bc0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6bc4:	bd10      	pop	{r4, pc}

000d6bc6 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6bc6:	b510      	push	{r4, lr}
   d6bc8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6bca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6bce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6bd2:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6bd4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6bd6:	d008      	beq.n	d6bea <_ZN9TCPClient4readEv+0x24>
   d6bd8:	6962      	ldr	r2, [r4, #20]
   d6bda:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6bde:	1c59      	adds	r1, r3, #1
   d6be0:	4413      	add	r3, r2
   d6be2:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d6be6:	7918      	ldrb	r0, [r3, #4]
   d6be8:	bd10      	pop	{r4, pc}
   d6bea:	6803      	ldr	r3, [r0, #0]
   d6bec:	691b      	ldr	r3, [r3, #16]
   d6bee:	4798      	blx	r3
   d6bf0:	2800      	cmp	r0, #0
   d6bf2:	d1f1      	bne.n	d6bd8 <_ZN9TCPClient4readEv+0x12>
   d6bf4:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6bf8:	bd10      	pop	{r4, pc}

000d6bfa <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d6bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6bfc:	6943      	ldr	r3, [r0, #20]
   d6bfe:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d6c00:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6c04:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6c08:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d6c0a:	4605      	mov	r5, r0
   d6c0c:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d6c0e:	d106      	bne.n	d6c1e <_ZN9TCPClient4readEPhj+0x24>
   d6c10:	6803      	ldr	r3, [r0, #0]
   d6c12:	691b      	ldr	r3, [r3, #16]
   d6c14:	4798      	blx	r3
   d6c16:	b910      	cbnz	r0, d6c1e <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d6c18:	f04f 34ff 	mov.w	r4, #4294967295
   d6c1c:	e014      	b.n	d6c48 <_ZN9TCPClient4readEPhj+0x4e>
   d6c1e:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d6c20:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d6c24:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d6c28:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d6c2a:	42bc      	cmp	r4, r7
   d6c2c:	bf28      	it	cs
   d6c2e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6c30:	4419      	add	r1, r3
   d6c32:	4622      	mov	r2, r4
   d6c34:	3104      	adds	r1, #4
   d6c36:	4630      	mov	r0, r6
   d6c38:	f001 f920 	bl	d7e7c <memcpy>
   d6c3c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6c3e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6c42:	4423      	add	r3, r4
   d6c44:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d6c48:	4620      	mov	r0, r4
   d6c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c4c <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6c50:	4698      	mov	r8, r3
    stop();
   d6c52:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6c54:	b093      	sub	sp, #76	; 0x4c
    stop();
   d6c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6c58:	460d      	mov	r5, r1
   d6c5a:	4606      	mov	r6, r0
   d6c5c:	4617      	mov	r7, r2
    stop();
   d6c5e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d6c60:	ab12      	add	r3, sp, #72	; 0x48
   d6c62:	2400      	movs	r4, #0
   d6c64:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6c68:	4622      	mov	r2, r4
   d6c6a:	4621      	mov	r1, r4
   d6c6c:	4628      	mov	r0, r5
   d6c6e:	f7fe fe97 	bl	d59a0 <netdb_getaddrinfo>
   d6c72:	4681      	mov	r9, r0
   d6c74:	2800      	cmp	r0, #0
   d6c76:	d13d      	bne.n	d6cf4 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6c78:	9b00      	ldr	r3, [sp, #0]
   d6c7a:	2b00      	cmp	r3, #0
   d6c7c:	d056      	beq.n	d6d2c <_ZN9TCPClient7connectEPKctm+0xe0>
   d6c7e:	695b      	ldr	r3, [r3, #20]
   d6c80:	2b00      	cmp	r3, #0
   d6c82:	d053      	beq.n	d6d2c <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d6c84:	a806      	add	r0, sp, #24
   d6c86:	f7ff fc4f 	bl	d6528 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6c8a:	9b00      	ldr	r3, [sp, #0]
   d6c8c:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6c8e:	7863      	ldrb	r3, [r4, #1]
   d6c90:	2b02      	cmp	r3, #2
   d6c92:	d101      	bne.n	d6c98 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6c94:	1d21      	adds	r1, r4, #4
   d6c96:	e013      	b.n	d6cc0 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d6c98:	2b0a      	cmp	r3, #10
   d6c9a:	d114      	bne.n	d6cc6 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d6c9c:	2211      	movs	r2, #17
   d6c9e:	4649      	mov	r1, r9
   d6ca0:	a801      	add	r0, sp, #4
   d6ca2:	f001 f8f6 	bl	d7e92 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6ca6:	68a3      	ldr	r3, [r4, #8]
   d6ca8:	bb33      	cbnz	r3, d6cf8 <_ZN9TCPClient7connectEPKctm+0xac>
   d6caa:	68e3      	ldr	r3, [r4, #12]
   d6cac:	bb23      	cbnz	r3, d6cf8 <_ZN9TCPClient7connectEPKctm+0xac>
   d6cae:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6cb2:	6925      	ldr	r5, [r4, #16]
   d6cb4:	f7fe ff4c 	bl	d5b50 <inet_htonl>
   d6cb8:	4285      	cmp	r5, r0
   d6cba:	d11d      	bne.n	d6cf8 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6cbc:	f104 0114 	add.w	r1, r4, #20
   d6cc0:	a806      	add	r0, sp, #24
   d6cc2:	f7ff fc74 	bl	d65ae <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6cc6:	a806      	add	r0, sp, #24
   d6cc8:	f7ff fc4e 	bl	d6568 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6ccc:	2800      	cmp	r0, #0
   d6cce:	d02d      	beq.n	d6d2c <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d6cd0:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6cd2:	ad07      	add	r5, sp, #28
   d6cd4:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6cd8:	4b18      	ldr	r3, [pc, #96]	; (d6d3c <_ZN9TCPClient7connectEPKctm+0xf0>)
   d6cda:	930c      	str	r3, [sp, #48]	; 0x30
   d6cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6cde:	ac0d      	add	r4, sp, #52	; 0x34
   d6ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ce2:	682b      	ldr	r3, [r5, #0]
   d6ce4:	7023      	strb	r3, [r4, #0]
   d6ce6:	463a      	mov	r2, r7
   d6ce8:	4643      	mov	r3, r8
   d6cea:	a90c      	add	r1, sp, #48	; 0x30
   d6cec:	4630      	mov	r0, r6
   d6cee:	47c8      	blx	r9
   d6cf0:	4681      	mov	r9, r0
   d6cf2:	e01b      	b.n	d6d2c <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6cf4:	46a1      	mov	r9, r4
   d6cf6:	e019      	b.n	d6d2c <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6cf8:	f104 0308 	add.w	r3, r4, #8
   d6cfc:	ad01      	add	r5, sp, #4
   d6cfe:	3418      	adds	r4, #24
   d6d00:	6818      	ldr	r0, [r3, #0]
   d6d02:	6859      	ldr	r1, [r3, #4]
   d6d04:	462a      	mov	r2, r5
   d6d06:	c203      	stmia	r2!, {r0, r1}
   d6d08:	3308      	adds	r3, #8
   d6d0a:	42a3      	cmp	r3, r4
   d6d0c:	4615      	mov	r5, r2
   d6d0e:	d1f7      	bne.n	d6d00 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d6d10:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6d12:	a901      	add	r1, sp, #4
   d6d14:	a80c      	add	r0, sp, #48	; 0x30
   d6d16:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d6d18:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6d1c:	f7ff fc12 	bl	d6544 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6d22:	ac07      	add	r4, sp, #28
   d6d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6d26:	682b      	ldr	r3, [r5, #0]
   d6d28:	7023      	strb	r3, [r4, #0]
   d6d2a:	e7cc      	b.n	d6cc6 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6d2c:	9800      	ldr	r0, [sp, #0]
   d6d2e:	f7fe fe2f 	bl	d5990 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d6d32:	4648      	mov	r0, r9
   d6d34:	b013      	add	sp, #76	; 0x4c
   d6d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6d3a:	bf00      	nop
   d6d3c:	000d8a38 	.word	0x000d8a38

000d6d40 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d6d40:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6d42:	2300      	movs	r3, #0
   d6d44:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d6d48:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d6d4a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d6d4e:	4770      	bx	lr

000d6d50 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6d54:	461e      	mov	r6, r3
    stop();
   d6d56:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6d58:	460c      	mov	r4, r1
   d6d5a:	b08a      	sub	sp, #40	; 0x28
    stop();
   d6d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6d5e:	4605      	mov	r5, r0
   d6d60:	4617      	mov	r7, r2
    stop();
   d6d62:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6d64:	7d23      	ldrb	r3, [r4, #20]
   d6d66:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d6d6a:	2b04      	cmp	r3, #4
   d6d6c:	bf0c      	ite	eq
   d6d6e:	2002      	moveq	r0, #2
   d6d70:	200a      	movne	r0, #10
   d6d72:	2206      	movs	r2, #6
   d6d74:	2101      	movs	r1, #1
   d6d76:	f7fe ffbb 	bl	d5cf0 <sock_socket>
   d6d7a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d6d7e:	696b      	ldr	r3, [r5, #20]
   d6d80:	681b      	ldr	r3, [r3, #0]
   d6d82:	2b00      	cmp	r3, #0
   d6d84:	db18      	blt.n	d6db8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d6d86:	4628      	mov	r0, r5
   d6d88:	f7ff ffda 	bl	d6d40 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d6d8c:	b1d6      	cbz	r6, d6dc4 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d6d8e:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6d90:	a903      	add	r1, sp, #12
   d6d92:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d6d94:	9303      	str	r3, [sp, #12]
   d6d96:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6d9a:	f7fe fe89 	bl	d5ab0 <if_index_to_name>
   d6d9e:	b958      	cbnz	r0, d6db8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d6da0:	6968      	ldr	r0, [r5, #20]
   d6da2:	2306      	movs	r3, #6
   d6da4:	9300      	str	r3, [sp, #0]
   d6da6:	f241 020b 	movw	r2, #4107	; 0x100b
   d6daa:	ab03      	add	r3, sp, #12
   d6dac:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6db0:	6800      	ldr	r0, [r0, #0]
   d6db2:	f7fe ff75 	bl	d5ca0 <sock_setsockopt>
   d6db6:	b128      	cbz	r0, d6dc4 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d6db8:	682b      	ldr	r3, [r5, #0]
   d6dba:	4628      	mov	r0, r5
   d6dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6dbe:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d6dc0:	4798      	blx	r3
   d6dc2:	e03b      	b.n	d6e3c <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d6dc4:	261c      	movs	r6, #28
   d6dc6:	4632      	mov	r2, r6
   d6dc8:	2100      	movs	r1, #0
   d6dca:	a803      	add	r0, sp, #12
   d6dcc:	f001 f861 	bl	d7e92 <memset>
    if (ip.version() == 4) {
   d6dd0:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d6dd2:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d6dd6:	2b04      	cmp	r3, #4
   d6dd8:	d10c      	bne.n	d6df4 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6dda:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d6ddc:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6dde:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d6de2:	f7fe febd 	bl	d5b60 <inet_htons>
   d6de6:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6dea:	6860      	ldr	r0, [r4, #4]
   d6dec:	f7fe feb0 	bl	d5b50 <inet_htonl>
   d6df0:	9004      	str	r0, [sp, #16]
   d6df2:	e013      	b.n	d6e1c <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6df4:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d6df6:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6df8:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d6dfc:	f7fe feb0 	bl	d5b60 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6e00:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d6e02:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6e06:	1d23      	adds	r3, r4, #4
   d6e08:	f104 0714 	add.w	r7, r4, #20
   d6e0c:	6818      	ldr	r0, [r3, #0]
   d6e0e:	6859      	ldr	r1, [r3, #4]
   d6e10:	4632      	mov	r2, r6
   d6e12:	c203      	stmia	r2!, {r0, r1}
   d6e14:	3308      	adds	r3, #8
   d6e16:	42bb      	cmp	r3, r7
   d6e18:	4616      	mov	r6, r2
   d6e1a:	d1f7      	bne.n	d6e0c <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d6e1c:	696b      	ldr	r3, [r5, #20]
   d6e1e:	221c      	movs	r2, #28
   d6e20:	a903      	add	r1, sp, #12
   d6e22:	6818      	ldr	r0, [r3, #0]
   d6e24:	f7fe ff4c 	bl	d5cc0 <sock_connect>
   d6e28:	2800      	cmp	r0, #0
   d6e2a:	d1c5      	bne.n	d6db8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d6e2c:	3404      	adds	r4, #4
   d6e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6e30:	696d      	ldr	r5, [r5, #20]
   d6e32:	358c      	adds	r5, #140	; 0x8c
   d6e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6e36:	6823      	ldr	r3, [r4, #0]
   d6e38:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d6e3a:	2401      	movs	r4, #1
}
   d6e3c:	4620      	mov	r0, r4
   d6e3e:	b00a      	add	sp, #40	; 0x28
   d6e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6e44 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6e44:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6e46:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6e48:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6e4a:	6818      	ldr	r0, [r3, #0]
   d6e4c:	2800      	cmp	r0, #0
   d6e4e:	db01      	blt.n	d6e54 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6e50:	f7fe ff2e 	bl	d5cb0 <sock_close>
   d6e54:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d6e56:	f04f 32ff 	mov.w	r2, #4294967295
   d6e5a:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6e5c:	6960      	ldr	r0, [r4, #20]
   d6e5e:	2211      	movs	r2, #17
   d6e60:	2100      	movs	r1, #0
   d6e62:	308c      	adds	r0, #140	; 0x8c
   d6e64:	f001 f815 	bl	d7e92 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d6e68:	4620      	mov	r0, r4
}
   d6e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d6e6e:	f7ff bf67 	b.w	d6d40 <_ZN9TCPClient12flush_bufferEv>
	...

000d6e74 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6e74:	b530      	push	{r4, r5, lr}
   d6e76:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6e78:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6e7c:	b08b      	sub	sp, #44	; 0x2c
   d6e7e:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6e80:	b11b      	cbz	r3, d6e8a <_ZN9TCPClient9availableEv+0x16>
   d6e82:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d6e86:	429a      	cmp	r2, r3
   d6e88:	d040      	beq.n	d6f0c <_ZN9TCPClient9availableEv+0x98>
   d6e8a:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d6e8c:	6818      	ldr	r0, [r3, #0]
   d6e8e:	2800      	cmp	r0, #0
   d6e90:	db3f      	blt.n	d6f12 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d6e92:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d6e96:	2d7f      	cmp	r5, #127	; 0x7f
   d6e98:	d83b      	bhi.n	d6f12 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d6e9a:	1d19      	adds	r1, r3, #4
   d6e9c:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d6ea0:	2308      	movs	r3, #8
   d6ea2:	4429      	add	r1, r5
   d6ea4:	f7fe ff14 	bl	d5cd0 <sock_recv>
            if (ret > 0) {
   d6ea8:	2800      	cmp	r0, #0
   d6eaa:	dd0c      	ble.n	d6ec6 <_ZN9TCPClient9availableEv+0x52>
   d6eac:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d6eae:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6eb2:	b90a      	cbnz	r2, d6eb8 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d6eb4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6eb8:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d6eba:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6ebe:	4418      	add	r0, r3
   d6ec0:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d6ec4:	e025      	b.n	d6f12 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d6ec6:	f7fe ffef 	bl	d5ea8 <__errno>
   d6eca:	6803      	ldr	r3, [r0, #0]
   d6ecc:	2b0b      	cmp	r3, #11
   d6ece:	d020      	beq.n	d6f12 <_ZN9TCPClient9availableEv+0x9e>
   d6ed0:	f7fe ffea 	bl	d5ea8 <__errno>
   d6ed4:	6803      	ldr	r3, [r0, #0]
   d6ed6:	2b0b      	cmp	r3, #11
   d6ed8:	d01b      	beq.n	d6f12 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d6eda:	2320      	movs	r3, #32
   d6edc:	2500      	movs	r5, #0
   d6ede:	9302      	str	r3, [sp, #8]
   d6ee0:	9503      	str	r5, [sp, #12]
   d6ee2:	f7fe ffe1 	bl	d5ea8 <__errno>
   d6ee6:	6803      	ldr	r3, [r0, #0]
   d6ee8:	9301      	str	r3, [sp, #4]
   d6eea:	4b0e      	ldr	r3, [pc, #56]	; (d6f24 <_ZN9TCPClient9availableEv+0xb0>)
   d6eec:	9300      	str	r3, [sp, #0]
   d6eee:	aa02      	add	r2, sp, #8
   d6ef0:	462b      	mov	r3, r5
   d6ef2:	490d      	ldr	r1, [pc, #52]	; (d6f28 <_ZN9TCPClient9availableEv+0xb4>)
   d6ef4:	2032      	movs	r0, #50	; 0x32
   d6ef6:	f7fe ff3b 	bl	d5d70 <log_message>
                    sock_close(d_->sock);
   d6efa:	6963      	ldr	r3, [r4, #20]
   d6efc:	6818      	ldr	r0, [r3, #0]
   d6efe:	f7fe fed7 	bl	d5cb0 <sock_close>
   d6f02:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6f04:	f04f 32ff 	mov.w	r2, #4294967295
   d6f08:	601a      	str	r2, [r3, #0]
   d6f0a:	e002      	b.n	d6f12 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d6f0c:	f7ff ff18 	bl	d6d40 <_ZN9TCPClient12flush_bufferEv>
   d6f10:	e7bb      	b.n	d6e8a <_ZN9TCPClient9availableEv+0x16>
   d6f12:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d6f14:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6f18:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d6f1c:	1a18      	subs	r0, r3, r0
}
   d6f1e:	b00b      	add	sp, #44	; 0x2c
   d6f20:	bd30      	pop	{r4, r5, pc}
   d6f22:	bf00      	nop
   d6f24:	000d8b6f 	.word	0x000d8b6f
   d6f28:	000d8b68 	.word	0x000d8b68

000d6f2c <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6f2c:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6f2e:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6f30:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d6f32:	6001      	str	r1, [r0, #0]
   d6f34:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d6f38:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d6f3c:	3088      	adds	r0, #136	; 0x88
   d6f3e:	f7ff faf3 	bl	d6528 <_ZN9IPAddressC1Ev>
}
   d6f42:	4620      	mov	r0, r4
   d6f44:	bd10      	pop	{r4, pc}
	...

000d6f48 <_ZN9TCPClientC1Ei>:
   d6f48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6f4c:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6f4e:	2300      	movs	r3, #0
   d6f50:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d6f52:	4a14      	ldr	r2, [pc, #80]	; (d6fa4 <_ZN9TCPClientC1Ei+0x5c>)
   d6f54:	6043      	str	r3, [r0, #4]
   d6f56:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6f58:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6f5a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6f5c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6f5e:	20a0      	movs	r0, #160	; 0xa0
   d6f60:	460e      	mov	r6, r1
   d6f62:	f7fd f89a 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6f66:	4605      	mov	r5, r0
   d6f68:	b110      	cbz	r0, d6f70 <_ZN9TCPClientC1Ei+0x28>
   d6f6a:	4631      	mov	r1, r6
   d6f6c:	f7ff ffde 	bl	d6f2c <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6f70:	2014      	movs	r0, #20
   d6f72:	f7fd f892 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6f76:	4603      	mov	r3, r0
   d6f78:	b128      	cbz	r0, d6f86 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6f7a:	2201      	movs	r2, #1
   d6f7c:	6042      	str	r2, [r0, #4]
   d6f7e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6f80:	4a09      	ldr	r2, [pc, #36]	; (d6fa8 <_ZN9TCPClientC1Ei+0x60>)
   d6f82:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6f84:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6f86:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6f88:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6f8a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d6f8c:	b128      	cbz	r0, d6f9a <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6f8e:	6843      	ldr	r3, [r0, #4]
   d6f90:	3b01      	subs	r3, #1
   d6f92:	6043      	str	r3, [r0, #4]
   d6f94:	b90b      	cbnz	r3, d6f9a <_ZN9TCPClientC1Ei+0x52>
   d6f96:	f7ff fddf 	bl	d6b58 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d6f9a:	4620      	mov	r0, r4
   d6f9c:	f7ff fed0 	bl	d6d40 <_ZN9TCPClient12flush_bufferEv>
}
   d6fa0:	4620      	mov	r0, r4
   d6fa2:	bd70      	pop	{r4, r5, r6, pc}
   d6fa4:	000d8b24 	.word	0x000d8b24
   d6fa8:	000d8b08 	.word	0x000d8b08

000d6fac <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6fac:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6fae:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6fb2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6fb4:	f7ff ffc8 	bl	d6f48 <_ZN9TCPClientC1Ei>
}
   d6fb8:	4620      	mov	r0, r4
   d6fba:	bd10      	pop	{r4, pc}

000d6fbc <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d6fbc:	b510      	push	{r4, lr}
   d6fbe:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6fc0:	6800      	ldr	r0, [r0, #0]
   d6fc2:	2800      	cmp	r0, #0
   d6fc4:	db01      	blt.n	d6fca <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d6fc6:	f7fe fe73 	bl	d5cb0 <sock_close>
    }
}
   d6fca:	4620      	mov	r0, r4
   d6fcc:	bd10      	pop	{r4, pc}

000d6fce <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6fce:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6fd0:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d6fd2:	4620      	mov	r0, r4
   d6fd4:	f7ff fff2 	bl	d6fbc <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d6fd8:	b124      	cbz	r4, d6fe4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6fda:	4620      	mov	r0, r4
   d6fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6fe0:	f7fd b85d 	b.w	d409e <_ZdlPv>
   d6fe4:	bd10      	pop	{r4, pc}

000d6fe6 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6fe6:	2200      	movs	r2, #0
   d6fe8:	4611      	mov	r1, r2
   d6fea:	6840      	ldr	r0, [r0, #4]
   d6fec:	f7fe bf04 	b.w	d5df8 <network_ready>

000d6ff0 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6ff0:	2200      	movs	r2, #0
   d6ff2:	4611      	mov	r1, r2
   d6ff4:	6840      	ldr	r0, [r0, #4]
   d6ff6:	f7fe bf1f 	b.w	d5e38 <network_listening>

000d6ffa <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6ffa:	2200      	movs	r2, #0
   d6ffc:	4611      	mov	r1, r2
   d6ffe:	6840      	ldr	r0, [r0, #4]
   d7000:	f7fe bf2a 	b.w	d5e58 <network_get_listen_timeout>

000d7004 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7004:	2200      	movs	r2, #0
   d7006:	6840      	ldr	r0, [r0, #4]
   d7008:	f7fe bf1e 	b.w	d5e48 <network_set_listen_timeout>

000d700c <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d700c:	2200      	movs	r2, #0
   d700e:	f081 0101 	eor.w	r1, r1, #1
   d7012:	6840      	ldr	r0, [r0, #4]
   d7014:	f7fe bf08 	b.w	d5e28 <network_listen>

000d7018 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7018:	2300      	movs	r3, #0
   d701a:	461a      	mov	r2, r3
   d701c:	4619      	mov	r1, r3
   d701e:	6840      	ldr	r0, [r0, #4]
   d7020:	f7fe befa 	b.w	d5e18 <network_off>

000d7024 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7024:	2300      	movs	r3, #0
   d7026:	461a      	mov	r2, r3
   d7028:	4619      	mov	r1, r3
   d702a:	6840      	ldr	r0, [r0, #4]
   d702c:	f7fe beec 	b.w	d5e08 <network_on>

000d7030 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7030:	2200      	movs	r2, #0
   d7032:	4611      	mov	r1, r2
   d7034:	6840      	ldr	r0, [r0, #4]
   d7036:	f7fe becf 	b.w	d5dd8 <network_connecting>

000d703a <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d703a:	2200      	movs	r2, #0
   d703c:	2102      	movs	r1, #2
   d703e:	6840      	ldr	r0, [r0, #4]
   d7040:	f7fe bed2 	b.w	d5de8 <network_disconnect>

000d7044 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7044:	2300      	movs	r3, #0
   d7046:	461a      	mov	r2, r3
   d7048:	6840      	ldr	r0, [r0, #4]
   d704a:	f7fe bebd 	b.w	d5dc8 <network_connect>
	...

000d7050 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7050:	4b02      	ldr	r3, [pc, #8]	; (d705c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7052:	2204      	movs	r2, #4
   d7054:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7056:	4a02      	ldr	r2, [pc, #8]	; (d7060 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7058:	601a      	str	r2, [r3, #0]
   d705a:	4770      	bx	lr
   d705c:	2003e720 	.word	0x2003e720
   d7060:	000d8b88 	.word	0x000d8b88

000d7064 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7064:	2300      	movs	r3, #0
   d7066:	461a      	mov	r2, r3
   d7068:	6840      	ldr	r0, [r0, #4]
   d706a:	f7fe bead 	b.w	d5dc8 <network_connect>

000d706e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d706e:	2200      	movs	r2, #0
   d7070:	2102      	movs	r1, #2
   d7072:	6840      	ldr	r0, [r0, #4]
   d7074:	f7fe beb8 	b.w	d5de8 <network_disconnect>

000d7078 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7078:	2200      	movs	r2, #0
   d707a:	4611      	mov	r1, r2
   d707c:	6840      	ldr	r0, [r0, #4]
   d707e:	f7fe beab 	b.w	d5dd8 <network_connecting>

000d7082 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7082:	2200      	movs	r2, #0
   d7084:	4611      	mov	r1, r2
   d7086:	6840      	ldr	r0, [r0, #4]
   d7088:	f7fe beb6 	b.w	d5df8 <network_ready>

000d708c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d708c:	2300      	movs	r3, #0
   d708e:	461a      	mov	r2, r3
   d7090:	4619      	mov	r1, r3
   d7092:	6840      	ldr	r0, [r0, #4]
   d7094:	f7fe beb8 	b.w	d5e08 <network_on>

000d7098 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7098:	2300      	movs	r3, #0
   d709a:	461a      	mov	r2, r3
   d709c:	4619      	mov	r1, r3
   d709e:	6840      	ldr	r0, [r0, #4]
   d70a0:	f7fe beba 	b.w	d5e18 <network_off>

000d70a4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d70a4:	2200      	movs	r2, #0
   d70a6:	f081 0101 	eor.w	r1, r1, #1
   d70aa:	6840      	ldr	r0, [r0, #4]
   d70ac:	f7fe bebc 	b.w	d5e28 <network_listen>

000d70b0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d70b0:	2200      	movs	r2, #0
   d70b2:	6840      	ldr	r0, [r0, #4]
   d70b4:	f7fe bec8 	b.w	d5e48 <network_set_listen_timeout>

000d70b8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d70b8:	2200      	movs	r2, #0
   d70ba:	4611      	mov	r1, r2
   d70bc:	6840      	ldr	r0, [r0, #4]
   d70be:	f7fe becb 	b.w	d5e58 <network_get_listen_timeout>

000d70c2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d70c2:	2200      	movs	r2, #0
   d70c4:	4611      	mov	r1, r2
   d70c6:	6840      	ldr	r0, [r0, #4]
   d70c8:	f7fe beb6 	b.w	d5e38 <network_listening>

000d70cc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d70cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d70d0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d70d2:	b095      	sub	sp, #84	; 0x54
   d70d4:	4616      	mov	r6, r2
   d70d6:	460d      	mov	r5, r1
   d70d8:	4607      	mov	r7, r0
    IPAddress addr;
   d70da:	f7ff fa25 	bl	d6528 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d70de:	4621      	mov	r1, r4
   d70e0:	2220      	movs	r2, #32
   d70e2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d70e4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d70e6:	f000 fed4 	bl	d7e92 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d70ea:	2340      	movs	r3, #64	; 0x40
   d70ec:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d70ee:	4621      	mov	r1, r4
   d70f0:	466b      	mov	r3, sp
   d70f2:	aa0c      	add	r2, sp, #48	; 0x30
   d70f4:	4630      	mov	r0, r6
   d70f6:	f7fe fc53 	bl	d59a0 <netdb_getaddrinfo>
    if (!r) {
   d70fa:	4604      	mov	r4, r0
   d70fc:	2800      	cmp	r0, #0
   d70fe:	d144      	bne.n	d718a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7100:	4602      	mov	r2, r0
   d7102:	2101      	movs	r1, #1
   d7104:	6868      	ldr	r0, [r5, #4]
   d7106:	f7fe fe77 	bl	d5df8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d710a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d710c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d710e:	4622      	mov	r2, r4
   d7110:	6868      	ldr	r0, [r5, #4]
   d7112:	f7fe fe71 	bl	d5df8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7116:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7118:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d711a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d711c:	2e00      	cmp	r6, #0
   d711e:	d034      	beq.n	d718a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7120:	2900      	cmp	r1, #0
   d7122:	d132      	bne.n	d718a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7124:	6873      	ldr	r3, [r6, #4]
   d7126:	2b02      	cmp	r3, #2
   d7128:	d002      	beq.n	d7130 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d712a:	2b0a      	cmp	r3, #10
   d712c:	d009      	beq.n	d7142 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d712e:	e02a      	b.n	d7186 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7130:	f1b8 0f00 	cmp.w	r8, #0
   d7134:	d027      	beq.n	d7186 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7136:	6971      	ldr	r1, [r6, #20]
   d7138:	4638      	mov	r0, r7
   d713a:	3104      	adds	r1, #4
   d713c:	f7ff fa37 	bl	d65ae <_ZN9IPAddressaSEPKh>
   d7140:	e020      	b.n	d7184 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7142:	f1b9 0f00 	cmp.w	r9, #0
   d7146:	d01e      	beq.n	d7186 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7148:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d714a:	2211      	movs	r2, #17
   d714c:	a801      	add	r0, sp, #4
   d714e:	f000 fea0 	bl	d7e92 <memset>
                    a.v = 6;
   d7152:	2306      	movs	r3, #6
   d7154:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7158:	ad01      	add	r5, sp, #4
   d715a:	f104 0308 	add.w	r3, r4, #8
   d715e:	3418      	adds	r4, #24
   d7160:	6818      	ldr	r0, [r3, #0]
   d7162:	6859      	ldr	r1, [r3, #4]
   d7164:	462a      	mov	r2, r5
   d7166:	c203      	stmia	r2!, {r0, r1}
   d7168:	3308      	adds	r3, #8
   d716a:	42a3      	cmp	r3, r4
   d716c:	4615      	mov	r5, r2
   d716e:	d1f7      	bne.n	d7160 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7170:	a901      	add	r1, sp, #4
   d7172:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7174:	ad07      	add	r5, sp, #28
   d7176:	f7ff f9e5 	bl	d6544 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d717a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d717c:	1d3c      	adds	r4, r7, #4
   d717e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7180:	682b      	ldr	r3, [r5, #0]
   d7182:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7184:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7186:	69f6      	ldr	r6, [r6, #28]
   d7188:	e7c8      	b.n	d711c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d718a:	9800      	ldr	r0, [sp, #0]
   d718c:	f7fe fc00 	bl	d5990 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7190:	4638      	mov	r0, r7
   d7192:	b015      	add	sp, #84	; 0x54
   d7194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7198 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7198:	4b02      	ldr	r3, [pc, #8]	; (d71a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d719a:	4a03      	ldr	r2, [pc, #12]	; (d71a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d719c:	601a      	str	r2, [r3, #0]
   d719e:	2200      	movs	r2, #0
   d71a0:	605a      	str	r2, [r3, #4]
   d71a2:	4770      	bx	lr
   d71a4:	2003e728 	.word	0x2003e728
   d71a8:	000d8bbc 	.word	0x000d8bbc

000d71ac <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d71ac:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d71ae:	4e18      	ldr	r6, [pc, #96]	; (d7210 <pinAvailable+0x64>)
   d71b0:	6831      	ldr	r1, [r6, #0]
   d71b2:	f011 0501 	ands.w	r5, r1, #1
   d71b6:	4604      	mov	r4, r0
   d71b8:	d10a      	bne.n	d71d0 <pinAvailable+0x24>
   d71ba:	4630      	mov	r0, r6
   d71bc:	f7fc ff7e 	bl	d40bc <__cxa_guard_acquire>
   d71c0:	b130      	cbz	r0, d71d0 <pinAvailable+0x24>
   d71c2:	4629      	mov	r1, r5
   d71c4:	4813      	ldr	r0, [pc, #76]	; (d7214 <pinAvailable+0x68>)
   d71c6:	f7fe febb 	bl	d5f40 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d71ca:	4630      	mov	r0, r6
   d71cc:	f7fc ff7b 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d71d0:	4810      	ldr	r0, [pc, #64]	; (d7214 <pinAvailable+0x68>)
   d71d2:	f7fe ffd7 	bl	d6184 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d71d6:	b128      	cbz	r0, d71e4 <pinAvailable+0x38>
   d71d8:	f1a4 030b 	sub.w	r3, r4, #11
   d71dc:	2b02      	cmp	r3, #2
   d71de:	d801      	bhi.n	d71e4 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d71e0:	2000      	movs	r0, #0
   d71e2:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d71e4:	f000 f892 	bl	d730c <_Z19__fetch_global_Wirev>
   d71e8:	f7ff fb75 	bl	d68d6 <_ZN7TwoWire9isEnabledEv>
   d71ec:	b108      	cbz	r0, d71f2 <pinAvailable+0x46>
   d71ee:	2c01      	cmp	r4, #1
   d71f0:	d9f6      	bls.n	d71e0 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d71f2:	f7ff fac7 	bl	d6784 <_Z22__fetch_global_Serial1v>
   d71f6:	f7ff fac1 	bl	d677c <_ZN11USARTSerial9isEnabledEv>
   d71fa:	b118      	cbz	r0, d7204 <pinAvailable+0x58>
   d71fc:	f1a4 0309 	sub.w	r3, r4, #9
   d7200:	2b01      	cmp	r3, #1
   d7202:	d9ed      	bls.n	d71e0 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7204:	2c23      	cmp	r4, #35	; 0x23
   d7206:	bf8c      	ite	hi
   d7208:	2000      	movhi	r0, #0
   d720a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d720c:	bd70      	pop	{r4, r5, r6, pc}
   d720e:	bf00      	nop
   d7210:	2003e3b0 	.word	0x2003e3b0
   d7214:	2003e3b4 	.word	0x2003e3b4

000d7218 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7218:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d721a:	b538      	push	{r3, r4, r5, lr}
   d721c:	4604      	mov	r4, r0
   d721e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7220:	d80a      	bhi.n	d7238 <pinMode+0x20>
   d7222:	29ff      	cmp	r1, #255	; 0xff
   d7224:	d008      	beq.n	d7238 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7226:	f7ff ffc1 	bl	d71ac <pinAvailable>
   d722a:	b128      	cbz	r0, d7238 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d722c:	4629      	mov	r1, r5
   d722e:	4620      	mov	r0, r4
}
   d7230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7234:	f7fe bbc4 	b.w	d59c0 <HAL_Pin_Mode>
   d7238:	bd38      	pop	{r3, r4, r5, pc}

000d723a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d723a:	b538      	push	{r3, r4, r5, lr}
   d723c:	4604      	mov	r4, r0
   d723e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7240:	f7fe fbc6 	bl	d59d0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7244:	28ff      	cmp	r0, #255	; 0xff
   d7246:	d010      	beq.n	d726a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7248:	2806      	cmp	r0, #6
   d724a:	d804      	bhi.n	d7256 <digitalWrite+0x1c>
   d724c:	234d      	movs	r3, #77	; 0x4d
   d724e:	fa23 f000 	lsr.w	r0, r3, r0
   d7252:	07c3      	lsls	r3, r0, #31
   d7254:	d409      	bmi.n	d726a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7256:	4620      	mov	r0, r4
   d7258:	f7ff ffa8 	bl	d71ac <pinAvailable>
   d725c:	b128      	cbz	r0, d726a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d725e:	4629      	mov	r1, r5
   d7260:	4620      	mov	r0, r4
}
   d7262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7266:	f7fe bbbb 	b.w	d59e0 <HAL_GPIO_Write>
   d726a:	bd38      	pop	{r3, r4, r5, pc}

000d726c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d726c:	b510      	push	{r4, lr}
   d726e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7270:	f7fe fbae 	bl	d59d0 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d7274:	3804      	subs	r0, #4
   d7276:	b2c0      	uxtb	r0, r0
   d7278:	2801      	cmp	r0, #1
   d727a:	d908      	bls.n	d728e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d727c:	4620      	mov	r0, r4
   d727e:	f7ff ff95 	bl	d71ac <pinAvailable>
   d7282:	b120      	cbz	r0, d728e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7284:	4620      	mov	r0, r4
}
   d7286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d728a:	f7fe bbb1 	b.w	d59f0 <HAL_GPIO_Read>
}
   d728e:	2000      	movs	r0, #0
   d7290:	bd10      	pop	{r4, pc}

000d7292 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d7292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7296:	4690      	mov	r8, r2
   d7298:	461e      	mov	r6, r3
   d729a:	2407      	movs	r4, #7
   d729c:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d729e:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d72a0:	f1b8 0f00 	cmp.w	r8, #0
   d72a4:	d104      	bne.n	d72b0 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d72a6:	f1c4 0107 	rsb	r1, r4, #7
   d72aa:	fa46 f101 	asr.w	r1, r6, r1
   d72ae:	e001      	b.n	d72b4 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d72b0:	fa46 f104 	asr.w	r1, r6, r4
   d72b4:	f001 0101 	and.w	r1, r1, #1
   d72b8:	4638      	mov	r0, r7
   d72ba:	f7ff ffbe 	bl	d723a <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d72be:	2101      	movs	r1, #1
   d72c0:	4628      	mov	r0, r5
   d72c2:	f7ff ffba 	bl	d723a <digitalWrite>
    digitalWrite(clockPin, LOW);
   d72c6:	2100      	movs	r1, #0
   d72c8:	4628      	mov	r0, r5
   d72ca:	f7ff ffb6 	bl	d723a <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d72ce:	f114 34ff 	adds.w	r4, r4, #4294967295
   d72d2:	d2e5      	bcs.n	d72a0 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d72d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d72d8 <_Z17acquireWireBufferv>:
   d72d8:	b570      	push	{r4, r5, r6, lr}
   d72da:	4604      	mov	r4, r0
   d72dc:	2514      	movs	r5, #20
   d72de:	462a      	mov	r2, r5
   d72e0:	4e09      	ldr	r6, [pc, #36]	; (d7308 <_Z17acquireWireBufferv+0x30>)
   d72e2:	2100      	movs	r1, #0
   d72e4:	f000 fdd5 	bl	d7e92 <memset>
   d72e8:	8025      	strh	r5, [r4, #0]
   d72ea:	2520      	movs	r5, #32
   d72ec:	4631      	mov	r1, r6
   d72ee:	60a5      	str	r5, [r4, #8]
   d72f0:	6125      	str	r5, [r4, #16]
   d72f2:	4628      	mov	r0, r5
   d72f4:	f000 f840 	bl	d7378 <_ZnajRKSt9nothrow_t>
   d72f8:	4631      	mov	r1, r6
   d72fa:	6060      	str	r0, [r4, #4]
   d72fc:	4628      	mov	r0, r5
   d72fe:	f000 f83b 	bl	d7378 <_ZnajRKSt9nothrow_t>
   d7302:	60e0      	str	r0, [r4, #12]
   d7304:	4620      	mov	r0, r4
   d7306:	bd70      	pop	{r4, r5, r6, pc}
   d7308:	000d8be8 	.word	0x000d8be8

000d730c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d730c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d730e:	4d0e      	ldr	r5, [pc, #56]	; (d7348 <_Z19__fetch_global_Wirev+0x3c>)
   d7310:	6829      	ldr	r1, [r5, #0]
   d7312:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7316:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7318:	d113      	bne.n	d7342 <_Z19__fetch_global_Wirev+0x36>
   d731a:	4628      	mov	r0, r5
   d731c:	f7fc fece 	bl	d40bc <__cxa_guard_acquire>
   d7320:	b178      	cbz	r0, d7342 <_Z19__fetch_global_Wirev+0x36>
   d7322:	a801      	add	r0, sp, #4
   d7324:	f7ff ffd8 	bl	d72d8 <_Z17acquireWireBufferv>
   d7328:	aa01      	add	r2, sp, #4
   d732a:	4621      	mov	r1, r4
   d732c:	4807      	ldr	r0, [pc, #28]	; (d734c <_Z19__fetch_global_Wirev+0x40>)
   d732e:	f7ff fa7b 	bl	d6828 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7332:	4628      	mov	r0, r5
   d7334:	f7fc fec7 	bl	d40c6 <__cxa_guard_release>
   d7338:	4a05      	ldr	r2, [pc, #20]	; (d7350 <_Z19__fetch_global_Wirev+0x44>)
   d733a:	4906      	ldr	r1, [pc, #24]	; (d7354 <_Z19__fetch_global_Wirev+0x48>)
   d733c:	4803      	ldr	r0, [pc, #12]	; (d734c <_Z19__fetch_global_Wirev+0x40>)
   d733e:	f000 f80b 	bl	d7358 <__aeabi_atexit>
	return wire;
}
   d7342:	4802      	ldr	r0, [pc, #8]	; (d734c <_Z19__fetch_global_Wirev+0x40>)
   d7344:	b007      	add	sp, #28
   d7346:	bd30      	pop	{r4, r5, pc}
   d7348:	2003e734 	.word	0x2003e734
   d734c:	2003e738 	.word	0x2003e738
   d7350:	2003e1dc 	.word	0x2003e1dc
   d7354:	000d67d1 	.word	0x000d67d1

000d7358 <__aeabi_atexit>:
   d7358:	460b      	mov	r3, r1
   d735a:	4601      	mov	r1, r0
   d735c:	4618      	mov	r0, r3
   d735e:	f000 bd7f 	b.w	d7e60 <__cxa_atexit>
	...

000d7364 <_ZSt15get_new_handlerv>:
   d7364:	4b02      	ldr	r3, [pc, #8]	; (d7370 <_ZSt15get_new_handlerv+0xc>)
   d7366:	6818      	ldr	r0, [r3, #0]
   d7368:	f3bf 8f5f 	dmb	sy
   d736c:	4770      	bx	lr
   d736e:	bf00      	nop
   d7370:	2003e74c 	.word	0x2003e74c

000d7374 <_ZdlPvj>:
   d7374:	f7fc be93 	b.w	d409e <_ZdlPv>

000d7378 <_ZnajRKSt9nothrow_t>:
   d7378:	f000 b800 	b.w	d737c <_ZnwjRKSt9nothrow_t>

000d737c <_ZnwjRKSt9nothrow_t>:
   d737c:	b510      	push	{r4, lr}
   d737e:	2800      	cmp	r0, #0
   d7380:	bf14      	ite	ne
   d7382:	4604      	movne	r4, r0
   d7384:	2401      	moveq	r4, #1
   d7386:	4620      	mov	r0, r4
   d7388:	f7fe fd76 	bl	d5e78 <malloc>
   d738c:	b920      	cbnz	r0, d7398 <_ZnwjRKSt9nothrow_t+0x1c>
   d738e:	f7ff ffe9 	bl	d7364 <_ZSt15get_new_handlerv>
   d7392:	b108      	cbz	r0, d7398 <_ZnwjRKSt9nothrow_t+0x1c>
   d7394:	4780      	blx	r0
   d7396:	e7f6      	b.n	d7386 <_ZnwjRKSt9nothrow_t+0xa>
   d7398:	bd10      	pop	{r4, pc}
	...

000d739c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d739c:	4b18      	ldr	r3, [pc, #96]	; (d7400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d739e:	681a      	ldr	r2, [r3, #0]
   d73a0:	07d1      	lsls	r1, r2, #31
   d73a2:	bf5c      	itt	pl
   d73a4:	2201      	movpl	r2, #1
   d73a6:	601a      	strpl	r2, [r3, #0]
   d73a8:	4b16      	ldr	r3, [pc, #88]	; (d7404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d73aa:	681a      	ldr	r2, [r3, #0]
   d73ac:	07d2      	lsls	r2, r2, #31
   d73ae:	bf5c      	itt	pl
   d73b0:	2201      	movpl	r2, #1
   d73b2:	601a      	strpl	r2, [r3, #0]
   d73b4:	4b14      	ldr	r3, [pc, #80]	; (d7408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d73b6:	681a      	ldr	r2, [r3, #0]
   d73b8:	07d0      	lsls	r0, r2, #31
   d73ba:	bf5c      	itt	pl
   d73bc:	2201      	movpl	r2, #1
   d73be:	601a      	strpl	r2, [r3, #0]
   d73c0:	4b12      	ldr	r3, [pc, #72]	; (d740c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d73c2:	681a      	ldr	r2, [r3, #0]
   d73c4:	07d1      	lsls	r1, r2, #31
   d73c6:	bf5c      	itt	pl
   d73c8:	2201      	movpl	r2, #1
   d73ca:	601a      	strpl	r2, [r3, #0]
   d73cc:	4b10      	ldr	r3, [pc, #64]	; (d7410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d73ce:	681a      	ldr	r2, [r3, #0]
   d73d0:	07d2      	lsls	r2, r2, #31
   d73d2:	bf5c      	itt	pl
   d73d4:	2201      	movpl	r2, #1
   d73d6:	601a      	strpl	r2, [r3, #0]
   d73d8:	4b0e      	ldr	r3, [pc, #56]	; (d7414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d73da:	681a      	ldr	r2, [r3, #0]
   d73dc:	07d0      	lsls	r0, r2, #31
   d73de:	bf5c      	itt	pl
   d73e0:	2201      	movpl	r2, #1
   d73e2:	601a      	strpl	r2, [r3, #0]
   d73e4:	4b0c      	ldr	r3, [pc, #48]	; (d7418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d73e6:	681a      	ldr	r2, [r3, #0]
   d73e8:	07d1      	lsls	r1, r2, #31
   d73ea:	bf5c      	itt	pl
   d73ec:	2201      	movpl	r2, #1
   d73ee:	601a      	strpl	r2, [r3, #0]
   d73f0:	4b0a      	ldr	r3, [pc, #40]	; (d741c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d73f2:	681a      	ldr	r2, [r3, #0]
   d73f4:	07d2      	lsls	r2, r2, #31
   d73f6:	bf5c      	itt	pl
   d73f8:	2201      	movpl	r2, #1
   d73fa:	601a      	strpl	r2, [r3, #0]
   d73fc:	4770      	bx	lr
   d73fe:	bf00      	nop
   d7400:	2003e76c 	.word	0x2003e76c
   d7404:	2003e768 	.word	0x2003e768
   d7408:	2003e764 	.word	0x2003e764
   d740c:	2003e760 	.word	0x2003e760
   d7410:	2003e75c 	.word	0x2003e75c
   d7414:	2003e758 	.word	0x2003e758
   d7418:	2003e754 	.word	0x2003e754
   d741c:	2003e750 	.word	0x2003e750

000d7420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7420:	4b24      	ldr	r3, [pc, #144]	; (d74b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7422:	681a      	ldr	r2, [r3, #0]
   d7424:	07d0      	lsls	r0, r2, #31
   d7426:	bf5c      	itt	pl
   d7428:	2201      	movpl	r2, #1
   d742a:	601a      	strpl	r2, [r3, #0]
   d742c:	4b22      	ldr	r3, [pc, #136]	; (d74b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d742e:	681a      	ldr	r2, [r3, #0]
   d7430:	07d1      	lsls	r1, r2, #31
   d7432:	bf5c      	itt	pl
   d7434:	2201      	movpl	r2, #1
   d7436:	601a      	strpl	r2, [r3, #0]
   d7438:	4b20      	ldr	r3, [pc, #128]	; (d74bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d743a:	681a      	ldr	r2, [r3, #0]
   d743c:	07d2      	lsls	r2, r2, #31
   d743e:	bf5c      	itt	pl
   d7440:	2201      	movpl	r2, #1
   d7442:	601a      	strpl	r2, [r3, #0]
   d7444:	4b1e      	ldr	r3, [pc, #120]	; (d74c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7446:	681a      	ldr	r2, [r3, #0]
   d7448:	07d0      	lsls	r0, r2, #31
   d744a:	bf5c      	itt	pl
   d744c:	2201      	movpl	r2, #1
   d744e:	601a      	strpl	r2, [r3, #0]
   d7450:	4b1c      	ldr	r3, [pc, #112]	; (d74c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7452:	681a      	ldr	r2, [r3, #0]
   d7454:	07d1      	lsls	r1, r2, #31
   d7456:	bf5c      	itt	pl
   d7458:	2201      	movpl	r2, #1
   d745a:	601a      	strpl	r2, [r3, #0]
   d745c:	4b1a      	ldr	r3, [pc, #104]	; (d74c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d745e:	681a      	ldr	r2, [r3, #0]
   d7460:	07d2      	lsls	r2, r2, #31
   d7462:	bf5c      	itt	pl
   d7464:	2201      	movpl	r2, #1
   d7466:	601a      	strpl	r2, [r3, #0]
   d7468:	4b18      	ldr	r3, [pc, #96]	; (d74cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d746a:	681a      	ldr	r2, [r3, #0]
   d746c:	07d0      	lsls	r0, r2, #31
   d746e:	bf5c      	itt	pl
   d7470:	2201      	movpl	r2, #1
   d7472:	601a      	strpl	r2, [r3, #0]
   d7474:	4b16      	ldr	r3, [pc, #88]	; (d74d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7476:	681a      	ldr	r2, [r3, #0]
   d7478:	07d1      	lsls	r1, r2, #31
   d747a:	bf5c      	itt	pl
   d747c:	2201      	movpl	r2, #1
   d747e:	601a      	strpl	r2, [r3, #0]
   d7480:	4b14      	ldr	r3, [pc, #80]	; (d74d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7482:	681a      	ldr	r2, [r3, #0]
   d7484:	07d2      	lsls	r2, r2, #31
   d7486:	bf5c      	itt	pl
   d7488:	2201      	movpl	r2, #1
   d748a:	601a      	strpl	r2, [r3, #0]
   d748c:	4b12      	ldr	r3, [pc, #72]	; (d74d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d748e:	681a      	ldr	r2, [r3, #0]
   d7490:	07d0      	lsls	r0, r2, #31
   d7492:	bf5c      	itt	pl
   d7494:	2201      	movpl	r2, #1
   d7496:	601a      	strpl	r2, [r3, #0]
   d7498:	4b10      	ldr	r3, [pc, #64]	; (d74dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d749a:	681a      	ldr	r2, [r3, #0]
   d749c:	07d1      	lsls	r1, r2, #31
   d749e:	bf5c      	itt	pl
   d74a0:	2201      	movpl	r2, #1
   d74a2:	601a      	strpl	r2, [r3, #0]
   d74a4:	4b0e      	ldr	r3, [pc, #56]	; (d74e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d74a6:	681a      	ldr	r2, [r3, #0]
   d74a8:	07d2      	lsls	r2, r2, #31
   d74aa:	bf5c      	itt	pl
   d74ac:	2201      	movpl	r2, #1
   d74ae:	601a      	strpl	r2, [r3, #0]
   d74b0:	4770      	bx	lr
   d74b2:	bf00      	nop
   d74b4:	2003e79c 	.word	0x2003e79c
   d74b8:	2003e798 	.word	0x2003e798
   d74bc:	2003e794 	.word	0x2003e794
   d74c0:	2003e790 	.word	0x2003e790
   d74c4:	2003e78c 	.word	0x2003e78c
   d74c8:	2003e788 	.word	0x2003e788
   d74cc:	2003e784 	.word	0x2003e784
   d74d0:	2003e780 	.word	0x2003e780
   d74d4:	2003e77c 	.word	0x2003e77c
   d74d8:	2003e778 	.word	0x2003e778
   d74dc:	2003e774 	.word	0x2003e774
   d74e0:	2003e770 	.word	0x2003e770

000d74e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d74e4:	4b24      	ldr	r3, [pc, #144]	; (d7578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d74e6:	681a      	ldr	r2, [r3, #0]
   d74e8:	07d0      	lsls	r0, r2, #31
   d74ea:	bf5c      	itt	pl
   d74ec:	2201      	movpl	r2, #1
   d74ee:	601a      	strpl	r2, [r3, #0]
   d74f0:	4b22      	ldr	r3, [pc, #136]	; (d757c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d74f2:	681a      	ldr	r2, [r3, #0]
   d74f4:	07d1      	lsls	r1, r2, #31
   d74f6:	bf5c      	itt	pl
   d74f8:	2201      	movpl	r2, #1
   d74fa:	601a      	strpl	r2, [r3, #0]
   d74fc:	4b20      	ldr	r3, [pc, #128]	; (d7580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d74fe:	681a      	ldr	r2, [r3, #0]
   d7500:	07d2      	lsls	r2, r2, #31
   d7502:	bf5c      	itt	pl
   d7504:	2201      	movpl	r2, #1
   d7506:	601a      	strpl	r2, [r3, #0]
   d7508:	4b1e      	ldr	r3, [pc, #120]	; (d7584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d750a:	681a      	ldr	r2, [r3, #0]
   d750c:	07d0      	lsls	r0, r2, #31
   d750e:	bf5c      	itt	pl
   d7510:	2201      	movpl	r2, #1
   d7512:	601a      	strpl	r2, [r3, #0]
   d7514:	4b1c      	ldr	r3, [pc, #112]	; (d7588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7516:	681a      	ldr	r2, [r3, #0]
   d7518:	07d1      	lsls	r1, r2, #31
   d751a:	bf5c      	itt	pl
   d751c:	2201      	movpl	r2, #1
   d751e:	601a      	strpl	r2, [r3, #0]
   d7520:	4b1a      	ldr	r3, [pc, #104]	; (d758c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7522:	681a      	ldr	r2, [r3, #0]
   d7524:	07d2      	lsls	r2, r2, #31
   d7526:	bf5c      	itt	pl
   d7528:	2201      	movpl	r2, #1
   d752a:	601a      	strpl	r2, [r3, #0]
   d752c:	4b18      	ldr	r3, [pc, #96]	; (d7590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d752e:	681a      	ldr	r2, [r3, #0]
   d7530:	07d0      	lsls	r0, r2, #31
   d7532:	bf5c      	itt	pl
   d7534:	2201      	movpl	r2, #1
   d7536:	601a      	strpl	r2, [r3, #0]
   d7538:	4b16      	ldr	r3, [pc, #88]	; (d7594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d753a:	681a      	ldr	r2, [r3, #0]
   d753c:	07d1      	lsls	r1, r2, #31
   d753e:	bf5c      	itt	pl
   d7540:	2201      	movpl	r2, #1
   d7542:	601a      	strpl	r2, [r3, #0]
   d7544:	4b14      	ldr	r3, [pc, #80]	; (d7598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7546:	681a      	ldr	r2, [r3, #0]
   d7548:	07d2      	lsls	r2, r2, #31
   d754a:	bf5c      	itt	pl
   d754c:	2201      	movpl	r2, #1
   d754e:	601a      	strpl	r2, [r3, #0]
   d7550:	4b12      	ldr	r3, [pc, #72]	; (d759c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7552:	681a      	ldr	r2, [r3, #0]
   d7554:	07d0      	lsls	r0, r2, #31
   d7556:	bf5c      	itt	pl
   d7558:	2201      	movpl	r2, #1
   d755a:	601a      	strpl	r2, [r3, #0]
   d755c:	4b10      	ldr	r3, [pc, #64]	; (d75a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d755e:	681a      	ldr	r2, [r3, #0]
   d7560:	07d1      	lsls	r1, r2, #31
   d7562:	bf5c      	itt	pl
   d7564:	2201      	movpl	r2, #1
   d7566:	601a      	strpl	r2, [r3, #0]
   d7568:	4b0e      	ldr	r3, [pc, #56]	; (d75a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d756a:	681a      	ldr	r2, [r3, #0]
   d756c:	07d2      	lsls	r2, r2, #31
   d756e:	bf5c      	itt	pl
   d7570:	2201      	movpl	r2, #1
   d7572:	601a      	strpl	r2, [r3, #0]
   d7574:	4770      	bx	lr
   d7576:	bf00      	nop
   d7578:	2003e7cc 	.word	0x2003e7cc
   d757c:	2003e7c8 	.word	0x2003e7c8
   d7580:	2003e7c4 	.word	0x2003e7c4
   d7584:	2003e7c0 	.word	0x2003e7c0
   d7588:	2003e7bc 	.word	0x2003e7bc
   d758c:	2003e7b8 	.word	0x2003e7b8
   d7590:	2003e7b4 	.word	0x2003e7b4
   d7594:	2003e7b0 	.word	0x2003e7b0
   d7598:	2003e7ac 	.word	0x2003e7ac
   d759c:	2003e7a8 	.word	0x2003e7a8
   d75a0:	2003e7a4 	.word	0x2003e7a4
   d75a4:	2003e7a0 	.word	0x2003e7a0

000d75a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d75a8:	4b18      	ldr	r3, [pc, #96]	; (d760c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d75aa:	681a      	ldr	r2, [r3, #0]
   d75ac:	07d1      	lsls	r1, r2, #31
   d75ae:	bf5c      	itt	pl
   d75b0:	2201      	movpl	r2, #1
   d75b2:	601a      	strpl	r2, [r3, #0]
   d75b4:	4b16      	ldr	r3, [pc, #88]	; (d7610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d75b6:	681a      	ldr	r2, [r3, #0]
   d75b8:	07d2      	lsls	r2, r2, #31
   d75ba:	bf5c      	itt	pl
   d75bc:	2201      	movpl	r2, #1
   d75be:	601a      	strpl	r2, [r3, #0]
   d75c0:	4b14      	ldr	r3, [pc, #80]	; (d7614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d75c2:	681a      	ldr	r2, [r3, #0]
   d75c4:	07d0      	lsls	r0, r2, #31
   d75c6:	bf5c      	itt	pl
   d75c8:	2201      	movpl	r2, #1
   d75ca:	601a      	strpl	r2, [r3, #0]
   d75cc:	4b12      	ldr	r3, [pc, #72]	; (d7618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d75ce:	681a      	ldr	r2, [r3, #0]
   d75d0:	07d1      	lsls	r1, r2, #31
   d75d2:	bf5c      	itt	pl
   d75d4:	2201      	movpl	r2, #1
   d75d6:	601a      	strpl	r2, [r3, #0]
   d75d8:	4b10      	ldr	r3, [pc, #64]	; (d761c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d75da:	681a      	ldr	r2, [r3, #0]
   d75dc:	07d2      	lsls	r2, r2, #31
   d75de:	bf5c      	itt	pl
   d75e0:	2201      	movpl	r2, #1
   d75e2:	601a      	strpl	r2, [r3, #0]
   d75e4:	4b0e      	ldr	r3, [pc, #56]	; (d7620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d75e6:	681a      	ldr	r2, [r3, #0]
   d75e8:	07d0      	lsls	r0, r2, #31
   d75ea:	bf5c      	itt	pl
   d75ec:	2201      	movpl	r2, #1
   d75ee:	601a      	strpl	r2, [r3, #0]
   d75f0:	4b0c      	ldr	r3, [pc, #48]	; (d7624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d75f2:	681a      	ldr	r2, [r3, #0]
   d75f4:	07d1      	lsls	r1, r2, #31
   d75f6:	bf5c      	itt	pl
   d75f8:	2201      	movpl	r2, #1
   d75fa:	601a      	strpl	r2, [r3, #0]
   d75fc:	4b0a      	ldr	r3, [pc, #40]	; (d7628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d75fe:	681a      	ldr	r2, [r3, #0]
   d7600:	07d2      	lsls	r2, r2, #31
   d7602:	bf5c      	itt	pl
   d7604:	2201      	movpl	r2, #1
   d7606:	601a      	strpl	r2, [r3, #0]
   d7608:	4770      	bx	lr
   d760a:	bf00      	nop
   d760c:	2003e7ec 	.word	0x2003e7ec
   d7610:	2003e7e8 	.word	0x2003e7e8
   d7614:	2003e7e4 	.word	0x2003e7e4
   d7618:	2003e7e0 	.word	0x2003e7e0
   d761c:	2003e7dc 	.word	0x2003e7dc
   d7620:	2003e7d8 	.word	0x2003e7d8
   d7624:	2003e7d4 	.word	0x2003e7d4
   d7628:	2003e7d0 	.word	0x2003e7d0

000d762c <__aeabi_drsub>:
   d762c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7630:	e002      	b.n	d7638 <__adddf3>
   d7632:	bf00      	nop

000d7634 <__aeabi_dsub>:
   d7634:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7638 <__adddf3>:
   d7638:	b530      	push	{r4, r5, lr}
   d763a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d763e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7642:	ea94 0f05 	teq	r4, r5
   d7646:	bf08      	it	eq
   d7648:	ea90 0f02 	teqeq	r0, r2
   d764c:	bf1f      	itttt	ne
   d764e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7652:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7656:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d765a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d765e:	f000 80e2 	beq.w	d7826 <__adddf3+0x1ee>
   d7662:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7666:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d766a:	bfb8      	it	lt
   d766c:	426d      	neglt	r5, r5
   d766e:	dd0c      	ble.n	d768a <__adddf3+0x52>
   d7670:	442c      	add	r4, r5
   d7672:	ea80 0202 	eor.w	r2, r0, r2
   d7676:	ea81 0303 	eor.w	r3, r1, r3
   d767a:	ea82 0000 	eor.w	r0, r2, r0
   d767e:	ea83 0101 	eor.w	r1, r3, r1
   d7682:	ea80 0202 	eor.w	r2, r0, r2
   d7686:	ea81 0303 	eor.w	r3, r1, r3
   d768a:	2d36      	cmp	r5, #54	; 0x36
   d768c:	bf88      	it	hi
   d768e:	bd30      	pophi	{r4, r5, pc}
   d7690:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7694:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7698:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d769c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d76a0:	d002      	beq.n	d76a8 <__adddf3+0x70>
   d76a2:	4240      	negs	r0, r0
   d76a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d76a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d76ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d76b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d76b4:	d002      	beq.n	d76bc <__adddf3+0x84>
   d76b6:	4252      	negs	r2, r2
   d76b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d76bc:	ea94 0f05 	teq	r4, r5
   d76c0:	f000 80a7 	beq.w	d7812 <__adddf3+0x1da>
   d76c4:	f1a4 0401 	sub.w	r4, r4, #1
   d76c8:	f1d5 0e20 	rsbs	lr, r5, #32
   d76cc:	db0d      	blt.n	d76ea <__adddf3+0xb2>
   d76ce:	fa02 fc0e 	lsl.w	ip, r2, lr
   d76d2:	fa22 f205 	lsr.w	r2, r2, r5
   d76d6:	1880      	adds	r0, r0, r2
   d76d8:	f141 0100 	adc.w	r1, r1, #0
   d76dc:	fa03 f20e 	lsl.w	r2, r3, lr
   d76e0:	1880      	adds	r0, r0, r2
   d76e2:	fa43 f305 	asr.w	r3, r3, r5
   d76e6:	4159      	adcs	r1, r3
   d76e8:	e00e      	b.n	d7708 <__adddf3+0xd0>
   d76ea:	f1a5 0520 	sub.w	r5, r5, #32
   d76ee:	f10e 0e20 	add.w	lr, lr, #32
   d76f2:	2a01      	cmp	r2, #1
   d76f4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d76f8:	bf28      	it	cs
   d76fa:	f04c 0c02 	orrcs.w	ip, ip, #2
   d76fe:	fa43 f305 	asr.w	r3, r3, r5
   d7702:	18c0      	adds	r0, r0, r3
   d7704:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7708:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d770c:	d507      	bpl.n	d771e <__adddf3+0xe6>
   d770e:	f04f 0e00 	mov.w	lr, #0
   d7712:	f1dc 0c00 	rsbs	ip, ip, #0
   d7716:	eb7e 0000 	sbcs.w	r0, lr, r0
   d771a:	eb6e 0101 	sbc.w	r1, lr, r1
   d771e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7722:	d31b      	bcc.n	d775c <__adddf3+0x124>
   d7724:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7728:	d30c      	bcc.n	d7744 <__adddf3+0x10c>
   d772a:	0849      	lsrs	r1, r1, #1
   d772c:	ea5f 0030 	movs.w	r0, r0, rrx
   d7730:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7734:	f104 0401 	add.w	r4, r4, #1
   d7738:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d773c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7740:	f080 809a 	bcs.w	d7878 <__adddf3+0x240>
   d7744:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7748:	bf08      	it	eq
   d774a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d774e:	f150 0000 	adcs.w	r0, r0, #0
   d7752:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7756:	ea41 0105 	orr.w	r1, r1, r5
   d775a:	bd30      	pop	{r4, r5, pc}
   d775c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7760:	4140      	adcs	r0, r0
   d7762:	eb41 0101 	adc.w	r1, r1, r1
   d7766:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d776a:	f1a4 0401 	sub.w	r4, r4, #1
   d776e:	d1e9      	bne.n	d7744 <__adddf3+0x10c>
   d7770:	f091 0f00 	teq	r1, #0
   d7774:	bf04      	itt	eq
   d7776:	4601      	moveq	r1, r0
   d7778:	2000      	moveq	r0, #0
   d777a:	fab1 f381 	clz	r3, r1
   d777e:	bf08      	it	eq
   d7780:	3320      	addeq	r3, #32
   d7782:	f1a3 030b 	sub.w	r3, r3, #11
   d7786:	f1b3 0220 	subs.w	r2, r3, #32
   d778a:	da0c      	bge.n	d77a6 <__adddf3+0x16e>
   d778c:	320c      	adds	r2, #12
   d778e:	dd08      	ble.n	d77a2 <__adddf3+0x16a>
   d7790:	f102 0c14 	add.w	ip, r2, #20
   d7794:	f1c2 020c 	rsb	r2, r2, #12
   d7798:	fa01 f00c 	lsl.w	r0, r1, ip
   d779c:	fa21 f102 	lsr.w	r1, r1, r2
   d77a0:	e00c      	b.n	d77bc <__adddf3+0x184>
   d77a2:	f102 0214 	add.w	r2, r2, #20
   d77a6:	bfd8      	it	le
   d77a8:	f1c2 0c20 	rsble	ip, r2, #32
   d77ac:	fa01 f102 	lsl.w	r1, r1, r2
   d77b0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d77b4:	bfdc      	itt	le
   d77b6:	ea41 010c 	orrle.w	r1, r1, ip
   d77ba:	4090      	lslle	r0, r2
   d77bc:	1ae4      	subs	r4, r4, r3
   d77be:	bfa2      	ittt	ge
   d77c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d77c4:	4329      	orrge	r1, r5
   d77c6:	bd30      	popge	{r4, r5, pc}
   d77c8:	ea6f 0404 	mvn.w	r4, r4
   d77cc:	3c1f      	subs	r4, #31
   d77ce:	da1c      	bge.n	d780a <__adddf3+0x1d2>
   d77d0:	340c      	adds	r4, #12
   d77d2:	dc0e      	bgt.n	d77f2 <__adddf3+0x1ba>
   d77d4:	f104 0414 	add.w	r4, r4, #20
   d77d8:	f1c4 0220 	rsb	r2, r4, #32
   d77dc:	fa20 f004 	lsr.w	r0, r0, r4
   d77e0:	fa01 f302 	lsl.w	r3, r1, r2
   d77e4:	ea40 0003 	orr.w	r0, r0, r3
   d77e8:	fa21 f304 	lsr.w	r3, r1, r4
   d77ec:	ea45 0103 	orr.w	r1, r5, r3
   d77f0:	bd30      	pop	{r4, r5, pc}
   d77f2:	f1c4 040c 	rsb	r4, r4, #12
   d77f6:	f1c4 0220 	rsb	r2, r4, #32
   d77fa:	fa20 f002 	lsr.w	r0, r0, r2
   d77fe:	fa01 f304 	lsl.w	r3, r1, r4
   d7802:	ea40 0003 	orr.w	r0, r0, r3
   d7806:	4629      	mov	r1, r5
   d7808:	bd30      	pop	{r4, r5, pc}
   d780a:	fa21 f004 	lsr.w	r0, r1, r4
   d780e:	4629      	mov	r1, r5
   d7810:	bd30      	pop	{r4, r5, pc}
   d7812:	f094 0f00 	teq	r4, #0
   d7816:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d781a:	bf06      	itte	eq
   d781c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7820:	3401      	addeq	r4, #1
   d7822:	3d01      	subne	r5, #1
   d7824:	e74e      	b.n	d76c4 <__adddf3+0x8c>
   d7826:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d782a:	bf18      	it	ne
   d782c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7830:	d029      	beq.n	d7886 <__adddf3+0x24e>
   d7832:	ea94 0f05 	teq	r4, r5
   d7836:	bf08      	it	eq
   d7838:	ea90 0f02 	teqeq	r0, r2
   d783c:	d005      	beq.n	d784a <__adddf3+0x212>
   d783e:	ea54 0c00 	orrs.w	ip, r4, r0
   d7842:	bf04      	itt	eq
   d7844:	4619      	moveq	r1, r3
   d7846:	4610      	moveq	r0, r2
   d7848:	bd30      	pop	{r4, r5, pc}
   d784a:	ea91 0f03 	teq	r1, r3
   d784e:	bf1e      	ittt	ne
   d7850:	2100      	movne	r1, #0
   d7852:	2000      	movne	r0, #0
   d7854:	bd30      	popne	{r4, r5, pc}
   d7856:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d785a:	d105      	bne.n	d7868 <__adddf3+0x230>
   d785c:	0040      	lsls	r0, r0, #1
   d785e:	4149      	adcs	r1, r1
   d7860:	bf28      	it	cs
   d7862:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7866:	bd30      	pop	{r4, r5, pc}
   d7868:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d786c:	bf3c      	itt	cc
   d786e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7872:	bd30      	popcc	{r4, r5, pc}
   d7874:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7878:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d787c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7880:	f04f 0000 	mov.w	r0, #0
   d7884:	bd30      	pop	{r4, r5, pc}
   d7886:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d788a:	bf1a      	itte	ne
   d788c:	4619      	movne	r1, r3
   d788e:	4610      	movne	r0, r2
   d7890:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7894:	bf1c      	itt	ne
   d7896:	460b      	movne	r3, r1
   d7898:	4602      	movne	r2, r0
   d789a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d789e:	bf06      	itte	eq
   d78a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d78a4:	ea91 0f03 	teqeq	r1, r3
   d78a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d78ac:	bd30      	pop	{r4, r5, pc}
   d78ae:	bf00      	nop

000d78b0 <__aeabi_ui2d>:
   d78b0:	f090 0f00 	teq	r0, #0
   d78b4:	bf04      	itt	eq
   d78b6:	2100      	moveq	r1, #0
   d78b8:	4770      	bxeq	lr
   d78ba:	b530      	push	{r4, r5, lr}
   d78bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d78c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d78c4:	f04f 0500 	mov.w	r5, #0
   d78c8:	f04f 0100 	mov.w	r1, #0
   d78cc:	e750      	b.n	d7770 <__adddf3+0x138>
   d78ce:	bf00      	nop

000d78d0 <__aeabi_i2d>:
   d78d0:	f090 0f00 	teq	r0, #0
   d78d4:	bf04      	itt	eq
   d78d6:	2100      	moveq	r1, #0
   d78d8:	4770      	bxeq	lr
   d78da:	b530      	push	{r4, r5, lr}
   d78dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d78e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d78e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d78e8:	bf48      	it	mi
   d78ea:	4240      	negmi	r0, r0
   d78ec:	f04f 0100 	mov.w	r1, #0
   d78f0:	e73e      	b.n	d7770 <__adddf3+0x138>
   d78f2:	bf00      	nop

000d78f4 <__aeabi_f2d>:
   d78f4:	0042      	lsls	r2, r0, #1
   d78f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d78fa:	ea4f 0131 	mov.w	r1, r1, rrx
   d78fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7902:	bf1f      	itttt	ne
   d7904:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7908:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d790c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7910:	4770      	bxne	lr
   d7912:	f092 0f00 	teq	r2, #0
   d7916:	bf14      	ite	ne
   d7918:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d791c:	4770      	bxeq	lr
   d791e:	b530      	push	{r4, r5, lr}
   d7920:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7924:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7928:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d792c:	e720      	b.n	d7770 <__adddf3+0x138>
   d792e:	bf00      	nop

000d7930 <__aeabi_ul2d>:
   d7930:	ea50 0201 	orrs.w	r2, r0, r1
   d7934:	bf08      	it	eq
   d7936:	4770      	bxeq	lr
   d7938:	b530      	push	{r4, r5, lr}
   d793a:	f04f 0500 	mov.w	r5, #0
   d793e:	e00a      	b.n	d7956 <__aeabi_l2d+0x16>

000d7940 <__aeabi_l2d>:
   d7940:	ea50 0201 	orrs.w	r2, r0, r1
   d7944:	bf08      	it	eq
   d7946:	4770      	bxeq	lr
   d7948:	b530      	push	{r4, r5, lr}
   d794a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d794e:	d502      	bpl.n	d7956 <__aeabi_l2d+0x16>
   d7950:	4240      	negs	r0, r0
   d7952:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7956:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d795a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d795e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7962:	f43f aedc 	beq.w	d771e <__adddf3+0xe6>
   d7966:	f04f 0203 	mov.w	r2, #3
   d796a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d796e:	bf18      	it	ne
   d7970:	3203      	addne	r2, #3
   d7972:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7976:	bf18      	it	ne
   d7978:	3203      	addne	r2, #3
   d797a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d797e:	f1c2 0320 	rsb	r3, r2, #32
   d7982:	fa00 fc03 	lsl.w	ip, r0, r3
   d7986:	fa20 f002 	lsr.w	r0, r0, r2
   d798a:	fa01 fe03 	lsl.w	lr, r1, r3
   d798e:	ea40 000e 	orr.w	r0, r0, lr
   d7992:	fa21 f102 	lsr.w	r1, r1, r2
   d7996:	4414      	add	r4, r2
   d7998:	e6c1      	b.n	d771e <__adddf3+0xe6>
   d799a:	bf00      	nop

000d799c <__aeabi_dmul>:
   d799c:	b570      	push	{r4, r5, r6, lr}
   d799e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d79a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d79a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d79aa:	bf1d      	ittte	ne
   d79ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d79b0:	ea94 0f0c 	teqne	r4, ip
   d79b4:	ea95 0f0c 	teqne	r5, ip
   d79b8:	f000 f8de 	bleq	d7b78 <__aeabi_dmul+0x1dc>
   d79bc:	442c      	add	r4, r5
   d79be:	ea81 0603 	eor.w	r6, r1, r3
   d79c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d79c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d79ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d79ce:	bf18      	it	ne
   d79d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d79d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d79d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d79dc:	d038      	beq.n	d7a50 <__aeabi_dmul+0xb4>
   d79de:	fba0 ce02 	umull	ip, lr, r0, r2
   d79e2:	f04f 0500 	mov.w	r5, #0
   d79e6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d79ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d79ee:	fbe0 e503 	umlal	lr, r5, r0, r3
   d79f2:	f04f 0600 	mov.w	r6, #0
   d79f6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d79fa:	f09c 0f00 	teq	ip, #0
   d79fe:	bf18      	it	ne
   d7a00:	f04e 0e01 	orrne.w	lr, lr, #1
   d7a04:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7a08:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7a0c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7a10:	d204      	bcs.n	d7a1c <__aeabi_dmul+0x80>
   d7a12:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7a16:	416d      	adcs	r5, r5
   d7a18:	eb46 0606 	adc.w	r6, r6, r6
   d7a1c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7a20:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7a24:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7a28:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7a2c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7a30:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7a34:	bf88      	it	hi
   d7a36:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7a3a:	d81e      	bhi.n	d7a7a <__aeabi_dmul+0xde>
   d7a3c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7a40:	bf08      	it	eq
   d7a42:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7a46:	f150 0000 	adcs.w	r0, r0, #0
   d7a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7a4e:	bd70      	pop	{r4, r5, r6, pc}
   d7a50:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7a54:	ea46 0101 	orr.w	r1, r6, r1
   d7a58:	ea40 0002 	orr.w	r0, r0, r2
   d7a5c:	ea81 0103 	eor.w	r1, r1, r3
   d7a60:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7a64:	bfc2      	ittt	gt
   d7a66:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7a6a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7a6e:	bd70      	popgt	{r4, r5, r6, pc}
   d7a70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7a74:	f04f 0e00 	mov.w	lr, #0
   d7a78:	3c01      	subs	r4, #1
   d7a7a:	f300 80ab 	bgt.w	d7bd4 <__aeabi_dmul+0x238>
   d7a7e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7a82:	bfde      	ittt	le
   d7a84:	2000      	movle	r0, #0
   d7a86:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7a8a:	bd70      	pople	{r4, r5, r6, pc}
   d7a8c:	f1c4 0400 	rsb	r4, r4, #0
   d7a90:	3c20      	subs	r4, #32
   d7a92:	da35      	bge.n	d7b00 <__aeabi_dmul+0x164>
   d7a94:	340c      	adds	r4, #12
   d7a96:	dc1b      	bgt.n	d7ad0 <__aeabi_dmul+0x134>
   d7a98:	f104 0414 	add.w	r4, r4, #20
   d7a9c:	f1c4 0520 	rsb	r5, r4, #32
   d7aa0:	fa00 f305 	lsl.w	r3, r0, r5
   d7aa4:	fa20 f004 	lsr.w	r0, r0, r4
   d7aa8:	fa01 f205 	lsl.w	r2, r1, r5
   d7aac:	ea40 0002 	orr.w	r0, r0, r2
   d7ab0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7ab4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7ab8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7abc:	fa21 f604 	lsr.w	r6, r1, r4
   d7ac0:	eb42 0106 	adc.w	r1, r2, r6
   d7ac4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7ac8:	bf08      	it	eq
   d7aca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7ace:	bd70      	pop	{r4, r5, r6, pc}
   d7ad0:	f1c4 040c 	rsb	r4, r4, #12
   d7ad4:	f1c4 0520 	rsb	r5, r4, #32
   d7ad8:	fa00 f304 	lsl.w	r3, r0, r4
   d7adc:	fa20 f005 	lsr.w	r0, r0, r5
   d7ae0:	fa01 f204 	lsl.w	r2, r1, r4
   d7ae4:	ea40 0002 	orr.w	r0, r0, r2
   d7ae8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7aec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7af0:	f141 0100 	adc.w	r1, r1, #0
   d7af4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7af8:	bf08      	it	eq
   d7afa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7afe:	bd70      	pop	{r4, r5, r6, pc}
   d7b00:	f1c4 0520 	rsb	r5, r4, #32
   d7b04:	fa00 f205 	lsl.w	r2, r0, r5
   d7b08:	ea4e 0e02 	orr.w	lr, lr, r2
   d7b0c:	fa20 f304 	lsr.w	r3, r0, r4
   d7b10:	fa01 f205 	lsl.w	r2, r1, r5
   d7b14:	ea43 0302 	orr.w	r3, r3, r2
   d7b18:	fa21 f004 	lsr.w	r0, r1, r4
   d7b1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7b20:	fa21 f204 	lsr.w	r2, r1, r4
   d7b24:	ea20 0002 	bic.w	r0, r0, r2
   d7b28:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7b2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7b30:	bf08      	it	eq
   d7b32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7b36:	bd70      	pop	{r4, r5, r6, pc}
   d7b38:	f094 0f00 	teq	r4, #0
   d7b3c:	d10f      	bne.n	d7b5e <__aeabi_dmul+0x1c2>
   d7b3e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7b42:	0040      	lsls	r0, r0, #1
   d7b44:	eb41 0101 	adc.w	r1, r1, r1
   d7b48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7b4c:	bf08      	it	eq
   d7b4e:	3c01      	subeq	r4, #1
   d7b50:	d0f7      	beq.n	d7b42 <__aeabi_dmul+0x1a6>
   d7b52:	ea41 0106 	orr.w	r1, r1, r6
   d7b56:	f095 0f00 	teq	r5, #0
   d7b5a:	bf18      	it	ne
   d7b5c:	4770      	bxne	lr
   d7b5e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7b62:	0052      	lsls	r2, r2, #1
   d7b64:	eb43 0303 	adc.w	r3, r3, r3
   d7b68:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7b6c:	bf08      	it	eq
   d7b6e:	3d01      	subeq	r5, #1
   d7b70:	d0f7      	beq.n	d7b62 <__aeabi_dmul+0x1c6>
   d7b72:	ea43 0306 	orr.w	r3, r3, r6
   d7b76:	4770      	bx	lr
   d7b78:	ea94 0f0c 	teq	r4, ip
   d7b7c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7b80:	bf18      	it	ne
   d7b82:	ea95 0f0c 	teqne	r5, ip
   d7b86:	d00c      	beq.n	d7ba2 <__aeabi_dmul+0x206>
   d7b88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7b8c:	bf18      	it	ne
   d7b8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7b92:	d1d1      	bne.n	d7b38 <__aeabi_dmul+0x19c>
   d7b94:	ea81 0103 	eor.w	r1, r1, r3
   d7b98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7b9c:	f04f 0000 	mov.w	r0, #0
   d7ba0:	bd70      	pop	{r4, r5, r6, pc}
   d7ba2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7ba6:	bf06      	itte	eq
   d7ba8:	4610      	moveq	r0, r2
   d7baa:	4619      	moveq	r1, r3
   d7bac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7bb0:	d019      	beq.n	d7be6 <__aeabi_dmul+0x24a>
   d7bb2:	ea94 0f0c 	teq	r4, ip
   d7bb6:	d102      	bne.n	d7bbe <__aeabi_dmul+0x222>
   d7bb8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7bbc:	d113      	bne.n	d7be6 <__aeabi_dmul+0x24a>
   d7bbe:	ea95 0f0c 	teq	r5, ip
   d7bc2:	d105      	bne.n	d7bd0 <__aeabi_dmul+0x234>
   d7bc4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7bc8:	bf1c      	itt	ne
   d7bca:	4610      	movne	r0, r2
   d7bcc:	4619      	movne	r1, r3
   d7bce:	d10a      	bne.n	d7be6 <__aeabi_dmul+0x24a>
   d7bd0:	ea81 0103 	eor.w	r1, r1, r3
   d7bd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7bd8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7bdc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7be0:	f04f 0000 	mov.w	r0, #0
   d7be4:	bd70      	pop	{r4, r5, r6, pc}
   d7be6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7bea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7bee:	bd70      	pop	{r4, r5, r6, pc}

000d7bf0 <__aeabi_ddiv>:
   d7bf0:	b570      	push	{r4, r5, r6, lr}
   d7bf2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7bf6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7bfa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7bfe:	bf1d      	ittte	ne
   d7c00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7c04:	ea94 0f0c 	teqne	r4, ip
   d7c08:	ea95 0f0c 	teqne	r5, ip
   d7c0c:	f000 f8a7 	bleq	d7d5e <__aeabi_ddiv+0x16e>
   d7c10:	eba4 0405 	sub.w	r4, r4, r5
   d7c14:	ea81 0e03 	eor.w	lr, r1, r3
   d7c18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7c1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7c20:	f000 8088 	beq.w	d7d34 <__aeabi_ddiv+0x144>
   d7c24:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7c28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7c2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7c30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7c34:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7c38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7c3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7c40:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7c44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7c48:	429d      	cmp	r5, r3
   d7c4a:	bf08      	it	eq
   d7c4c:	4296      	cmpeq	r6, r2
   d7c4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7c52:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7c56:	d202      	bcs.n	d7c5e <__aeabi_ddiv+0x6e>
   d7c58:	085b      	lsrs	r3, r3, #1
   d7c5a:	ea4f 0232 	mov.w	r2, r2, rrx
   d7c5e:	1ab6      	subs	r6, r6, r2
   d7c60:	eb65 0503 	sbc.w	r5, r5, r3
   d7c64:	085b      	lsrs	r3, r3, #1
   d7c66:	ea4f 0232 	mov.w	r2, r2, rrx
   d7c6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7c6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7c72:	ebb6 0e02 	subs.w	lr, r6, r2
   d7c76:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7c7a:	bf22      	ittt	cs
   d7c7c:	1ab6      	subcs	r6, r6, r2
   d7c7e:	4675      	movcs	r5, lr
   d7c80:	ea40 000c 	orrcs.w	r0, r0, ip
   d7c84:	085b      	lsrs	r3, r3, #1
   d7c86:	ea4f 0232 	mov.w	r2, r2, rrx
   d7c8a:	ebb6 0e02 	subs.w	lr, r6, r2
   d7c8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7c92:	bf22      	ittt	cs
   d7c94:	1ab6      	subcs	r6, r6, r2
   d7c96:	4675      	movcs	r5, lr
   d7c98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7c9c:	085b      	lsrs	r3, r3, #1
   d7c9e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7ca2:	ebb6 0e02 	subs.w	lr, r6, r2
   d7ca6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7caa:	bf22      	ittt	cs
   d7cac:	1ab6      	subcs	r6, r6, r2
   d7cae:	4675      	movcs	r5, lr
   d7cb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7cb4:	085b      	lsrs	r3, r3, #1
   d7cb6:	ea4f 0232 	mov.w	r2, r2, rrx
   d7cba:	ebb6 0e02 	subs.w	lr, r6, r2
   d7cbe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7cc2:	bf22      	ittt	cs
   d7cc4:	1ab6      	subcs	r6, r6, r2
   d7cc6:	4675      	movcs	r5, lr
   d7cc8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7ccc:	ea55 0e06 	orrs.w	lr, r5, r6
   d7cd0:	d018      	beq.n	d7d04 <__aeabi_ddiv+0x114>
   d7cd2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7cd6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7cda:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7cde:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7ce2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7ce6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7cea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7cee:	d1c0      	bne.n	d7c72 <__aeabi_ddiv+0x82>
   d7cf0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7cf4:	d10b      	bne.n	d7d0e <__aeabi_ddiv+0x11e>
   d7cf6:	ea41 0100 	orr.w	r1, r1, r0
   d7cfa:	f04f 0000 	mov.w	r0, #0
   d7cfe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7d02:	e7b6      	b.n	d7c72 <__aeabi_ddiv+0x82>
   d7d04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7d08:	bf04      	itt	eq
   d7d0a:	4301      	orreq	r1, r0
   d7d0c:	2000      	moveq	r0, #0
   d7d0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7d12:	bf88      	it	hi
   d7d14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7d18:	f63f aeaf 	bhi.w	d7a7a <__aeabi_dmul+0xde>
   d7d1c:	ebb5 0c03 	subs.w	ip, r5, r3
   d7d20:	bf04      	itt	eq
   d7d22:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7d26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7d2a:	f150 0000 	adcs.w	r0, r0, #0
   d7d2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7d32:	bd70      	pop	{r4, r5, r6, pc}
   d7d34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7d38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7d3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7d40:	bfc2      	ittt	gt
   d7d42:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7d46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7d4a:	bd70      	popgt	{r4, r5, r6, pc}
   d7d4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7d50:	f04f 0e00 	mov.w	lr, #0
   d7d54:	3c01      	subs	r4, #1
   d7d56:	e690      	b.n	d7a7a <__aeabi_dmul+0xde>
   d7d58:	ea45 0e06 	orr.w	lr, r5, r6
   d7d5c:	e68d      	b.n	d7a7a <__aeabi_dmul+0xde>
   d7d5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7d62:	ea94 0f0c 	teq	r4, ip
   d7d66:	bf08      	it	eq
   d7d68:	ea95 0f0c 	teqeq	r5, ip
   d7d6c:	f43f af3b 	beq.w	d7be6 <__aeabi_dmul+0x24a>
   d7d70:	ea94 0f0c 	teq	r4, ip
   d7d74:	d10a      	bne.n	d7d8c <__aeabi_ddiv+0x19c>
   d7d76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7d7a:	f47f af34 	bne.w	d7be6 <__aeabi_dmul+0x24a>
   d7d7e:	ea95 0f0c 	teq	r5, ip
   d7d82:	f47f af25 	bne.w	d7bd0 <__aeabi_dmul+0x234>
   d7d86:	4610      	mov	r0, r2
   d7d88:	4619      	mov	r1, r3
   d7d8a:	e72c      	b.n	d7be6 <__aeabi_dmul+0x24a>
   d7d8c:	ea95 0f0c 	teq	r5, ip
   d7d90:	d106      	bne.n	d7da0 <__aeabi_ddiv+0x1b0>
   d7d92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7d96:	f43f aefd 	beq.w	d7b94 <__aeabi_dmul+0x1f8>
   d7d9a:	4610      	mov	r0, r2
   d7d9c:	4619      	mov	r1, r3
   d7d9e:	e722      	b.n	d7be6 <__aeabi_dmul+0x24a>
   d7da0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7da4:	bf18      	it	ne
   d7da6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7daa:	f47f aec5 	bne.w	d7b38 <__aeabi_dmul+0x19c>
   d7dae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7db2:	f47f af0d 	bne.w	d7bd0 <__aeabi_dmul+0x234>
   d7db6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7dba:	f47f aeeb 	bne.w	d7b94 <__aeabi_dmul+0x1f8>
   d7dbe:	e712      	b.n	d7be6 <__aeabi_dmul+0x24a>

000d7dc0 <__aeabi_d2f>:
   d7dc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7dc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7dc8:	bf24      	itt	cs
   d7dca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7dce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7dd2:	d90d      	bls.n	d7df0 <__aeabi_d2f+0x30>
   d7dd4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7dd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7ddc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7de0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7de4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7de8:	bf08      	it	eq
   d7dea:	f020 0001 	biceq.w	r0, r0, #1
   d7dee:	4770      	bx	lr
   d7df0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7df4:	d121      	bne.n	d7e3a <__aeabi_d2f+0x7a>
   d7df6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7dfa:	bfbc      	itt	lt
   d7dfc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7e00:	4770      	bxlt	lr
   d7e02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7e06:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7e0a:	f1c2 0218 	rsb	r2, r2, #24
   d7e0e:	f1c2 0c20 	rsb	ip, r2, #32
   d7e12:	fa10 f30c 	lsls.w	r3, r0, ip
   d7e16:	fa20 f002 	lsr.w	r0, r0, r2
   d7e1a:	bf18      	it	ne
   d7e1c:	f040 0001 	orrne.w	r0, r0, #1
   d7e20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7e24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7e28:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7e2c:	ea40 000c 	orr.w	r0, r0, ip
   d7e30:	fa23 f302 	lsr.w	r3, r3, r2
   d7e34:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7e38:	e7cc      	b.n	d7dd4 <__aeabi_d2f+0x14>
   d7e3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7e3e:	d107      	bne.n	d7e50 <__aeabi_d2f+0x90>
   d7e40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7e44:	bf1e      	ittt	ne
   d7e46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7e4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7e4e:	4770      	bxne	lr
   d7e50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7e54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7e58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7e5c:	4770      	bx	lr
   d7e5e:	bf00      	nop

000d7e60 <__cxa_atexit>:
   d7e60:	b510      	push	{r4, lr}
   d7e62:	4c05      	ldr	r4, [pc, #20]	; (d7e78 <__cxa_atexit+0x18>)
   d7e64:	4613      	mov	r3, r2
   d7e66:	b12c      	cbz	r4, d7e74 <__cxa_atexit+0x14>
   d7e68:	460a      	mov	r2, r1
   d7e6a:	4601      	mov	r1, r0
   d7e6c:	2002      	movs	r0, #2
   d7e6e:	f3af 8000 	nop.w
   d7e72:	bd10      	pop	{r4, pc}
   d7e74:	4620      	mov	r0, r4
   d7e76:	bd10      	pop	{r4, pc}
   d7e78:	00000000 	.word	0x00000000

000d7e7c <memcpy>:
   d7e7c:	b510      	push	{r4, lr}
   d7e7e:	1e43      	subs	r3, r0, #1
   d7e80:	440a      	add	r2, r1
   d7e82:	4291      	cmp	r1, r2
   d7e84:	d004      	beq.n	d7e90 <memcpy+0x14>
   d7e86:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7e8a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7e8e:	e7f8      	b.n	d7e82 <memcpy+0x6>
   d7e90:	bd10      	pop	{r4, pc}

000d7e92 <memset>:
   d7e92:	4402      	add	r2, r0
   d7e94:	4603      	mov	r3, r0
   d7e96:	4293      	cmp	r3, r2
   d7e98:	d002      	beq.n	d7ea0 <memset+0xe>
   d7e9a:	f803 1b01 	strb.w	r1, [r3], #1
   d7e9e:	e7fa      	b.n	d7e96 <memset+0x4>
   d7ea0:	4770      	bx	lr
	...

000d7ea4 <srand>:
   d7ea4:	b538      	push	{r3, r4, r5, lr}
   d7ea6:	4b12      	ldr	r3, [pc, #72]	; (d7ef0 <srand+0x4c>)
   d7ea8:	681c      	ldr	r4, [r3, #0]
   d7eaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7eac:	4605      	mov	r5, r0
   d7eae:	b9d3      	cbnz	r3, d7ee6 <srand+0x42>
   d7eb0:	2018      	movs	r0, #24
   d7eb2:	f7fd ffe1 	bl	d5e78 <malloc>
   d7eb6:	f243 330e 	movw	r3, #13070	; 0x330e
   d7eba:	63a0      	str	r0, [r4, #56]	; 0x38
   d7ebc:	8003      	strh	r3, [r0, #0]
   d7ebe:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7ec2:	8043      	strh	r3, [r0, #2]
   d7ec4:	f241 2334 	movw	r3, #4660	; 0x1234
   d7ec8:	8083      	strh	r3, [r0, #4]
   d7eca:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7ece:	80c3      	strh	r3, [r0, #6]
   d7ed0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7ed4:	8103      	strh	r3, [r0, #8]
   d7ed6:	2305      	movs	r3, #5
   d7ed8:	8143      	strh	r3, [r0, #10]
   d7eda:	230b      	movs	r3, #11
   d7edc:	8183      	strh	r3, [r0, #12]
   d7ede:	2201      	movs	r2, #1
   d7ee0:	2300      	movs	r3, #0
   d7ee2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7ee6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7ee8:	2200      	movs	r2, #0
   d7eea:	611d      	str	r5, [r3, #16]
   d7eec:	615a      	str	r2, [r3, #20]
   d7eee:	bd38      	pop	{r3, r4, r5, pc}
   d7ef0:	2003e1d8 	.word	0x2003e1d8

000d7ef4 <strcpy>:
   d7ef4:	4603      	mov	r3, r0
   d7ef6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7efa:	f803 2b01 	strb.w	r2, [r3], #1
   d7efe:	2a00      	cmp	r2, #0
   d7f00:	d1f9      	bne.n	d7ef6 <strcpy+0x2>
   d7f02:	4770      	bx	lr

000d7f04 <strlen>:
   d7f04:	4603      	mov	r3, r0
   d7f06:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7f0a:	2a00      	cmp	r2, #0
   d7f0c:	d1fb      	bne.n	d7f06 <strlen+0x2>
   d7f0e:	1a18      	subs	r0, r3, r0
   d7f10:	3801      	subs	r0, #1
   d7f12:	4770      	bx	lr

000d7f14 <strncpy>:
   d7f14:	b510      	push	{r4, lr}
   d7f16:	4603      	mov	r3, r0
   d7f18:	b142      	cbz	r2, d7f2c <strncpy+0x18>
   d7f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7f1e:	f803 4b01 	strb.w	r4, [r3], #1
   d7f22:	3a01      	subs	r2, #1
   d7f24:	2c00      	cmp	r4, #0
   d7f26:	d1f7      	bne.n	d7f18 <strncpy+0x4>
   d7f28:	441a      	add	r2, r3
   d7f2a:	e000      	b.n	d7f2e <strncpy+0x1a>
   d7f2c:	bd10      	pop	{r4, pc}
   d7f2e:	4293      	cmp	r3, r2
   d7f30:	d002      	beq.n	d7f38 <strncpy+0x24>
   d7f32:	f803 4b01 	strb.w	r4, [r3], #1
   d7f36:	e7fa      	b.n	d7f2e <strncpy+0x1a>
   d7f38:	bd10      	pop	{r4, pc}

000d7f3a <link_code_end>:
	...

000d7f3c <dynalib_user>:
   d7f3c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d7f4c:	0000 0000 6f43 6e6e 6365 6974 676e 7420     ....Connecting t
   d7f5c:	206f 514d 5454 2e2e 202e 5200 7465 7972     o MQTT... .Retry
   d7f6c:	6e69 2067 514d 5454 6320 6e6f 656e 7463     ing MQTT connect
   d7f7c:	6f69 206e 6e69 3520 7320 6365 6e6f 7364     ion in 5 seconds
   d7f8c:	2e2e 002e 514d 5454 4320 6e6f 656e 7463     ....MQTT Connect
   d7f9c:	6465 0021 6950 676e 6e69 2067 514d 5454     ed!.Pinging MQTT
   d7fac:	0a20 4400 7369 6f63 6e6e 6365 6974 676e      ..Disconnecting
   d7fbc:	0a20 6800 6c65 6f6c 7720 726f 646c 6e00      ..hello world.n
   d7fcc:	6369 736b 796b 6968 6867 6900 2e6f 6461     ickskyhigh.io.ad
   d7fdc:	6661 7572 7469 632e 6d6f 6100 6f69 445f     afruit.com.aio_D
   d7fec:	4a49 3844 5031 7230 6c4a 7441 7178 5845     IJD81P0rJlAtxqEX
   d7ffc:	3847 6766 3472 4573 526d 0045 696e 6b63     G8fgr4sEmRE.nick
   d800c:	6b73 6879 6769 2f68 6566 6465 2f73 6361     skyhigh/feeds/ac
   d801c:	6974 6176 6574 6e00 6369 736b 796b 6968     tivate.nickskyhi
   d802c:	6867 662f 6565 7364 742f 7275 6f6e 006e     gh/feeds/turnon.

000d803c <_ZTVN8particle13__SPISettingsE>:
	...
   d8044:	4395 000d 6564 6166 6c75 2074 4d00 4253     .C..default .MSB
   d8054:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d8064:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d8074:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   d8084:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000d8090 <_ZTV18DHTSensorTypeDHT22>:
	...
   d8098:	49d9 000d 49dd 000d 4949 000d 49a1 000d     .I...I..II...I..
   d80a8:	4844 3154 0031 4844 3254 0032 726e 7866     DHT11.DHT22.nrfx
   d80b8:	695f 7332 695f 696e 2074 7265 6f72 3d72     _i2s_init error=
   d80c8:	6c25 0075 726e 7866 695f 7332 735f 6174     %lu.nrfx_i2s_sta
   d80d8:	7472 6520 7272 726f 253d 756c 6200 6461     rt error=%lu.bad
   d80e8:	6320 6568 6b63 7573 006d 6170 7269 3d73      checksum.pairs=
   d80f8:	6425 6520 7078 6365 6574 2064 3034 7200     %d expected 40.r
   d8108:	7465 7972 6e69 0067                         etrying.

000d8110 <_ZTV18DHTSensorTypeDHT11>:
	...
   d8118:	49db 000d 49eb 000d 492b 000d 4939 000d     .I...I..+I..9I..

000d8128 <_ZTV16Adafruit_SSD1306>:
	...
   d8130:	40cd 000d 42c1 000d 5479 000d 6215 000d     .@...B..yT...b..
   d8140:	4d75 000d 5179 000d 4bfd 000d 4a89 000d     uM..yQ...K...J..
   d8150:	5239 000d 52cf 000d 5307 000d 5323 000d     9R...R...S..#S..

000d8160 <_ZTV12Adafruit_GFX>:
	...
   d8170:	5479 000d 6215 000d 40a9 000d 5179 000d     yT...b...@..yQ..
   d8180:	5299 000d 52b5 000d 5239 000d 52cf 000d     .R...R..9R...R..
   d8190:	5307 000d 5323 000d                         .S..#S..

000d8198 <_ZL4font>:
   d8198:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d81a8:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d81b8:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d81c8:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d81d8:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d81e8:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d81f8:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d8208:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d8218:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d8228:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d8238:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d8248:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d8258:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d8268:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d8278:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d8288:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d8298:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d82a8:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d82b8:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d82c8:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d82d8:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d82e8:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d82f8:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d8308:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d8318:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d8328:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d8338:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d8348:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d8358:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d8368:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d8378:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d8388:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d8398:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d83a8:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d83b8:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d83c8:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d83d8:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d83e8:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d83f8:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d8408:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d8418:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d8428:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d8438:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d8448:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d8458:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d8468:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d8478:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d8488:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d8498:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d84a8:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d84b8:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d84c8:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d84d8:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d84e8:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d84f8:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d8508:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d8518:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d8528:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d8538:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d8548:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d8558:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d8568:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d8578:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d8588:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d8598:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d85a8:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d85b8:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d85c8:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d85d8:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d85e8:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d85f8:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d8608:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d8618:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d8628:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d8638:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d8648:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d8658:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d8668:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d8678:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d8688:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d8694 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   d869c:	40cf 000d 42cf 000d 5503 000d 55af 000d     .@...B...U...U..
   d86ac:	55e1 000d 5517 000d 5557 000d               .U...U..WU..

000d86b8 <_ZTV13Adafruit_MQTT>:
	...
   d86c8:	40a9 000d 40a9 000d 40a9 000d 40a9 000d     .@...@...@...@..
   d86d8:	40a9 000d                                   .@..

000d86dc <CSWTCH.52>:
   d86dc:	873d 000d 8751 000d 8721 000d 8763 000d     =...Q...!...c...
   d86ec:	87a8 000d 87ed 000d 880d 000d 8840 000d     ............@...
   d86fc:	885a 000d 8891 000d 5b20 7830 5d00 202c     Z....... [0x.], 
   d870c:	0a00 0009 7244 706f 6570 2064 2061 6170     ....Dropped a pa
   d871c:	6b63 7465 5500 6b6e 6f6e 6e77 6520 7272     cket.Unknown err
   d872c:	726f 4d00 5451 0054 2525 6425 252e 6664     or.MQTT.%%%d.%df
   d873c:	4600 6961 656c 2064 6f74 7320 6275 6373     .Failed to subsc
   d874c:	6972 6562 4300 6e6f 656e 7463 6f69 206e     ribe.Connection 
   d875c:	6166 6c69 6465 5400 6568 5320 7265 6576     failed.The Serve
   d876c:	2072 6f64 7365 6e20 746f 7320 7075 6f70     r does not suppo
   d877c:	7472 7420 6568 6c20 7665 6c65 6f20 2066     rt the level of 
   d878c:	6874 2065 514d 5454 7020 6f72 6f74 6f63     the MQTT protoco
   d879c:	206c 6572 7571 7365 6574 0064 6854 2065     l requested.The 
   d87ac:	6c43 6569 746e 6920 6564 746e 6669 6569     Client identifie
   d87bc:	2072 7369 6320 726f 6572 7463 5520 4654     r is correct UTF
   d87cc:	382d 6220 7475 6e20 746f 6120 6c6c 776f     -8 but not allow
   d87dc:	6465 6220 2079 6874 2065 6553 7672 7265     ed by the Server
   d87ec:	5400 6568 4d20 5451 2054 6573 7672 6369     .The MQTT servic
   d87fc:	2065 7369 7520 616e 6176 6c69 6261 656c     e is unavailable
   d880c:	5400 6568 6420 7461 2061 6e69 7420 6568     .The data in the
   d881c:	7520 6573 2072 616e 656d 6f20 2072 6170      user name or pa
   d882c:	7373 6f77 6472 6920 2073 616d 666c 726f     ssword is malfor
   d883c:	656d 0064 6f4e 2074 7561 6874 726f 7a69     med.Not authoriz
   d884c:	6465 7420 206f 6f63 6e6e 6365 0074 7845     ed to connect.Ex
   d885c:	6563 6465 6465 7220 6365 6e6f 656e 7463     ceeded reconnect
   d886c:	7220 7461 2065 696c 696d 2e74 5020 656c      rate limit. Ple
   d887c:	7361 2065 7274 2079 6761 6961 206e 616c     ase try again la
   d888c:	6574 2e72 5900 756f 6820 7661 2065 6562     ter..You have be
   d889c:	6e65 6220 6e61 656e 2064 7266 6d6f 6320     en banned from c
   d88ac:	6e6f 656e 7463 6e69 2e67 5020 656c 7361     onnecting. Pleas
   d88bc:	2065 6f63 746e 6361 2074 6874 2065 514d     e contact the MQ
   d88cc:	5454 7320 7265 6576 2072 6461 696d 696e     TT server admini
   d88dc:	7473 6172 6f74 2072 6f66 2072 6f6d 6572     strator for more
   d88ec:	6420 7465 6961 736c 002e 0000                details....

000d88f8 <_ZTVN5spark13EthernetClassE>:
	...
   d8900:	5f17 000d 5f0d 000d 5f03 000d 5ef9 000d     ._..._..._...^..
   d8910:	5eed 000d 5ee1 000d 5ed5 000d 5ecd 000d     .^...^...^...^..
   d8920:	5ec3 000d 5eb9 000d 70cd 000d               .^...^...p..

000d892c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d892c:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d893c:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d894c:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d895c:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d896c:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d897c:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d898c:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d899c:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d89ac:	3130 7530 0020 205d 2800 3a29 0020 5b20     010u .] .(): . [
   d89bc:	6300 646f 2065 203d 2500 0069 6564 6174     .code = .%i.deta
   d89cc:	6c69 2073 203d 0d00 000a 6e6c 6600 006e     ils = ....ln.fn.
   d89dc:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   d89ec:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   d89fc:	7000 6e61 6369 6100 6c6c 5a00 2500 302b     .panic.all.Z.%+0
   d8a0c:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
   d8a1c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d8a2c:	6d69 0065                                   ime.

000d8a30 <_ZTV9IPAddress>:
	...
   d8a38:	64c5 000d 64b5 000d 64b7 000d               .d...d...d..

000d8a44 <_ZTV9USBSerial>:
	...
   d8a4c:	65c9 000d 6619 000d 6627 000d 6215 000d     .e...f..'f...b..
   d8a5c:	6605 000d 65cb 000d 65e1 000d 6613 000d     .f...e...e...f..
   d8a6c:	65f7 000d 65c5 000d                         .e...e..

000d8a74 <_ZTV11USARTSerial>:
	...
   d8a7c:	66cd 000d 671d 000d 672b 000d 6215 000d     .f...g..+g...b..
   d8a8c:	66e1 000d 6703 000d 66ef 000d 6717 000d     .f...g...f...g..
   d8a9c:	66cf 000d 66d3 000d                         .f...f..

000d8aa4 <_ZTV7TwoWire>:
	...
   d8aac:	67d1 000d 681b 000d 67f3 000d 67d3 000d     .g...h...g...g..
   d8abc:	67fb 000d 6803 000d 680b 000d 6813 000d     .g...h...h...h..

000d8acc <_ZTVN5spark9MeshClassE>:
	...
   d8ad4:	693d 000d 6933 000d 6929 000d 691f 000d     =i..3i..)i...i..
   d8ae4:	6913 000d 6907 000d 68fb 000d 68f3 000d     .i...i...h...h..
   d8af4:	68e9 000d 68df 000d 70cd 000d               .h...h...p..

000d8b00 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8b08:	6ae1 000d 6ae7 000d 6fcf 000d 6af5 000d     .j...j...o...j..
   d8b18:	6ae3 000d                                   .j..

000d8b1c <_ZTV9TCPClient>:
	...
   d8b24:	40d1 000d 4105 000d 6a59 000d 6a73 000d     .@...A..Yj..sj..
   d8b34:	6e75 000d 6bc7 000d 6b99 000d 6a9d 000d     un...k...k...j..
   d8b44:	6d51 000d 6c4d 000d 6bfb 000d 6e45 000d     Qm..Ml...k..En..
   d8b54:	6a9f 000d 6ad7 000d 6a85 000d 6af9 000d     .j...j...j...j..
   d8b64:	6b79 000d 6977 6972 676e 7200 6365 2076     yk..wiring.recv 
   d8b74:	7265 6f72 2072 203d 6425 0000               error = %d..

000d8b80 <_ZTVN5spark9WiFiClassE>:
	...
   d8b88:	7045 000d 703b 000d 7031 000d 6fe7 000d     Ep..;p..1p...o..
   d8b98:	7025 000d 7019 000d 700d 000d 7005 000d     %p...p...p...p..
   d8ba8:	6ffb 000d 6ff1 000d 70cd 000d               .o...o...p..

000d8bb4 <_ZTVN5spark12NetworkClassE>:
	...
   d8bbc:	7065 000d 706f 000d 7079 000d 7083 000d     ep..op..yp...p..
   d8bcc:	708d 000d 7099 000d 70a5 000d 70b1 000d     .p...p...p...p..
   d8bdc:	70b9 000d 70c3 000d 70cd 000d               .p...p...p..

000d8be8 <_ZSt7nothrow>:
   d8be8:	0000 0000                                   ....

000d8bec <__sf_fake_stdin>:
	...

000d8c0c <__sf_fake_stdout>:
	...

000d8c2c <__sf_fake_stderr>:
	...
   d8c4c:	0043                                        C.

000d8c4e <link_const_variable_data_end>:
	...

000d8c50 <link_constructors_location>:
   d8c50:	000d42dd 	.word	0x000d42dd
   d8c54:	000d4927 	.word	0x000d4927
   d8c58:	000d4a45 	.word	0x000d4a45
   d8c5c:	000d5175 	.word	0x000d5175
   d8c60:	000d54ff 	.word	0x000d54ff
   d8c64:	000d55ff 	.word	0x000d55ff
   d8c68:	000d5989 	.word	0x000d5989
   d8c6c:	000d598d 	.word	0x000d598d
   d8c70:	000d5f21 	.word	0x000d5f21
   d8c74:	000d61a9 	.word	0x000d61a9
   d8c78:	000d61ed 	.word	0x000d61ed
   d8c7c:	000d6351 	.word	0x000d6351
   d8c80:	000d6361 	.word	0x000d6361
   d8c84:	000d6389 	.word	0x000d6389
   d8c88:	000d6a09 	.word	0x000d6a09
   d8c8c:	000d7051 	.word	0x000d7051
   d8c90:	000d7199 	.word	0x000d7199
   d8c94:	000d739d 	.word	0x000d739d
   d8c98:	000d7421 	.word	0x000d7421
   d8c9c:	000d74e5 	.word	0x000d74e5
   d8ca0:	000d75a9 	.word	0x000d75a9

000d8ca4 <link_constructors_end>:
	...
