
c:/Users/Nick/Desktop/Iot/Capstone/Elkins_capstone/target/1.5.2/argon/Elkins_capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007150  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000db170  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000004c0  2003dd04  000db174  0001dd04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000062c  2003e1c4  2003e1c4  0002e1c4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000db634  000db634  0002b634  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000db65c  000db65c  0002b65c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00104baa  00000000  00000000  0002b660  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015973  00000000  00000000  0013020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000230f7  00000000  00000000  00145b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002cd0  00000000  00000000  00168c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000050f8  00000000  00000000  0016b944  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003e5c4  00000000  00000000  00170a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00037195  00000000  00000000  001af000  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010c43c  00000000  00000000  001e6195  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e6a0  00000000  00000000  002f25d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fabb 	bl	d85ac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fadb 	bl	d85f8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dd04 	.word	0x2003dd04
   d404c:	000db174 	.word	0x000db174
   d4050:	2003e1c4 	.word	0x2003e1c4
   d4054:	2003e1c4 	.word	0x2003e1c4
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 fca9 	bl	d69b4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000db168 	.word	0x000db168
   d4084:	000db114 	.word	0x000db114

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b8c6 	b.w	d4218 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f92d 	bl	d42ec <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 bc4f 	b.w	d6938 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 b951 	b.w	d6340 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 b957 	b.w	d6350 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 b955 	b.w	d6350 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f002 f8ba 	bl	d6228 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d5f99 	.word	0x000d5f99

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40cc:	4770      	bx	lr

000d40ce <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40ce:	4770      	bx	lr

000d40d0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40d0:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40d2:	6984      	ldr	r4, [r0, #24]
   d40d4:	4b0a      	ldr	r3, [pc, #40]	; (d4100 <_ZN9TCPClientD1Ev+0x30>)
   d40d6:	6003      	str	r3, [r0, #0]
   d40d8:	4605      	mov	r5, r0
   d40da:	b17c      	cbz	r4, d40fc <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40dc:	6863      	ldr	r3, [r4, #4]
   d40de:	3b01      	subs	r3, #1
   d40e0:	6063      	str	r3, [r4, #4]
   d40e2:	b95b      	cbnz	r3, d40fc <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d40e4:	6823      	ldr	r3, [r4, #0]
   d40e6:	4620      	mov	r0, r4
   d40e8:	689b      	ldr	r3, [r3, #8]
   d40ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40ec:	68a3      	ldr	r3, [r4, #8]
   d40ee:	3b01      	subs	r3, #1
   d40f0:	60a3      	str	r3, [r4, #8]
   d40f2:	b91b      	cbnz	r3, d40fc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40f4:	6823      	ldr	r3, [r4, #0]
   d40f6:	4620      	mov	r0, r4
   d40f8:	68db      	ldr	r3, [r3, #12]
   d40fa:	4798      	blx	r3
   d40fc:	4628      	mov	r0, r5
   d40fe:	bd38      	pop	{r3, r4, r5, pc}
   d4100:	000dad8c 	.word	0x000dad8c

000d4104 <_ZN9TCPClientD0Ev>:
   d4104:	b510      	push	{r4, lr}
   d4106:	4604      	mov	r4, r0
   d4108:	f7ff ffe2 	bl	d40d0 <_ZN9TCPClientD1Ev>
   d410c:	4620      	mov	r0, r4
   d410e:	211c      	movs	r1, #28
   d4110:	f003 fbdc 	bl	d78cc <_ZdlPvj>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <_Z5onoffv>:
    }
  }

}

void onoff() { 
   d4118:	b510      	push	{r4, lr}
  if (status == false) {
   d411a:	4b14      	ldr	r3, [pc, #80]	; (d416c <_Z5onoffv+0x54>)
   d411c:	781c      	ldrb	r4, [r3, #0]
   d411e:	b974      	cbnz	r4, d413e <_Z5onoffv+0x26>
    digitalWrite(relay1,LOW);
   d4120:	4b13      	ldr	r3, [pc, #76]	; (d4170 <_Z5onoffv+0x58>)
   d4122:	4621      	mov	r1, r4
   d4124:	8818      	ldrh	r0, [r3, #0]
   d4126:	f003 fb34 	bl	d7792 <digitalWrite>
    digitalWrite(relay2,LOW);
   d412a:	4b12      	ldr	r3, [pc, #72]	; (d4174 <_Z5onoffv+0x5c>)
   d412c:	4621      	mov	r1, r4
   d412e:	8818      	ldrh	r0, [r3, #0]
   d4130:	f003 fb2f 	bl	d7792 <digitalWrite>
    digitalWrite(relay3,LOW);
   d4134:	4b10      	ldr	r3, [pc, #64]	; (d4178 <_Z5onoffv+0x60>)
   d4136:	4621      	mov	r1, r4
   d4138:	8818      	ldrh	r0, [r3, #0]
   d413a:	f003 fb2a 	bl	d7792 <digitalWrite>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d413e:	f001 ff33 	bl	d5fa8 <HAL_Timer_Get_Milli_Seconds>
  }

 

   if((millis()-lastTime > 10000)) {
   d4142:	4b0e      	ldr	r3, [pc, #56]	; (d417c <_Z5onoffv+0x64>)
   d4144:	681a      	ldr	r2, [r3, #0]
   d4146:	1a80      	subs	r0, r0, r2
   d4148:	f242 7210 	movw	r2, #10000	; 0x2710
   d414c:	4290      	cmp	r0, r2
   d414e:	461c      	mov	r4, r3
   d4150:	d90b      	bls.n	d416a <_Z5onoffv+0x52>
      if(mqtt.Update()) {
   d4152:	480b      	ldr	r0, [pc, #44]	; (d4180 <_Z5onoffv+0x68>)
   d4154:	f001 fb5f 	bl	d5816 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d4158:	b120      	cbz	r0, d4164 <_Z5onoffv+0x4c>

        insidetemp.publish(intemp);
   d415a:	4b0a      	ldr	r3, [pc, #40]	; (d4184 <_Z5onoffv+0x6c>)
   d415c:	480a      	ldr	r0, [pc, #40]	; (d4188 <_Z5onoffv+0x70>)
   d415e:	6819      	ldr	r1, [r3, #0]
   d4160:	f001 fe66 	bl	d5e30 <_ZN21Adafruit_MQTT_Publish7publishEi>
   d4164:	f001 ff20 	bl	d5fa8 <HAL_Timer_Get_Milli_Seconds>
        } 
      lastTime = millis();
   d4168:	6020      	str	r0, [r4, #0]
   d416a:	bd10      	pop	{r4, pc}
   d416c:	2003e324 	.word	0x2003e324
   d4170:	2003dd04 	.word	0x2003dd04
   d4174:	2003dd08 	.word	0x2003dd08
   d4178:	2003dd0c 	.word	0x2003dd0c
   d417c:	2003e2dc 	.word	0x2003e2dc
   d4180:	2003e204 	.word	0x2003e204
   d4184:	2003e304 	.word	0x2003e304
   d4188:	2003e3a4 	.word	0x2003e3a4

000d418c <_Z11climatereadv>:
    }

}

void climateread() {
   d418c:	b508      	push	{r3, lr}
  intemp = bme.readTemperature();
   d418e:	4804      	ldr	r0, [pc, #16]	; (d41a0 <_Z11climatereadv+0x14>)
   d4190:	f000 fa70 	bl	d4674 <_ZN15Adafruit_BME28015readTemperatureEv>
   d4194:	4b03      	ldr	r3, [pc, #12]	; (d41a4 <_Z11climatereadv+0x18>)
   d4196:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d419a:	ed83 0a00 	vstr	s0, [r3]
   d419e:	bd08      	pop	{r3, pc}
   d41a0:	2003e328 	.word	0x2003e328
   d41a4:	2003e304 	.word	0x2003e304

000d41a8 <_Z12MQTT_connectv>:

}



void MQTT_connect() { //connection to adafruit.io
   d41a8:	b538      	push	{r3, r4, r5, lr}
  int8_t ret;
 
 
  if (mqtt.connected()) {
   d41aa:	4817      	ldr	r0, [pc, #92]	; (d4208 <_Z12MQTT_connectv+0x60>)
   d41ac:	f001 fab5 	bl	d571a <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   d41b0:	bb40      	cbnz	r0, d4204 <_Z12MQTT_connectv+0x5c>
    return;
  }
 
  Serial.print("Connecting to MQTT... ");
   d41b2:	f002 fd11 	bl	d6bd8 <_Z16_fetch_usbserialv>
   d41b6:	4915      	ldr	r1, [pc, #84]	; (d420c <_Z12MQTT_connectv+0x64>)
   d41b8:	f002 fafe 	bl	d67b8 <_ZN5Print5printEPKc>
 
  while ((ret = mqtt.connect()) != 0) { 
   d41bc:	4812      	ldr	r0, [pc, #72]	; (d4208 <_Z12MQTT_connectv+0x60>)
   d41be:	f001 fdca 	bl	d5d56 <_ZN13Adafruit_MQTT7connectEv>
   d41c2:	4604      	mov	r4, r0
   d41c4:	b1b8      	cbz	r0, d41f6 <_Z12MQTT_connectv+0x4e>
       Serial.println(mqtt.connectErrorString(ret));
   d41c6:	f002 fd07 	bl	d6bd8 <_Z16_fetch_usbserialv>
   d41ca:	4621      	mov	r1, r4
   d41cc:	4605      	mov	r5, r0
   d41ce:	480e      	ldr	r0, [pc, #56]	; (d4208 <_Z12MQTT_connectv+0x60>)
   d41d0:	f001 fbdc 	bl	d598c <_ZN13Adafruit_MQTT18connectErrorStringEa>
   d41d4:	4601      	mov	r1, r0
   d41d6:	4628      	mov	r0, r5
   d41d8:	f002 fb01 	bl	d67de <_ZN5Print7printlnEPKc>
       Serial.println("Retrying MQTT connection in 5 seconds...");
   d41dc:	f002 fcfc 	bl	d6bd8 <_Z16_fetch_usbserialv>
   d41e0:	490b      	ldr	r1, [pc, #44]	; (d4210 <_Z12MQTT_connectv+0x68>)
   d41e2:	f002 fafc 	bl	d67de <_ZN5Print7printlnEPKc>
       mqtt.disconnect();
   d41e6:	4808      	ldr	r0, [pc, #32]	; (d4208 <_Z12MQTT_connectv+0x60>)
   d41e8:	f001 fbde 	bl	d59a8 <_ZN13Adafruit_MQTT10disconnectEv>
       delay(5000);  
   d41ec:	f241 3088 	movw	r0, #5000	; 0x1388
   d41f0:	f002 fb6c 	bl	d68cc <delay>
   d41f4:	e7e2      	b.n	d41bc <_Z12MQTT_connectv+0x14>
  }
  Serial.println("MQTT Connected!");
   d41f6:	f002 fcef 	bl	d6bd8 <_Z16_fetch_usbserialv>
   d41fa:	4906      	ldr	r1, [pc, #24]	; (d4214 <_Z12MQTT_connectv+0x6c>)
}
   d41fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  
  }
  Serial.println("MQTT Connected!");
   d4200:	f002 baed 	b.w	d67de <_ZN5Print7printlnEPKc>
   d4204:	bd38      	pop	{r3, r4, r5, pc}
   d4206:	bf00      	nop
   d4208:	2003e204 	.word	0x2003e204
   d420c:	000da1a4 	.word	0x000da1a4
   d4210:	000da1bb 	.word	0x000da1bb
   d4214:	000da1e4 	.word	0x000da1e4

000d4218 <setup>:
int pushbutton = D9;
int intemp;    //Temperature for the inside -- bme280
int totalstate; // This is the integer to show what the current state of the unit is
bool status = false;

void setup() {
   d4218:	b510      	push	{r4, lr}
  pinMode(A0, INPUT);
   d421a:	2100      	movs	r1, #0
   d421c:	2013      	movs	r0, #19
   d421e:	f003 faa7 	bl	d7770 <pinMode>
  pinMode(relay1, OUTPUT);
   d4222:	4b15      	ldr	r3, [pc, #84]	; (d4278 <setup+0x60>)
  pinMode(relay2, OUTPUT);
  pinMode(relay3, OUTPUT);
   display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4224:	4c15      	ldr	r4, [pc, #84]	; (d427c <setup+0x64>)
int totalstate; // This is the integer to show what the current state of the unit is
bool status = false;

void setup() {
  pinMode(A0, INPUT);
  pinMode(relay1, OUTPUT);
   d4226:	8818      	ldrh	r0, [r3, #0]
   d4228:	2101      	movs	r1, #1
   d422a:	f003 faa1 	bl	d7770 <pinMode>
  pinMode(relay2, OUTPUT);
   d422e:	4b14      	ldr	r3, [pc, #80]	; (d4280 <setup+0x68>)
   d4230:	2101      	movs	r1, #1
   d4232:	8818      	ldrh	r0, [r3, #0]
   d4234:	f003 fa9c 	bl	d7770 <pinMode>
  pinMode(relay3, OUTPUT);
   d4238:	4b12      	ldr	r3, [pc, #72]	; (d4284 <setup+0x6c>)
   d423a:	2101      	movs	r1, #1
   d423c:	8818      	ldrh	r0, [r3, #0]
   d423e:	f003 fa97 	bl	d7770 <pinMode>
   display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4242:	223c      	movs	r2, #60	; 0x3c
   d4244:	4620      	mov	r0, r4
   d4246:	2102      	movs	r1, #2
   d4248:	f000 ff50 	bl	d50ec <_ZN16Adafruit_SSD13065beginEhh>
  display.setTextColor(WHITE);
   d424c:	2101      	movs	r1, #1
   d424e:	4620      	mov	r0, r4
   d4250:	f001 fa56 	bl	d5700 <_ZN12Adafruit_GFX12setTextColorEt>
  bme.begin();
   d4254:	480c      	ldr	r0, [pc, #48]	; (d4288 <setup+0x70>)
   d4256:	f000 fc5f 	bl	d4b18 <_ZN15Adafruit_BME2805beginEv>
  display.display();
   d425a:	4620      	mov	r0, r4
   d425c:	f001 f818 	bl	d5290 <_ZN16Adafruit_SSD13067displayEv>
  delay(750);
   d4260:	f240 20ee 	movw	r0, #750	; 0x2ee
   d4264:	f002 fb32 	bl	d68cc <delay>
  
  MQTT_connect();
   d4268:	f7ff ff9e 	bl	d41a8 <_Z12MQTT_connectv>
  mqtt.subscribe(&turnon);
   d426c:	4907      	ldr	r1, [pc, #28]	; (d428c <setup+0x74>)
   d426e:	4808      	ldr	r0, [pc, #32]	; (d4290 <setup+0x78>)
  


}
   d4270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  bme.begin();
  display.display();
  delay(750);
  
  MQTT_connect();
  mqtt.subscribe(&turnon);
   d4274:	f001 bbac 	b.w	d59d0 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>
   d4278:	2003dd04 	.word	0x2003dd04
   d427c:	2003e2e0 	.word	0x2003e2e0
   d4280:	2003dd08 	.word	0x2003dd08
   d4284:	2003dd0c 	.word	0x2003dd0c
   d4288:	2003e328 	.word	0x2003e328
   d428c:	2003e1c8 	.word	0x2003e1c8
   d4290:	2003e204 	.word	0x2003e204

000d4294 <_Z5ping1v>:
       delay(5000);  
  }
  Serial.println("MQTT Connected!");
}

void ping1() {  //pings adafruit.io to make sure  connection is active
   d4294:	b538      	push	{r3, r4, r5, lr}
   d4296:	f001 fe87 	bl	d5fa8 <HAL_Timer_Get_Milli_Seconds>
   if ((millis()-last)>30000) {
   d429a:	4b10      	ldr	r3, [pc, #64]	; (d42dc <_Z5ping1v+0x48>)
   d429c:	681a      	ldr	r2, [r3, #0]
   d429e:	1a80      	subs	r0, r0, r2
   d42a0:	f247 5230 	movw	r2, #30000	; 0x7530
   d42a4:	4290      	cmp	r0, r2
   d42a6:	461c      	mov	r4, r3
   d42a8:	d917      	bls.n	d42da <_Z5ping1v+0x46>
      Serial.printf("Pinging MQTT \n");
   d42aa:	f002 fc95 	bl	d6bd8 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d42ae:	4a0c      	ldr	r2, [pc, #48]	; (d42e0 <_Z5ping1v+0x4c>)
   d42b0:	2100      	movs	r1, #0
   d42b2:	f002 fabe 	bl	d6832 <_ZN5Print11printf_implEbPKcz>
      
      if(! mqtt.ping()) {
   d42b6:	2101      	movs	r1, #1
   d42b8:	480a      	ldr	r0, [pc, #40]	; (d42e4 <_Z5ping1v+0x50>)
   d42ba:	f001 fc23 	bl	d5b04 <_ZN13Adafruit_MQTT4pingEh>
   d42be:	4605      	mov	r5, r0
   d42c0:	b940      	cbnz	r0, d42d4 <_Z5ping1v+0x40>
        Serial.printf("Disconnecting \n");
   d42c2:	f002 fc89 	bl	d6bd8 <_Z16_fetch_usbserialv>
   d42c6:	4a08      	ldr	r2, [pc, #32]	; (d42e8 <_Z5ping1v+0x54>)
   d42c8:	4629      	mov	r1, r5
   d42ca:	f002 fab2 	bl	d6832 <_ZN5Print11printf_implEbPKcz>
        mqtt.disconnect();
   d42ce:	4805      	ldr	r0, [pc, #20]	; (d42e4 <_Z5ping1v+0x50>)
   d42d0:	f001 fb6a 	bl	d59a8 <_ZN13Adafruit_MQTT10disconnectEv>
   d42d4:	f001 fe68 	bl	d5fa8 <HAL_Timer_Get_Milli_Seconds>
      }
      last = millis();
   d42d8:	6020      	str	r0, [r4, #0]
   d42da:	bd38      	pop	{r3, r4, r5, pc}
   d42dc:	2003e200 	.word	0x2003e200
   d42e0:	000da1f4 	.word	0x000da1f4
   d42e4:	2003e204 	.word	0x2003e204
   d42e8:	000da203 	.word	0x000da203

000d42ec <loop>:
  


}

void loop() {
   d42ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ping1(); // calls on the mqtt ping to keep active connection to adafruit
  onoff();
  climateread();
  display.clearDisplay();
  display.println(totalstate);
   d42ee:	4d24      	ldr	r5, [pc, #144]	; (d4380 <loop+0x94>)


}

void loop() {
  ping1(); // calls on the mqtt ping to keep active connection to adafruit
   d42f0:	f7ff ffd0 	bl	d4294 <_Z5ping1v>
  onoff();
   d42f4:	f7ff ff10 	bl	d4118 <_Z5onoffv>
  climateread();
   d42f8:	f7ff ff48 	bl	d418c <_Z11climatereadv>
  display.clearDisplay();
   d42fc:	4821      	ldr	r0, [pc, #132]	; (d4384 <loop+0x98>)
   d42fe:	f000 fea5 	bl	d504c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.println(totalstate);
   d4302:	682c      	ldr	r4, [r5, #0]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4304:	2c00      	cmp	r4, #0
   d4306:	da05      	bge.n	d4314 <loop+0x28>
            t = print('-');
   d4308:	212d      	movs	r1, #45	; 0x2d
   d430a:	481e      	ldr	r0, [pc, #120]	; (d4384 <loop+0x98>)
   d430c:	f002 fa58 	bl	d67c0 <_ZN5Print5printEc>
            val = -n;
   d4310:	4261      	negs	r1, r4
   d4312:	e000      	b.n	d4316 <loop+0x2a>
        } else {
            val = n;
   d4314:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d4316:	220a      	movs	r2, #10
   d4318:	481a      	ldr	r0, [pc, #104]	; (d4384 <loop+0x98>)
  display.display();
  

   Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription(4000))) {
    if (subscription == &turnon) {
   d431a:	4f1b      	ldr	r7, [pc, #108]	; (d4388 <loop+0x9c>)
   d431c:	f002 fa69 	bl	d67f2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4320:	4818      	ldr	r0, [pc, #96]	; (d4384 <loop+0x98>)
   d4322:	f002 fa50 	bl	d67c6 <_ZN5Print7printlnEv>
  ping1(); // calls on the mqtt ping to keep active connection to adafruit
  onoff();
  climateread();
  display.clearDisplay();
  display.println(totalstate);
  display.setCursor(0,0);
   d4326:	2200      	movs	r2, #0
   d4328:	4611      	mov	r1, r2
   d432a:	4816      	ldr	r0, [pc, #88]	; (d4384 <loop+0x98>)
   d432c:	f001 f9e5 	bl	d56fa <_ZN12Adafruit_GFX9setCursorEss>
  display.display();
   d4330:	4814      	ldr	r0, [pc, #80]	; (d4384 <loop+0x98>)
   d4332:	f000 ffad 	bl	d5290 <_ZN16Adafruit_SSD13067displayEv>
  

   Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription(4000))) {
   d4336:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   d433a:	4814      	ldr	r0, [pc, #80]	; (d438c <loop+0xa0>)
   d433c:	f001 fb64 	bl	d5a08 <_ZN13Adafruit_MQTT16readSubscriptionEs>
   d4340:	b1e8      	cbz	r0, d437e <loop+0x92>
    if (subscription == &turnon) {
   d4342:	42b8      	cmp	r0, r7
   d4344:	d1f7      	bne.n	d4336 <loop+0x4a>
     totalstate = atof((char *)turnon.lastread);
   d4346:	1d78      	adds	r0, r7, #5
   d4348:	f004 f906 	bl	d8558 <atof>
   d434c:	ec51 0b10 	vmov	r0, r1, d0
   d4350:	f004 f86a 	bl	d8428 <__aeabi_d2iz>
   d4354:	6028      	str	r0, [r5, #0]
     Serial.println(totalstate);
   d4356:	f002 fc3f 	bl	d6bd8 <_Z16_fetch_usbserialv>
   d435a:	682c      	ldr	r4, [r5, #0]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d435c:	2c00      	cmp	r4, #0
   d435e:	4606      	mov	r6, r0
   d4360:	da04      	bge.n	d436c <loop+0x80>
            t = print('-');
   d4362:	212d      	movs	r1, #45	; 0x2d
   d4364:	f002 fa2c 	bl	d67c0 <_ZN5Print5printEc>
            val = -n;
   d4368:	4261      	negs	r1, r4
   d436a:	e000      	b.n	d436e <loop+0x82>
        } else {
            val = n;
   d436c:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d436e:	220a      	movs	r2, #10
   d4370:	4630      	mov	r0, r6
   d4372:	f002 fa3e 	bl	d67f2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4376:	4630      	mov	r0, r6
   d4378:	f002 fa25 	bl	d67c6 <_ZN5Print7printlnEv>
   d437c:	e7db      	b.n	d4336 <loop+0x4a>
   d437e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4380:	2003e2d8 	.word	0x2003e2d8
   d4384:	2003e2e0 	.word	0x2003e2e0
   d4388:	2003e1c8 	.word	0x2003e1c8
   d438c:	2003e204 	.word	0x2003e204

000d4390 <_ZN16Adafruit_SSD1306D0Ev>:
   d4390:	b510      	push	{r4, lr}
   d4392:	2124      	movs	r1, #36	; 0x24
   d4394:	4604      	mov	r4, r0
   d4396:	f003 fa99 	bl	d78cc <_ZdlPvj>
   d439a:	4620      	mov	r0, r4
   d439c:	bd10      	pop	{r4, pc}

000d439e <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d439e:	b510      	push	{r4, lr}
   d43a0:	21d4      	movs	r1, #212	; 0xd4
   d43a2:	4604      	mov	r4, r0
   d43a4:	f003 fa92 	bl	d78cc <_ZdlPvj>
   d43a8:	4620      	mov	r0, r4
   d43aa:	bd10      	pop	{r4, pc}

000d43ac <_GLOBAL__sub_I_display>:
        Serial.printf("Disconnecting \n");
        mqtt.disconnect();
      }
      last = millis();
  }
   d43ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
#include "Apikey.h"


#define BME280_ADDRESS  (0x77)
#define OLED_RESET D4
Adafruit_SSD1306 display(OLED_RESET);
   d43ae:	4c20      	ldr	r4, [pc, #128]	; (d4430 <_GLOBAL__sub_I_display+0x84>)
   d43b0:	4d20      	ldr	r5, [pc, #128]	; (d4434 <_GLOBAL__sub_I_display+0x88>)
#define AIO_SERVER      "io.adafruit.com" 
#define AIO_SERVERPORT  1883 
//this is a github test  


TCPClient TheClient; 
   d43b2:	4e21      	ldr	r6, [pc, #132]	; (d4438 <_GLOBAL__sub_I_display+0x8c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d43b4:	f001 fd60 	bl	d5e78 <HAL_Pin_Map>
#include "Apikey.h"


#define BME280_ADDRESS  (0x77)
#define OLED_RESET D4
Adafruit_SSD1306 display(OLED_RESET);
   d43b8:	2104      	movs	r1, #4
   d43ba:	4620      	mov	r0, r4
   d43bc:	f000 fe30 	bl	d5020 <_ZN16Adafruit_SSD1306C1Ea>
   d43c0:	462a      	mov	r2, r5
   d43c2:	491e      	ldr	r1, [pc, #120]	; (d443c <_GLOBAL__sub_I_display+0x90>)
   d43c4:	4620      	mov	r0, r4
   d43c6:	f003 fa73 	bl	d78b0 <__aeabi_atexit>
Adafruit_BME280 bme;
   d43ca:	481d      	ldr	r0, [pc, #116]	; (d4440 <_GLOBAL__sub_I_display+0x94>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d43cc:	4c1d      	ldr	r4, [pc, #116]	; (d4444 <_GLOBAL__sub_I_display+0x98>)
   d43ce:	f000 f87f 	bl	d44d0 <_ZN15Adafruit_BME280C1Ev>
#define AIO_SERVER      "io.adafruit.com" 
#define AIO_SERVERPORT  1883 
//this is a github test  


TCPClient TheClient; 
   d43d2:	4630      	mov	r0, r6
   d43d4:	f003 f896 	bl	d7504 <_ZN9TCPClientC1Ev>
   d43d8:	462a      	mov	r2, r5
   d43da:	491b      	ldr	r1, [pc, #108]	; (d4448 <_GLOBAL__sub_I_display+0x9c>)
   d43dc:	4630      	mov	r0, r6
   d43de:	f003 fa67 	bl	d78b0 <__aeabi_atexit>
   d43e2:	4b1a      	ldr	r3, [pc, #104]	; (d444c <_GLOBAL__sub_I_display+0xa0>)
   d43e4:	9300      	str	r3, [sp, #0]
   d43e6:	f240 725b 	movw	r2, #1883	; 0x75b
   d43ea:	4b19      	ldr	r3, [pc, #100]	; (d4450 <_GLOBAL__sub_I_display+0xa4>)
   d43ec:	4919      	ldr	r1, [pc, #100]	; (d4454 <_GLOBAL__sub_I_display+0xa8>)
   d43ee:	4620      	mov	r0, r4
   d43f0:	f001 fa46 	bl	d5880 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d43f4:	4b18      	ldr	r3, [pc, #96]	; (d4458 <_GLOBAL__sub_I_display+0xac>)
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);
   d43f6:	4919      	ldr	r1, [pc, #100]	; (d445c <_GLOBAL__sub_I_display+0xb0>)
   d43f8:	6023      	str	r3, [r4, #0]
   d43fa:	462a      	mov	r2, r5
   d43fc:	4620      	mov	r0, r4
   d43fe:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d4402:	f003 fa55 	bl	d78b0 <__aeabi_atexit>

Adafruit_MQTT_Subscribe activate = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/activate"); 
   d4406:	4621      	mov	r1, r4
   d4408:	2300      	movs	r3, #0
   d440a:	4a15      	ldr	r2, [pc, #84]	; (d4460 <_GLOBAL__sub_I_display+0xb4>)
   d440c:	4815      	ldr	r0, [pc, #84]	; (d4464 <_GLOBAL__sub_I_display+0xb8>)
   d440e:	f001 fd11 	bl	d5e34 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Subscribe turnon = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/turnon");
   d4412:	4621      	mov	r1, r4
   d4414:	2300      	movs	r3, #0
   d4416:	4a14      	ldr	r2, [pc, #80]	; (d4468 <_GLOBAL__sub_I_display+0xbc>)
   d4418:	4814      	ldr	r0, [pc, #80]	; (d446c <_GLOBAL__sub_I_display+0xc0>)
   d441a:	f001 fd0b 	bl	d5e34 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish insidetemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/insidetemp");
   d441e:	4a14      	ldr	r2, [pc, #80]	; (d4470 <_GLOBAL__sub_I_display+0xc4>)
   d4420:	4814      	ldr	r0, [pc, #80]	; (d4474 <_GLOBAL__sub_I_display+0xc8>)
   d4422:	2300      	movs	r3, #0
   d4424:	4621      	mov	r1, r4
        Serial.printf("Disconnecting \n");
        mqtt.disconnect();
      }
      last = millis();
  }
   d4426:	b002      	add	sp, #8
   d4428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
TCPClient TheClient; 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);

Adafruit_MQTT_Subscribe activate = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/activate"); 
Adafruit_MQTT_Subscribe turnon = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/turnon");
Adafruit_MQTT_Publish insidetemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/insidetemp");
   d442c:	f001 bcec 	b.w	d5e08 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
   d4430:	2003e2e0 	.word	0x2003e2e0
   d4434:	2003e1c4 	.word	0x2003e1c4
   d4438:	2003e308 	.word	0x2003e308
   d443c:	000d40cd 	.word	0x000d40cd
   d4440:	2003e328 	.word	0x2003e328
   d4444:	2003e204 	.word	0x2003e204
   d4448:	000d40d1 	.word	0x000d40d1
   d444c:	000da22f 	.word	0x000da22f
   d4450:	000da213 	.word	0x000da213
   d4454:	000da21f 	.word	0x000da21f
   d4458:	000da904 	.word	0x000da904
   d445c:	000d40cf 	.word	0x000d40cf
   d4460:	000da250 	.word	0x000da250
   d4464:	2003e36c 	.word	0x2003e36c
   d4468:	000da26b 	.word	0x000da26b
   d446c:	2003e1c8 	.word	0x2003e1c8
   d4470:	000da284 	.word	0x000da284
   d4474:	2003e3a4 	.word	0x2003e3a4

000d4478 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4478:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d447a:	4602      	mov	r2, r0
   d447c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d447e:	7913      	ldrb	r3, [r2, #4]
   d4480:	6895      	ldr	r5, [r2, #8]
   d4482:	b133      	cbz	r3, d4492 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4484:	b93d      	cbnz	r5, d4496 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4486:	490c      	ldr	r1, [pc, #48]	; (d44b8 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4488:	b004      	add	sp, #16
   d448a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d448e:	f002 b993 	b.w	d67b8 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4492:	4b0a      	ldr	r3, [pc, #40]	; (d44bc <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4494:	e000      	b.n	d4498 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4496:	4b0a      	ldr	r3, [pc, #40]	; (d44c0 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4498:	7b16      	ldrb	r6, [r2, #12]
   d449a:	4c0a      	ldr	r4, [pc, #40]	; (d44c4 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d449c:	490a      	ldr	r1, [pc, #40]	; (d44c8 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d449e:	7b52      	ldrb	r2, [r2, #13]
   d44a0:	9202      	str	r2, [sp, #8]
   d44a2:	2e01      	cmp	r6, #1
   d44a4:	bf08      	it	eq
   d44a6:	4621      	moveq	r1, r4
   d44a8:	9101      	str	r1, [sp, #4]
   d44aa:	9500      	str	r5, [sp, #0]
   d44ac:	4a07      	ldr	r2, [pc, #28]	; (d44cc <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d44ae:	2100      	movs	r1, #0
   d44b0:	f002 f9bf 	bl	d6832 <_ZN5Print11printf_implEbPKcz>
  }
   d44b4:	b004      	add	sp, #16
   d44b6:	bd70      	pop	{r4, r5, r6, pc}
   d44b8:	000da2c1 	.word	0x000da2c1
   d44bc:	000da977 	.word	0x000da977
   d44c0:	000da2b0 	.word	0x000da2b0
   d44c4:	000da2b9 	.word	0x000da2b9
   d44c8:	000da2bd 	.word	0x000da2bd
   d44cc:	000da2d7 	.word	0x000da2d7

000d44d0 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d44d0:	22ff      	movs	r2, #255	; 0xff
   d44d2:	7402      	strb	r2, [r0, #16]
   d44d4:	7442      	strb	r2, [r0, #17]
   d44d6:	7482      	strb	r2, [r0, #18]
   d44d8:	74c2      	strb	r2, [r0, #19]
{ }
   d44da:	4770      	bx	lr

000d44dc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d44dc:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d44de:	4d09      	ldr	r5, [pc, #36]	; (d4504 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d44e0:	6829      	ldr	r1, [r5, #0]
   d44e2:	f011 0401 	ands.w	r4, r1, #1
   d44e6:	d10a      	bne.n	d44fe <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d44e8:	4628      	mov	r0, r5
   d44ea:	f7ff fde7 	bl	d40bc <__cxa_guard_acquire>
   d44ee:	b130      	cbz	r0, d44fe <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d44f0:	4621      	mov	r1, r4
   d44f2:	4805      	ldr	r0, [pc, #20]	; (d4508 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d44f4:	f001 ff90 	bl	d6418 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d44f8:	4628      	mov	r0, r5
   d44fa:	f7ff fde4 	bl	d40c6 <__cxa_guard_release>
        return instance;
    }
   d44fe:	4802      	ldr	r0, [pc, #8]	; (d4508 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4500:	bd38      	pop	{r3, r4, r5, pc}
   d4502:	bf00      	nop
   d4504:	2003e3b0 	.word	0x2003e3b0
   d4508:	2003e3b4 	.word	0x2003e3b4

000d450c <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d450c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4510:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4514:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4516:	4605      	mov	r5, r0
   d4518:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d451a:	d106      	bne.n	d452a <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d451c:	f7ff ffde 	bl	d44dc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4520:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4526:	f002 b893 	b.w	d6650 <_ZN8SPIClass8transferEh>
   d452a:	2607      	movs	r6, #7
   d452c:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d452e:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d4532:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4536:	2100      	movs	r1, #0
   d4538:	b280      	uxth	r0, r0
   d453a:	f003 f92a 	bl	d7792 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d453e:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4542:	fa08 f106 	lsl.w	r1, r8, r6
   d4546:	4039      	ands	r1, r7
   d4548:	b280      	uxth	r0, r0
   d454a:	f003 f922 	bl	d7792 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d454e:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4552:	2101      	movs	r1, #1
   d4554:	b280      	uxth	r0, r0
   d4556:	f003 f91c 	bl	d7792 <digitalWrite>
        if (digitalRead(_miso))
   d455a:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d455e:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4560:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4562:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4564:	f003 f92e 	bl	d77c4 <digitalRead>
   d4568:	b108      	cbz	r0, d456e <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d456a:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d456e:	f116 36ff 	adds.w	r6, r6, #4294967295
   d4572:	d2de      	bcs.n	d4532 <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4574:	4620      	mov	r0, r4
   d4576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d457a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d457a:	b508      	push	{r3, lr}
        instance().endTransaction();
   d457c:	f7ff ffae 	bl	d44dc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d4580:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d4584:	f001 bf85 	b.w	d6492 <_ZN8SPIClass14endTransactionEv>

000d4588 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d4588:	b510      	push	{r4, lr}
   d458a:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d458c:	f7ff ffa6 	bl	d44dc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4590:	4621      	mov	r1, r4
    }
   d4592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d4596:	f001 bf95 	b.w	d64c4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d459c <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d459c:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d459e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d45a2:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d45a4:	b085      	sub	sp, #20
   d45a6:	4604      	mov	r4, r0
   d45a8:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d45aa:	d121      	bne.n	d45f0 <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d45ac:	7901      	ldrb	r1, [r0, #4]
   d45ae:	6800      	ldr	r0, [r0, #0]
   d45b0:	f002 fc2f 	bl	d6e12 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d45b4:	6820      	ldr	r0, [r4, #0]
   d45b6:	6803      	ldr	r3, [r0, #0]
   d45b8:	4629      	mov	r1, r5
   d45ba:	689b      	ldr	r3, [r3, #8]
   d45bc:	4798      	blx	r3
        _wire -> endTransmission();
   d45be:	6820      	ldr	r0, [r4, #0]
   d45c0:	f002 fc32 	bl	d6e28 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d45c4:	2203      	movs	r2, #3
   d45c6:	7921      	ldrb	r1, [r4, #4]
   d45c8:	6820      	ldr	r0, [r4, #0]
   d45ca:	f002 fc1f 	bl	d6e0c <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d45ce:	6820      	ldr	r0, [r4, #0]
   d45d0:	6803      	ldr	r3, [r0, #0]
   d45d2:	695b      	ldr	r3, [r3, #20]
   d45d4:	4798      	blx	r3
        value <<= 8;
   d45d6:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d45d8:	6820      	ldr	r0, [r4, #0]
   d45da:	6803      	ldr	r3, [r0, #0]
   d45dc:	695b      	ldr	r3, [r3, #20]
   d45de:	4798      	blx	r3
   d45e0:	4328      	orrs	r0, r5
        value <<= 8;
   d45e2:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d45e4:	6820      	ldr	r0, [r4, #0]
   d45e6:	6803      	ldr	r3, [r0, #0]
   d45e8:	695b      	ldr	r3, [r3, #20]
   d45ea:	4798      	blx	r3
   d45ec:	4305      	orrs	r5, r0
   d45ee:	e039      	b.n	d4664 <_ZN15Adafruit_BME2806read24Eh+0xc8>
    } else {
        if (_sck == -1)
   d45f0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d45f4:	3301      	adds	r3, #1
   d45f6:	d10e      	bne.n	d4616 <_ZN15Adafruit_BME2806read24Eh+0x7a>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d45f8:	4b1c      	ldr	r3, [pc, #112]	; (d466c <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d45fa:	4a1d      	ldr	r2, [pc, #116]	; (d4670 <_ZN15Adafruit_BME2806read24Eh+0xd4>)
   d45fc:	9300      	str	r3, [sp, #0]
   d45fe:	9202      	str	r2, [sp, #8]
   d4600:	2300      	movs	r3, #0
   d4602:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4604:	4668      	mov	r0, sp
   d4606:	f88d 3004 	strb.w	r3, [sp, #4]
   d460a:	f88d 200c 	strb.w	r2, [sp, #12]
   d460e:	f88d 300d 	strb.w	r3, [sp, #13]
   d4612:	f7ff ffb9 	bl	d4588 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4616:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d461a:	2100      	movs	r1, #0
   d461c:	b280      	uxth	r0, r0
   d461e:	f003 f8b8 	bl	d7792 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4622:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4626:	4620      	mov	r0, r4
   d4628:	f7ff ff70 	bl	d450c <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d462c:	2100      	movs	r1, #0
   d462e:	4620      	mov	r0, r4
   d4630:	f7ff ff6c 	bl	d450c <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d4634:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d4636:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4638:	4620      	mov	r0, r4
   d463a:	f7ff ff67 	bl	d450c <_ZN15Adafruit_BME2807spixferEh>
   d463e:	4328      	orrs	r0, r5
        value <<= 8;
   d4640:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4642:	2100      	movs	r1, #0
   d4644:	4620      	mov	r0, r4
   d4646:	f7ff ff61 	bl	d450c <_ZN15Adafruit_BME2807spixferEh>
   d464a:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d464c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4650:	2101      	movs	r1, #1
   d4652:	b280      	uxth	r0, r0
   d4654:	f003 f89d 	bl	d7792 <digitalWrite>
        if (_sck == -1)
   d4658:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d465c:	3301      	adds	r3, #1
   d465e:	d101      	bne.n	d4664 <_ZN15Adafruit_BME2806read24Eh+0xc8>
            SPI.endTransaction(); // release the SPI bus
   d4660:	f7ff ff8b 	bl	d457a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4664:	4628      	mov	r0, r5
   d4666:	b005      	add	sp, #20
   d4668:	bd30      	pop	{r4, r5, pc}
   d466a:	bf00      	nop
   d466c:	000da2ac 	.word	0x000da2ac
   d4670:	0007a120 	.word	0x0007a120

000d4674 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4674:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4676:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4678:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d467a:	f7ff ff8f 	bl	d459c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d467e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d4682:	d01e      	beq.n	d46c2 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4684:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4686:	ed9f 7a10 	vldr	s14, [pc, #64]	; d46c8 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d468a:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d468e:	0052      	lsls	r2, r2, #1
   d4690:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d4694:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d4698:	435b      	muls	r3, r3
   d469a:	4350      	muls	r0, r2
   d469c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d46a0:	131b      	asrs	r3, r3, #12
   d46a2:	4353      	muls	r3, r2
   d46a4:	139b      	asrs	r3, r3, #14
   d46a6:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d46aa:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d46ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d46b0:	3080      	adds	r0, #128	; 0x80
   d46b2:	1200      	asrs	r0, r0, #8
   d46b4:	ee07 0a90 	vmov	s15, r0
   d46b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d46bc:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d46c0:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d46c2:	ed9f 0a02 	vldr	s0, [pc, #8]	; d46cc <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d46c6:	bd10      	pop	{r4, pc}
   d46c8:	42c80000 	.word	0x42c80000
   d46cc:	7fc00000 	.word	0x7fc00000

000d46d0 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d46d0:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d46d2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d46d6:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d46d8:	b085      	sub	sp, #20
   d46da:	4604      	mov	r4, r0
   d46dc:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d46de:	d11d      	bne.n	d471c <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d46e0:	7901      	ldrb	r1, [r0, #4]
   d46e2:	6800      	ldr	r0, [r0, #0]
   d46e4:	f002 fb95 	bl	d6e12 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d46e8:	6820      	ldr	r0, [r4, #0]
   d46ea:	6803      	ldr	r3, [r0, #0]
   d46ec:	4629      	mov	r1, r5
   d46ee:	689b      	ldr	r3, [r3, #8]
   d46f0:	4798      	blx	r3
        _wire -> endTransmission();
   d46f2:	6820      	ldr	r0, [r4, #0]
   d46f4:	f002 fb98 	bl	d6e28 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d46f8:	2202      	movs	r2, #2
   d46fa:	7921      	ldrb	r1, [r4, #4]
   d46fc:	6820      	ldr	r0, [r4, #0]
   d46fe:	f002 fb85 	bl	d6e0c <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d4702:	6820      	ldr	r0, [r4, #0]
   d4704:	6803      	ldr	r3, [r0, #0]
   d4706:	695b      	ldr	r3, [r3, #20]
   d4708:	4798      	blx	r3
   d470a:	4605      	mov	r5, r0
   d470c:	6820      	ldr	r0, [r4, #0]
   d470e:	6803      	ldr	r3, [r0, #0]
   d4710:	695b      	ldr	r3, [r3, #20]
   d4712:	4798      	blx	r3
   d4714:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4718:	b285      	uxth	r5, r0
   d471a:	e035      	b.n	d4788 <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d471c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4720:	3301      	adds	r3, #1
   d4722:	d10e      	bne.n	d4742 <_ZN15Adafruit_BME2806read16Eh+0x72>
   d4724:	4b1a      	ldr	r3, [pc, #104]	; (d4790 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d4726:	4a1b      	ldr	r2, [pc, #108]	; (d4794 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d4728:	9300      	str	r3, [sp, #0]
   d472a:	9202      	str	r2, [sp, #8]
   d472c:	2300      	movs	r3, #0
   d472e:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4730:	4668      	mov	r0, sp
   d4732:	f88d 3004 	strb.w	r3, [sp, #4]
   d4736:	f88d 200c 	strb.w	r2, [sp, #12]
   d473a:	f88d 300d 	strb.w	r3, [sp, #13]
   d473e:	f7ff ff23 	bl	d4588 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4742:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4746:	2100      	movs	r1, #0
   d4748:	b280      	uxth	r0, r0
   d474a:	f003 f822 	bl	d7792 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d474e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4752:	4620      	mov	r0, r4
   d4754:	f7ff feda 	bl	d450c <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4758:	2100      	movs	r1, #0
   d475a:	4620      	mov	r0, r4
   d475c:	f7ff fed6 	bl	d450c <_ZN15Adafruit_BME2807spixferEh>
   d4760:	2100      	movs	r1, #0
   d4762:	4605      	mov	r5, r0
   d4764:	4620      	mov	r0, r4
   d4766:	f7ff fed1 	bl	d450c <_ZN15Adafruit_BME2807spixferEh>
   d476a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d476e:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4770:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4774:	2101      	movs	r1, #1
   d4776:	b280      	uxth	r0, r0
   d4778:	f003 f80b 	bl	d7792 <digitalWrite>
        if (_sck == -1)
   d477c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4780:	3301      	adds	r3, #1
   d4782:	d101      	bne.n	d4788 <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d4784:	f7ff fef9 	bl	d457a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4788:	4628      	mov	r0, r5
   d478a:	b005      	add	sp, #20
   d478c:	bd30      	pop	{r4, r5, pc}
   d478e:	bf00      	nop
   d4790:	000da2ac 	.word	0x000da2ac
   d4794:	0007a120 	.word	0x0007a120

000d4798 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4798:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d479a:	f7ff ff99 	bl	d46d0 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d479e:	ba40      	rev16	r0, r0
}
   d47a0:	b280      	uxth	r0, r0
   d47a2:	bd08      	pop	{r3, pc}

000d47a4 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d47a4:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d47a6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d47aa:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d47ac:	b085      	sub	sp, #20
   d47ae:	4604      	mov	r4, r0
   d47b0:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d47b2:	d116      	bne.n	d47e2 <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d47b4:	7901      	ldrb	r1, [r0, #4]
   d47b6:	6800      	ldr	r0, [r0, #0]
   d47b8:	f002 fb2b 	bl	d6e12 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d47bc:	6820      	ldr	r0, [r4, #0]
   d47be:	6803      	ldr	r3, [r0, #0]
   d47c0:	4629      	mov	r1, r5
   d47c2:	689b      	ldr	r3, [r3, #8]
   d47c4:	4798      	blx	r3
        _wire -> endTransmission();
   d47c6:	6820      	ldr	r0, [r4, #0]
   d47c8:	f002 fb2e 	bl	d6e28 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d47cc:	2201      	movs	r2, #1
   d47ce:	7921      	ldrb	r1, [r4, #4]
   d47d0:	6820      	ldr	r0, [r4, #0]
   d47d2:	f002 fb1b 	bl	d6e0c <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d47d6:	6820      	ldr	r0, [r4, #0]
   d47d8:	6803      	ldr	r3, [r0, #0]
   d47da:	695b      	ldr	r3, [r3, #20]
   d47dc:	4798      	blx	r3
   d47de:	b2c5      	uxtb	r5, r0
   d47e0:	e02e      	b.n	d4840 <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d47e2:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d47e6:	3301      	adds	r3, #1
   d47e8:	d10e      	bne.n	d4808 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d47ea:	4b17      	ldr	r3, [pc, #92]	; (d4848 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d47ec:	4a17      	ldr	r2, [pc, #92]	; (d484c <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d47ee:	9300      	str	r3, [sp, #0]
   d47f0:	9202      	str	r2, [sp, #8]
   d47f2:	2300      	movs	r3, #0
   d47f4:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d47f6:	4668      	mov	r0, sp
   d47f8:	f88d 3004 	strb.w	r3, [sp, #4]
   d47fc:	f88d 200c 	strb.w	r2, [sp, #12]
   d4800:	f88d 300d 	strb.w	r3, [sp, #13]
   d4804:	f7ff fec0 	bl	d4588 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4808:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d480c:	2100      	movs	r1, #0
   d480e:	b280      	uxth	r0, r0
   d4810:	f002 ffbf 	bl	d7792 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4814:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4818:	4620      	mov	r0, r4
   d481a:	f7ff fe77 	bl	d450c <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d481e:	2100      	movs	r1, #0
   d4820:	4620      	mov	r0, r4
   d4822:	f7ff fe73 	bl	d450c <_ZN15Adafruit_BME2807spixferEh>
   d4826:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4828:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d482c:	2101      	movs	r1, #1
   d482e:	b280      	uxth	r0, r0
   d4830:	f002 ffaf 	bl	d7792 <digitalWrite>
        if (_sck == -1)
   d4834:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4838:	3301      	adds	r3, #1
   d483a:	d101      	bne.n	d4840 <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d483c:	f7ff fe9d 	bl	d457a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d4840:	4628      	mov	r0, r5
   d4842:	b005      	add	sp, #20
   d4844:	bd30      	pop	{r4, r5, pc}
   d4846:	bf00      	nop
   d4848:	000da2ac 	.word	0x000da2ac
   d484c:	0007a120 	.word	0x0007a120

000d4850 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d4850:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d4852:	21f3      	movs	r1, #243	; 0xf3
   d4854:	f7ff ffa6 	bl	d47a4 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4858:	f000 0001 	and.w	r0, r0, #1
   d485c:	bd08      	pop	{r3, pc}

000d485e <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d485e:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4860:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4862:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4864:	f7ff ff98 	bl	d4798 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4868:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d486a:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d486c:	4620      	mov	r0, r4
   d486e:	f7ff ff93 	bl	d4798 <_ZN15Adafruit_BME2809read16_LEEh>
   d4872:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4874:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4876:	4620      	mov	r0, r4
   d4878:	f7ff ff8e 	bl	d4798 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d487c:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d487e:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4880:	4620      	mov	r0, r4
   d4882:	f7ff ff89 	bl	d4798 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4886:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4888:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d488a:	4620      	mov	r0, r4
   d488c:	f7ff ff84 	bl	d4798 <_ZN15Adafruit_BME2809read16_LEEh>
   d4890:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d4892:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4894:	4620      	mov	r0, r4
   d4896:	f7ff ff7f 	bl	d4798 <_ZN15Adafruit_BME2809read16_LEEh>
   d489a:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d489c:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d489e:	4620      	mov	r0, r4
   d48a0:	f7ff ff7a 	bl	d4798 <_ZN15Adafruit_BME2809read16_LEEh>
   d48a4:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d48a6:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d48a8:	4620      	mov	r0, r4
   d48aa:	f7ff ff75 	bl	d4798 <_ZN15Adafruit_BME2809read16_LEEh>
   d48ae:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d48b0:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d48b2:	4620      	mov	r0, r4
   d48b4:	f7ff ff70 	bl	d4798 <_ZN15Adafruit_BME2809read16_LEEh>
   d48b8:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d48ba:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d48bc:	4620      	mov	r0, r4
   d48be:	f7ff ff6b 	bl	d4798 <_ZN15Adafruit_BME2809read16_LEEh>
   d48c2:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d48c4:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d48c6:	4620      	mov	r0, r4
   d48c8:	f7ff ff66 	bl	d4798 <_ZN15Adafruit_BME2809read16_LEEh>
   d48cc:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d48ce:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d48d0:	4620      	mov	r0, r4
   d48d2:	f7ff ff61 	bl	d4798 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d48d6:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d48d8:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d48da:	4620      	mov	r0, r4
   d48dc:	f7ff ff62 	bl	d47a4 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d48e0:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d48e2:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d48e6:	4620      	mov	r0, r4
   d48e8:	f7ff ff56 	bl	d4798 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d48ec:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d48ee:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d48f0:	4620      	mov	r0, r4
   d48f2:	f7ff ff57 	bl	d47a4 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d48f6:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d48f8:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d48fc:	4620      	mov	r0, r4
   d48fe:	f7ff ff51 	bl	d47a4 <_ZN15Adafruit_BME2805read8Eh>
   d4902:	21e5      	movs	r1, #229	; 0xe5
   d4904:	4605      	mov	r5, r0
   d4906:	4620      	mov	r0, r4
   d4908:	f7ff ff4c 	bl	d47a4 <_ZN15Adafruit_BME2805read8Eh>
   d490c:	f000 000f 	and.w	r0, r0, #15
   d4910:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4914:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d4916:	21e6      	movs	r1, #230	; 0xe6
   d4918:	4620      	mov	r0, r4
   d491a:	f7ff ff43 	bl	d47a4 <_ZN15Adafruit_BME2805read8Eh>
   d491e:	21e5      	movs	r1, #229	; 0xe5
   d4920:	4605      	mov	r5, r0
   d4922:	4620      	mov	r0, r4
   d4924:	f7ff ff3e 	bl	d47a4 <_ZN15Adafruit_BME2805read8Eh>
   d4928:	1100      	asrs	r0, r0, #4
   d492a:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d492e:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d4930:	21e7      	movs	r1, #231	; 0xe7
   d4932:	4620      	mov	r0, r4
   d4934:	f7ff ff36 	bl	d47a4 <_ZN15Adafruit_BME2805read8Eh>
   d4938:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d493c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4940 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4940:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d4942:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4946:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4948:	4604      	mov	r4, r0
   d494a:	460e      	mov	r6, r1
   d494c:	4615      	mov	r5, r2
    if (_cs == -1) {
   d494e:	d111      	bne.n	d4974 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4950:	7901      	ldrb	r1, [r0, #4]
   d4952:	6800      	ldr	r0, [r0, #0]
   d4954:	f002 fa5d 	bl	d6e12 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4958:	6820      	ldr	r0, [r4, #0]
   d495a:	6803      	ldr	r3, [r0, #0]
   d495c:	4631      	mov	r1, r6
   d495e:	689b      	ldr	r3, [r3, #8]
   d4960:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d4962:	6820      	ldr	r0, [r4, #0]
   d4964:	6803      	ldr	r3, [r0, #0]
   d4966:	4629      	mov	r1, r5
   d4968:	689b      	ldr	r3, [r3, #8]
   d496a:	4798      	blx	r3
        _wire -> endTransmission();
   d496c:	6820      	ldr	r0, [r4, #0]
   d496e:	f002 fa5b 	bl	d6e28 <_ZN7TwoWire15endTransmissionEv>
   d4972:	e02d      	b.n	d49d0 <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d4974:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4978:	3301      	adds	r3, #1
   d497a:	d10e      	bne.n	d499a <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d497c:	4b15      	ldr	r3, [pc, #84]	; (d49d4 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d497e:	4a16      	ldr	r2, [pc, #88]	; (d49d8 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d4980:	9300      	str	r3, [sp, #0]
   d4982:	9202      	str	r2, [sp, #8]
   d4984:	2300      	movs	r3, #0
   d4986:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4988:	4668      	mov	r0, sp
   d498a:	f88d 3004 	strb.w	r3, [sp, #4]
   d498e:	f88d 200c 	strb.w	r2, [sp, #12]
   d4992:	f88d 300d 	strb.w	r3, [sp, #13]
   d4996:	f7ff fdf7 	bl	d4588 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d499a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d499e:	2100      	movs	r1, #0
   d49a0:	b280      	uxth	r0, r0
   d49a2:	f002 fef6 	bl	d7792 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d49a6:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d49aa:	4620      	mov	r0, r4
   d49ac:	f7ff fdae 	bl	d450c <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d49b0:	4629      	mov	r1, r5
   d49b2:	4620      	mov	r0, r4
   d49b4:	f7ff fdaa 	bl	d450c <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d49b8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d49bc:	2101      	movs	r1, #1
   d49be:	b280      	uxth	r0, r0
   d49c0:	f002 fee7 	bl	d7792 <digitalWrite>
    if (_sck == -1)
   d49c4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d49c8:	3301      	adds	r3, #1
   d49ca:	d101      	bne.n	d49d0 <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d49cc:	f7ff fdd5 	bl	d457a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d49d0:	b004      	add	sp, #16
   d49d2:	bd70      	pop	{r4, r5, r6, pc}
   d49d4:	000da2ac 	.word	0x000da2ac
   d49d8:	0007a120 	.word	0x0007a120

000d49dc <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d49dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d49de:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d49e2:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d49e6:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d49ea:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d49ee:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d49f2:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d49f6:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d49fa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d49fe:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d4a02:	f366 1347 	bfi	r3, r6, #5, #3
   d4a06:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d4a0a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4a0e:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4a12:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d4a14:	f367 0302 	bfi	r3, r7, #0, #3
   d4a18:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4a1c:	f006 0207 	and.w	r2, r6, #7
   d4a20:	21f2      	movs	r1, #242	; 0xf2
   d4a22:	f7ff ff8d 	bl	d4940 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4a26:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d4a2a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4a2e:	f002 0107 	and.w	r1, r2, #7
   d4a32:	009b      	lsls	r3, r3, #2
   d4a34:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4a38:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4a3c:	4620      	mov	r0, r4
   d4a3e:	21f5      	movs	r1, #245	; 0xf5
   d4a40:	f7ff ff7e 	bl	d4940 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4a44:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4a48:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4a4c:	f002 0107 	and.w	r1, r2, #7
   d4a50:	009b      	lsls	r3, r3, #2
   d4a52:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4a56:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4a5a:	4620      	mov	r0, r4
   d4a5c:	21f4      	movs	r1, #244	; 0xf4
}
   d4a5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4a62:	f7ff bf6d 	b.w	d4940 <_ZN15Adafruit_BME2806write8Ehh>

000d4a66 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4a66:	b530      	push	{r4, r5, lr}
   d4a68:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4a6a:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4a6e:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4a70:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4a72:	d103      	bne.n	d4a7c <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4a74:	6820      	ldr	r0, [r4, #0]
   d4a76:	f002 f995 	bl	d6da4 <_ZN7TwoWire5beginEv>
   d4a7a:	e022      	b.n	d4ac2 <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d4a7c:	2101      	movs	r1, #1
   d4a7e:	b280      	uxth	r0, r0
   d4a80:	f002 fe87 	bl	d7792 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4a84:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4a88:	2101      	movs	r1, #1
   d4a8a:	b280      	uxth	r0, r0
   d4a8c:	f002 fe70 	bl	d7770 <pinMode>
        if (_sck == -1) {
   d4a90:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4a94:	1c43      	adds	r3, r0, #1
   d4a96:	d104      	bne.n	d4aa2 <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4a98:	f7ff fd20 	bl	d44dc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4a9c:	f001 fcc6 	bl	d642c <_ZN8SPIClass5beginEv>
   d4aa0:	e00f      	b.n	d4ac2 <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d4aa2:	2101      	movs	r1, #1
   d4aa4:	b280      	uxth	r0, r0
   d4aa6:	f002 fe63 	bl	d7770 <pinMode>
            pinMode(_mosi, OUTPUT);
   d4aaa:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d4aae:	2101      	movs	r1, #1
   d4ab0:	b280      	uxth	r0, r0
   d4ab2:	f002 fe5d 	bl	d7770 <pinMode>
            pinMode(_miso, INPUT);
   d4ab6:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d4aba:	2100      	movs	r1, #0
   d4abc:	b280      	uxth	r0, r0
   d4abe:	f002 fe57 	bl	d7770 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4ac2:	21d0      	movs	r1, #208	; 0xd0
   d4ac4:	4620      	mov	r0, r4
   d4ac6:	f7ff fe6d 	bl	d47a4 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d4aca:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4acc:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d4ace:	d120      	bne.n	d4b12 <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d4ad0:	4620      	mov	r0, r4
   d4ad2:	22b6      	movs	r2, #182	; 0xb6
   d4ad4:	21e0      	movs	r1, #224	; 0xe0
   d4ad6:	f7ff ff33 	bl	d4940 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d4ada:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4ade:	f001 fef5 	bl	d68cc <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d4ae2:	4620      	mov	r0, r4
   d4ae4:	f7ff feb4 	bl	d4850 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4ae8:	4605      	mov	r5, r0
   d4aea:	b108      	cbz	r0, d4af0 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d4aec:	2064      	movs	r0, #100	; 0x64
   d4aee:	e7f6      	b.n	d4ade <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d4af0:	4620      	mov	r0, r4
   d4af2:	f7ff feb4 	bl	d485e <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d4af6:	2305      	movs	r3, #5
   d4af8:	9300      	str	r3, [sp, #0]
   d4afa:	461a      	mov	r2, r3
   d4afc:	2103      	movs	r1, #3
   d4afe:	4620      	mov	r0, r4
   d4b00:	9502      	str	r5, [sp, #8]
   d4b02:	9501      	str	r5, [sp, #4]
   d4b04:	f7ff ff6a 	bl	d49dc <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d4b08:	2064      	movs	r0, #100	; 0x64
   d4b0a:	f001 fedf 	bl	d68cc <delay>
   d4b0e:	2001      	movs	r0, #1
   d4b10:	e000      	b.n	d4b14 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d4b12:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d4b14:	b005      	add	sp, #20
   d4b16:	bd30      	pop	{r4, r5, pc}

000d4b18 <_ZN15Adafruit_BME2805beginEv>:
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d4b18:	2377      	movs	r3, #119	; 0x77
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d4b1a:	b510      	push	{r4, lr}
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d4b1c:	7103      	strb	r3, [r0, #4]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d4b1e:	4604      	mov	r4, r0
    bool status = false;
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
   d4b20:	f002 fea0 	bl	d7864 <_Z19__fetch_global_Wirev>
   d4b24:	6020      	str	r0, [r4, #0]
	status = init();
   d4b26:	4620      	mov	r0, r4
   d4b28:	f7ff ff9d 	bl	d4a66 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d4b2c:	b930      	cbnz	r0, d4b3c <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d4b2e:	2376      	movs	r3, #118	; 0x76
   d4b30:	7123      	strb	r3, [r4, #4]
 		status = init();
   d4b32:	4620      	mov	r0, r4
 		}
	return status;
}
   d4b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
	status = init();
 	if(!status){
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 		status = init();
   d4b38:	f7ff bf95 	b.w	d4a66 <_ZN15Adafruit_BME2804initEv>
 		}
	return status;
}
   d4b3c:	bd10      	pop	{r4, pc}

000d4b3e <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4b3e:	f001 b99b 	b.w	d5e78 <HAL_Pin_Map>

000d4b42 <_ZNK18DHTSensorTypeDHT118getTempCERK9DHTSample>:
DHTSensorTypeDHT11::DHTSensorTypeDHT11() : DHTSensorType("DHT11", 1000, 25) {

};

float DHTSensorTypeDHT11::getTempC(const DHTSample &sample) const {
	return (float) ((int8_t) sample[2]);
   d4b42:	f991 300e 	ldrsb.w	r3, [r1, #14]
   d4b46:	ee00 3a10 	vmov	s0, r3
}
   d4b4a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d4b4e:	4770      	bx	lr

000d4b50 <_ZNK18DHTSensorTypeDHT1111getHumidityERK9DHTSample>:

float DHTSensorTypeDHT11::getHumidity(const DHTSample &sample) const {
	return (float) ((int8_t) sample[0]);
   d4b50:	f991 300c 	ldrsb.w	r3, [r1, #12]
   d4b54:	ee00 3a10 	vmov	s0, r3
}
   d4b58:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d4b5c:	4770      	bx	lr
	...

000d4b60 <_ZNK18DHTSensorTypeDHT228getTempCERK9DHTSample>:

DHTSensorTypeDHT22::DHTSensorTypeDHT22() : DHTSensorType("DHT22", 2000, 25) {

};

float DHTSensorTypeDHT22::getTempC(const DHTSample &sample) const {
   d4b60:	b508      	push	{r3, lr}
	DHTSample &withSensorType(DHTSensorType *sensorType) { this->sensorType = sensorType; return *this; };

	/**
	 * @brief Get a byte from the bytes array
	 */
	uint8_t operator[](size_t index) const { return bytes[index]; };
   d4b62:	7b8a      	ldrb	r2, [r1, #14]
   d4b64:	89cb      	ldrh	r3, [r1, #14]
	return (sample[2] & 0x80 ? -combineBytes(sample[2] & 0x7F, sample[3]) : combineBytes(sample[2], sample[3])) * 0.1;
   d4b66:	0610      	lsls	r0, r2, #24
   d4b68:	ba5b      	rev16	r3, r3
   d4b6a:	b29b      	uxth	r3, r3
   d4b6c:	bf41      	itttt	mi
   d4b6e:	7bcb      	ldrbmi	r3, [r1, #15]
   d4b70:	f002 027f 	andmi.w	r2, r2, #127	; 0x7f
   d4b74:	ea43 2302 	orrmi.w	r3, r3, r2, lsl #8
   d4b78:	ee07 3a90 	vmovmi	s15, r3
DHTSensorTypeDHT11 DHT22Gen3::sensorTypeDHT11;
DHTSensorTypeDHT22 DHT22Gen3::sensorTypeDHT22;


static float combineBytes(uint8_t highByte, uint8_t lowByte) {
	return (float) ((((uint16_t)highByte) << 8) | lowByte);
   d4b7c:	bf55      	itete	pl
   d4b7e:	ee07 3a90 	vmovpl	s15, r3
DHTSensorTypeDHT22::DHTSensorTypeDHT22() : DHTSensorType("DHT22", 2000, 25) {

};

float DHTSensorTypeDHT22::getTempC(const DHTSample &sample) const {
	return (sample[2] & 0x80 ? -combineBytes(sample[2] & 0x7F, sample[3]) : combineBytes(sample[2], sample[3])) * 0.1;
   d4b82:	eef8 7ae7 	vcvtmi.f32.s32	s15, s15
DHTSensorTypeDHT11 DHT22Gen3::sensorTypeDHT11;
DHTSensorTypeDHT22 DHT22Gen3::sensorTypeDHT22;


static float combineBytes(uint8_t highByte, uint8_t lowByte) {
	return (float) ((((uint16_t)highByte) << 8) | lowByte);
   d4b86:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
DHTSensorTypeDHT22::DHTSensorTypeDHT22() : DHTSensorType("DHT22", 2000, 25) {

};

float DHTSensorTypeDHT22::getTempC(const DHTSample &sample) const {
	return (sample[2] & 0x80 ? -combineBytes(sample[2] & 0x7F, sample[3]) : combineBytes(sample[2], sample[3])) * 0.1;
   d4b8a:	eef1 7a67 	vnegmi.f32	s15, s15
   d4b8e:	ee17 0a90 	vmov	r0, s15
   d4b92:	f003 f95b 	bl	d7e4c <__aeabi_f2d>
   d4b96:	a306      	add	r3, pc, #24	; (adr r3, d4bb0 <_ZNK18DHTSensorTypeDHT228getTempCERK9DHTSample+0x50>)
   d4b98:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b9c:	f003 f9aa 	bl	d7ef4 <__aeabi_dmul>
   d4ba0:	f003 fc8a 	bl	d84b8 <__aeabi_d2f>

}
   d4ba4:	ee00 0a10 	vmov	s0, r0
   d4ba8:	bd08      	pop	{r3, pc}
   d4baa:	bf00      	nop
   d4bac:	f3af 8000 	nop.w
   d4bb0:	9999999a 	.word	0x9999999a
   d4bb4:	3fb99999 	.word	0x3fb99999

000d4bb8 <_ZNK18DHTSensorTypeDHT2211getHumidityERK9DHTSample>:

float DHTSensorTypeDHT22::getHumidity(const DHTSample &sample) const {
   d4bb8:	b508      	push	{r3, lr}
	return combineBytes(sample[0], sample[1]) * 0.1;
   d4bba:	8988      	ldrh	r0, [r1, #12]
   d4bbc:	ba40      	rev16	r0, r0
   d4bbe:	b280      	uxth	r0, r0
   d4bc0:	ee07 0a90 	vmov	s15, r0
   d4bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4bc8:	ee17 0a90 	vmov	r0, s15
   d4bcc:	f003 f93e 	bl	d7e4c <__aeabi_f2d>
   d4bd0:	a305      	add	r3, pc, #20	; (adr r3, d4be8 <_ZNK18DHTSensorTypeDHT2211getHumidityERK9DHTSample+0x30>)
   d4bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4bd6:	f003 f98d 	bl	d7ef4 <__aeabi_dmul>
   d4bda:	f003 fc6d 	bl	d84b8 <__aeabi_d2f>
}
   d4bde:	ee00 0a10 	vmov	s0, r0
   d4be2:	bd08      	pop	{r3, pc}
   d4be4:	f3af 8000 	nop.w
   d4be8:	9999999a 	.word	0x9999999a
   d4bec:	3fb99999 	.word	0x3fb99999

000d4bf0 <_ZN18DHTSensorTypeDHT22D1Ev>:


/**
 * @brief DHTSensorType object to decode DHT22 sensor data
 */
class DHTSensorTypeDHT22 : public DHTSensorType {
   d4bf0:	4770      	bx	lr

000d4bf2 <_ZN18DHTSensorTypeDHT11D1Ev>:
};

/**
 * @brief DHTSensorType object to decode DHT11 sensor data
 */
class DHTSensorTypeDHT11 : public DHTSensorType {
   d4bf2:	4770      	bx	lr

000d4bf4 <_ZN18DHTSensorTypeDHT22D0Ev>:


/**
 * @brief DHTSensorType object to decode DHT22 sensor data
 */
class DHTSensorTypeDHT22 : public DHTSensorType {
   d4bf4:	b510      	push	{r4, lr}
   d4bf6:	2110      	movs	r1, #16
   d4bf8:	4604      	mov	r4, r0
   d4bfa:	f002 fe67 	bl	d78cc <_ZdlPvj>
   d4bfe:	4620      	mov	r0, r4
   d4c00:	bd10      	pop	{r4, pc}

000d4c02 <_ZN18DHTSensorTypeDHT11D0Ev>:
};

/**
 * @brief DHTSensorType object to decode DHT11 sensor data
 */
class DHTSensorTypeDHT11 : public DHTSensorType {
   d4c02:	b510      	push	{r4, lr}
   d4c04:	2110      	movs	r1, #16
   d4c06:	4604      	mov	r4, r0
   d4c08:	f002 fe60 	bl	d78cc <_ZdlPvj>
   d4c0c:	4620      	mov	r0, r4
   d4c0e:	bd10      	pop	{r4, pc}

000d4c10 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4c10:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4c12:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4c14:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4c16:	b113      	cbz	r3, d4c1e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c18:	2203      	movs	r2, #3
   d4c1a:	4601      	mov	r1, r0
   d4c1c:	4798      	blx	r3
    }
   d4c1e:	4620      	mov	r0, r4
   d4c20:	bd10      	pop	{r4, pc}
	...

000d4c24 <_ZN18DHTSensorTypeDHT11C1Ev>:
	 * @param minSamplePeriodMs Minimum number of milliseconds between queries to the sensor
	 *
	 * @param oneBitThreshold Number of counts for the bit in the I2S buffer to be considered a 1 bit
	 */
	DHTSensorType(const char *name, unsigned long minSamplePeriodMs, unsigned long oneBitThreshold) :
			name(name), minSamplePeriodMs(minSamplePeriodMs), oneBitThreshold(oneBitThreshold) {};
   d4c24:	4a04      	ldr	r2, [pc, #16]	; (d4c38 <_ZN18DHTSensorTypeDHT11C1Ev+0x14>)
   d4c26:	6042      	str	r2, [r0, #4]
   d4c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4c2c:	6082      	str	r2, [r0, #8]
   d4c2e:	2219      	movs	r2, #25
   d4c30:	60c2      	str	r2, [r0, #12]
}

//
// Sensor type decoders
//
DHTSensorTypeDHT11::DHTSensorTypeDHT11() : DHTSensorType("DHT11", 1000, 25) {
   d4c32:	4a02      	ldr	r2, [pc, #8]	; (d4c3c <_ZN18DHTSensorTypeDHT11C1Ev+0x18>)
   d4c34:	6002      	str	r2, [r0, #0]

};
   d4c36:	4770      	bx	lr
   d4c38:	000da310 	.word	0x000da310
   d4c3c:	000da380 	.word	0x000da380

000d4c40 <_ZN18DHTSensorTypeDHT22C1Ev>:
   d4c40:	4a04      	ldr	r2, [pc, #16]	; (d4c54 <_ZN18DHTSensorTypeDHT22C1Ev+0x14>)
   d4c42:	6042      	str	r2, [r0, #4]
   d4c44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d4c48:	6082      	str	r2, [r0, #8]
   d4c4a:	2219      	movs	r2, #25
   d4c4c:	60c2      	str	r2, [r0, #12]
float DHTSensorTypeDHT11::getHumidity(const DHTSample &sample) const {
	return (float) ((int8_t) sample[0]);
}


DHTSensorTypeDHT22::DHTSensorTypeDHT22() : DHTSensorType("DHT22", 2000, 25) {
   d4c4e:	4a02      	ldr	r2, [pc, #8]	; (d4c58 <_ZN18DHTSensorTypeDHT22C1Ev+0x18>)
   d4c50:	6002      	str	r2, [r0, #0]

};
   d4c52:	4770      	bx	lr
   d4c54:	000da316 	.word	0x000da316
   d4c58:	000da300 	.word	0x000da300

000d4c5c <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E>:
	result.sampleResult = sampleResult;
	state = State::IDLE_STATE;
	if (completion) {
		completion(result);
	}
}
   d4c5c:	b510      	push	{r4, lr}
   d4c5e:	f001 f90b 	bl	d5e78 <HAL_Pin_Map>
static nrfx_i2s_buffers_t i2sBuffer = {
		.p_rx_buffer = (uint32_t *)sampleBuffer,
		.p_tx_buffer = 0
};

DHTSensorTypeDHT11 DHT22Gen3::sensorTypeDHT11;
   d4c62:	4b0a      	ldr	r3, [pc, #40]	; (d4c8c <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x30>)
   d4c64:	4c0a      	ldr	r4, [pc, #40]	; (d4c90 <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x34>)
   d4c66:	4618      	mov	r0, r3
   d4c68:	f7ff ffdc 	bl	d4c24 <_ZN18DHTSensorTypeDHT11C1Ev>
   d4c6c:	4622      	mov	r2, r4
   d4c6e:	4909      	ldr	r1, [pc, #36]	; (d4c94 <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x38>)
   d4c70:	4618      	mov	r0, r3
   d4c72:	f002 fe1d 	bl	d78b0 <__aeabi_atexit>
DHTSensorTypeDHT22 DHT22Gen3::sensorTypeDHT22;
   d4c76:	4b08      	ldr	r3, [pc, #32]	; (d4c98 <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x3c>)
   d4c78:	4618      	mov	r0, r3
   d4c7a:	f7ff ffe1 	bl	d4c40 <_ZN18DHTSensorTypeDHT22C1Ev>
   d4c7e:	4622      	mov	r2, r4
   d4c80:	4906      	ldr	r1, [pc, #24]	; (d4c9c <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x40>)
   d4c82:	4618      	mov	r0, r3
	result.sampleResult = sampleResult;
	state = State::IDLE_STATE;
	if (completion) {
		completion(result);
	}
}
   d4c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		.p_rx_buffer = (uint32_t *)sampleBuffer,
		.p_tx_buffer = 0
};

DHTSensorTypeDHT11 DHT22Gen3::sensorTypeDHT11;
DHTSensorTypeDHT22 DHT22Gen3::sensorTypeDHT22;
   d4c88:	f002 be12 	b.w	d78b0 <__aeabi_atexit>
   d4c8c:	2003e3cc 	.word	0x2003e3cc
   d4c90:	2003e1c4 	.word	0x2003e1c4
   d4c94:	000d4bf3 	.word	0x000d4bf3
   d4c98:	2003e3bc 	.word	0x2003e3bc
   d4c9c:	000d4bf1 	.word	0x000d4bf1

000d4ca0 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4ca2:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4ca4:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4ca8:	2c02      	cmp	r4, #2
   d4caa:	d008      	beq.n	d4cbe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d4cac:	2c03      	cmp	r4, #3
   d4cae:	d00f      	beq.n	d4cd0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4cb0:	2c01      	cmp	r4, #1
   d4cb2:	d170      	bne.n	d4d96 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4cb4:	8904      	ldrh	r4, [r0, #8]
   d4cb6:	3c01      	subs	r4, #1
   d4cb8:	1aa2      	subs	r2, r4, r2
   d4cba:	b212      	sxth	r2, r2
      break;
   d4cbc:	e00c      	b.n	d4cd8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4cbe:	8944      	ldrh	r4, [r0, #10]
   d4cc0:	3c01      	subs	r4, #1
   d4cc2:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4cc4:	8904      	ldrh	r4, [r0, #8]
   d4cc6:	1ae4      	subs	r4, r4, r3
   d4cc8:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4cca:	b212      	sxth	r2, r2
      x -= (w-1);
   d4ccc:	b209      	sxth	r1, r1
      break;
   d4cce:	e062      	b.n	d4d96 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d4cd0:	8944      	ldrh	r4, [r0, #10]
   d4cd2:	1ae4      	subs	r4, r4, r3
   d4cd4:	1a61      	subs	r1, r4, r1
   d4cd6:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4cd8:	2a00      	cmp	r2, #0
   d4cda:	db5b      	blt.n	d4d94 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d4cdc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4ce0:	4294      	cmp	r4, r2
   d4ce2:	f340 8090 	ble.w	d4e06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4ce6:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4ce8:	bfbe      	ittt	lt
   d4cea:	185b      	addlt	r3, r3, r1
   d4cec:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4cee:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4cf0:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4cf4:	18cc      	adds	r4, r1, r3
   d4cf6:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4cf8:	bfc4      	itt	gt
   d4cfa:	1a43      	subgt	r3, r0, r1
   d4cfc:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4cfe:	2b00      	cmp	r3, #0
   d4d00:	f340 8081 	ble.w	d4e06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4d04:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4d06:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4d08:	4f3f      	ldr	r7, [pc, #252]	; (d4e08 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4d0a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4d0e:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4d12:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4d14:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4d18:	d017      	beq.n	d4d4a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4d1a:	f1c1 0108 	rsb	r1, r1, #8
   d4d1e:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4d20:	493a      	ldr	r1, [pc, #232]	; (d4e0c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4d22:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4d24:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4d26:	bf3f      	itttt	cc
   d4d28:	ebc3 0e00 	rsbcc	lr, r3, r0
   d4d2c:	21ff      	movcc	r1, #255	; 0xff
   d4d2e:	fa41 f10e 	asrcc.w	r1, r1, lr
   d4d32:	400e      	andcc	r6, r1
   d4d34:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d4d36:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4d38:	bf0c      	ite	eq
   d4d3a:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d4d3c:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4d3e:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4d40:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4d42:	d360      	bcc.n	d4e06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d4d44:	1a18      	subs	r0, r3, r0
   d4d46:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d4d48:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4d4a:	2b07      	cmp	r3, #7
   d4d4c:	d917      	bls.n	d4d7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4d4e:	2d01      	cmp	r5, #1
   d4d50:	bf0c      	ite	eq
   d4d52:	20ff      	moveq	r0, #255	; 0xff
   d4d54:	2000      	movne	r0, #0
   d4d56:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d4d5a:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4d5c:	3a08      	subs	r2, #8
   d4d5e:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4d60:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4d62:	f801 0c80 	strb.w	r0, [r1, #-128]
   d4d66:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4d6a:	d8f7      	bhi.n	d4d5c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d4d6c:	f1a3 0208 	sub.w	r2, r3, #8
   d4d70:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4d74:	3201      	adds	r2, #1
   d4d76:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d4d7a:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4d7e:	2b00      	cmp	r3, #0
   d4d80:	d041      	beq.n	d4e06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4d82:	4a23      	ldr	r2, [pc, #140]	; (d4e10 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d4d84:	5cd2      	ldrb	r2, [r2, r3]
   d4d86:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d4d88:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4d8a:	bf0c      	ite	eq
   d4d8c:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d4d8e:	4393      	bicne	r3, r2
   d4d90:	7023      	strb	r3, [r4, #0]
   d4d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4d96:	2a00      	cmp	r2, #0
   d4d98:	db35      	blt.n	d4e06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4d9a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4d9e:	4294      	cmp	r4, r2
   d4da0:	dd31      	ble.n	d4e06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4da2:	2900      	cmp	r1, #0
    w += x;
   d4da4:	bfbc      	itt	lt
   d4da6:	18c9      	addlt	r1, r1, r3
   d4da8:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4daa:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4dae:	bfb8      	it	lt
   d4db0:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4db2:	18ce      	adds	r6, r1, r3
   d4db4:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4db6:	bfc4      	itt	gt
   d4db8:	1a63      	subgt	r3, r4, r1
   d4dba:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4dbc:	2b00      	cmp	r3, #0
   d4dbe:	dd22      	ble.n	d4e06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4dc0:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d4dc2:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d4dc6:	4810      	ldr	r0, [pc, #64]	; (d4e08 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d4dc8:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4dcc:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d4dce:	2001      	movs	r0, #1
   d4dd0:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d4dd4:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4dd6:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d4dd8:	d109      	bne.n	d4dee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d4dda:	3b01      	subs	r3, #1
   d4ddc:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d4dde:	1c5c      	adds	r4, r3, #1
   d4de0:	d011      	beq.n	d4e06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4de2:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4de6:	4310      	orrs	r0, r2
   d4de8:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4dec:	e7f5      	b.n	d4dda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d4dee:	43d2      	mvns	r2, r2
   d4df0:	b2d2      	uxtb	r2, r2
   d4df2:	3b01      	subs	r3, #1
   d4df4:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d4df6:	1c58      	adds	r0, r3, #1
   d4df8:	d005      	beq.n	d4e06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4dfa:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4dfe:	4010      	ands	r0, r2
   d4e00:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4e04:	e7f5      	b.n	d4df2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d4e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e08:	2003dd20 	.word	0x2003dd20
   d4e0c:	2003dd18 	.word	0x2003dd18
   d4e10:	2003dd10 	.word	0x2003dd10

000d4e14 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4e14:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d4e16:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4e18:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d4e1c:	2c02      	cmp	r4, #2
   d4e1e:	d008      	beq.n	d4e32 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d4e20:	2c03      	cmp	r4, #3
   d4e22:	d00f      	beq.n	d4e44 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d4e24:	2c01      	cmp	r4, #1
   d4e26:	d112      	bne.n	d4e4e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d4e28:	8904      	ldrh	r4, [r0, #8]
   d4e2a:	1ae4      	subs	r4, r4, r3
   d4e2c:	1aa2      	subs	r2, r4, r2
   d4e2e:	b212      	sxth	r2, r2
      break;
   d4e30:	e06d      	b.n	d4f0e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4e32:	8904      	ldrh	r4, [r0, #8]
   d4e34:	3c01      	subs	r4, #1
   d4e36:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4e38:	8944      	ldrh	r4, [r0, #10]
   d4e3a:	1ae4      	subs	r4, r4, r3
   d4e3c:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4e3e:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4e40:	b212      	sxth	r2, r2
      break;
   d4e42:	e004      	b.n	d4e4e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d4e44:	8944      	ldrh	r4, [r0, #10]
   d4e46:	3c01      	subs	r4, #1
   d4e48:	1a61      	subs	r1, r4, r1
   d4e4a:	b209      	sxth	r1, r1
      break;
   d4e4c:	e05f      	b.n	d4f0e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4e4e:	2900      	cmp	r1, #0
   d4e50:	db5c      	blt.n	d4f0c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d4e52:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4e56:	428c      	cmp	r4, r1
   d4e58:	f340 8091 	ble.w	d4f7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4e5c:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4e5e:	bfbc      	itt	lt
   d4e60:	18d2      	addlt	r2, r2, r3
   d4e62:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4e64:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d4e68:	bfb8      	it	lt
   d4e6a:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4e6c:	18d4      	adds	r4, r2, r3
   d4e6e:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4e70:	bfc4      	itt	gt
   d4e72:	1a83      	subgt	r3, r0, r2
   d4e74:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4e76:	2b00      	cmp	r3, #0
   d4e78:	f340 8081 	ble.w	d4f7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4e7c:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4e7e:	4e40      	ldr	r6, [pc, #256]	; (d4f80 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4e80:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4e82:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d4e84:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4e88:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4e8c:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4e90:	d017      	beq.n	d4ec2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4e92:	f1c4 0408 	rsb	r4, r4, #8
   d4e96:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4e98:	4c3a      	ldr	r4, [pc, #232]	; (d4f84 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4e9a:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4e9c:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4e9e:	bf3f      	itttt	cc
   d4ea0:	ebc2 0e00 	rsbcc	lr, r2, r0
   d4ea4:	24ff      	movcc	r4, #255	; 0xff
   d4ea6:	fa44 f40e 	asrcc.w	r4, r4, lr
   d4eaa:	4027      	andcc	r7, r4
   d4eac:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d4eae:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4eb0:	bf0c      	ite	eq
   d4eb2:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d4eb4:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4eb6:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4eb8:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4eba:	d360      	bcc.n	d4f7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d4ebc:	1a10      	subs	r0, r2, r0
   d4ebe:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d4ec0:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4ec2:	2a07      	cmp	r2, #7
   d4ec4:	d917      	bls.n	d4ef6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4ec6:	2d01      	cmp	r5, #1
   d4ec8:	bf0c      	ite	eq
   d4eca:	24ff      	moveq	r4, #255	; 0xff
   d4ecc:	2400      	movne	r4, #0
   d4ece:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d4ed2:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4ed4:	3908      	subs	r1, #8
   d4ed6:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d4ed8:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4eda:	f800 4c80 	strb.w	r4, [r0, #-128]
   d4ede:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4ee2:	d8f7      	bhi.n	d4ed4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d4ee4:	f1a2 0108 	sub.w	r1, r2, #8
   d4ee8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d4eec:	3101      	adds	r1, #1
   d4eee:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d4ef2:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4ef6:	2a00      	cmp	r2, #0
   d4ef8:	d041      	beq.n	d4f7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4efa:	4923      	ldr	r1, [pc, #140]	; (d4f88 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d4efc:	5c89      	ldrb	r1, [r1, r2]
   d4efe:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d4f00:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4f02:	bf0c      	ite	eq
   d4f04:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d4f06:	438a      	bicne	r2, r1
   d4f08:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d4f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4f0e:	2900      	cmp	r1, #0
   d4f10:	db35      	blt.n	d4f7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4f12:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4f16:	428c      	cmp	r4, r1
   d4f18:	dd31      	ble.n	d4f7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4f1a:	2a00      	cmp	r2, #0
    w += x;
   d4f1c:	bfbc      	itt	lt
   d4f1e:	18d2      	addlt	r2, r2, r3
   d4f20:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4f22:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4f26:	bfb8      	it	lt
   d4f28:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4f2a:	18d6      	adds	r6, r2, r3
   d4f2c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4f2e:	bfc4      	itt	gt
   d4f30:	1aa3      	subgt	r3, r4, r2
   d4f32:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4f34:	2b00      	cmp	r3, #0
   d4f36:	dd22      	ble.n	d4f7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4f38:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4f3a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d4f3e:	4810      	ldr	r0, [pc, #64]	; (d4f80 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d4f40:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4f44:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d4f46:	2201      	movs	r2, #1
   d4f48:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d4f4c:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4f4e:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d4f50:	d109      	bne.n	d4f66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d4f52:	1e5a      	subs	r2, r3, #1
   d4f54:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d4f56:	1c5c      	adds	r4, r3, #1
   d4f58:	d011      	beq.n	d4f7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4f5e:	430a      	orrs	r2, r1
   d4f60:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4f64:	e7f5      	b.n	d4f52 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d4f66:	43c9      	mvns	r1, r1
   d4f68:	b2c9      	uxtb	r1, r1
   d4f6a:	1e5a      	subs	r2, r3, #1
   d4f6c:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d4f6e:	1c5a      	adds	r2, r3, #1
   d4f70:	d005      	beq.n	d4f7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4f72:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4f76:	400a      	ands	r2, r1
   d4f78:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4f7c:	e7f5      	b.n	d4f6a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d4f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4f80:	2003dd20 	.word	0x2003dd20
   d4f84:	2003dd18 	.word	0x2003dd18
   d4f88:	2003dd10 	.word	0x2003dd10

000d4f8c <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4f8e:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4f90:	4606      	mov	r6, r0
   d4f92:	4614      	mov	r4, r2
   d4f94:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4f96:	db3f      	blt.n	d5018 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4f98:	f000 fbb7 	bl	d570a <_ZN12Adafruit_GFX5widthEv>
   d4f9c:	4285      	cmp	r5, r0
   d4f9e:	da3b      	bge.n	d5018 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4fa0:	2c00      	cmp	r4, #0
   d4fa2:	db39      	blt.n	d5018 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4fa4:	4630      	mov	r0, r6
   d4fa6:	f000 fbb3 	bl	d5710 <_ZN12Adafruit_GFX6heightEv>
   d4faa:	4284      	cmp	r4, r0
   d4fac:	da34      	bge.n	d5018 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4fae:	4630      	mov	r0, r6
   d4fb0:	f000 fba9 	bl	d5706 <_ZN12Adafruit_GFX11getRotationEv>
   d4fb4:	2802      	cmp	r0, #2
   d4fb6:	d127      	bne.n	d5008 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4fb8:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d4fba:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4fbc:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d4fbe:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4fc0:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d4fc2:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4fc4:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d4fc6:	b204      	sxth	r4, r0
   d4fc8:	e006      	b.n	d4fd8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4fca:	2801      	cmp	r0, #1
   d4fcc:	d104      	bne.n	d4fd8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d4fce:	8933      	ldrh	r3, [r6, #8]
   d4fd0:	3b01      	subs	r3, #1
   d4fd2:	1b1b      	subs	r3, r3, r4
   d4fd4:	462c      	mov	r4, r5
   d4fd6:	b21d      	sxth	r5, r3
   d4fd8:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4fda:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4fdc:	fb94 f0f0 	sdiv	r0, r4, r0
   d4fe0:	b200      	sxth	r0, r0
   d4fe2:	4b0e      	ldr	r3, [pc, #56]	; (d501c <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d4fe4:	f004 0207 	and.w	r2, r4, #7
   d4fe8:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4fec:	d104      	bne.n	d4ff8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4fee:	4097      	lsls	r7, r2
   d4ff0:	5c5a      	ldrb	r2, [r3, r1]
   d4ff2:	4317      	orrs	r7, r2
   d4ff4:	545f      	strb	r7, [r3, r1]
   d4ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d4ff8:	5c58      	ldrb	r0, [r3, r1]
   d4ffa:	2701      	movs	r7, #1
   d4ffc:	fa07 f202 	lsl.w	r2, r7, r2
   d5000:	ea20 0202 	bic.w	r2, r0, r2
   d5004:	545a      	strb	r2, [r3, r1]
   d5006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d5008:	2803      	cmp	r0, #3
   d500a:	d1de      	bne.n	d4fca <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d500c:	8973      	ldrh	r3, [r6, #10]
   d500e:	3b01      	subs	r3, #1
   d5010:	1b5b      	subs	r3, r3, r5
   d5012:	4625      	mov	r5, r4
   d5014:	b21c      	sxth	r4, r3
   d5016:	e7df      	b.n	d4fd8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d5018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d501a:	bf00      	nop
   d501c:	2003dd20 	.word	0x2003dd20

000d5020 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d5020:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d5022:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d5024:	4604      	mov	r4, r0
   d5026:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d5028:	2180      	movs	r1, #128	; 0x80
   d502a:	f000 fa87 	bl	d553c <_ZN12Adafruit_GFXC1Ess>
   d502e:	4b06      	ldr	r3, [pc, #24]	; (d5048 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d5030:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d5032:	23ff      	movs	r3, #255	; 0xff
   d5034:	7763      	strb	r3, [r4, #29]
   d5036:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d503a:	77e3      	strb	r3, [r4, #31]
   d503c:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d503e:	f884 5020 	strb.w	r5, [r4, #32]
}
   d5042:	4620      	mov	r0, r4
   d5044:	bd38      	pop	{r3, r4, r5, pc}
   d5046:	bf00      	nop
   d5048:	000da398 	.word	0x000da398

000d504c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d504c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d5050:	2100      	movs	r1, #0
   d5052:	4801      	ldr	r0, [pc, #4]	; (d5058 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d5054:	f003 bad0 	b.w	d85f8 <memset>
   d5058:	2003dd20 	.word	0x2003dd20

000d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d505c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d505e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d5062:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d5064:	4604      	mov	r4, r0
   d5066:	460d      	mov	r5, r1
  if (sid != -1)
   d5068:	d028      	beq.n	d50bc <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d506a:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d506e:	2101      	movs	r1, #1
   d5070:	b280      	uxth	r0, r0
   d5072:	f002 fb8e 	bl	d7792 <digitalWrite>
    digitalWrite(dc, LOW);
   d5076:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d507a:	2100      	movs	r1, #0
   d507c:	b280      	uxth	r0, r0
   d507e:	f002 fb88 	bl	d7792 <digitalWrite>
    digitalWrite(cs, LOW);
   d5082:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5086:	2100      	movs	r1, #0
   d5088:	b280      	uxth	r0, r0
   d508a:	f002 fb82 	bl	d7792 <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d508e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5092:	b12b      	cbz	r3, d50a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5094:	f7ff fa22 	bl	d44dc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5098:	4629      	mov	r1, r5
   d509a:	f001 fad9 	bl	d6650 <_ZN8SPIClass8transferEh>
   d509e:	e005      	b.n	d50ac <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d50a0:	462b      	mov	r3, r5
   d50a2:	2201      	movs	r2, #1
   d50a4:	7fa1      	ldrb	r1, [r4, #30]
   d50a6:	7f60      	ldrb	r0, [r4, #29]
   d50a8:	f002 fb9f 	bl	d77ea <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d50ac:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d50b0:	2101      	movs	r1, #1
   d50b2:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d50b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d50b8:	f002 bb6b 	b.w	d7792 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d50bc:	f002 fbd2 	bl	d7864 <_Z19__fetch_global_Wirev>
   d50c0:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d50c4:	f001 fea9 	bl	d6e1a <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d50c8:	f002 fbcc 	bl	d7864 <_Z19__fetch_global_Wirev>
   d50cc:	6803      	ldr	r3, [r0, #0]
   d50ce:	2100      	movs	r1, #0
   d50d0:	689b      	ldr	r3, [r3, #8]
   d50d2:	4798      	blx	r3
    Wire.write(c);
   d50d4:	f002 fbc6 	bl	d7864 <_Z19__fetch_global_Wirev>
   d50d8:	6803      	ldr	r3, [r0, #0]
   d50da:	4629      	mov	r1, r5
   d50dc:	689b      	ldr	r3, [r3, #8]
   d50de:	4798      	blx	r3
    Wire.endTransmission();
   d50e0:	f002 fbc0 	bl	d7864 <_Z19__fetch_global_Wirev>
  }
}
   d50e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d50e8:	f001 be9e 	b.w	d6e28 <_ZN7TwoWire15endTransmissionEv>

000d50ec <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d50ec:	b538      	push	{r3, r4, r5, lr}
   d50ee:	4604      	mov	r4, r0
   d50f0:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d50f2:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d50f4:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d50f8:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d50fa:	3301      	adds	r3, #1
   d50fc:	d037      	beq.n	d516e <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d50fe:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d5102:	2101      	movs	r1, #1
   d5104:	b280      	uxth	r0, r0
   d5106:	f002 fb33 	bl	d7770 <pinMode>
    pinMode(cs, OUTPUT);
   d510a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d510e:	2101      	movs	r1, #1
   d5110:	b280      	uxth	r0, r0
   d5112:	f002 fb2d 	bl	d7770 <pinMode>
    if (!hwSPI){
   d5116:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d511a:	b95b      	cbnz	r3, d5134 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d511c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5120:	2101      	movs	r1, #1
   d5122:	b280      	uxth	r0, r0
   d5124:	f002 fb24 	bl	d7770 <pinMode>
    	pinMode(sclk, OUTPUT);
   d5128:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d512c:	2101      	movs	r1, #1
   d512e:	b280      	uxth	r0, r0
   d5130:	f002 fb1e 	bl	d7770 <pinMode>
    	}
    if (hwSPI){
   d5134:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5138:	b1eb      	cbz	r3, d5176 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d513a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d513e:	2101      	movs	r1, #1
   d5140:	b280      	uxth	r0, r0
   d5142:	f002 fb26 	bl	d7792 <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d5146:	f7ff f9c9 	bl	d44dc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d514a:	2101      	movs	r1, #1
   d514c:	f001 f97f 	bl	d644e <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d5150:	f7ff f9c4 	bl	d44dc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5154:	2110      	movs	r1, #16
   d5156:	f001 fa57 	bl	d6608 <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d515a:	f7ff f9bf 	bl	d44dc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d515e:	2100      	movs	r1, #0
   d5160:	f001 f986 	bl	d6470 <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d5164:	f7ff f9ba 	bl	d44dc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5168:	f001 f960 	bl	d642c <_ZN8SPIClass5beginEv>
   d516c:	e003      	b.n	d5176 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d516e:	f002 fb79 	bl	d7864 <_Z19__fetch_global_Wirev>
   d5172:	f001 fe17 	bl	d6da4 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d5176:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d517a:	2101      	movs	r1, #1
   d517c:	b280      	uxth	r0, r0
   d517e:	f002 faf7 	bl	d7770 <pinMode>
  digitalWrite(rst, HIGH);
   d5182:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5186:	2101      	movs	r1, #1
   d5188:	b280      	uxth	r0, r0
   d518a:	f002 fb02 	bl	d7792 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d518e:	2001      	movs	r0, #1
   d5190:	f001 fb9c 	bl	d68cc <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d5194:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5198:	2100      	movs	r1, #0
   d519a:	b280      	uxth	r0, r0
   d519c:	f002 faf9 	bl	d7792 <digitalWrite>
  // wait 10ms
  delay(10);
   d51a0:	200a      	movs	r0, #10
   d51a2:	f001 fb93 	bl	d68cc <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d51a6:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d51aa:	2101      	movs	r1, #1
   d51ac:	b280      	uxth	r0, r0
   d51ae:	f002 faf0 	bl	d7792 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d51b2:	4620      	mov	r0, r4
   d51b4:	21ae      	movs	r1, #174	; 0xae
   d51b6:	f7ff ff51 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d51ba:	4620      	mov	r0, r4
   d51bc:	21d5      	movs	r1, #213	; 0xd5
   d51be:	f7ff ff4d 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d51c2:	4620      	mov	r0, r4
   d51c4:	2180      	movs	r1, #128	; 0x80
   d51c6:	f7ff ff49 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d51ca:	4620      	mov	r0, r4
   d51cc:	21a8      	movs	r1, #168	; 0xa8
   d51ce:	f7ff ff45 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d51d2:	4620      	mov	r0, r4
   d51d4:	213f      	movs	r1, #63	; 0x3f
   d51d6:	f7ff ff41 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d51da:	4620      	mov	r0, r4
   d51dc:	21d3      	movs	r1, #211	; 0xd3
   d51de:	f7ff ff3d 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d51e2:	4620      	mov	r0, r4
   d51e4:	2100      	movs	r1, #0
   d51e6:	f7ff ff39 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d51ea:	4620      	mov	r0, r4
   d51ec:	2140      	movs	r1, #64	; 0x40
   d51ee:	f7ff ff35 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d51f2:	218d      	movs	r1, #141	; 0x8d
   d51f4:	4620      	mov	r0, r4
   d51f6:	f7ff ff31 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d51fa:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d51fc:	bf0c      	ite	eq
   d51fe:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d5200:	2114      	movne	r1, #20
   d5202:	4620      	mov	r0, r4
   d5204:	f7ff ff2a 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d5208:	4620      	mov	r0, r4
   d520a:	2120      	movs	r1, #32
   d520c:	f7ff ff26 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d5210:	4620      	mov	r0, r4
   d5212:	2100      	movs	r1, #0
   d5214:	f7ff ff22 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d5218:	4620      	mov	r0, r4
   d521a:	21a1      	movs	r1, #161	; 0xa1
   d521c:	f7ff ff1e 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d5220:	4620      	mov	r0, r4
   d5222:	21c8      	movs	r1, #200	; 0xc8
   d5224:	f7ff ff1a 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d5228:	4620      	mov	r0, r4
   d522a:	21da      	movs	r1, #218	; 0xda
   d522c:	f7ff ff16 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d5230:	4620      	mov	r0, r4
   d5232:	2112      	movs	r1, #18
   d5234:	f7ff ff12 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d5238:	2181      	movs	r1, #129	; 0x81
   d523a:	4620      	mov	r0, r4
   d523c:	f7ff ff0e 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5240:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d5242:	bf0c      	ite	eq
   d5244:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d5246:	21cf      	movne	r1, #207	; 0xcf
   d5248:	4620      	mov	r0, r4
   d524a:	f7ff ff07 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d524e:	21d9      	movs	r1, #217	; 0xd9
   d5250:	4620      	mov	r0, r4
   d5252:	f7ff ff03 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5256:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d5258:	bf0c      	ite	eq
   d525a:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d525c:	21f1      	movne	r1, #241	; 0xf1
   d525e:	4620      	mov	r0, r4
   d5260:	f7ff fefc 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d5264:	4620      	mov	r0, r4
   d5266:	21db      	movs	r1, #219	; 0xdb
   d5268:	f7ff fef8 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d526c:	4620      	mov	r0, r4
   d526e:	2140      	movs	r1, #64	; 0x40
   d5270:	f7ff fef4 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d5274:	4620      	mov	r0, r4
   d5276:	21a4      	movs	r1, #164	; 0xa4
   d5278:	f7ff fef0 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d527c:	4620      	mov	r0, r4
   d527e:	21a6      	movs	r1, #166	; 0xa6
   d5280:	f7ff feec 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5284:	4620      	mov	r0, r4
   d5286:	21af      	movs	r1, #175	; 0xaf
}
   d5288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d528c:	f7ff bee6 	b.w	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d5290 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d5290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d5294:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d5296:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d5298:	f7ff fee0 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d529c:	2100      	movs	r1, #0
   d529e:	4620      	mov	r0, r4
   d52a0:	f7ff fedc 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d52a4:	217f      	movs	r1, #127	; 0x7f
   d52a6:	4620      	mov	r0, r4
   d52a8:	f7ff fed8 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d52ac:	2122      	movs	r1, #34	; 0x22
   d52ae:	4620      	mov	r0, r4
   d52b0:	f7ff fed4 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d52b4:	2100      	movs	r1, #0
   d52b6:	4620      	mov	r0, r4
   d52b8:	f7ff fed0 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d52bc:	2107      	movs	r1, #7
   d52be:	4620      	mov	r0, r4
   d52c0:	f7ff fecc 	bl	d505c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d52c4:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d52c8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d5388 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d52cc:	3301      	adds	r3, #1
   d52ce:	d035      	beq.n	d533c <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d52d0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d52d4:	2101      	movs	r1, #1
   d52d6:	b280      	uxth	r0, r0
   d52d8:	f002 fa5b 	bl	d7792 <digitalWrite>
    digitalWrite(dc, HIGH);
   d52dc:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d52e0:	2101      	movs	r1, #1
   d52e2:	b280      	uxth	r0, r0
   d52e4:	f002 fa55 	bl	d7792 <digitalWrite>
    digitalWrite(cs, LOW);
   d52e8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d52ec:	2100      	movs	r1, #0
   d52ee:	b280      	uxth	r0, r0
   d52f0:	f002 fa4f 	bl	d7792 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d52f4:	2001      	movs	r0, #1
   d52f6:	f000 fe4f 	bl	d5f98 <HAL_Delay_Microseconds>
   d52fa:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d52fc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d5300:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d5304:	b12b      	cbz	r3, d5312 <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5306:	f7ff f8e9 	bl	d44dc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d530a:	4631      	mov	r1, r6
   d530c:	f001 f9a0 	bl	d6650 <_ZN8SPIClass8transferEh>
   d5310:	e005      	b.n	d531e <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d5312:	4633      	mov	r3, r6
   d5314:	2201      	movs	r2, #1
   d5316:	7fa1      	ldrb	r1, [r4, #30]
   d5318:	7f60      	ldrb	r0, [r4, #29]
   d531a:	f002 fa66 	bl	d77ea <shiftOut>
   d531e:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d5320:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d5324:	d1ea      	bne.n	d52fc <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d5326:	2001      	movs	r0, #1
   d5328:	f000 fe36 	bl	d5f98 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d532c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5330:	2101      	movs	r1, #1
   d5332:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d5334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d5338:	f002 ba2b 	b.w	d7792 <digitalWrite>
   d533c:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d533e:	f002 fa91 	bl	d7864 <_Z19__fetch_global_Wirev>
   d5342:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d5346:	f001 fd68 	bl	d6e1a <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d534a:	f002 fa8b 	bl	d7864 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d534e:	6803      	ldr	r3, [r0, #0]
   d5350:	2140      	movs	r1, #64	; 0x40
   d5352:	689b      	ldr	r3, [r3, #8]
   d5354:	4798      	blx	r3
   d5356:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d5358:	f002 fa84 	bl	d7864 <_Z19__fetch_global_Wirev>
   d535c:	19af      	adds	r7, r5, r6
   d535e:	6803      	ldr	r3, [r0, #0]
   d5360:	b2bf      	uxth	r7, r7
   d5362:	689b      	ldr	r3, [r3, #8]
   d5364:	f818 1007 	ldrb.w	r1, [r8, r7]
   d5368:	3601      	adds	r6, #1
   d536a:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d536c:	2e10      	cmp	r6, #16
   d536e:	d1f3      	bne.n	d5358 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d5370:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d5372:	f002 fa77 	bl	d7864 <_Z19__fetch_global_Wirev>
   d5376:	b2ad      	uxth	r5, r5
   d5378:	f001 fd56 	bl	d6e28 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d537c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d5380:	d1dd      	bne.n	d533e <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d5382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5386:	bf00      	nop
   d5388:	2003dd20 	.word	0x2003dd20

000d538c <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d538c:	f000 bd74 	b.w	d5e78 <HAL_Pin_Map>

000d5390 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5394:	b085      	sub	sp, #20
   d5396:	461e      	mov	r6, r3
   d5398:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d539c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d53a0:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d53a2:	1a9a      	subs	r2, r3, r2
   d53a4:	2a00      	cmp	r2, #0
   d53a6:	bfb8      	it	lt
   d53a8:	4252      	neglt	r2, r2
   d53aa:	9200      	str	r2, [sp, #0]
   d53ac:	1a72      	subs	r2, r6, r1
   d53ae:	2a00      	cmp	r2, #0
   d53b0:	bfb8      	it	lt
   d53b2:	4252      	neglt	r2, r2
   d53b4:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d53b6:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d53b8:	9a00      	ldr	r2, [sp, #0]
   d53ba:	9901      	ldr	r1, [sp, #4]
   d53bc:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d53be:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d53c0:	dd05      	ble.n	d53ce <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d53c2:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d53c4:	461e      	mov	r6, r3
   d53c6:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d53c8:	4622      	mov	r2, r4
    swap(x0, y0);
   d53ca:	462c      	mov	r4, r5
   d53cc:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d53ce:	42b4      	cmp	r4, r6
   d53d0:	dd05      	ble.n	d53de <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d53d2:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d53d4:	461d      	mov	r5, r3
   d53d6:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d53d8:	4622      	mov	r2, r4
   d53da:	4634      	mov	r4, r6
   d53dc:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d53de:	1b5a      	subs	r2, r3, r5
   d53e0:	2a00      	cmp	r2, #0
   d53e2:	bfb8      	it	lt
   d53e4:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d53e6:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d53ea:	429d      	cmp	r5, r3
   d53ec:	bfb4      	ite	lt
   d53ee:	2301      	movlt	r3, #1
   d53f0:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d53f4:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d53f8:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d53fa:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d53fc:	fa0f f788 	sxth.w	r7, r8
   d5400:	2202      	movs	r2, #2
   d5402:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d5406:	42b4      	cmp	r4, r6
   d5408:	dc1f      	bgt.n	d544a <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d540a:	9a01      	ldr	r2, [sp, #4]
   d540c:	9b00      	ldr	r3, [sp, #0]
   d540e:	4293      	cmp	r3, r2
   d5410:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d5414:	bfc8      	it	gt
   d5416:	4622      	movgt	r2, r4
   d5418:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d541c:	bfc8      	it	gt
   d541e:	4629      	movgt	r1, r5
   d5420:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d5422:	bfdc      	itt	le
   d5424:	462a      	movle	r2, r5
   d5426:	4621      	movle	r1, r4
   d5428:	4648      	mov	r0, r9
   d542a:	47d8      	blx	fp
    }
    err -= dy;
   d542c:	9b03      	ldr	r3, [sp, #12]
   d542e:	1aff      	subs	r7, r7, r3
   d5430:	b2bb      	uxth	r3, r7
   d5432:	b21f      	sxth	r7, r3
    if (err < 0) {
   d5434:	2f00      	cmp	r7, #0
   d5436:	da05      	bge.n	d5444 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d5438:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d543a:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d543e:	4415      	add	r5, r2
   d5440:	b22d      	sxth	r5, r5
      err += dx;
   d5442:	b23f      	sxth	r7, r7
   d5444:	3401      	adds	r4, #1
   d5446:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d5448:	e7dd      	b.n	d5406 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d544a:	b005      	add	sp, #20
   d544c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5450 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5450:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5454:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d5458:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d545a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d545e:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5460:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d5462:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5464:	4691      	mov	r9, r2
   d5466:	460d      	mov	r5, r1
   d5468:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d546a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d546c:	6823      	ldr	r3, [r4, #0]
   d546e:	9600      	str	r6, [sp, #0]
   d5470:	f10a 32ff 	add.w	r2, sl, #4294967295
   d5474:	444a      	add	r2, r9
   d5476:	69df      	ldr	r7, [r3, #28]
   d5478:	4629      	mov	r1, r5
   d547a:	4643      	mov	r3, r8
   d547c:	4620      	mov	r0, r4
   d547e:	b212      	sxth	r2, r2
   d5480:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d5482:	6823      	ldr	r3, [r4, #0]
   d5484:	9600      	str	r6, [sp, #0]
   d5486:	699f      	ldr	r7, [r3, #24]
   d5488:	464a      	mov	r2, r9
   d548a:	4653      	mov	r3, sl
   d548c:	4629      	mov	r1, r5
   d548e:	4620      	mov	r0, r4
   d5490:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d5492:	6823      	ldr	r3, [r4, #0]
   d5494:	960a      	str	r6, [sp, #40]	; 0x28
   d5496:	f108 31ff 	add.w	r1, r8, #4294967295
   d549a:	4429      	add	r1, r5
   d549c:	699d      	ldr	r5, [r3, #24]
   d549e:	464a      	mov	r2, r9
   d54a0:	4653      	mov	r3, sl
   d54a2:	b209      	sxth	r1, r1
   d54a4:	4620      	mov	r0, r4
   d54a6:	46ac      	mov	ip, r5
}
   d54a8:	b002      	add	sp, #8
   d54aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d54ae:	4760      	bx	ip

000d54b0 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d54b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d54b2:	3b01      	subs	r3, #1
   d54b4:	4413      	add	r3, r2
   d54b6:	6804      	ldr	r4, [r0, #0]
   d54b8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d54bc:	9501      	str	r5, [sp, #4]
   d54be:	b21b      	sxth	r3, r3
   d54c0:	9300      	str	r3, [sp, #0]
   d54c2:	6964      	ldr	r4, [r4, #20]
   d54c4:	460b      	mov	r3, r1
   d54c6:	47a0      	blx	r4
}
   d54c8:	b003      	add	sp, #12
   d54ca:	bd30      	pop	{r4, r5, pc}

000d54cc <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d54cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d54ce:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d54d2:	6804      	ldr	r4, [r0, #0]
   d54d4:	e88d 0024 	stmia.w	sp, {r2, r5}
   d54d8:	3b01      	subs	r3, #1
   d54da:	440b      	add	r3, r1
   d54dc:	6964      	ldr	r4, [r4, #20]
   d54de:	b21b      	sxth	r3, r3
   d54e0:	47a0      	blx	r4
}
   d54e2:	b003      	add	sp, #12
   d54e4:	bd30      	pop	{r4, r5, pc}

000d54e6 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d54e6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d54ea:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d54ee:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d54f2:	4605      	mov	r5, r0
   d54f4:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d54f6:	460c      	mov	r4, r1
   d54f8:	eb01 0a03 	add.w	sl, r1, r3
   d54fc:	4554      	cmp	r4, sl
   d54fe:	da0b      	bge.n	d5518 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d5500:	682b      	ldr	r3, [r5, #0]
   d5502:	f8cd 9000 	str.w	r9, [sp]
   d5506:	699e      	ldr	r6, [r3, #24]
   d5508:	4621      	mov	r1, r4
   d550a:	4643      	mov	r3, r8
   d550c:	463a      	mov	r2, r7
   d550e:	4628      	mov	r0, r5
   d5510:	3401      	adds	r4, #1
   d5512:	47b0      	blx	r6
   d5514:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d5516:	e7f1      	b.n	d54fc <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d5518:	b002      	add	sp, #8
   d551a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d551e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d551e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d5520:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d5524:	6804      	ldr	r4, [r0, #0]
   d5526:	9101      	str	r1, [sp, #4]
   d5528:	9200      	str	r2, [sp, #0]
   d552a:	2200      	movs	r2, #0
   d552c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5530:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d5532:	4611      	mov	r1, r2
   d5534:	47a0      	blx	r4
}
   d5536:	b002      	add	sp, #8
   d5538:	bd10      	pop	{r4, pc}

000d553a <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d553a:	4770      	bx	lr

000d553c <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d553c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d553e:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5540:	2400      	movs	r4, #0
   d5542:	4d08      	ldr	r5, [pc, #32]	; (d5564 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d5544:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d5546:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d5548:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d554a:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d554e:	2201      	movs	r2, #1
   d5550:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d5552:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d5554:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d5556:	8204      	strh	r4, [r0, #16]
   d5558:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d555a:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d555c:	82c1      	strh	r1, [r0, #22]
   d555e:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d5560:	7682      	strb	r2, [r0, #26]
}
   d5562:	bd30      	pop	{r4, r5, pc}
   d5564:	000da3d0 	.word	0x000da3d0

000d5568 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d556c:	b08f      	sub	sp, #60	; 0x3c
   d556e:	4605      	mov	r5, r0
   d5570:	9106      	str	r1, [sp, #24]
   d5572:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d5576:	9107      	str	r1, [sp, #28]
   d5578:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d557c:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d557e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d5582:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5584:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d5588:	4281      	cmp	r1, r0
   d558a:	dd7c      	ble.n	d5686 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d558c:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d5590:	4291      	cmp	r1, r2
   d5592:	dd78      	ble.n	d5686 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d5594:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d5596:	fb11 0008 	smlabb	r0, r1, r8, r0
   d559a:	2800      	cmp	r0, #0
   d559c:	dd73      	ble.n	d5686 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d559e:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d55a2:	2800      	cmp	r0, #0
   d55a4:	dd6f      	ble.n	d5686 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d55a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d55aa:	b296      	uxth	r6, r2
   d55ac:	930c      	str	r3, [sp, #48]	; 0x30
   d55ae:	f106 0308 	add.w	r3, r6, #8
   d55b2:	b29b      	uxth	r3, r3
   d55b4:	9109      	str	r1, [sp, #36]	; 0x24
   d55b6:	2400      	movs	r4, #0
   d55b8:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d55ba:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d55bc:	bf1c      	itt	ne
   d55be:	4b33      	ldrne	r3, [pc, #204]	; (d568c <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d55c0:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d55c2:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d55c4:	bf16      	itet	ne
   d55c6:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d55c8:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d55cc:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d55d0:	9604      	str	r6, [sp, #16]
   d55d2:	fa1f f388 	uxth.w	r3, r8
   d55d6:	9303      	str	r3, [sp, #12]
   d55d8:	9a03      	ldr	r2, [sp, #12]
   d55da:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d55de:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d55e2:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d55e6:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d55e8:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d55ea:	920a      	str	r2, [sp, #40]	; 0x28
   d55ec:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d55ee:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d55f2:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d55f4:	f019 0f01 	tst.w	r9, #1
   d55f8:	d011      	beq.n	d561e <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d55fa:	f1b8 0f01 	cmp.w	r8, #1
   d55fe:	682b      	ldr	r3, [r5, #0]
   d5600:	d103      	bne.n	d560a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d5602:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5606:	9b07      	ldr	r3, [sp, #28]
   d5608:	e014      	b.n	d5634 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d560a:	9a07      	ldr	r2, [sp, #28]
   d560c:	9201      	str	r2, [sp, #4]
   d560e:	f8cd a000 	str.w	sl, [sp]
   d5612:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d5616:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d561a:	4653      	mov	r3, sl
   d561c:	e018      	b.n	d5650 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d561e:	9b07      	ldr	r3, [sp, #28]
   d5620:	9a08      	ldr	r2, [sp, #32]
   d5622:	4293      	cmp	r3, r2
   d5624:	d017      	beq.n	d5656 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d5626:	f1b8 0f01 	cmp.w	r8, #1
   d562a:	682b      	ldr	r3, [r5, #0]
   d562c:	d107      	bne.n	d563e <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d562e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5632:	4613      	mov	r3, r2
   d5634:	b23a      	sxth	r2, r7
   d5636:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d5638:	4628      	mov	r0, r5
   d563a:	47d8      	blx	fp
   d563c:	e00b      	b.n	d5656 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d563e:	9a08      	ldr	r2, [sp, #32]
   d5640:	9201      	str	r2, [sp, #4]
   d5642:	f8cd a000 	str.w	sl, [sp]
   d5646:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d564a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d564e:	4653      	mov	r3, sl
   d5650:	990a      	ldr	r1, [sp, #40]	; 0x28
   d5652:	4628      	mov	r0, r5
   d5654:	47d8      	blx	fp
   d5656:	9b04      	ldr	r3, [sp, #16]
   d5658:	9a03      	ldr	r2, [sp, #12]
   d565a:	4413      	add	r3, r2
   d565c:	b29b      	uxth	r3, r3
   d565e:	9304      	str	r3, [sp, #16]
   d5660:	9b05      	ldr	r3, [sp, #20]
   d5662:	4413      	add	r3, r2
   d5664:	b29b      	uxth	r3, r3
   d5666:	3701      	adds	r7, #1
   d5668:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d566a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d566c:	b2bf      	uxth	r7, r7
   d566e:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d5670:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d5674:	d1be      	bne.n	d55f4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d5676:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5678:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d567a:	3401      	adds	r4, #1
   d567c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5680:	b264      	sxtb	r4, r4
   d5682:	9309      	str	r3, [sp, #36]	; 0x24
   d5684:	d199      	bne.n	d55ba <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d5686:	b00f      	add	sp, #60	; 0x3c
   d5688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d568c:	000da400 	.word	0x000da400

000d5690 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d5690:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d5692:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d5694:	b085      	sub	sp, #20
   d5696:	4604      	mov	r4, r0
   d5698:	460b      	mov	r3, r1

  if (c == '\n') {
   d569a:	d104      	bne.n	d56a6 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d569c:	7e02      	ldrb	r2, [r0, #24]
   d569e:	8a43      	ldrh	r3, [r0, #18]
   d56a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d56a4:	e023      	b.n	d56ee <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d56a6:	290d      	cmp	r1, #13
   d56a8:	d024      	beq.n	d56f4 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d56aa:	7e05      	ldrb	r5, [r0, #24]
   d56ac:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d56b0:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d56b4:	9502      	str	r5, [sp, #8]
   d56b6:	8ac5      	ldrh	r5, [r0, #22]
   d56b8:	9501      	str	r5, [sp, #4]
   d56ba:	8a85      	ldrh	r5, [r0, #20]
   d56bc:	9500      	str	r5, [sp, #0]
   d56be:	f7ff ff53 	bl	d5568 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d56c2:	7e22      	ldrb	r2, [r4, #24]
   d56c4:	8a23      	ldrh	r3, [r4, #16]
   d56c6:	b291      	uxth	r1, r2
   d56c8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d56cc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d56d0:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d56d2:	b21b      	sxth	r3, r3
   d56d4:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d56d6:	b168      	cbz	r0, d56f4 <_ZN12Adafruit_GFX5writeEh+0x64>
   d56d8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d56dc:	f06f 0505 	mvn.w	r5, #5
   d56e0:	fb05 0202 	mla	r2, r5, r2, r0
   d56e4:	4293      	cmp	r3, r2
   d56e6:	dd05      	ble.n	d56f4 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d56e8:	8a63      	ldrh	r3, [r4, #18]
   d56ea:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d56ee:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d56f0:	2300      	movs	r3, #0
   d56f2:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d56f4:	2001      	movs	r0, #1
   d56f6:	b005      	add	sp, #20
   d56f8:	bd30      	pop	{r4, r5, pc}

000d56fa <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d56fa:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d56fc:	8242      	strh	r2, [r0, #18]
   d56fe:	4770      	bx	lr

000d5700 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d5700:	82c1      	strh	r1, [r0, #22]
   d5702:	8281      	strh	r1, [r0, #20]
   d5704:	4770      	bx	lr

000d5706 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d5706:	7e40      	ldrb	r0, [r0, #25]
   d5708:	4770      	bx	lr

000d570a <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d570a:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d570e:	4770      	bx	lr

000d5710 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d5710:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d5714:	4770      	bx	lr

000d5716 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d5716:	f000 bbaf 	b.w	d5e78 <HAL_Pin_Map>

000d571a <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d571a:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d571c:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d5720:	6803      	ldr	r3, [r0, #0]
   d5722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5724:	4798      	blx	r3
}
   d5726:	3000      	adds	r0, #0
   d5728:	bf18      	it	ne
   d572a:	2001      	movne	r0, #1
   d572c:	bd08      	pop	{r3, pc}

000d572e <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d572e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5730:	4606      	mov	r6, r0
   d5732:	460f      	mov	r7, r1
   d5734:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d5736:	b1c4      	cbz	r4, d576a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d5738:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d573c:	6803      	ldr	r3, [r0, #0]
   d573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5740:	4798      	blx	r3
   d5742:	b908      	cbnz	r0, d5748 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d5744:	2000      	movs	r0, #0
   d5746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d5748:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d574c:	2cfa      	cmp	r4, #250	; 0xfa
   d574e:	6803      	ldr	r3, [r0, #0]
   d5750:	4625      	mov	r5, r4
   d5752:	bfa8      	it	ge
   d5754:	25fa      	movge	r5, #250	; 0xfa
   d5756:	68db      	ldr	r3, [r3, #12]
   d5758:	462a      	mov	r2, r5
   d575a:	4639      	mov	r1, r7
   d575c:	4798      	blx	r3
   d575e:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d5760:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d5762:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d5764:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d5766:	d0e6      	beq.n	d5736 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d5768:	e7ec      	b.n	d5744 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d576a:	2001      	movs	r0, #1
}
   d576c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d576e <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d576e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5772:	4606      	mov	r6, r0
   d5774:	4688      	mov	r8, r1
   d5776:	4691      	mov	r9, r2
   d5778:	461f      	mov	r7, r3
   d577a:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d577c:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d577e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5782:	6803      	ldr	r3, [r0, #0]
   d5784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5786:	4798      	blx	r3
   d5788:	b1d0      	cbz	r0, d57c0 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d578a:	2d00      	cmp	r5, #0
   d578c:	db18      	blt.n	d57c0 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d578e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5792:	6803      	ldr	r3, [r0, #0]
   d5794:	691b      	ldr	r3, [r3, #16]
   d5796:	4798      	blx	r3
   d5798:	b160      	cbz	r0, d57b4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d579a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d579e:	6803      	ldr	r3, [r0, #0]
   d57a0:	695b      	ldr	r3, [r3, #20]
   d57a2:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d57a4:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d57a8:	3401      	adds	r4, #1
   d57aa:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d57ac:	454c      	cmp	r4, r9
   d57ae:	d007      	beq.n	d57c0 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d57b0:	463d      	mov	r5, r7
   d57b2:	e7ec      	b.n	d578e <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d57b4:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d57b6:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d57b8:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d57ba:	f001 f887 	bl	d68cc <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d57be:	e7de      	b.n	d577e <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d57c0:	4620      	mov	r0, r4
   d57c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d57c6 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d57c6:	b570      	push	{r4, r5, r6, lr}
   d57c8:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d57ca:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d57ce:	2296      	movs	r2, #150	; 0x96
   d57d0:	2100      	movs	r1, #0
   d57d2:	4628      	mov	r0, r5
   d57d4:	f002 ff10 	bl	d85f8 <memset>
  strcpy((char *)buffer, servername);
   d57d8:	6861      	ldr	r1, [r4, #4]
   d57da:	4628      	mov	r0, r5
   d57dc:	f002 ff3c 	bl	d8658 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d57e0:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d57e4:	8922      	ldrh	r2, [r4, #8]
   d57e6:	6803      	ldr	r3, [r0, #0]
   d57e8:	4629      	mov	r1, r5
   d57ea:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d57ec:	2300      	movs	r3, #0
   d57ee:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d57f0:	3000      	adds	r0, #0
   d57f2:	bf18      	it	ne
   d57f4:	2001      	movne	r0, #1
   d57f6:	bd70      	pop	{r4, r5, r6, pc}

000d57f8 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d57f8:	b510      	push	{r4, lr}
   d57fa:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d57fc:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d5800:	6803      	ldr	r3, [r0, #0]
   d5802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5804:	4798      	blx	r3
   d5806:	b120      	cbz	r0, d5812 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d5808:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d580c:	6803      	ldr	r3, [r0, #0]
   d580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5810:	4798      	blx	r3
  }
  return true;
}
   d5812:	2001      	movs	r0, #1
   d5814:	bd10      	pop	{r4, pc}

000d5816 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d5816:	b570      	push	{r4, r5, r6, lr}
    // Stop if already connected.
    if (!connected())
   d5818:	6803      	ldr	r3, [r0, #0]
   d581a:	689b      	ldr	r3, [r3, #8]
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d581c:	4604      	mov	r4, r0
    // Stop if already connected.
    if (!connected())
   d581e:	4798      	blx	r3
   d5820:	b9c8      	cbnz	r0, d5856 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d5822:	4620      	mov	r0, r4
   d5824:	f000 fa97 	bl	d5d56 <_ZN13Adafruit_MQTT7connectEv>
   d5828:	2504      	movs	r5, #4
   d582a:	b170      	cbz	r0, d584a <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d582c:	3d01      	subs	r5, #1
   d582e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5832:	d00a      	beq.n	d584a <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
        { // connect will return 0 for connected
            DEBUG_PRINT(connectErrorString(ret));
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
   d5834:	4620      	mov	r0, r4
   d5836:	f000 f8b7 	bl	d59a8 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d583a:	f241 3088 	movw	r0, #5000	; 0x1388
   d583e:	f001 f845 	bl	d68cc <delay>
    if (!connected())
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d5842:	4620      	mov	r0, r4
   d5844:	f000 fa87 	bl	d5d56 <_ZN13Adafruit_MQTT7connectEv>
   d5848:	e7ef      	b.n	d582a <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d584a:	6823      	ldr	r3, [r4, #0]
   d584c:	4620      	mov	r0, r4
   d584e:	689b      	ldr	r3, [r3, #8]
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d5850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d5854:	4718      	bx	r3
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d5856:	bd70      	pop	{r4, r5, r6, pc}

000d5858 <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d5858:	f000 bb0e 	b.w	d5e78 <HAL_Pin_Map>

000d585c <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d585c:	b570      	push	{r4, r5, r6, lr}
   d585e:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d5860:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d5862:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d5864:	f002 ff00 	bl	d8668 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d5868:	1203      	asrs	r3, r0, #8
   d586a:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d586c:	7060      	strb	r0, [r4, #1]
   d586e:	b285      	uxth	r5, r0
   d5870:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d5872:	462a      	mov	r2, r5
   d5874:	4631      	mov	r1, r6
   d5876:	4620      	mov	r0, r4
   d5878:	f002 ff37 	bl	d86ea <strncpy>
  return p+len;
}
   d587c:	1960      	adds	r0, r4, r5
   d587e:	bd70      	pop	{r4, r5, r6, pc}

000d5880 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d5880:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d5882:	6103      	str	r3, [r0, #16]
  password = pass;
   d5884:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d5886:	4d0d      	ldr	r5, [pc, #52]	; (d58bc <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d5888:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d588a:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d588c:	4a0c      	ldr	r2, [pc, #48]	; (d58c0 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d588e:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5890:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d5892:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d5894:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5896:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d589a:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d589e:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d58a2:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d58a6:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d58aa:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d58ac:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d58ae:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d58b2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d58b6:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d58ba:	bd30      	pop	{r4, r5, pc}
   d58bc:	000da928 	.word	0x000da928
   d58c0:	000da977 	.word	0x000da977

000d58c4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d58c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d58c8:	fa0f fa83 	sxth.w	sl, r3
   d58cc:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d58ce:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d58d0:	699d      	ldr	r5, [r3, #24]
   d58d2:	2201      	movs	r2, #1
   d58d4:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d58d6:	4606      	mov	r6, r0
   d58d8:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d58da:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d58dc:	b2c0      	uxtb	r0, r0
   d58de:	2801      	cmp	r0, #1
   d58e0:	d001      	beq.n	d58e6 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d58e2:	2000      	movs	r0, #0
   d58e4:	e034      	b.n	d5950 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d58e6:	1c65      	adds	r5, r4, #1
   d58e8:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d58ec:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d58ee:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d58f2:	6833      	ldr	r3, [r6, #0]
   d58f4:	699b      	ldr	r3, [r3, #24]
   d58f6:	2201      	movs	r2, #1
   d58f8:	461f      	mov	r7, r3
   d58fa:	4629      	mov	r1, r5
   d58fc:	4653      	mov	r3, sl
   d58fe:	4630      	mov	r0, r6
   d5900:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d5902:	b2c0      	uxtb	r0, r0
   d5904:	2801      	cmp	r0, #1
   d5906:	d1ec      	bne.n	d58e2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d5908:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d590c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d5910:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d5912:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d5916:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d591a:	d0e2      	beq.n	d58e2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d591c:	061b      	lsls	r3, r3, #24
   d591e:	d4e8      	bmi.n	d58f2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d5920:	9b01      	ldr	r3, [sp, #4]
   d5922:	1b2c      	subs	r4, r5, r4
   d5924:	1b1b      	subs	r3, r3, r4
   d5926:	3b01      	subs	r3, #1
   d5928:	4599      	cmp	r9, r3
   d592a:	6833      	ldr	r3, [r6, #0]
   d592c:	d906      	bls.n	d593c <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d592e:	9a01      	ldr	r2, [sp, #4]
   d5930:	699f      	ldr	r7, [r3, #24]
   d5932:	3a01      	subs	r2, #1
   d5934:	1b12      	subs	r2, r2, r4
   d5936:	4653      	mov	r3, sl
   d5938:	b292      	uxth	r2, r2
   d593a:	e003      	b.n	d5944 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d593c:	699f      	ldr	r7, [r3, #24]
   d593e:	fa1f f289 	uxth.w	r2, r9
   d5942:	4653      	mov	r3, sl
   d5944:	4629      	mov	r1, r5
   d5946:	4630      	mov	r0, r6
   d5948:	47b8      	blx	r7
   d594a:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d594c:	4420      	add	r0, r4
   d594e:	b280      	uxth	r0, r0
}
   d5950:	b003      	add	sp, #12
   d5952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d5958 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d5958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d595a:	4605      	mov	r5, r0
   d595c:	460c      	mov	r4, r1
   d595e:	4616      	mov	r6, r2
   d5960:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d5962:	463b      	mov	r3, r7
   d5964:	2296      	movs	r2, #150	; 0x96
   d5966:	4621      	mov	r1, r4
   d5968:	4628      	mov	r0, r5
   d596a:	f7ff ffab 	bl	d58c4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d596e:	b148      	cbz	r0, d5984 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d5970:	7823      	ldrb	r3, [r4, #0]
   d5972:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d5976:	d005      	beq.n	d5984 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d5978:	f001 f92e 	bl	d6bd8 <_Z16_fetch_usbserialv>
   d597c:	4902      	ldr	r1, [pc, #8]	; (d5988 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d597e:	f000 ff2e 	bl	d67de <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d5982:	e7ee      	b.n	d5962 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d5984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5986:	bf00      	nop
   d5988:	000da978 	.word	0x000da978

000d598c <_ZN13Adafruit_MQTT18connectErrorStringEa>:

  return ((pbuff - buffer)+rlen);
}

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   d598c:	3102      	adds	r1, #2
   d598e:	b2c9      	uxtb	r1, r1
   d5990:	2909      	cmp	r1, #9
   d5992:	bf9a      	itte	ls
   d5994:	4b02      	ldrls	r3, [pc, #8]	; (d59a0 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   d5996:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   switch (code) {
   d599a:	4802      	ldrhi	r0, [pc, #8]	; (d59a4 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   d599c:	4770      	bx	lr
   d599e:	bf00      	nop
   d59a0:	000da944 	.word	0x000da944
   d59a4:	000da989 	.word	0x000da989

000d59a8 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   d59a8:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d59aa:	23e0      	movs	r3, #224	; 0xe0
   d59ac:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d59b0:	2300      	movs	r3, #0
   d59b2:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d59b6:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d59b8:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d59ba:	695b      	ldr	r3, [r3, #20]
   d59bc:	2202      	movs	r2, #2
   d59be:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d59c2:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d59c4:	6823      	ldr	r3, [r4, #0]
   d59c6:	4620      	mov	r0, r4
   d59c8:	691b      	ldr	r3, [r3, #16]

}
   d59ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d59ce:	4718      	bx	r3

000d59d0 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:

  return true;

}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   d59d0:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   d59d4:	b530      	push	{r4, r5, lr}
   d59d6:	4613      	mov	r3, r2
   d59d8:	f100 04cc 	add.w	r4, r0, #204	; 0xcc
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
   d59dc:	f853 5f04 	ldr.w	r5, [r3, #4]!
   d59e0:	428d      	cmp	r5, r1
   d59e2:	d00f      	beq.n	d5a04 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d59e4:	42a3      	cmp	r3, r4
   d59e6:	d1f9      	bne.n	d59dc <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   d59e8:	2300      	movs	r3, #0
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
      if (subscriptions[i] == 0) {
   d59ea:	f852 4f04 	ldr.w	r4, [r2, #4]!
   d59ee:	b924      	cbnz	r4, d59fa <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2a>
        DEBUG_PRINT(F("Added sub ")); DEBUG_PRINTLN(i);
        subscriptions[i] = sub;
   d59f0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   d59f4:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
   d59f8:	e004      	b.n	d5a04 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
   d59fa:	3301      	adds	r3, #1
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d59fc:	2b05      	cmp	r3, #5
   d59fe:	d1f4      	bne.n	d59ea <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
      }
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
   d5a00:	2000      	movs	r0, #0
   d5a02:	bd30      	pop	{r4, r5, pc}
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
   d5a04:	2001      	movs	r0, #1
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
}
   d5a06:	bd30      	pop	{r4, r5, pc}

000d5a08 <_ZN13Adafruit_MQTT16readSubscriptionEs>:
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d5a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d5a0c:	f100 0922 	add.w	r9, r0, #34	; 0x22
   d5a10:	b28b      	uxth	r3, r1
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d5a12:	b087      	sub	sp, #28
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d5a14:	2296      	movs	r2, #150	; 0x96
   d5a16:	4649      	mov	r1, r9
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d5a18:	4604      	mov	r4, r0
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d5a1a:	f7ff ff53 	bl	d58c4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   d5a1e:	4606      	mov	r6, r0
   d5a20:	b310      	cbz	r0, d5a68 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x60>
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d5a22:	f894 7025 	ldrb.w	r7, [r4, #37]	; 0x25
   d5a26:	b2bb      	uxth	r3, r7
   d5a28:	9301      	str	r3, [sp, #4]
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5a2a:	f104 0326 	add.w	r3, r4, #38	; 0x26
   d5a2e:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d5a32:	2500      	movs	r5, #0
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5a34:	9302      	str	r3, [sp, #8]
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i]) {
   d5a36:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d5a3a:	f1bb 0f00 	cmp.w	fp, #0
   d5a3e:	d00e      	beq.n	d5a5e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
      // Skip this subscription if its name length isn't the same as the
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
   d5a40:	f8db 1000 	ldr.w	r1, [fp]
   d5a44:	9103      	str	r1, [sp, #12]
   d5a46:	4608      	mov	r0, r1
   d5a48:	f002 fe0e 	bl	d8668 <strlen>
   d5a4c:	42b8      	cmp	r0, r7
   d5a4e:	4680      	mov	r8, r0
   d5a50:	9903      	ldr	r1, [sp, #12]
   d5a52:	d104      	bne.n	d5a5e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5a54:	463a      	mov	r2, r7
   d5a56:	9802      	ldr	r0, [sp, #8]
   d5a58:	f002 fe0e 	bl	d8678 <strncasecmp>
   d5a5c:	b128      	cbz	r0, d5a6a <_ZN13Adafruit_MQTT16readSubscriptionEs+0x62>
   d5a5e:	3501      	adds	r5, #1
  // Parse out length of packet.
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5a60:	2d05      	cmp	r5, #5
   d5a62:	d1e8      	bne.n	d5a36 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2e>
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
  if (!len)
    return NULL;  // No data available, just quit.
   d5a64:	2000      	movs	r0, #0
   d5a66:	e04a      	b.n	d5afe <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
   d5a68:	e049      	b.n	d5afe <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
  // Check if it is QoS 1, TODO: we dont support QoS 2
  if ((buffer[0] & 0x6) == 0x2) {
   d5a6a:	f894 a022 	ldrb.w	sl, [r4, #34]	; 0x22
   d5a6e:	f00a 0a06 	and.w	sl, sl, #6
   d5a72:	f1ba 0f02 	cmp.w	sl, #2
   d5a76:	d13f      	bne.n	d5af8 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf0>
    packet_id_len = 2;
    packetid = buffer[topiclen+4];
   d5a78:	19e2      	adds	r2, r4, r7
   d5a7a:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
    packetid <<= 8;
    packetid |= buffer[topiclen+5];
   d5a7e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   d5a82:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
  }

  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   d5a86:	2214      	movs	r2, #20
   d5a88:	2100      	movs	r1, #0
   d5a8a:	f10b 0005 	add.w	r0, fp, #5
   d5a8e:	f002 fdb3 	bl	d85f8 <memset>

  datalen = len - topiclen - packet_id_len - 4;
   d5a92:	9b01      	ldr	r3, [sp, #4]
   d5a94:	f5c3 407f 	rsb	r0, r3, #65280	; 0xff00
   d5a98:	30fc      	adds	r0, #252	; 0xfc
   d5a9a:	4406      	add	r6, r0
   d5a9c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   d5aa0:	ebca 0606 	rsb	r6, sl, r6
   d5aa4:	b2b6      	uxth	r6, r6
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d5aa6:	2e15      	cmp	r6, #21
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d5aa8:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d5aac:	f108 0104 	add.w	r1, r8, #4
  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);

  datalen = len - topiclen - packet_id_len - 4;
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d5ab0:	bf28      	it	cs
   d5ab2:	2613      	movcs	r6, #19
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d5ab4:	4451      	add	r1, sl
   d5ab6:	4632      	mov	r2, r6
   d5ab8:	4449      	add	r1, r9
   d5aba:	3005      	adds	r0, #5
   d5abc:	f002 fd81 	bl	d85c2 <memmove>
  subscriptions[i]->datalen = datalen;
   d5ac0:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   d5ac4:	835e      	strh	r6, [r3, #26]
  DEBUG_PRINT(F("Data len: ")); DEBUG_PRINTLN(datalen);
  DEBUG_PRINT(F("Data: ")); DEBUG_PRINTLN((char *)subscriptions[i]->lastread);

  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   d5ac6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5aca:	f003 0306 	and.w	r3, r3, #6
   d5ace:	2b02      	cmp	r3, #2
   d5ad0:	d10f      	bne.n	d5af2 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xea>
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
   d5ad2:	f88d 3015 	strb.w	r3, [sp, #21]
  packet[2] = packetid >> 8;
   d5ad6:	123b      	asrs	r3, r7, #8
   d5ad8:	f88d 3016 	strb.w	r3, [sp, #22]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d5adc:	6823      	ldr	r3, [r4, #0]

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
  packet[2] = packetid >> 8;
  packet[3] = packetid;
   d5ade:	f88d 7017 	strb.w	r7, [sp, #23]
  DEBUG_PRINTBUFFER(buffer, 2);
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
   d5ae2:	2240      	movs	r2, #64	; 0x40
   d5ae4:	f88d 2014 	strb.w	r2, [sp, #20]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d5ae8:	695b      	ldr	r3, [r3, #20]
   d5aea:	2204      	movs	r2, #4
   d5aec:	a905      	add	r1, sp, #20
   d5aee:	4620      	mov	r0, r4
   d5af0:	4798      	blx	r3
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
   d5af2:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d5af6:	e002      	b.n	d5afe <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
   d5af8:	4607      	mov	r7, r0
      }
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
   d5afa:	4682      	mov	sl, r0
   d5afc:	e7c3      	b.n	d5a86 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x7e>
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
}
   d5afe:	b007      	add	sp, #28
   d5b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5b04 <_ZN13Adafruit_MQTT4pingEh>:
  // flush input!
  DEBUG_PRINTLN(F("Flushing input buffer"));
  while (readPacket(buffer, MAXBUFFERSIZE, timeout));
}

bool Adafruit_MQTT::ping(uint8_t num) {
   d5b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5b08:	4604      	mov	r4, r0
   d5b0a:	460d      	mov	r5, r1
   d5b0c:	f04f 0800 	mov.w	r8, #0
  return len;

}

uint8_t Adafruit_MQTT::pingPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d5b10:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  //flushIncoming(100);

  while (num--) {
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d5b14:	f100 0722 	add.w	r7, r0, #34	; 0x22
}

bool Adafruit_MQTT::ping(uint8_t num) {
  //flushIncoming(100);

  while (num--) {
   d5b18:	b1d5      	cbz	r5, d5b50 <_ZN13Adafruit_MQTT4pingEh+0x4c>
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d5b1a:	6823      	ldr	r3, [r4, #0]
  return len;

}

uint8_t Adafruit_MQTT::pingPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d5b1c:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
  packet[1] = 0;
   d5b20:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
  //flushIncoming(100);

  while (num--) {
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d5b24:	695b      	ldr	r3, [r3, #20]
   d5b26:	2202      	movs	r2, #2
   d5b28:	4639      	mov	r1, r7
   d5b2a:	4620      	mov	r0, r4
   d5b2c:	4798      	blx	r3
   d5b2e:	4606      	mov	r6, r0
   d5b30:	b910      	cbnz	r0, d5b38 <_ZN13Adafruit_MQTT4pingEh+0x34>
   d5b32:	3d01      	subs	r5, #1
   d5b34:	b2ed      	uxtb	r5, r5
   d5b36:	e7ef      	b.n	d5b18 <_ZN13Adafruit_MQTT4pingEh+0x14>
      continue;

    // Process ping reply.
    len = processPacketsUntil(buffer, MQTT_CTRL_PINGRESP, PING_TIMEOUT_MS);
   d5b38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5b3c:	220d      	movs	r2, #13
   d5b3e:	4639      	mov	r1, r7
   d5b40:	4620      	mov	r0, r4
   d5b42:	f7ff ff09 	bl	d5958 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
    if (buffer[0] == (MQTT_CTRL_PINGRESP << 4))
   d5b46:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5b4a:	2bd0      	cmp	r3, #208	; 0xd0
   d5b4c:	d1f1      	bne.n	d5b32 <_ZN13Adafruit_MQTT4pingEh+0x2e>
   d5b4e:	e000      	b.n	d5b52 <_ZN13Adafruit_MQTT4pingEh+0x4e>
      return true;
  }

  return false;
   d5b50:	462e      	mov	r6, r5
}
   d5b52:	4630      	mov	r0, r6
   d5b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5b58 <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5b58:	b538      	push	{r3, r4, r5, lr}
   d5b5a:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d5b5c:	4608      	mov	r0, r1
   d5b5e:	2310      	movs	r3, #16
   d5b60:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5b64:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d5b66:	4929      	ldr	r1, [pc, #164]	; (d5c0c <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d5b68:	f7ff fe78 	bl	d585c <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d5b6c:	2304      	movs	r3, #4
   d5b6e:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d5b70:	2302      	movs	r3, #2
   d5b72:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5b74:	69a3      	ldr	r3, [r4, #24]
   d5b76:	b1ab      	cbz	r3, d5ba4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d5b78:	781b      	ldrb	r3, [r3, #0]
   d5b7a:	b19b      	cbz	r3, d5ba4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d5b7c:	2306      	movs	r3, #6
   d5b7e:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d5b80:	f894 3020 	ldrb.w	r3, [r4, #32]
   d5b84:	2b01      	cmp	r3, #1
   d5b86:	d101      	bne.n	d5b8c <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d5b88:	230e      	movs	r3, #14
   d5b8a:	e002      	b.n	d5b92 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d5b8c:	2b02      	cmp	r3, #2
   d5b8e:	d101      	bne.n	d5b94 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d5b90:	231e      	movs	r3, #30
   d5b92:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d5b94:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d5b98:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d5b9a:	bf02      	ittt	eq
   d5b9c:	7843      	ldrbeq	r3, [r0, #1]
   d5b9e:	f043 0320 	orreq.w	r3, r3, #32
   d5ba2:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d5ba4:	6923      	ldr	r3, [r4, #16]
   d5ba6:	781b      	ldrb	r3, [r3, #0]
   d5ba8:	b11b      	cbz	r3, d5bb2 <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d5baa:	7843      	ldrb	r3, [r0, #1]
   d5bac:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d5bb0:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d5bb2:	6963      	ldr	r3, [r4, #20]
   d5bb4:	781b      	ldrb	r3, [r3, #0]
   d5bb6:	b11b      	cbz	r3, d5bc0 <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d5bb8:	7843      	ldrb	r3, [r0, #1]
   d5bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d5bbe:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d5bc0:	2301      	movs	r3, #1
   d5bc2:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d5bc4:	232c      	movs	r3, #44	; 0x2c
   d5bc6:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d5bc8:	68e1      	ldr	r1, [r4, #12]
   d5bca:	780b      	ldrb	r3, [r1, #0]
   d5bcc:	b11b      	cbz	r3, d5bd6 <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d5bce:	3004      	adds	r0, #4
   d5bd0:	f7ff fe44 	bl	d585c <_ZL11stringprintPhPKct.constprop.3>
   d5bd4:	e002      	b.n	d5bdc <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d5bd6:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d5bd8:	7143      	strb	r3, [r0, #5]
      p++;
   d5bda:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5bdc:	69a1      	ldr	r1, [r4, #24]
   d5bde:	b131      	cbz	r1, d5bee <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d5be0:	780b      	ldrb	r3, [r1, #0]
   d5be2:	b123      	cbz	r3, d5bee <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d5be4:	f7ff fe3a 	bl	d585c <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d5be8:	69e1      	ldr	r1, [r4, #28]
   d5bea:	f7ff fe37 	bl	d585c <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d5bee:	6921      	ldr	r1, [r4, #16]
   d5bf0:	780b      	ldrb	r3, [r1, #0]
   d5bf2:	b10b      	cbz	r3, d5bf8 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d5bf4:	f7ff fe32 	bl	d585c <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d5bf8:	6961      	ldr	r1, [r4, #20]
   d5bfa:	780b      	ldrb	r3, [r1, #0]
   d5bfc:	b10b      	cbz	r3, d5c02 <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d5bfe:	f7ff fe2d 	bl	d585c <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d5c02:	1b40      	subs	r0, r0, r5
   d5c04:	b2c0      	uxtb	r0, r0
   d5c06:	1e83      	subs	r3, r0, #2
   d5c08:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5c0a:	bd38      	pop	{r3, r4, r5, pc}
   d5c0c:	000da997 	.word	0x000da997

000d5c10 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5c14:	4605      	mov	r5, r0
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5c16:	4610      	mov	r0, r2
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5c18:	460e      	mov	r6, r1
   d5c1a:	4691      	mov	r9, r2
   d5c1c:	461f      	mov	r7, r3
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5c1e:	f002 fd23 	bl	d8668 <strlen>
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5c22:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   d5c26:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5c2a:	b280      	uxth	r0, r0
  if(qos > 0) { 
   d5c2c:	f1b8 0f00 	cmp.w	r8, #0
   d5c30:	d101      	bne.n	d5c36 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5c32:	1c83      	adds	r3, r0, #2
   d5c34:	e000      	b.n	d5c38 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x28>
  if(qos > 0) { 
    len += 2; // qos packet id
   d5c36:	1d03      	adds	r3, r0, #4
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5c38:	ea4f 0248 	mov.w	r2, r8, lsl #1
   d5c3c:	4630      	mov	r0, r6

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
   d5c3e:	b29b      	uxth	r3, r3
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5c40:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d5c44:	4423      	add	r3, r4

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5c46:	f800 2b01 	strb.w	r2, [r0], #1
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d5c4a:	b29b      	uxth	r3, r3
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
  p++;

  // fill in packet[1] last
  do {
    uint8_t encodedByte = len % 128;
   d5c4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    len /= 128;
    // if there are more data to encode, set the top bit of this byte
    if ( len > 0 ) {
   d5c50:	09db      	lsrs	r3, r3, #7
      encodedByte |= 0x80;
   d5c52:	bf18      	it	ne
   d5c54:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    }
    p[0] = encodedByte;
   d5c58:	f800 2b01 	strb.w	r2, [r0], #1
    p++;
  } while ( len > 0 );
   d5c5c:	2b00      	cmp	r3, #0
   d5c5e:	d1f5      	bne.n	d5c4c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3c>

  // topic comes before packet identifier
  p = stringprint(p, topic);
   d5c60:	4649      	mov	r1, r9
   d5c62:	f7ff fdfb 	bl	d585c <_ZL11stringprintPhPKct.constprop.3>
   d5c66:	4603      	mov	r3, r0

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
   d5c68:	f1b8 0f00 	cmp.w	r8, #0
   d5c6c:	d00c      	beq.n	d5c88 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x78>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d5c6e:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5c72:	0a12      	lsrs	r2, r2, #8
   d5c74:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d5c76:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5c7a:	7042      	strb	r2, [r0, #1]
    p+=2;

    // increment the packet id
    packet_id_counter++;
   d5c7c:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5c80:	3201      	adds	r2, #1

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
    p[0] = (packet_id_counter >> 8) & 0xFF;
    p[1] = packet_id_counter & 0xFF;
    p+=2;
   d5c82:	3302      	adds	r3, #2

    // increment the packet id
    packet_id_counter++;
   d5c84:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  }

  memmove(p, data, bLen);
   d5c88:	4622      	mov	r2, r4
   d5c8a:	4639      	mov	r1, r7
   d5c8c:	4618      	mov	r0, r3
   d5c8e:	f002 fc98 	bl	d85c2 <memmove>
  p+= bLen;
  len = p - packet;
  DEBUG_PRINTLN(F("MQTT publish packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
   d5c92:	4420      	add	r0, r4
   d5c94:	1b80      	subs	r0, r0, r6
}
   d5c96:	b280      	uxth	r0, r0
   d5c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5c9c <_ZN13Adafruit_MQTT7publishEPKcPhth>:

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5c9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5c9e:	f89d 6018 	ldrb.w	r6, [sp, #24]
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5ca2:	f100 0522 	add.w	r5, r0, #34	; 0x22

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5ca6:	4604      	mov	r4, r0
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5ca8:	e88d 0048 	stmia.w	sp, {r3, r6}
   d5cac:	4613      	mov	r3, r2
   d5cae:	460a      	mov	r2, r1
   d5cb0:	4629      	mov	r1, r5
   d5cb2:	f7ff ffad 	bl	d5c10 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d5cb6:	6823      	ldr	r3, [r4, #0]
   d5cb8:	4602      	mov	r2, r0
   d5cba:	695b      	ldr	r3, [r3, #20]
   d5cbc:	4629      	mov	r1, r5
   d5cbe:	4620      	mov	r0, r4
   d5cc0:	4798      	blx	r3
   d5cc2:	b908      	cbnz	r0, d5cc8 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2c>
    return false;
   d5cc4:	2000      	movs	r0, #0
   d5cc6:	e017      	b.n	d5cf8 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>

  // If QOS level is high enough verify the response packet.
  if (qos > 0) {
   d5cc8:	b1b6      	cbz	r6, d5cf8 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d5cca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5cce:	2296      	movs	r2, #150	; 0x96
   d5cd0:	4629      	mov	r1, r5
   d5cd2:	4620      	mov	r0, r4
   d5cd4:	f7ff fdf6 	bl	d58c4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    DEBUG_PRINT(F("Publish QOS1+ reply:\t"));
    DEBUG_PRINTBUFFER(buffer, len);
    if (len != 4)
   d5cd8:	2804      	cmp	r0, #4
   d5cda:	d1f3      	bne.n	d5cc4 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
      return false;
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d5cdc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5ce0:	111b      	asrs	r3, r3, #4
   d5ce2:	2b04      	cmp	r3, #4
   d5ce4:	d1ee      	bne.n	d5cc4 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
   d5ce6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    packnum <<= 8;
    packnum |= buffer[3];

    // we increment the packet_id_counter right after publishing so inc here too to match
    packnum++;
    if (packnum != packet_id_counter)
   d5ce8:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d5cec:	ba5b      	rev16	r3, r3
   d5cee:	3301      	adds	r3, #1
   d5cf0:	b29b      	uxth	r3, r3
   d5cf2:	1ac3      	subs	r3, r0, r3
   d5cf4:	4258      	negs	r0, r3
   d5cf6:	4158      	adcs	r0, r3
      return false;
  }

  return true;
}
   d5cf8:	b002      	add	sp, #8
   d5cfa:	bd70      	pop	{r4, r5, r6, pc}

000d5cfc <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5cfe:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5d00:	4610      	mov	r0, r2
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5d02:	461f      	mov	r7, r3
   d5d04:	460e      	mov	r6, r1
   d5d06:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5d08:	f002 fcae 	bl	d8668 <strlen>
   d5d0c:	9700      	str	r7, [sp, #0]
   d5d0e:	b283      	uxth	r3, r0
   d5d10:	4622      	mov	r2, r4
   d5d12:	4631      	mov	r1, r6
   d5d14:	4628      	mov	r0, r5
   d5d16:	f7ff ffc1 	bl	d5c9c <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d5d1a:	b003      	add	sp, #12
   d5d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5d1e <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5d1e:	b538      	push	{r3, r4, r5, lr}
   d5d20:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d5d22:	2382      	movs	r3, #130	; 0x82
   d5d24:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5d26:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d5d28:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5d2c:	0a09      	lsrs	r1, r1, #8
   d5d2e:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d5d30:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d5d34:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d5d36:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5d3a:	3101      	adds	r1, #1
   d5d3c:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d5d40:	4611      	mov	r1, r2
   d5d42:	1d20      	adds	r0, r4, #4
   d5d44:	f7ff fd8a 	bl	d585c <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d5d48:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d5d4c:	1b00      	subs	r0, r0, r4
   d5d4e:	b2c0      	uxtb	r0, r0
   d5d50:	1e83      	subs	r3, r0, #2
   d5d52:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5d54:	bd38      	pop	{r3, r4, r5, pc}

000d5d56 <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d5d5a:	6803      	ldr	r3, [r0, #0]
   d5d5c:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5d5e:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d5d60:	4798      	blx	r3
   d5d62:	b918      	cbnz	r0, d5d6c <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d5d64:	f04f 30ff 	mov.w	r0, #4294967295
   d5d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d5d6c:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d5d70:	4629      	mov	r1, r5
   d5d72:	4620      	mov	r0, r4
   d5d74:	f7ff fef0 	bl	d5b58 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d5d78:	6823      	ldr	r3, [r4, #0]
   d5d7a:	b282      	uxth	r2, r0
   d5d7c:	695b      	ldr	r3, [r3, #20]
   d5d7e:	4629      	mov	r1, r5
   d5d80:	4620      	mov	r0, r4
   d5d82:	4798      	blx	r3
   d5d84:	2800      	cmp	r0, #0
   d5d86:	d0ed      	beq.n	d5d64 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d5d88:	f241 7370 	movw	r3, #6000	; 0x1770
   d5d8c:	2296      	movs	r2, #150	; 0x96
   d5d8e:	4629      	mov	r1, r5
   d5d90:	4620      	mov	r0, r4
   d5d92:	f7ff fd97 	bl	d58c4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d5d96:	b2c0      	uxtb	r0, r0
   d5d98:	2804      	cmp	r0, #4
   d5d9a:	d1e3      	bne.n	d5d64 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d5d9c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5d9e:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d5da2:	d1df      	bne.n	d5d64 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d5da4:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d5da8:	b110      	cbz	r0, d5db0 <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d5daa:	b240      	sxtb	r0, r0
   d5dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5db0:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d5db4:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d5db8:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d5dbc:	b1fb      	cbz	r3, d5dfe <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5dbe:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d5dc0:	683a      	ldr	r2, [r7, #0]
   d5dc2:	4629      	mov	r1, r5
   d5dc4:	7913      	ldrb	r3, [r2, #4]
   d5dc6:	6812      	ldr	r2, [r2, #0]
   d5dc8:	4620      	mov	r0, r4
   d5dca:	f7ff ffa8 	bl	d5d1e <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d5dce:	6823      	ldr	r3, [r4, #0]
   d5dd0:	b282      	uxth	r2, r0
   d5dd2:	695b      	ldr	r3, [r3, #20]
   d5dd4:	4629      	mov	r1, r5
   d5dd6:	4620      	mov	r0, r4
   d5dd8:	4798      	blx	r3
   d5dda:	2800      	cmp	r0, #0
   d5ddc:	d0c2      	beq.n	d5d64 <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d5dde:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5de2:	2209      	movs	r2, #9
   d5de4:	4629      	mov	r1, r5
   d5de6:	4620      	mov	r0, r4
   d5de8:	f7ff fdb6 	bl	d5958 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d5dec:	b938      	cbnz	r0, d5dfe <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5dee:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d5df0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d5df4:	d1e4      	bne.n	d5dc0 <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d5df6:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d5dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5dfe:	4547      	cmp	r7, r8
   d5e00:	d1da      	bne.n	d5db8 <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d5e02:	2000      	movs	r0, #0
   d5e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5e08 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d5e08:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d5e0a:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d5e0e:	7203      	strb	r3, [r0, #8]
}
   d5e10:	bd10      	pop	{r4, pc}

000d5e12 <_ZN21Adafruit_MQTT_Publish7publishEl>:
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d5e12:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5e14:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   d5e16:	220a      	movs	r2, #10
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d5e18:	4608      	mov	r0, r1
  char payload[12];
  ltoa(i, payload, 10);
   d5e1a:	a901      	add	r1, sp, #4
   d5e1c:	f000 fc4a 	bl	d66b4 <ltoa>
  return mqtt->publish(topic, payload, qos);
   d5e20:	7a23      	ldrb	r3, [r4, #8]
   d5e22:	aa01      	add	r2, sp, #4
   d5e24:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5e28:	f7ff ff68 	bl	d5cfc <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d5e2c:	b004      	add	sp, #16
   d5e2e:	bd10      	pop	{r4, pc}

000d5e30 <_ZN21Adafruit_MQTT_Publish7publishEi>:
   d5e30:	f7ff bfef 	b.w	d5e12 <_ZN21Adafruit_MQTT_Publish7publishEl>

000d5e34 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d5e34:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d5e36:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d5e38:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d5e3a:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d5e3c:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d5e3e:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d5e40:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d5e42:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d5e44:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d5e46:	6283      	str	r3, [r0, #40]	; 0x28
   d5e48:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d5e4a:	6303      	str	r3, [r0, #48]	; 0x30
}
   d5e4c:	bd10      	pop	{r4, pc}

000d5e4e <_GLOBAL__sub_I__Z11printBufferPht>:
   d5e4e:	f000 b813 	b.w	d5e78 <HAL_Pin_Map>

000d5e52 <_GLOBAL__sub_I__ZN5TWISTC2Ev>:
   d5e52:	f000 b811 	b.w	d5e78 <HAL_Pin_Map>
	...

000d5e58 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5e58:	b508      	push	{r3, lr}
   d5e5a:	4b02      	ldr	r3, [pc, #8]	; (d5e64 <netdb_freeaddrinfo+0xc>)
   d5e5c:	681b      	ldr	r3, [r3, #0]
   d5e5e:	689b      	ldr	r3, [r3, #8]
   d5e60:	9301      	str	r3, [sp, #4]
   d5e62:	bd08      	pop	{r3, pc}
   d5e64:	00030268 	.word	0x00030268

000d5e68 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5e68:	b508      	push	{r3, lr}
   d5e6a:	4b02      	ldr	r3, [pc, #8]	; (d5e74 <netdb_getaddrinfo+0xc>)
   d5e6c:	681b      	ldr	r3, [r3, #0]
   d5e6e:	68db      	ldr	r3, [r3, #12]
   d5e70:	9301      	str	r3, [sp, #4]
   d5e72:	bd08      	pop	{r3, pc}
   d5e74:	00030268 	.word	0x00030268

000d5e78 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5e78:	b508      	push	{r3, lr}
   d5e7a:	4b02      	ldr	r3, [pc, #8]	; (d5e84 <HAL_Pin_Map+0xc>)
   d5e7c:	681b      	ldr	r3, [r3, #0]
   d5e7e:	681b      	ldr	r3, [r3, #0]
   d5e80:	9301      	str	r3, [sp, #4]
   d5e82:	bd08      	pop	{r3, pc}
   d5e84:	0003022c 	.word	0x0003022c

000d5e88 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5e88:	b508      	push	{r3, lr}
   d5e8a:	4b02      	ldr	r3, [pc, #8]	; (d5e94 <HAL_Pin_Mode+0xc>)
   d5e8c:	681b      	ldr	r3, [r3, #0]
   d5e8e:	689b      	ldr	r3, [r3, #8]
   d5e90:	9301      	str	r3, [sp, #4]
   d5e92:	bd08      	pop	{r3, pc}
   d5e94:	0003022c 	.word	0x0003022c

000d5e98 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5e98:	b508      	push	{r3, lr}
   d5e9a:	4b02      	ldr	r3, [pc, #8]	; (d5ea4 <HAL_Get_Pin_Mode+0xc>)
   d5e9c:	681b      	ldr	r3, [r3, #0]
   d5e9e:	68db      	ldr	r3, [r3, #12]
   d5ea0:	9301      	str	r3, [sp, #4]
   d5ea2:	bd08      	pop	{r3, pc}
   d5ea4:	0003022c 	.word	0x0003022c

000d5ea8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5ea8:	b508      	push	{r3, lr}
   d5eaa:	4b02      	ldr	r3, [pc, #8]	; (d5eb4 <HAL_GPIO_Write+0xc>)
   d5eac:	681b      	ldr	r3, [r3, #0]
   d5eae:	691b      	ldr	r3, [r3, #16]
   d5eb0:	9301      	str	r3, [sp, #4]
   d5eb2:	bd08      	pop	{r3, pc}
   d5eb4:	0003022c 	.word	0x0003022c

000d5eb8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5eb8:	b508      	push	{r3, lr}
   d5eba:	4b02      	ldr	r3, [pc, #8]	; (d5ec4 <HAL_GPIO_Read+0xc>)
   d5ebc:	681b      	ldr	r3, [r3, #0]
   d5ebe:	695b      	ldr	r3, [r3, #20]
   d5ec0:	9301      	str	r3, [sp, #4]
   d5ec2:	bd08      	pop	{r3, pc}
   d5ec4:	0003022c 	.word	0x0003022c

000d5ec8 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5ec8:	b508      	push	{r3, lr}
   d5eca:	4b02      	ldr	r3, [pc, #8]	; (d5ed4 <HAL_SPI_Begin+0xc>)
   d5ecc:	681b      	ldr	r3, [r3, #0]
   d5ece:	681b      	ldr	r3, [r3, #0]
   d5ed0:	9301      	str	r3, [sp, #4]
   d5ed2:	bd08      	pop	{r3, pc}
   d5ed4:	00030230 	.word	0x00030230

000d5ed8 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d5ed8:	b508      	push	{r3, lr}
   d5eda:	4b02      	ldr	r3, [pc, #8]	; (d5ee4 <HAL_SPI_Set_Bit_Order+0xc>)
   d5edc:	681b      	ldr	r3, [r3, #0]
   d5ede:	689b      	ldr	r3, [r3, #8]
   d5ee0:	9301      	str	r3, [sp, #4]
   d5ee2:	bd08      	pop	{r3, pc}
   d5ee4:	00030230 	.word	0x00030230

000d5ee8 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d5ee8:	b508      	push	{r3, lr}
   d5eea:	4b02      	ldr	r3, [pc, #8]	; (d5ef4 <HAL_SPI_Set_Data_Mode+0xc>)
   d5eec:	681b      	ldr	r3, [r3, #0]
   d5eee:	68db      	ldr	r3, [r3, #12]
   d5ef0:	9301      	str	r3, [sp, #4]
   d5ef2:	bd08      	pop	{r3, pc}
   d5ef4:	00030230 	.word	0x00030230

000d5ef8 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d5ef8:	b508      	push	{r3, lr}
   d5efa:	4b02      	ldr	r3, [pc, #8]	; (d5f04 <HAL_SPI_Set_Clock_Divider+0xc>)
   d5efc:	681b      	ldr	r3, [r3, #0]
   d5efe:	691b      	ldr	r3, [r3, #16]
   d5f00:	9301      	str	r3, [sp, #4]
   d5f02:	bd08      	pop	{r3, pc}
   d5f04:	00030230 	.word	0x00030230

000d5f08 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5f08:	b508      	push	{r3, lr}
   d5f0a:	4b02      	ldr	r3, [pc, #8]	; (d5f14 <HAL_SPI_Send_Receive_Data+0xc>)
   d5f0c:	681b      	ldr	r3, [r3, #0]
   d5f0e:	695b      	ldr	r3, [r3, #20]
   d5f10:	9301      	str	r3, [sp, #4]
   d5f12:	bd08      	pop	{r3, pc}
   d5f14:	00030230 	.word	0x00030230

000d5f18 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5f18:	b508      	push	{r3, lr}
   d5f1a:	4b02      	ldr	r3, [pc, #8]	; (d5f24 <HAL_SPI_Init+0xc>)
   d5f1c:	681b      	ldr	r3, [r3, #0]
   d5f1e:	69db      	ldr	r3, [r3, #28]
   d5f20:	9301      	str	r3, [sp, #4]
   d5f22:	bd08      	pop	{r3, pc}
   d5f24:	00030230 	.word	0x00030230

000d5f28 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5f28:	b508      	push	{r3, lr}
   d5f2a:	4b02      	ldr	r3, [pc, #8]	; (d5f34 <HAL_SPI_Is_Enabled+0xc>)
   d5f2c:	681b      	ldr	r3, [r3, #0]
   d5f2e:	6a1b      	ldr	r3, [r3, #32]
   d5f30:	9301      	str	r3, [sp, #4]
   d5f32:	bd08      	pop	{r3, pc}
   d5f34:	00030230 	.word	0x00030230

000d5f38 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5f38:	b508      	push	{r3, lr}
   d5f3a:	4b02      	ldr	r3, [pc, #8]	; (d5f44 <HAL_SPI_Info+0xc>)
   d5f3c:	681b      	ldr	r3, [r3, #0]
   d5f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5f40:	9301      	str	r3, [sp, #4]
   d5f42:	bd08      	pop	{r3, pc}
   d5f44:	00030230 	.word	0x00030230

000d5f48 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5f48:	b508      	push	{r3, lr}
   d5f4a:	4b02      	ldr	r3, [pc, #8]	; (d5f54 <HAL_SPI_Set_Settings+0xc>)
   d5f4c:	681b      	ldr	r3, [r3, #0]
   d5f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5f50:	9301      	str	r3, [sp, #4]
   d5f52:	bd08      	pop	{r3, pc}
   d5f54:	00030230 	.word	0x00030230

000d5f58 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5f58:	b508      	push	{r3, lr}
   d5f5a:	4b02      	ldr	r3, [pc, #8]	; (d5f64 <HAL_SPI_Acquire+0xc>)
   d5f5c:	681b      	ldr	r3, [r3, #0]
   d5f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5f60:	9301      	str	r3, [sp, #4]
   d5f62:	bd08      	pop	{r3, pc}
   d5f64:	00030230 	.word	0x00030230

000d5f68 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5f68:	b508      	push	{r3, lr}
   d5f6a:	4b02      	ldr	r3, [pc, #8]	; (d5f74 <HAL_SPI_Release+0xc>)
   d5f6c:	681b      	ldr	r3, [r3, #0]
   d5f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5f70:	9301      	str	r3, [sp, #4]
   d5f72:	bd08      	pop	{r3, pc}
   d5f74:	00030230 	.word	0x00030230

000d5f78 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5f78:	b508      	push	{r3, lr}
   d5f7a:	4b02      	ldr	r3, [pc, #8]	; (d5f84 <if_index_to_name+0xc>)
   d5f7c:	681b      	ldr	r3, [r3, #0]
   d5f7e:	695b      	ldr	r3, [r3, #20]
   d5f80:	9301      	str	r3, [sp, #4]
   d5f82:	bd08      	pop	{r3, pc}
   d5f84:	0003026c 	.word	0x0003026c

000d5f88 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5f88:	b508      	push	{r3, lr}
   d5f8a:	4b02      	ldr	r3, [pc, #8]	; (d5f94 <HAL_RNG_GetRandomNumber+0xc>)
   d5f8c:	681b      	ldr	r3, [r3, #0]
   d5f8e:	685b      	ldr	r3, [r3, #4]
   d5f90:	9301      	str	r3, [sp, #4]
   d5f92:	bd08      	pop	{r3, pc}
   d5f94:	00030218 	.word	0x00030218

000d5f98 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5f98:	b508      	push	{r3, lr}
   d5f9a:	4b02      	ldr	r3, [pc, #8]	; (d5fa4 <HAL_Delay_Microseconds+0xc>)
   d5f9c:	681b      	ldr	r3, [r3, #0]
   d5f9e:	68db      	ldr	r3, [r3, #12]
   d5fa0:	9301      	str	r3, [sp, #4]
   d5fa2:	bd08      	pop	{r3, pc}
   d5fa4:	00030218 	.word	0x00030218

000d5fa8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5fa8:	b508      	push	{r3, lr}
   d5faa:	4b02      	ldr	r3, [pc, #8]	; (d5fb4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5fac:	681b      	ldr	r3, [r3, #0]
   d5fae:	695b      	ldr	r3, [r3, #20]
   d5fb0:	9301      	str	r3, [sp, #4]
   d5fb2:	bd08      	pop	{r3, pc}
   d5fb4:	00030218 	.word	0x00030218

000d5fb8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5fb8:	b508      	push	{r3, lr}
   d5fba:	4b02      	ldr	r3, [pc, #8]	; (d5fc4 <os_thread_is_current+0xc>)
   d5fbc:	681b      	ldr	r3, [r3, #0]
   d5fbe:	689b      	ldr	r3, [r3, #8]
   d5fc0:	9301      	str	r3, [sp, #4]
   d5fc2:	bd08      	pop	{r3, pc}
   d5fc4:	00030248 	.word	0x00030248

000d5fc8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5fc8:	b508      	push	{r3, lr}
   d5fca:	4b02      	ldr	r3, [pc, #8]	; (d5fd4 <os_thread_join+0xc>)
   d5fcc:	681b      	ldr	r3, [r3, #0]
   d5fce:	691b      	ldr	r3, [r3, #16]
   d5fd0:	9301      	str	r3, [sp, #4]
   d5fd2:	bd08      	pop	{r3, pc}
   d5fd4:	00030248 	.word	0x00030248

000d5fd8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5fd8:	b508      	push	{r3, lr}
   d5fda:	4b02      	ldr	r3, [pc, #8]	; (d5fe4 <os_thread_cleanup+0xc>)
   d5fdc:	681b      	ldr	r3, [r3, #0]
   d5fde:	695b      	ldr	r3, [r3, #20]
   d5fe0:	9301      	str	r3, [sp, #4]
   d5fe2:	bd08      	pop	{r3, pc}
   d5fe4:	00030248 	.word	0x00030248

000d5fe8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5fe8:	b508      	push	{r3, lr}
   d5fea:	4b02      	ldr	r3, [pc, #8]	; (d5ff4 <os_mutex_recursive_create+0xc>)
   d5fec:	681b      	ldr	r3, [r3, #0]
   d5fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5ff0:	9301      	str	r3, [sp, #4]
   d5ff2:	bd08      	pop	{r3, pc}
   d5ff4:	00030248 	.word	0x00030248

000d5ff8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5ff8:	b508      	push	{r3, lr}
   d5ffa:	4b02      	ldr	r3, [pc, #8]	; (d6004 <os_mutex_recursive_destroy+0xc>)
   d5ffc:	681b      	ldr	r3, [r3, #0]
   d5ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6000:	9301      	str	r3, [sp, #4]
   d6002:	bd08      	pop	{r3, pc}
   d6004:	00030248 	.word	0x00030248

000d6008 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6008:	b508      	push	{r3, lr}
   d600a:	4b02      	ldr	r3, [pc, #8]	; (d6014 <inet_inet_ntop+0xc>)
   d600c:	681b      	ldr	r3, [r3, #0]
   d600e:	695b      	ldr	r3, [r3, #20]
   d6010:	9301      	str	r3, [sp, #4]
   d6012:	bd08      	pop	{r3, pc}
   d6014:	00030264 	.word	0x00030264

000d6018 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6018:	b508      	push	{r3, lr}
   d601a:	4b02      	ldr	r3, [pc, #8]	; (d6024 <inet_htonl+0xc>)
   d601c:	681b      	ldr	r3, [r3, #0]
   d601e:	6a1b      	ldr	r3, [r3, #32]
   d6020:	9301      	str	r3, [sp, #4]
   d6022:	bd08      	pop	{r3, pc}
   d6024:	00030264 	.word	0x00030264

000d6028 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6028:	b508      	push	{r3, lr}
   d602a:	4b02      	ldr	r3, [pc, #8]	; (d6034 <inet_htons+0xc>)
   d602c:	681b      	ldr	r3, [r3, #0]
   d602e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6030:	9301      	str	r3, [sp, #4]
   d6032:	bd08      	pop	{r3, pc}
   d6034:	00030264 	.word	0x00030264

000d6038 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6038:	b508      	push	{r3, lr}
   d603a:	4b02      	ldr	r3, [pc, #8]	; (d6044 <HAL_USART_Init+0xc>)
   d603c:	681b      	ldr	r3, [r3, #0]
   d603e:	681b      	ldr	r3, [r3, #0]
   d6040:	9301      	str	r3, [sp, #4]
   d6042:	bd08      	pop	{r3, pc}
   d6044:	0003023c 	.word	0x0003023c

000d6048 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6048:	b508      	push	{r3, lr}
   d604a:	4b02      	ldr	r3, [pc, #8]	; (d6054 <HAL_USART_Write_Data+0xc>)
   d604c:	681b      	ldr	r3, [r3, #0]
   d604e:	68db      	ldr	r3, [r3, #12]
   d6050:	9301      	str	r3, [sp, #4]
   d6052:	bd08      	pop	{r3, pc}
   d6054:	0003023c 	.word	0x0003023c

000d6058 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6058:	b508      	push	{r3, lr}
   d605a:	4b02      	ldr	r3, [pc, #8]	; (d6064 <HAL_USART_Available_Data+0xc>)
   d605c:	681b      	ldr	r3, [r3, #0]
   d605e:	691b      	ldr	r3, [r3, #16]
   d6060:	9301      	str	r3, [sp, #4]
   d6062:	bd08      	pop	{r3, pc}
   d6064:	0003023c 	.word	0x0003023c

000d6068 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6068:	b508      	push	{r3, lr}
   d606a:	4b02      	ldr	r3, [pc, #8]	; (d6074 <HAL_USART_Read_Data+0xc>)
   d606c:	681b      	ldr	r3, [r3, #0]
   d606e:	695b      	ldr	r3, [r3, #20]
   d6070:	9301      	str	r3, [sp, #4]
   d6072:	bd08      	pop	{r3, pc}
   d6074:	0003023c 	.word	0x0003023c

000d6078 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6078:	b508      	push	{r3, lr}
   d607a:	4b02      	ldr	r3, [pc, #8]	; (d6084 <HAL_USART_Peek_Data+0xc>)
   d607c:	681b      	ldr	r3, [r3, #0]
   d607e:	699b      	ldr	r3, [r3, #24]
   d6080:	9301      	str	r3, [sp, #4]
   d6082:	bd08      	pop	{r3, pc}
   d6084:	0003023c 	.word	0x0003023c

000d6088 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6088:	b508      	push	{r3, lr}
   d608a:	4b02      	ldr	r3, [pc, #8]	; (d6094 <HAL_USART_Flush_Data+0xc>)
   d608c:	681b      	ldr	r3, [r3, #0]
   d608e:	69db      	ldr	r3, [r3, #28]
   d6090:	9301      	str	r3, [sp, #4]
   d6092:	bd08      	pop	{r3, pc}
   d6094:	0003023c 	.word	0x0003023c

000d6098 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6098:	b508      	push	{r3, lr}
   d609a:	4b02      	ldr	r3, [pc, #8]	; (d60a4 <HAL_USART_Is_Enabled+0xc>)
   d609c:	681b      	ldr	r3, [r3, #0]
   d609e:	6a1b      	ldr	r3, [r3, #32]
   d60a0:	9301      	str	r3, [sp, #4]
   d60a2:	bd08      	pop	{r3, pc}
   d60a4:	0003023c 	.word	0x0003023c

000d60a8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d60a8:	b508      	push	{r3, lr}
   d60aa:	4b02      	ldr	r3, [pc, #8]	; (d60b4 <HAL_USART_Available_Data_For_Write+0xc>)
   d60ac:	681b      	ldr	r3, [r3, #0]
   d60ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d60b0:	9301      	str	r3, [sp, #4]
   d60b2:	bd08      	pop	{r3, pc}
   d60b4:	0003023c 	.word	0x0003023c

000d60b8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d60b8:	b508      	push	{r3, lr}
   d60ba:	4b02      	ldr	r3, [pc, #8]	; (d60c4 <HAL_I2C_Begin+0xc>)
   d60bc:	681b      	ldr	r3, [r3, #0]
   d60be:	68db      	ldr	r3, [r3, #12]
   d60c0:	9301      	str	r3, [sp, #4]
   d60c2:	bd08      	pop	{r3, pc}
   d60c4:	00030228 	.word	0x00030228

000d60c8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d60c8:	b508      	push	{r3, lr}
   d60ca:	4b02      	ldr	r3, [pc, #8]	; (d60d4 <HAL_I2C_Begin_Transmission+0xc>)
   d60cc:	681b      	ldr	r3, [r3, #0]
   d60ce:	699b      	ldr	r3, [r3, #24]
   d60d0:	9301      	str	r3, [sp, #4]
   d60d2:	bd08      	pop	{r3, pc}
   d60d4:	00030228 	.word	0x00030228

000d60d8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d60d8:	b508      	push	{r3, lr}
   d60da:	4b02      	ldr	r3, [pc, #8]	; (d60e4 <HAL_I2C_End_Transmission+0xc>)
   d60dc:	681b      	ldr	r3, [r3, #0]
   d60de:	69db      	ldr	r3, [r3, #28]
   d60e0:	9301      	str	r3, [sp, #4]
   d60e2:	bd08      	pop	{r3, pc}
   d60e4:	00030228 	.word	0x00030228

000d60e8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d60e8:	b508      	push	{r3, lr}
   d60ea:	4b02      	ldr	r3, [pc, #8]	; (d60f4 <HAL_I2C_Write_Data+0xc>)
   d60ec:	681b      	ldr	r3, [r3, #0]
   d60ee:	6a1b      	ldr	r3, [r3, #32]
   d60f0:	9301      	str	r3, [sp, #4]
   d60f2:	bd08      	pop	{r3, pc}
   d60f4:	00030228 	.word	0x00030228

000d60f8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d60f8:	b508      	push	{r3, lr}
   d60fa:	4b02      	ldr	r3, [pc, #8]	; (d6104 <HAL_I2C_Available_Data+0xc>)
   d60fc:	681b      	ldr	r3, [r3, #0]
   d60fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6100:	9301      	str	r3, [sp, #4]
   d6102:	bd08      	pop	{r3, pc}
   d6104:	00030228 	.word	0x00030228

000d6108 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6108:	b508      	push	{r3, lr}
   d610a:	4b02      	ldr	r3, [pc, #8]	; (d6114 <HAL_I2C_Read_Data+0xc>)
   d610c:	681b      	ldr	r3, [r3, #0]
   d610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6110:	9301      	str	r3, [sp, #4]
   d6112:	bd08      	pop	{r3, pc}
   d6114:	00030228 	.word	0x00030228

000d6118 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6118:	b508      	push	{r3, lr}
   d611a:	4b02      	ldr	r3, [pc, #8]	; (d6124 <HAL_I2C_Peek_Data+0xc>)
   d611c:	681b      	ldr	r3, [r3, #0]
   d611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6120:	9301      	str	r3, [sp, #4]
   d6122:	bd08      	pop	{r3, pc}
   d6124:	00030228 	.word	0x00030228

000d6128 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6128:	b508      	push	{r3, lr}
   d612a:	4b02      	ldr	r3, [pc, #8]	; (d6134 <HAL_I2C_Flush_Data+0xc>)
   d612c:	681b      	ldr	r3, [r3, #0]
   d612e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6130:	9301      	str	r3, [sp, #4]
   d6132:	bd08      	pop	{r3, pc}
   d6134:	00030228 	.word	0x00030228

000d6138 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6138:	b508      	push	{r3, lr}
   d613a:	4b02      	ldr	r3, [pc, #8]	; (d6144 <HAL_I2C_Is_Enabled+0xc>)
   d613c:	681b      	ldr	r3, [r3, #0]
   d613e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6140:	9301      	str	r3, [sp, #4]
   d6142:	bd08      	pop	{r3, pc}
   d6144:	00030228 	.word	0x00030228

000d6148 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6148:	b508      	push	{r3, lr}
   d614a:	4b02      	ldr	r3, [pc, #8]	; (d6154 <HAL_I2C_Init+0xc>)
   d614c:	681b      	ldr	r3, [r3, #0]
   d614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6150:	9301      	str	r3, [sp, #4]
   d6152:	bd08      	pop	{r3, pc}
   d6154:	00030228 	.word	0x00030228

000d6158 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d6158:	b508      	push	{r3, lr}
   d615a:	4b02      	ldr	r3, [pc, #8]	; (d6164 <HAL_I2C_Request_Data_Ex+0xc>)
   d615c:	681b      	ldr	r3, [r3, #0]
   d615e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6160:	9301      	str	r3, [sp, #4]
   d6162:	bd08      	pop	{r3, pc}
   d6164:	00030228 	.word	0x00030228

000d6168 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6168:	b508      	push	{r3, lr}
   d616a:	4b02      	ldr	r3, [pc, #8]	; (d6174 <sock_setsockopt+0xc>)
   d616c:	681b      	ldr	r3, [r3, #0]
   d616e:	699b      	ldr	r3, [r3, #24]
   d6170:	9301      	str	r3, [sp, #4]
   d6172:	bd08      	pop	{r3, pc}
   d6174:	00030238 	.word	0x00030238

000d6178 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6178:	b508      	push	{r3, lr}
   d617a:	4b02      	ldr	r3, [pc, #8]	; (d6184 <sock_close+0xc>)
   d617c:	681b      	ldr	r3, [r3, #0]
   d617e:	69db      	ldr	r3, [r3, #28]
   d6180:	9301      	str	r3, [sp, #4]
   d6182:	bd08      	pop	{r3, pc}
   d6184:	00030238 	.word	0x00030238

000d6188 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6188:	b508      	push	{r3, lr}
   d618a:	4b02      	ldr	r3, [pc, #8]	; (d6194 <sock_connect+0xc>)
   d618c:	681b      	ldr	r3, [r3, #0]
   d618e:	6a1b      	ldr	r3, [r3, #32]
   d6190:	9301      	str	r3, [sp, #4]
   d6192:	bd08      	pop	{r3, pc}
   d6194:	00030238 	.word	0x00030238

000d6198 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6198:	b508      	push	{r3, lr}
   d619a:	4b02      	ldr	r3, [pc, #8]	; (d61a4 <sock_recv+0xc>)
   d619c:	681b      	ldr	r3, [r3, #0]
   d619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d61a0:	9301      	str	r3, [sp, #4]
   d61a2:	bd08      	pop	{r3, pc}
   d61a4:	00030238 	.word	0x00030238

000d61a8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d61a8:	b508      	push	{r3, lr}
   d61aa:	4b02      	ldr	r3, [pc, #8]	; (d61b4 <sock_send+0xc>)
   d61ac:	681b      	ldr	r3, [r3, #0]
   d61ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61b0:	9301      	str	r3, [sp, #4]
   d61b2:	bd08      	pop	{r3, pc}
   d61b4:	00030238 	.word	0x00030238

000d61b8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d61b8:	b508      	push	{r3, lr}
   d61ba:	4b02      	ldr	r3, [pc, #8]	; (d61c4 <sock_socket+0xc>)
   d61bc:	681b      	ldr	r3, [r3, #0]
   d61be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d61c0:	9301      	str	r3, [sp, #4]
   d61c2:	bd08      	pop	{r3, pc}
   d61c4:	00030238 	.word	0x00030238

000d61c8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d61c8:	b508      	push	{r3, lr}
   d61ca:	4b02      	ldr	r3, [pc, #8]	; (d61d4 <HAL_USB_USART_Init+0xc>)
   d61cc:	681b      	ldr	r3, [r3, #0]
   d61ce:	681b      	ldr	r3, [r3, #0]
   d61d0:	9301      	str	r3, [sp, #4]
   d61d2:	bd08      	pop	{r3, pc}
   d61d4:	0003024c 	.word	0x0003024c

000d61d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d61d8:	b508      	push	{r3, lr}
   d61da:	4b02      	ldr	r3, [pc, #8]	; (d61e4 <HAL_USB_USART_Available_Data+0xc>)
   d61dc:	681b      	ldr	r3, [r3, #0]
   d61de:	691b      	ldr	r3, [r3, #16]
   d61e0:	9301      	str	r3, [sp, #4]
   d61e2:	bd08      	pop	{r3, pc}
   d61e4:	0003024c 	.word	0x0003024c

000d61e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d61e8:	b508      	push	{r3, lr}
   d61ea:	4b02      	ldr	r3, [pc, #8]	; (d61f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d61ec:	681b      	ldr	r3, [r3, #0]
   d61ee:	695b      	ldr	r3, [r3, #20]
   d61f0:	9301      	str	r3, [sp, #4]
   d61f2:	bd08      	pop	{r3, pc}
   d61f4:	0003024c 	.word	0x0003024c

000d61f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d61f8:	b508      	push	{r3, lr}
   d61fa:	4b02      	ldr	r3, [pc, #8]	; (d6204 <HAL_USB_USART_Receive_Data+0xc>)
   d61fc:	681b      	ldr	r3, [r3, #0]
   d61fe:	699b      	ldr	r3, [r3, #24]
   d6200:	9301      	str	r3, [sp, #4]
   d6202:	bd08      	pop	{r3, pc}
   d6204:	0003024c 	.word	0x0003024c

000d6208 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6208:	b508      	push	{r3, lr}
   d620a:	4b02      	ldr	r3, [pc, #8]	; (d6214 <HAL_USB_USART_Send_Data+0xc>)
   d620c:	681b      	ldr	r3, [r3, #0]
   d620e:	69db      	ldr	r3, [r3, #28]
   d6210:	9301      	str	r3, [sp, #4]
   d6212:	bd08      	pop	{r3, pc}
   d6214:	0003024c 	.word	0x0003024c

000d6218 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6218:	b508      	push	{r3, lr}
   d621a:	4b02      	ldr	r3, [pc, #8]	; (d6224 <HAL_USB_USART_Flush_Data+0xc>)
   d621c:	681b      	ldr	r3, [r3, #0]
   d621e:	6a1b      	ldr	r3, [r3, #32]
   d6220:	9301      	str	r3, [sp, #4]
   d6222:	bd08      	pop	{r3, pc}
   d6224:	0003024c 	.word	0x0003024c

000d6228 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6228:	b508      	push	{r3, lr}
   d622a:	4b02      	ldr	r3, [pc, #8]	; (d6234 <panic_+0xc>)
   d622c:	681b      	ldr	r3, [r3, #0]
   d622e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6230:	9301      	str	r3, [sp, #4]
   d6232:	bd08      	pop	{r3, pc}
   d6234:	00030260 	.word	0x00030260

000d6238 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6238:	b508      	push	{r3, lr}
   d623a:	4b02      	ldr	r3, [pc, #8]	; (d6244 <log_message+0xc>)
   d623c:	681b      	ldr	r3, [r3, #0]
   d623e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6240:	9301      	str	r3, [sp, #4]
   d6242:	bd08      	pop	{r3, pc}
   d6244:	00030260 	.word	0x00030260

000d6248 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6248:	b508      	push	{r3, lr}
   d624a:	4b02      	ldr	r3, [pc, #8]	; (d6254 <set_system_mode+0xc>)
   d624c:	681b      	ldr	r3, [r3, #0]
   d624e:	685b      	ldr	r3, [r3, #4]
   d6250:	9301      	str	r3, [sp, #4]
   d6252:	bd08      	pop	{r3, pc}
   d6254:	00030220 	.word	0x00030220

000d6258 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6258:	b508      	push	{r3, lr}
   d625a:	4b02      	ldr	r3, [pc, #8]	; (d6264 <system_delay_ms+0xc>)
   d625c:	681b      	ldr	r3, [r3, #0]
   d625e:	695b      	ldr	r3, [r3, #20]
   d6260:	9301      	str	r3, [sp, #4]
   d6262:	bd08      	pop	{r3, pc}
   d6264:	00030220 	.word	0x00030220

000d6268 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6268:	b508      	push	{r3, lr}
   d626a:	4b03      	ldr	r3, [pc, #12]	; (d6278 <system_ctrl_set_app_request_handler+0x10>)
   d626c:	681b      	ldr	r3, [r3, #0]
   d626e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6272:	9301      	str	r3, [sp, #4]
   d6274:	bd08      	pop	{r3, pc}
   d6276:	0000      	.short	0x0000
   d6278:	00030220 	.word	0x00030220

000d627c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d627c:	b508      	push	{r3, lr}
   d627e:	4b03      	ldr	r3, [pc, #12]	; (d628c <system_ctrl_set_result+0x10>)
   d6280:	681b      	ldr	r3, [r3, #0]
   d6282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6286:	9301      	str	r3, [sp, #4]
   d6288:	bd08      	pop	{r3, pc}
   d628a:	0000      	.short	0x0000
   d628c:	00030220 	.word	0x00030220

000d6290 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6290:	b508      	push	{r3, lr}
   d6292:	4b02      	ldr	r3, [pc, #8]	; (d629c <network_connect+0xc>)
   d6294:	681b      	ldr	r3, [r3, #0]
   d6296:	685b      	ldr	r3, [r3, #4]
   d6298:	9301      	str	r3, [sp, #4]
   d629a:	bd08      	pop	{r3, pc}
   d629c:	00030240 	.word	0x00030240

000d62a0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d62a0:	b508      	push	{r3, lr}
   d62a2:	4b02      	ldr	r3, [pc, #8]	; (d62ac <network_connecting+0xc>)
   d62a4:	681b      	ldr	r3, [r3, #0]
   d62a6:	689b      	ldr	r3, [r3, #8]
   d62a8:	9301      	str	r3, [sp, #4]
   d62aa:	bd08      	pop	{r3, pc}
   d62ac:	00030240 	.word	0x00030240

000d62b0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d62b0:	b508      	push	{r3, lr}
   d62b2:	4b02      	ldr	r3, [pc, #8]	; (d62bc <network_disconnect+0xc>)
   d62b4:	681b      	ldr	r3, [r3, #0]
   d62b6:	68db      	ldr	r3, [r3, #12]
   d62b8:	9301      	str	r3, [sp, #4]
   d62ba:	bd08      	pop	{r3, pc}
   d62bc:	00030240 	.word	0x00030240

000d62c0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d62c0:	b508      	push	{r3, lr}
   d62c2:	4b02      	ldr	r3, [pc, #8]	; (d62cc <network_ready+0xc>)
   d62c4:	681b      	ldr	r3, [r3, #0]
   d62c6:	691b      	ldr	r3, [r3, #16]
   d62c8:	9301      	str	r3, [sp, #4]
   d62ca:	bd08      	pop	{r3, pc}
   d62cc:	00030240 	.word	0x00030240

000d62d0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d62d0:	b508      	push	{r3, lr}
   d62d2:	4b02      	ldr	r3, [pc, #8]	; (d62dc <network_on+0xc>)
   d62d4:	681b      	ldr	r3, [r3, #0]
   d62d6:	695b      	ldr	r3, [r3, #20]
   d62d8:	9301      	str	r3, [sp, #4]
   d62da:	bd08      	pop	{r3, pc}
   d62dc:	00030240 	.word	0x00030240

000d62e0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d62e0:	b508      	push	{r3, lr}
   d62e2:	4b02      	ldr	r3, [pc, #8]	; (d62ec <network_off+0xc>)
   d62e4:	681b      	ldr	r3, [r3, #0]
   d62e6:	699b      	ldr	r3, [r3, #24]
   d62e8:	9301      	str	r3, [sp, #4]
   d62ea:	bd08      	pop	{r3, pc}
   d62ec:	00030240 	.word	0x00030240

000d62f0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d62f0:	b508      	push	{r3, lr}
   d62f2:	4b02      	ldr	r3, [pc, #8]	; (d62fc <network_listen+0xc>)
   d62f4:	681b      	ldr	r3, [r3, #0]
   d62f6:	69db      	ldr	r3, [r3, #28]
   d62f8:	9301      	str	r3, [sp, #4]
   d62fa:	bd08      	pop	{r3, pc}
   d62fc:	00030240 	.word	0x00030240

000d6300 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6300:	b508      	push	{r3, lr}
   d6302:	4b02      	ldr	r3, [pc, #8]	; (d630c <network_listening+0xc>)
   d6304:	681b      	ldr	r3, [r3, #0]
   d6306:	6a1b      	ldr	r3, [r3, #32]
   d6308:	9301      	str	r3, [sp, #4]
   d630a:	bd08      	pop	{r3, pc}
   d630c:	00030240 	.word	0x00030240

000d6310 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6310:	b508      	push	{r3, lr}
   d6312:	4b02      	ldr	r3, [pc, #8]	; (d631c <network_set_listen_timeout+0xc>)
   d6314:	681b      	ldr	r3, [r3, #0]
   d6316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6318:	9301      	str	r3, [sp, #4]
   d631a:	bd08      	pop	{r3, pc}
   d631c:	00030240 	.word	0x00030240

000d6320 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6320:	b508      	push	{r3, lr}
   d6322:	4b02      	ldr	r3, [pc, #8]	; (d632c <network_get_listen_timeout+0xc>)
   d6324:	681b      	ldr	r3, [r3, #0]
   d6326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6328:	9301      	str	r3, [sp, #4]
   d632a:	bd08      	pop	{r3, pc}
   d632c:	00030240 	.word	0x00030240

000d6330 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6330:	b508      	push	{r3, lr}
   d6332:	4b02      	ldr	r3, [pc, #8]	; (d633c <spark_set_random_seed_from_cloud_handler+0xc>)
   d6334:	681b      	ldr	r3, [r3, #0]
   d6336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6338:	9301      	str	r3, [sp, #4]
   d633a:	bd08      	pop	{r3, pc}
   d633c:	00030244 	.word	0x00030244

000d6340 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6340:	b508      	push	{r3, lr}
   d6342:	4b02      	ldr	r3, [pc, #8]	; (d634c <malloc+0xc>)
   d6344:	681b      	ldr	r3, [r3, #0]
   d6346:	681b      	ldr	r3, [r3, #0]
   d6348:	9301      	str	r3, [sp, #4]
   d634a:	bd08      	pop	{r3, pc}
   d634c:	0003021c 	.word	0x0003021c

000d6350 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6350:	b508      	push	{r3, lr}
   d6352:	4b02      	ldr	r3, [pc, #8]	; (d635c <free+0xc>)
   d6354:	681b      	ldr	r3, [r3, #0]
   d6356:	685b      	ldr	r3, [r3, #4]
   d6358:	9301      	str	r3, [sp, #4]
   d635a:	bd08      	pop	{r3, pc}
   d635c:	0003021c 	.word	0x0003021c

000d6360 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6360:	b508      	push	{r3, lr}
   d6362:	4b02      	ldr	r3, [pc, #8]	; (d636c <vsnprintf+0xc>)
   d6364:	681b      	ldr	r3, [r3, #0]
   d6366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6368:	9301      	str	r3, [sp, #4]
   d636a:	bd08      	pop	{r3, pc}
   d636c:	0003021c 	.word	0x0003021c

000d6370 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6370:	b508      	push	{r3, lr}
   d6372:	4b02      	ldr	r3, [pc, #8]	; (d637c <_malloc_r+0xc>)
   d6374:	681b      	ldr	r3, [r3, #0]
   d6376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6378:	9301      	str	r3, [sp, #4]
   d637a:	bd08      	pop	{r3, pc}
   d637c:	0003021c 	.word	0x0003021c

000d6380 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6380:	b508      	push	{r3, lr}
   d6382:	4b02      	ldr	r3, [pc, #8]	; (d638c <__errno+0xc>)
   d6384:	681b      	ldr	r3, [r3, #0]
   d6386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6388:	9301      	str	r3, [sp, #4]
   d638a:	bd08      	pop	{r3, pc}
   d638c:	0003021c 	.word	0x0003021c

000d6390 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6390:	2200      	movs	r2, #0
   d6392:	4611      	mov	r1, r2
   d6394:	6840      	ldr	r0, [r0, #4]
   d6396:	f7ff bfb3 	b.w	d6300 <network_listening>

000d639a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d639a:	2200      	movs	r2, #0
   d639c:	4611      	mov	r1, r2
   d639e:	6840      	ldr	r0, [r0, #4]
   d63a0:	f7ff bfbe 	b.w	d6320 <network_get_listen_timeout>

000d63a4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d63a4:	2200      	movs	r2, #0
   d63a6:	6840      	ldr	r0, [r0, #4]
   d63a8:	f7ff bfb2 	b.w	d6310 <network_set_listen_timeout>

000d63ac <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d63ac:	2200      	movs	r2, #0
   d63ae:	f081 0101 	eor.w	r1, r1, #1
   d63b2:	6840      	ldr	r0, [r0, #4]
   d63b4:	f7ff bf9c 	b.w	d62f0 <network_listen>

000d63b8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d63b8:	2300      	movs	r3, #0
   d63ba:	461a      	mov	r2, r3
   d63bc:	4619      	mov	r1, r3
   d63be:	6840      	ldr	r0, [r0, #4]
   d63c0:	f7ff bf8e 	b.w	d62e0 <network_off>

000d63c4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d63c4:	2300      	movs	r3, #0
   d63c6:	461a      	mov	r2, r3
   d63c8:	4619      	mov	r1, r3
   d63ca:	6840      	ldr	r0, [r0, #4]
   d63cc:	f7ff bf80 	b.w	d62d0 <network_on>

000d63d0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d63d0:	2200      	movs	r2, #0
   d63d2:	4611      	mov	r1, r2
   d63d4:	6840      	ldr	r0, [r0, #4]
   d63d6:	f7ff bf73 	b.w	d62c0 <network_ready>

000d63da <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d63da:	2200      	movs	r2, #0
   d63dc:	4611      	mov	r1, r2
   d63de:	6840      	ldr	r0, [r0, #4]
   d63e0:	f7ff bf5e 	b.w	d62a0 <network_connecting>

000d63e4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d63e4:	2200      	movs	r2, #0
   d63e6:	2102      	movs	r1, #2
   d63e8:	6840      	ldr	r0, [r0, #4]
   d63ea:	f7ff bf61 	b.w	d62b0 <network_disconnect>

000d63ee <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d63ee:	2300      	movs	r3, #0
   d63f0:	461a      	mov	r2, r3
   d63f2:	6840      	ldr	r0, [r0, #4]
   d63f4:	f7ff bf4c 	b.w	d6290 <network_connect>

000d63f8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d63f8:	4b02      	ldr	r3, [pc, #8]	; (d6404 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d63fa:	2203      	movs	r2, #3
   d63fc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d63fe:	4a02      	ldr	r2, [pc, #8]	; (d6408 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6400:	601a      	str	r2, [r3, #0]
   d6402:	4770      	bx	lr
   d6404:	2003e3dc 	.word	0x2003e3dc
   d6408:	000dab68 	.word	0x000dab68

000d640c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d640c:	2100      	movs	r1, #0
   d640e:	f7ff bda3 	b.w	d5f58 <HAL_SPI_Acquire>

000d6412 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6412:	2100      	movs	r1, #0
   d6414:	f7ff bda8 	b.w	d5f68 <HAL_SPI_Release>

000d6418 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6418:	b510      	push	{r4, lr}
   d641a:	4604      	mov	r4, r0
{
    _spi = spi;
   d641c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d641e:	4608      	mov	r0, r1
   d6420:	f7ff fd7a 	bl	d5f18 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6424:	2300      	movs	r3, #0
   d6426:	6063      	str	r3, [r4, #4]
}
   d6428:	4620      	mov	r0, r4
   d642a:	bd10      	pop	{r4, pc}

000d642c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d642c:	b510      	push	{r4, lr}
   d642e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6430:	7800      	ldrb	r0, [r0, #0]
   d6432:	f7ff ffeb 	bl	d640c <_ZN8SPIClass4lockEv.isra.0>
   d6436:	b948      	cbnz	r0, d644c <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d6438:	7820      	ldrb	r0, [r4, #0]
   d643a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d643e:	f7ff fd43 	bl	d5ec8 <HAL_SPI_Begin>
        unlock();
   d6442:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d6448:	f7ff bfe3 	b.w	d6412 <_ZN8SPIClass6unlockEv.isra.1>
   d644c:	bd10      	pop	{r4, pc}

000d644e <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d644e:	b538      	push	{r3, r4, r5, lr}
   d6450:	4604      	mov	r4, r0
    if (!lock())
   d6452:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d6454:	460d      	mov	r5, r1
    if (!lock())
   d6456:	f7ff ffd9 	bl	d640c <_ZN8SPIClass4lockEv.isra.0>
   d645a:	b940      	cbnz	r0, d646e <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d645c:	7820      	ldrb	r0, [r4, #0]
   d645e:	4629      	mov	r1, r5
   d6460:	f7ff fd3a 	bl	d5ed8 <HAL_SPI_Set_Bit_Order>
        unlock();
   d6464:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d646a:	f7ff bfd2 	b.w	d6412 <_ZN8SPIClass6unlockEv.isra.1>
   d646e:	bd38      	pop	{r3, r4, r5, pc}

000d6470 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d6470:	b538      	push	{r3, r4, r5, lr}
   d6472:	4604      	mov	r4, r0
    if (!lock())
   d6474:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d6476:	460d      	mov	r5, r1
    if (!lock())
   d6478:	f7ff ffc8 	bl	d640c <_ZN8SPIClass4lockEv.isra.0>
   d647c:	b940      	cbnz	r0, d6490 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d647e:	7820      	ldrb	r0, [r4, #0]
   d6480:	4629      	mov	r1, r5
   d6482:	f7ff fd31 	bl	d5ee8 <HAL_SPI_Set_Data_Mode>
        unlock();
   d6486:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d648c:	f7ff bfc1 	b.w	d6412 <_ZN8SPIClass6unlockEv.isra.1>
   d6490:	bd38      	pop	{r3, r4, r5, pc}

000d6492 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6492:	7800      	ldrb	r0, [r0, #0]
   d6494:	f7ff bfbd 	b.w	d6412 <_ZN8SPIClass6unlockEv.isra.1>

000d6498 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6498:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d649a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d649c:	6018      	str	r0, [r3, #0]
   d649e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d64a0:	6818      	ldr	r0, [r3, #0]
   d64a2:	4288      	cmp	r0, r1
   d64a4:	b2e5      	uxtb	r5, r4
   d64a6:	d906      	bls.n	d64b6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d64a8:	3401      	adds	r4, #1
   d64aa:	2c08      	cmp	r4, #8
   d64ac:	d002      	beq.n	d64b4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d64ae:	0840      	lsrs	r0, r0, #1
   d64b0:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d64b2:	e7f5      	b.n	d64a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d64b4:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d64b6:	4b02      	ldr	r3, [pc, #8]	; (d64c0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d64b8:	5d5b      	ldrb	r3, [r3, r5]
   d64ba:	7013      	strb	r3, [r2, #0]
   d64bc:	bd30      	pop	{r4, r5, pc}
   d64be:	bf00      	nop
   d64c0:	000dab94 	.word	0x000dab94

000d64c4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d64c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d64c8:	4607      	mov	r7, r0
   d64ca:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d64cc:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d64ce:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d64d0:	f7ff ff9c 	bl	d640c <_ZN8SPIClass4lockEv.isra.0>
   d64d4:	2800      	cmp	r0, #0
   d64d6:	db62      	blt.n	d659e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d64d8:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d64da:	2214      	movs	r2, #20
   d64dc:	2100      	movs	r1, #0
   d64de:	a809      	add	r0, sp, #36	; 0x24
   d64e0:	f002 f88a 	bl	d85f8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d64e4:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d64e6:	4620      	mov	r0, r4
   d64e8:	2200      	movs	r2, #0
   d64ea:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d64ec:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d64f0:	f7ff fd22 	bl	d5f38 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d64f4:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d64f8:	b154      	cbz	r4, d6510 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d64fa:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d64fe:	b935      	cbnz	r5, d650e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d6500:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6504:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6508:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d650c:	e003      	b.n	d6516 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d650e:	2400      	movs	r4, #0
   d6510:	46a1      	mov	r9, r4
   d6512:	46a0      	mov	r8, r4
   d6514:	2501      	movs	r5, #1
   d6516:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6518:	b105      	cbz	r5, d651c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d651a:	b9bb      	cbnz	r3, d654c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d651c:	429d      	cmp	r5, r3
   d651e:	d10b      	bne.n	d6538 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d6520:	68b2      	ldr	r2, [r6, #8]
   d6522:	4542      	cmp	r2, r8
   d6524:	d108      	bne.n	d6538 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6526:	f88d 9020 	strb.w	r9, [sp, #32]
   d652a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d652e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d6532:	89b2      	ldrh	r2, [r6, #12]
   d6534:	4291      	cmp	r1, r2
   d6536:	d009      	beq.n	d654c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d6538:	b153      	cbz	r3, d6550 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d653a:	2400      	movs	r4, #0
   d653c:	7838      	ldrb	r0, [r7, #0]
   d653e:	9401      	str	r4, [sp, #4]
   d6540:	9400      	str	r4, [sp, #0]
   d6542:	4623      	mov	r3, r4
   d6544:	4622      	mov	r2, r4
   d6546:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6548:	f7ff fcfe 	bl	d5f48 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d654c:	2000      	movs	r0, #0
   d654e:	e026      	b.n	d659e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d6550:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d6554:	68b1      	ldr	r1, [r6, #8]
   d6556:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6558:	ab04      	add	r3, sp, #16
   d655a:	f10d 020f 	add.w	r2, sp, #15
   d655e:	f7ff ff9b 	bl	d6498 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d6562:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6564:	b105      	cbz	r5, d6568 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d6566:	b9b1      	cbnz	r1, d6596 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d6568:	42a9      	cmp	r1, r5
   d656a:	d008      	beq.n	d657e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d656c:	2400      	movs	r4, #0
   d656e:	7838      	ldrb	r0, [r7, #0]
   d6570:	9401      	str	r4, [sp, #4]
   d6572:	7b74      	ldrb	r4, [r6, #13]
   d6574:	7b33      	ldrb	r3, [r6, #12]
   d6576:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d657a:	9400      	str	r4, [sp, #0]
   d657c:	e7e4      	b.n	d6548 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d657e:	68b3      	ldr	r3, [r6, #8]
   d6580:	4543      	cmp	r3, r8
   d6582:	d3f3      	bcc.n	d656c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6584:	f88d 9020 	strb.w	r9, [sp, #32]
   d6588:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d658c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6590:	89b3      	ldrh	r3, [r6, #12]
   d6592:	429a      	cmp	r2, r3
   d6594:	d1ea      	bne.n	d656c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6596:	9b04      	ldr	r3, [sp, #16]
   d6598:	4543      	cmp	r3, r8
   d659a:	d1e7      	bne.n	d656c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d659c:	e7d6      	b.n	d654c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d659e:	b00f      	add	sp, #60	; 0x3c
   d65a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d65a4 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d65a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d65a8:	b088      	sub	sp, #32
    unsigned clock = 0;
   d65aa:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d65ac:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d65ae:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d65b0:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d65b2:	460e      	mov	r6, r1
   d65b4:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d65b6:	f7ff ff29 	bl	d640c <_ZN8SPIClass4lockEv.isra.0>
   d65ba:	4605      	mov	r5, r0
   d65bc:	bb00      	cbnz	r0, d6600 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d65be:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d65c2:	4601      	mov	r1, r0
   d65c4:	2214      	movs	r2, #20
   d65c6:	a803      	add	r0, sp, #12
   d65c8:	f002 f816 	bl	d85f8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d65cc:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d65ce:	462a      	mov	r2, r5
   d65d0:	a903      	add	r1, sp, #12
   d65d2:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d65d4:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d65d8:	f7ff fcae 	bl	d5f38 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d65dc:	ab02      	add	r3, sp, #8
   d65de:	f10d 0207 	add.w	r2, sp, #7
   d65e2:	fb07 f106 	mul.w	r1, r7, r6
   d65e6:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d65e8:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d65ec:	f7ff ff54 	bl	d6498 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d65f0:	7820      	ldrb	r0, [r4, #0]
   d65f2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d65f6:	f7ff fc7f 	bl	d5ef8 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d65fa:	7820      	ldrb	r0, [r4, #0]
   d65fc:	f7ff ff09 	bl	d6412 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d6600:	9802      	ldr	r0, [sp, #8]
   d6602:	b008      	add	sp, #32
   d6604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6608 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6608:	b538      	push	{r3, r4, r5, lr}
   d660a:	4604      	mov	r4, r0
    if (!lock())
   d660c:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d660e:	460d      	mov	r5, r1
    if (!lock())
   d6610:	f7ff fefc 	bl	d640c <_ZN8SPIClass4lockEv.isra.0>
   d6614:	b9c8      	cbnz	r0, d664a <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d6616:	6861      	ldr	r1, [r4, #4]
   d6618:	b171      	cbz	r1, d6638 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d661a:	4b0c      	ldr	r3, [pc, #48]	; (d664c <_ZN8SPIClass15setClockDividerEh+0x44>)
   d661c:	5cc2      	ldrb	r2, [r0, r3]
   d661e:	42aa      	cmp	r2, r5
   d6620:	d002      	beq.n	d6628 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d6622:	3001      	adds	r0, #1
   d6624:	2808      	cmp	r0, #8
   d6626:	d1f9      	bne.n	d661c <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d6628:	3001      	adds	r0, #1
   d662a:	b2c0      	uxtb	r0, r0
   d662c:	40c1      	lsrs	r1, r0
   d662e:	2201      	movs	r2, #1
   d6630:	4620      	mov	r0, r4
   d6632:	f7ff ffb7 	bl	d65a4 <_ZN8SPIClass13setClockSpeedEjj>
   d6636:	e003      	b.n	d6640 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6638:	4629      	mov	r1, r5
   d663a:	7820      	ldrb	r0, [r4, #0]
   d663c:	f7ff fc5c 	bl	d5ef8 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d6640:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d6646:	f7ff bee4 	b.w	d6412 <_ZN8SPIClass6unlockEv.isra.1>
   d664a:	bd38      	pop	{r3, r4, r5, pc}
   d664c:	000dab94 	.word	0x000dab94

000d6650 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6650:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d6652:	7800      	ldrb	r0, [r0, #0]
   d6654:	f7ff fc58 	bl	d5f08 <HAL_SPI_Send_Receive_Data>
}
   d6658:	b2c0      	uxtb	r0, r0
   d665a:	bd08      	pop	{r3, pc}

000d665c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d665c:	7800      	ldrb	r0, [r0, #0]
   d665e:	f7ff bc63 	b.w	d5f28 <HAL_SPI_Is_Enabled>

000d6662 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6662:	b510      	push	{r4, lr}
   d6664:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6666:	6800      	ldr	r0, [r0, #0]
   d6668:	b118      	cbz	r0, d6672 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d666a:	f7ff fe71 	bl	d6350 <free>
            wakeupSource_ = nullptr;
   d666e:	2300      	movs	r3, #0
   d6670:	6023      	str	r3, [r4, #0]
   d6672:	bd10      	pop	{r4, pc}

000d6674 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6674:	b510      	push	{r4, lr}
   d6676:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6678:	f7ff fff3 	bl	d6662 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d667c:	4620      	mov	r0, r4
   d667e:	bd10      	pop	{r4, pc}

000d6680 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6680:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6682:	4c09      	ldr	r4, [pc, #36]	; (d66a8 <_GLOBAL__sub_I_System+0x28>)
   d6684:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6686:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d668a:	6020      	str	r0, [r4, #0]
   d668c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d668e:	71a0      	strb	r0, [r4, #6]
   d6690:	8120      	strh	r0, [r4, #8]
   d6692:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6694:	f7ff fdd8 	bl	d6248 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6698:	4620      	mov	r0, r4
   d669a:	4a04      	ldr	r2, [pc, #16]	; (d66ac <_GLOBAL__sub_I_System+0x2c>)
   d669c:	4904      	ldr	r1, [pc, #16]	; (d66b0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d669e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d66a2:	f001 b905 	b.w	d78b0 <__aeabi_atexit>
   d66a6:	bf00      	nop
   d66a8:	2003e3e4 	.word	0x2003e3e4
   d66ac:	2003e1c4 	.word	0x2003e1c4
   d66b0:	000d6675 	.word	0x000d6675

000d66b4 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d66b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d66b8:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d66ba:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d66bc:	4615      	mov	r5, r2
   d66be:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d66c0:	bf34      	ite	cc
   d66c2:	4615      	movcc	r5, r2
   d66c4:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d66c6:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d66c8:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d66ca:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d66cc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d66d0:	d107      	bne.n	d66e2 <ltoa+0x2e>
   d66d2:	4298      	cmp	r0, r3
   d66d4:	da05      	bge.n	d66e2 <ltoa+0x2e>
      {
            *head++ = '-';
   d66d6:	232d      	movs	r3, #45	; 0x2d
   d66d8:	f101 0801 	add.w	r8, r1, #1
   d66dc:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d66de:	4240      	negs	r0, r0
   d66e0:	e001      	b.n	d66e6 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d66e2:	b1b0      	cbz	r0, d6712 <ltoa+0x5e>
   d66e4:	46a0      	mov	r8, r4
   d66e6:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d66ea:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d66ec:	462a      	mov	r2, r5
   d66ee:	4601      	mov	r1, r0
   d66f0:	a801      	add	r0, sp, #4
   d66f2:	f001 ff43 	bl	d857c <ldiv>
   d66f6:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d66f8:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d66fa:	2b09      	cmp	r3, #9
   d66fc:	bfcc      	ite	gt
   d66fe:	2237      	movgt	r2, #55	; 0x37
   d6700:	2230      	movle	r2, #48	; 0x30
   d6702:	fa52 f383 	uxtab	r3, r2, r3
   d6706:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d670a:	3701      	adds	r7, #1
   d670c:	2800      	cmp	r0, #0
   d670e:	d1ed      	bne.n	d66ec <ltoa+0x38>
   d6710:	e006      	b.n	d6720 <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d6712:	2330      	movs	r3, #48	; 0x30
   d6714:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d6718:	46a0      	mov	r8, r4
   d671a:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d671e:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d6720:	463a      	mov	r2, r7
   d6722:	1c71      	adds	r1, r6, #1
   d6724:	4640      	mov	r0, r8
   d6726:	f001 ff41 	bl	d85ac <memcpy>
      return str;
}
   d672a:	4620      	mov	r0, r4
   d672c:	b00c      	add	sp, #48	; 0x30
   d672e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6732 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6732:	b510      	push	{r4, lr}
   d6734:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6736:	6800      	ldr	r0, [r0, #0]
   d6738:	b108      	cbz	r0, d673e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d673a:	f7ff fc5d 	bl	d5ff8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d673e:	4620      	mov	r0, r4
   d6740:	bd10      	pop	{r4, pc}
	...

000d6744 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6744:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6746:	4c06      	ldr	r4, [pc, #24]	; (d6760 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6748:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d674a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d674c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d674e:	f7ff fc4b 	bl	d5fe8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6752:	4620      	mov	r0, r4
   d6754:	4a03      	ldr	r2, [pc, #12]	; (d6764 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6756:	4904      	ldr	r1, [pc, #16]	; (d6768 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d675c:	f001 b8a8 	b.w	d78b0 <__aeabi_atexit>
   d6760:	2003e3f0 	.word	0x2003e3f0
   d6764:	2003e1c4 	.word	0x2003e1c4
   d6768:	000d6733 	.word	0x000d6733

000d676c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d676e:	4606      	mov	r6, r0
   d6770:	460d      	mov	r5, r1
   d6772:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6774:	2400      	movs	r4, #0
  while (size--) {
   d6776:	42bd      	cmp	r5, r7
   d6778:	d00c      	beq.n	d6794 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d677a:	6833      	ldr	r3, [r6, #0]
   d677c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6780:	689b      	ldr	r3, [r3, #8]
   d6782:	4630      	mov	r0, r6
   d6784:	4798      	blx	r3
     if (chunk>=0)
   d6786:	2800      	cmp	r0, #0
   d6788:	db01      	blt.n	d678e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d678a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d678c:	e7f3      	b.n	d6776 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d678e:	2c00      	cmp	r4, #0
   d6790:	bf08      	it	eq
   d6792:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6794:	4620      	mov	r0, r4
   d6796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6798 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6798:	b570      	push	{r4, r5, r6, lr}
   d679a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d679c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d679e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d67a0:	b149      	cbz	r1, d67b6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d67a2:	f001 ff61 	bl	d8668 <strlen>
   d67a6:	682b      	ldr	r3, [r5, #0]
   d67a8:	4602      	mov	r2, r0
   d67aa:	4621      	mov	r1, r4
   d67ac:	4628      	mov	r0, r5
   d67ae:	68db      	ldr	r3, [r3, #12]
    }
   d67b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d67b4:	4718      	bx	r3
    }
   d67b6:	bd70      	pop	{r4, r5, r6, pc}

000d67b8 <_ZN5Print5printEPKc>:
   d67b8:	b508      	push	{r3, lr}
   d67ba:	f7ff ffed 	bl	d6798 <_ZN5Print5writeEPKc>
   d67be:	bd08      	pop	{r3, pc}

000d67c0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d67c0:	6803      	ldr	r3, [r0, #0]
   d67c2:	689b      	ldr	r3, [r3, #8]
   d67c4:	4718      	bx	r3

000d67c6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d67c6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d67c8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d67ca:	4605      	mov	r5, r0
  size_t n = print('\r');
   d67cc:	f7ff fff8 	bl	d67c0 <_ZN5Print5printEc>
  n += print('\n');
   d67d0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d67d2:	4604      	mov	r4, r0
  n += print('\n');
   d67d4:	4628      	mov	r0, r5
   d67d6:	f7ff fff3 	bl	d67c0 <_ZN5Print5printEc>
  return n;
}
   d67da:	4420      	add	r0, r4
   d67dc:	bd38      	pop	{r3, r4, r5, pc}

000d67de <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d67de:	b538      	push	{r3, r4, r5, lr}
   d67e0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d67e2:	f7ff ffd9 	bl	d6798 <_ZN5Print5writeEPKc>
   d67e6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d67e8:	4628      	mov	r0, r5
   d67ea:	f7ff ffec 	bl	d67c6 <_ZN5Print7printlnEv>
  return n;
}
   d67ee:	4420      	add	r0, r4
   d67f0:	bd38      	pop	{r3, r4, r5, pc}

000d67f2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d67f2:	b530      	push	{r4, r5, lr}
   d67f4:	b08b      	sub	sp, #44	; 0x2c
   d67f6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d67f8:	2100      	movs	r1, #0
   d67fa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d67fe:	2a01      	cmp	r2, #1
   d6800:	bf98      	it	ls
   d6802:	220a      	movls	r2, #10
   d6804:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6808:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d680c:	fb05 3312 	mls	r3, r5, r2, r3
   d6810:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6814:	2b09      	cmp	r3, #9
   d6816:	bf94      	ite	ls
   d6818:	3330      	addls	r3, #48	; 0x30
   d681a:	3337      	addhi	r3, #55	; 0x37
   d681c:	b2db      	uxtb	r3, r3
   d681e:	4621      	mov	r1, r4
   d6820:	f804 3901 	strb.w	r3, [r4], #-1
   d6824:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6826:	2d00      	cmp	r5, #0
   d6828:	d1ee      	bne.n	d6808 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d682a:	f7ff ffb5 	bl	d6798 <_ZN5Print5writeEPKc>
}
   d682e:	b00b      	add	sp, #44	; 0x2c
   d6830:	bd30      	pop	{r4, r5, pc}

000d6832 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6832:	b40c      	push	{r2, r3}
   d6834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6838:	b087      	sub	sp, #28
   d683a:	af00      	add	r7, sp, #0
   d683c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6840:	4605      	mov	r5, r0
   d6842:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6846:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6848:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d684a:	4623      	mov	r3, r4
   d684c:	464a      	mov	r2, r9
   d684e:	2114      	movs	r1, #20
   d6850:	1d38      	adds	r0, r7, #4
   d6852:	f7ff fd85 	bl	d6360 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6856:	2813      	cmp	r0, #19
   d6858:	d805      	bhi.n	d6866 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d685a:	1d39      	adds	r1, r7, #4
   d685c:	4628      	mov	r0, r5
   d685e:	f7ff ff9b 	bl	d6798 <_ZN5Print5writeEPKc>
   d6862:	4604      	mov	r4, r0
   d6864:	e013      	b.n	d688e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6866:	f100 0308 	add.w	r3, r0, #8
   d686a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d686e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6870:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6874:	1c41      	adds	r1, r0, #1
   d6876:	4623      	mov	r3, r4
   d6878:	464a      	mov	r2, r9
   d687a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d687c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d687e:	f7ff fd6f 	bl	d6360 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6882:	4669      	mov	r1, sp
   d6884:	4628      	mov	r0, r5
   d6886:	f7ff ff87 	bl	d6798 <_ZN5Print5writeEPKc>
   d688a:	4604      	mov	r4, r0
   d688c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d688e:	b11e      	cbz	r6, d6898 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6890:	4628      	mov	r0, r5
   d6892:	f7ff ff98 	bl	d67c6 <_ZN5Print7printlnEv>
   d6896:	4404      	add	r4, r0
    return n;
}
   d6898:	4620      	mov	r0, r4
   d689a:	371c      	adds	r7, #28
   d689c:	46bd      	mov	sp, r7
   d689e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d68a2:	b002      	add	sp, #8
   d68a4:	4770      	bx	lr
	...

000d68a8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d68a8:	4b01      	ldr	r3, [pc, #4]	; (d68b0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d68aa:	4a02      	ldr	r2, [pc, #8]	; (d68b4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d68ac:	601a      	str	r2, [r3, #0]
   d68ae:	4770      	bx	lr
   d68b0:	2003e3f4 	.word	0x2003e3f4
   d68b4:	000dac0f 	.word	0x000dac0f

000d68b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d68b8:	4b02      	ldr	r3, [pc, #8]	; (d68c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d68ba:	681a      	ldr	r2, [r3, #0]
   d68bc:	4b02      	ldr	r3, [pc, #8]	; (d68c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d68be:	601a      	str	r2, [r3, #0]
   d68c0:	4770      	bx	lr
   d68c2:	bf00      	nop
   d68c4:	2003e120 	.word	0x2003e120
   d68c8:	2003e3f8 	.word	0x2003e3f8

000d68cc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d68cc:	2100      	movs	r1, #0
   d68ce:	f7ff bcc3 	b.w	d6258 <system_delay_ms>

000d68d2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d68d2:	b510      	push	{r4, lr}
   d68d4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d68d6:	f7fe f99b 	bl	d4c10 <_ZNSt14_Function_baseD1Ev>
   d68da:	4620      	mov	r0, r4
   d68dc:	bd10      	pop	{r4, pc}
	...

000d68e0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d68e0:	4803      	ldr	r0, [pc, #12]	; (d68f0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d68e2:	4a04      	ldr	r2, [pc, #16]	; (d68f4 <_GLOBAL__sub_I_RGB+0x14>)
   d68e4:	4904      	ldr	r1, [pc, #16]	; (d68f8 <_GLOBAL__sub_I_RGB+0x18>)
   d68e6:	2300      	movs	r3, #0
   d68e8:	6083      	str	r3, [r0, #8]
   d68ea:	f000 bfe1 	b.w	d78b0 <__aeabi_atexit>
   d68ee:	bf00      	nop
   d68f0:	2003e3fc 	.word	0x2003e3fc
   d68f4:	2003e1c4 	.word	0x2003e1c4
   d68f8:	000d68d3 	.word	0x000d68d3

000d68fc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d68fc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d68fe:	4b0c      	ldr	r3, [pc, #48]	; (d6930 <serialEventRun+0x34>)
   d6900:	b133      	cbz	r3, d6910 <serialEventRun+0x14>
   d6902:	f000 f969 	bl	d6bd8 <_Z16_fetch_usbserialv>
   d6906:	6803      	ldr	r3, [r0, #0]
   d6908:	691b      	ldr	r3, [r3, #16]
   d690a:	4798      	blx	r3
   d690c:	2800      	cmp	r0, #0
   d690e:	dc09      	bgt.n	d6924 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6910:	4b08      	ldr	r3, [pc, #32]	; (d6934 <serialEventRun+0x38>)
   d6912:	b163      	cbz	r3, d692e <serialEventRun+0x32>
   d6914:	f000 f9e2 	bl	d6cdc <_Z22__fetch_global_Serial1v>
   d6918:	6803      	ldr	r3, [r0, #0]
   d691a:	691b      	ldr	r3, [r3, #16]
   d691c:	4798      	blx	r3
   d691e:	2800      	cmp	r0, #0
   d6920:	dc03      	bgt.n	d692a <serialEventRun+0x2e>
   d6922:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6924:	f3af 8000 	nop.w
   d6928:	e7f2      	b.n	d6910 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d692a:	f3af 8000 	nop.w
   d692e:	bd08      	pop	{r3, pc}
	...

000d6938 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6938:	b508      	push	{r3, lr}
	serialEventRun();
   d693a:	f7ff ffdf 	bl	d68fc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d693e:	f7ff fb33 	bl	d5fa8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6942:	4b01      	ldr	r3, [pc, #4]	; (d6948 <_post_loop+0x10>)
   d6944:	6018      	str	r0, [r3, #0]
   d6946:	bd08      	pop	{r3, pc}
   d6948:	2003e730 	.word	0x2003e730

000d694c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d694c:	4802      	ldr	r0, [pc, #8]	; (d6958 <_Z33system_initialize_user_backup_ramv+0xc>)
   d694e:	4a03      	ldr	r2, [pc, #12]	; (d695c <_Z33system_initialize_user_backup_ramv+0x10>)
   d6950:	4903      	ldr	r1, [pc, #12]	; (d6960 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6952:	1a12      	subs	r2, r2, r0
   d6954:	f001 be2a 	b.w	d85ac <memcpy>
   d6958:	2003f400 	.word	0x2003f400
   d695c:	2003f404 	.word	0x2003f404
   d6960:	000db170 	.word	0x000db170

000d6964 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6964:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6966:	2300      	movs	r3, #0
   d6968:	9300      	str	r3, [sp, #0]
   d696a:	461a      	mov	r2, r3
   d696c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6970:	f7ff fc84 	bl	d627c <system_ctrl_set_result>
}
   d6974:	b003      	add	sp, #12
   d6976:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d697c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d697c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d697e:	8843      	ldrh	r3, [r0, #2]
   d6980:	2b0a      	cmp	r3, #10
   d6982:	d008      	beq.n	d6996 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6984:	2b50      	cmp	r3, #80	; 0x50
   d6986:	d109      	bne.n	d699c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6988:	4b09      	ldr	r3, [pc, #36]	; (d69b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d698a:	681b      	ldr	r3, [r3, #0]
   d698c:	b13b      	cbz	r3, d699e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d698e:	b003      	add	sp, #12
   d6990:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6994:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6996:	f7ff ffe5 	bl	d6964 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d699a:	e006      	b.n	d69aa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d699c:	2300      	movs	r3, #0
   d699e:	9300      	str	r3, [sp, #0]
   d69a0:	461a      	mov	r2, r3
   d69a2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d69a6:	f7ff fc69 	bl	d627c <system_ctrl_set_result>
        break;
    }
}
   d69aa:	b003      	add	sp, #12
   d69ac:	f85d fb04 	ldr.w	pc, [sp], #4
   d69b0:	2003e40c 	.word	0x2003e40c

000d69b4 <module_user_init_hook>:

void module_user_init_hook()
{
   d69b4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d69b6:	4c10      	ldr	r4, [pc, #64]	; (d69f8 <module_user_init_hook+0x44>)
   d69b8:	4d10      	ldr	r5, [pc, #64]	; (d69fc <module_user_init_hook+0x48>)
   d69ba:	6823      	ldr	r3, [r4, #0]
   d69bc:	42ab      	cmp	r3, r5
   d69be:	4b10      	ldr	r3, [pc, #64]	; (d6a00 <module_user_init_hook+0x4c>)
   d69c0:	bf0c      	ite	eq
   d69c2:	2201      	moveq	r2, #1
   d69c4:	2200      	movne	r2, #0
   d69c6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d69c8:	d002      	beq.n	d69d0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d69ca:	f7ff ffbf 	bl	d694c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d69ce:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d69d0:	f7ff fada 	bl	d5f88 <HAL_RNG_GetRandomNumber>
   d69d4:	4604      	mov	r4, r0
    srand(seed);
   d69d6:	f001 fe17 	bl	d8608 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d69da:	4b0a      	ldr	r3, [pc, #40]	; (d6a04 <module_user_init_hook+0x50>)
   d69dc:	b113      	cbz	r3, d69e4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d69de:	4620      	mov	r0, r4
   d69e0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d69e4:	2100      	movs	r1, #0
   d69e6:	4807      	ldr	r0, [pc, #28]	; (d6a04 <module_user_init_hook+0x50>)
   d69e8:	f7ff fca2 	bl	d6330 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d69ec:	2100      	movs	r1, #0
   d69ee:	4806      	ldr	r0, [pc, #24]	; (d6a08 <module_user_init_hook+0x54>)
}
   d69f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d69f4:	f7ff bc38 	b.w	d6268 <system_ctrl_set_app_request_handler>
   d69f8:	2003f400 	.word	0x2003f400
   d69fc:	9a271c1e 	.word	0x9a271c1e
   d6a00:	2003e410 	.word	0x2003e410
   d6a04:	00000000 	.word	0x00000000
   d6a08:	000d697d 	.word	0x000d697d

000d6a0c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6a0c:	4770      	bx	lr

000d6a0e <_ZN9IPAddressD0Ev>:
   d6a0e:	b510      	push	{r4, lr}
   d6a10:	2118      	movs	r1, #24
   d6a12:	4604      	mov	r4, r0
   d6a14:	f000 ff5a 	bl	d78cc <_ZdlPvj>
   d6a18:	4620      	mov	r0, r4
   d6a1a:	bd10      	pop	{r4, pc}

000d6a1c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6a1e:	7d03      	ldrb	r3, [r0, #20]
   d6a20:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6a22:	b08d      	sub	sp, #52	; 0x34
   d6a24:	460e      	mov	r6, r1
   d6a26:	f100 0704 	add.w	r7, r0, #4
   d6a2a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6a2e:	d002      	beq.n	d6a36 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6a30:	f100 0508 	add.w	r5, r0, #8
   d6a34:	e018      	b.n	d6a68 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6a36:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6a38:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6a3a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6a3e:	232f      	movs	r3, #47	; 0x2f
   d6a40:	462a      	mov	r2, r5
   d6a42:	200a      	movs	r0, #10
   d6a44:	f7ff fae0 	bl	d6008 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6a48:	4628      	mov	r0, r5
   d6a4a:	f001 fe0d 	bl	d8668 <strlen>
   d6a4e:	6833      	ldr	r3, [r6, #0]
   d6a50:	4602      	mov	r2, r0
   d6a52:	68db      	ldr	r3, [r3, #12]
   d6a54:	4629      	mov	r1, r5
   d6a56:	4630      	mov	r0, r6
   d6a58:	4798      	blx	r3
   d6a5a:	e00f      	b.n	d6a7c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6a5c:	b124      	cbz	r4, d6a68 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6a5e:	212e      	movs	r1, #46	; 0x2e
   d6a60:	4630      	mov	r0, r6
   d6a62:	f7ff fead 	bl	d67c0 <_ZN5Print5printEc>
   d6a66:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6a68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6a6c:	220a      	movs	r2, #10
   d6a6e:	4630      	mov	r0, r6
   d6a70:	f7ff febf 	bl	d67f2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6a74:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6a76:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6a78:	d1f0      	bne.n	d6a5c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6a7a:	4620      	mov	r0, r4
    }
    return n;
}
   d6a7c:	b00d      	add	sp, #52	; 0x34
   d6a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6a80 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6a80:	b510      	push	{r4, lr}
   d6a82:	4b05      	ldr	r3, [pc, #20]	; (d6a98 <_ZN9IPAddressC1Ev+0x18>)
   d6a84:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6a86:	2211      	movs	r2, #17
   d6a88:	f840 3b04 	str.w	r3, [r0], #4
   d6a8c:	2100      	movs	r1, #0
   d6a8e:	f001 fdb3 	bl	d85f8 <memset>
{
    clear();
}
   d6a92:	4620      	mov	r0, r4
   d6a94:	bd10      	pop	{r4, pc}
   d6a96:	bf00      	nop
   d6a98:	000daca0 	.word	0x000daca0

000d6a9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6a9c:	4603      	mov	r3, r0
   d6a9e:	4a07      	ldr	r2, [pc, #28]	; (d6abc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6aa0:	b510      	push	{r4, lr}
   d6aa2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6aa6:	f101 0210 	add.w	r2, r1, #16
   d6aaa:	f851 4b04 	ldr.w	r4, [r1], #4
   d6aae:	f843 4b04 	str.w	r4, [r3], #4
   d6ab2:	4291      	cmp	r1, r2
   d6ab4:	d1f9      	bne.n	d6aaa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6ab6:	780a      	ldrb	r2, [r1, #0]
   d6ab8:	701a      	strb	r2, [r3, #0]
}
   d6aba:	bd10      	pop	{r4, pc}
   d6abc:	000daca0 	.word	0x000daca0

000d6ac0 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d6ac0:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d6ac2:	2b04      	cmp	r3, #4
   d6ac4:	d101      	bne.n	d6aca <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d6ac6:	6840      	ldr	r0, [r0, #4]
   d6ac8:	e008      	b.n	d6adc <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d6aca:	2b06      	cmp	r3, #6
   d6acc:	d10a      	bne.n	d6ae4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6ace:	6843      	ldr	r3, [r0, #4]
   d6ad0:	b953      	cbnz	r3, d6ae8 <_ZNK9IPAddresscvbEv+0x28>
   d6ad2:	6883      	ldr	r3, [r0, #8]
   d6ad4:	b943      	cbnz	r3, d6ae8 <_ZNK9IPAddresscvbEv+0x28>
   d6ad6:	68c3      	ldr	r3, [r0, #12]
   d6ad8:	b933      	cbnz	r3, d6ae8 <_ZNK9IPAddresscvbEv+0x28>
   d6ada:	6900      	ldr	r0, [r0, #16]
   d6adc:	3000      	adds	r0, #0
   d6ade:	bf18      	it	ne
   d6ae0:	2001      	movne	r0, #1
   d6ae2:	4770      	bx	lr
    } else {
        return false;
   d6ae4:	2000      	movs	r0, #0
   d6ae6:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6ae8:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d6aea:	4770      	bx	lr

000d6aec <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6aec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6aee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6af2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6af6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6afa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6afe:	2304      	movs	r3, #4
   d6b00:	6041      	str	r1, [r0, #4]
   d6b02:	7503      	strb	r3, [r0, #20]
   d6b04:	bd10      	pop	{r4, pc}

000d6b06 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6b06:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6b08:	780d      	ldrb	r5, [r1, #0]
   d6b0a:	788b      	ldrb	r3, [r1, #2]
   d6b0c:	784a      	ldrb	r2, [r1, #1]
   d6b0e:	78c9      	ldrb	r1, [r1, #3]
   d6b10:	9100      	str	r1, [sp, #0]
   d6b12:	4629      	mov	r1, r5
   d6b14:	f7ff ffea 	bl	d6aec <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6b18:	b003      	add	sp, #12
   d6b1a:	bd30      	pop	{r4, r5, pc}

000d6b1c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6b1c:	7441      	strb	r1, [r0, #17]
   d6b1e:	4770      	bx	lr

000d6b20 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6b20:	4770      	bx	lr

000d6b22 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6b22:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6b24:	2100      	movs	r1, #0
   d6b26:	7c00      	ldrb	r0, [r0, #16]
   d6b28:	f7ff fb66 	bl	d61f8 <HAL_USB_USART_Receive_Data>
}
   d6b2c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b30:	bf28      	it	cs
   d6b32:	f04f 30ff 	movcs.w	r0, #4294967295
   d6b36:	bd08      	pop	{r3, pc}

000d6b38 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6b38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6b3a:	2101      	movs	r1, #1
   d6b3c:	7c00      	ldrb	r0, [r0, #16]
   d6b3e:	f7ff fb5b 	bl	d61f8 <HAL_USB_USART_Receive_Data>
}
   d6b42:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b46:	bf28      	it	cs
   d6b48:	f04f 30ff 	movcs.w	r0, #4294967295
   d6b4c:	bd08      	pop	{r3, pc}

000d6b4e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6b4e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6b50:	7c00      	ldrb	r0, [r0, #16]
   d6b52:	f7ff fb49 	bl	d61e8 <HAL_USB_USART_Available_Data_For_Write>
}
   d6b56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b5a:	bd08      	pop	{r3, pc}

000d6b5c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6b5c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6b5e:	7c00      	ldrb	r0, [r0, #16]
   d6b60:	f7ff fb3a 	bl	d61d8 <HAL_USB_USART_Available_Data>
}
   d6b64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b68:	bd08      	pop	{r3, pc}

000d6b6a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6b6a:	7c00      	ldrb	r0, [r0, #16]
   d6b6c:	f7ff bb54 	b.w	d6218 <HAL_USB_USART_Flush_Data>

000d6b70 <_ZN9USBSerialD0Ev>:
   d6b70:	b510      	push	{r4, lr}
   d6b72:	2114      	movs	r1, #20
   d6b74:	4604      	mov	r4, r0
   d6b76:	f000 fea9 	bl	d78cc <_ZdlPvj>
   d6b7a:	4620      	mov	r0, r4
   d6b7c:	bd10      	pop	{r4, pc}

000d6b7e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6b7e:	b538      	push	{r3, r4, r5, lr}
   d6b80:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6b82:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6b84:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6b86:	f7ff fb2f 	bl	d61e8 <HAL_USB_USART_Available_Data_For_Write>
   d6b8a:	2800      	cmp	r0, #0
   d6b8c:	dc01      	bgt.n	d6b92 <_ZN9USBSerial5writeEh+0x14>
   d6b8e:	7c60      	ldrb	r0, [r4, #17]
   d6b90:	b128      	cbz	r0, d6b9e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6b92:	4629      	mov	r1, r5
   d6b94:	7c20      	ldrb	r0, [r4, #16]
   d6b96:	f7ff fb37 	bl	d6208 <HAL_USB_USART_Send_Data>
   d6b9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6b9e:	bd38      	pop	{r3, r4, r5, pc}

000d6ba0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6ba0:	b510      	push	{r4, lr}
   d6ba2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6ba4:	2300      	movs	r3, #0
   d6ba6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6ba8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6bac:	60a3      	str	r3, [r4, #8]
   d6bae:	4b05      	ldr	r3, [pc, #20]	; (d6bc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6bb0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6bb2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6bb4:	4608      	mov	r0, r1
{
  _serial = serial;
   d6bb6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6bb8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6bba:	4611      	mov	r1, r2
   d6bbc:	f7ff fb04 	bl	d61c8 <HAL_USB_USART_Init>
}
   d6bc0:	4620      	mov	r0, r4
   d6bc2:	bd10      	pop	{r4, pc}
   d6bc4:	000dacb4 	.word	0x000dacb4

000d6bc8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6bc8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6bca:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6bcc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6bce:	2100      	movs	r1, #0
   d6bd0:	f001 fd12 	bl	d85f8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6bd4:	4620      	mov	r0, r4
   d6bd6:	bd10      	pop	{r4, pc}

000d6bd8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6bd8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6bda:	4d0e      	ldr	r5, [pc, #56]	; (d6c14 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6bdc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6bde:	a801      	add	r0, sp, #4
   d6be0:	f7ff fff2 	bl	d6bc8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6be4:	6829      	ldr	r1, [r5, #0]
   d6be6:	f011 0401 	ands.w	r4, r1, #1
   d6bea:	d110      	bne.n	d6c0e <_Z16_fetch_usbserialv+0x36>
   d6bec:	4628      	mov	r0, r5
   d6bee:	f7fd fa65 	bl	d40bc <__cxa_guard_acquire>
   d6bf2:	b160      	cbz	r0, d6c0e <_Z16_fetch_usbserialv+0x36>
   d6bf4:	aa01      	add	r2, sp, #4
   d6bf6:	4621      	mov	r1, r4
   d6bf8:	4807      	ldr	r0, [pc, #28]	; (d6c18 <_Z16_fetch_usbserialv+0x40>)
   d6bfa:	f7ff ffd1 	bl	d6ba0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6bfe:	4628      	mov	r0, r5
   d6c00:	f7fd fa61 	bl	d40c6 <__cxa_guard_release>
   d6c04:	4a05      	ldr	r2, [pc, #20]	; (d6c1c <_Z16_fetch_usbserialv+0x44>)
   d6c06:	4906      	ldr	r1, [pc, #24]	; (d6c20 <_Z16_fetch_usbserialv+0x48>)
   d6c08:	4803      	ldr	r0, [pc, #12]	; (d6c18 <_Z16_fetch_usbserialv+0x40>)
   d6c0a:	f000 fe51 	bl	d78b0 <__aeabi_atexit>
	return _usbserial;
}
   d6c0e:	4802      	ldr	r0, [pc, #8]	; (d6c18 <_Z16_fetch_usbserialv+0x40>)
   d6c10:	b007      	add	sp, #28
   d6c12:	bd30      	pop	{r4, r5, pc}
   d6c14:	2003e414 	.word	0x2003e414
   d6c18:	2003e418 	.word	0x2003e418
   d6c1c:	2003e1c4 	.word	0x2003e1c4
   d6c20:	000d6b21 	.word	0x000d6b21

000d6c24 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6c24:	4770      	bx	lr

000d6c26 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6c26:	7441      	strb	r1, [r0, #17]
   d6c28:	4770      	bx	lr

000d6c2a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6c2a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6c2c:	7c00      	ldrb	r0, [r0, #16]
   d6c2e:	f7ff fa3b 	bl	d60a8 <HAL_USART_Available_Data_For_Write>
}
   d6c32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c36:	bd08      	pop	{r3, pc}

000d6c38 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6c38:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6c3a:	7c00      	ldrb	r0, [r0, #16]
   d6c3c:	f7ff fa0c 	bl	d6058 <HAL_USART_Available_Data>
}
   d6c40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c44:	bd08      	pop	{r3, pc}

000d6c46 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6c46:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6c48:	7c00      	ldrb	r0, [r0, #16]
   d6c4a:	f7ff fa15 	bl	d6078 <HAL_USART_Peek_Data>
}
   d6c4e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c52:	bf28      	it	cs
   d6c54:	f04f 30ff 	movcs.w	r0, #4294967295
   d6c58:	bd08      	pop	{r3, pc}

000d6c5a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6c5a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6c5c:	7c00      	ldrb	r0, [r0, #16]
   d6c5e:	f7ff fa03 	bl	d6068 <HAL_USART_Read_Data>
}
   d6c62:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c66:	bf28      	it	cs
   d6c68:	f04f 30ff 	movcs.w	r0, #4294967295
   d6c6c:	bd08      	pop	{r3, pc}

000d6c6e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6c6e:	7c00      	ldrb	r0, [r0, #16]
   d6c70:	f7ff ba0a 	b.w	d6088 <HAL_USART_Flush_Data>

000d6c74 <_ZN11USARTSerialD0Ev>:
   d6c74:	b510      	push	{r4, lr}
   d6c76:	2114      	movs	r1, #20
   d6c78:	4604      	mov	r4, r0
   d6c7a:	f000 fe27 	bl	d78cc <_ZdlPvj>
   d6c7e:	4620      	mov	r0, r4
   d6c80:	bd10      	pop	{r4, pc}

000d6c82 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6c82:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6c84:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6c86:	4604      	mov	r4, r0
   d6c88:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6c8a:	b925      	cbnz	r5, d6c96 <_ZN11USARTSerial5writeEh+0x14>
   d6c8c:	7c00      	ldrb	r0, [r0, #16]
   d6c8e:	f7ff fa0b 	bl	d60a8 <HAL_USART_Available_Data_For_Write>
   d6c92:	2800      	cmp	r0, #0
   d6c94:	dd05      	ble.n	d6ca2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6c96:	4631      	mov	r1, r6
   d6c98:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6c9e:	f7ff b9d3 	b.w	d6048 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6ca2:	4628      	mov	r0, r5
   d6ca4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6ca8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6ca8:	b510      	push	{r4, lr}
   d6caa:	4604      	mov	r4, r0
   d6cac:	4608      	mov	r0, r1
   d6cae:	4611      	mov	r1, r2
   d6cb0:	2200      	movs	r2, #0
   d6cb2:	6062      	str	r2, [r4, #4]
   d6cb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6cb8:	60a2      	str	r2, [r4, #8]
   d6cba:	4a05      	ldr	r2, [pc, #20]	; (d6cd0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6cbc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6cbe:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6cc0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6cc2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6cc4:	461a      	mov	r2, r3
   d6cc6:	f7ff f9b7 	bl	d6038 <HAL_USART_Init>
}
   d6cca:	4620      	mov	r0, r4
   d6ccc:	bd10      	pop	{r4, pc}
   d6cce:	bf00      	nop
   d6cd0:	000dace4 	.word	0x000dace4

000d6cd4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6cd4:	7c00      	ldrb	r0, [r0, #16]
   d6cd6:	f7ff b9df 	b.w	d6098 <HAL_USART_Is_Enabled>
	...

000d6cdc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6cdc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6cde:	4d0c      	ldr	r5, [pc, #48]	; (d6d10 <_Z22__fetch_global_Serial1v+0x34>)
   d6ce0:	6829      	ldr	r1, [r5, #0]
   d6ce2:	f011 0401 	ands.w	r4, r1, #1
   d6ce6:	d111      	bne.n	d6d0c <_Z22__fetch_global_Serial1v+0x30>
   d6ce8:	4628      	mov	r0, r5
   d6cea:	f7fd f9e7 	bl	d40bc <__cxa_guard_acquire>
   d6cee:	b168      	cbz	r0, d6d0c <_Z22__fetch_global_Serial1v+0x30>
   d6cf0:	4a08      	ldr	r2, [pc, #32]	; (d6d14 <_Z22__fetch_global_Serial1v+0x38>)
   d6cf2:	4b09      	ldr	r3, [pc, #36]	; (d6d18 <_Z22__fetch_global_Serial1v+0x3c>)
   d6cf4:	4809      	ldr	r0, [pc, #36]	; (d6d1c <_Z22__fetch_global_Serial1v+0x40>)
   d6cf6:	4621      	mov	r1, r4
   d6cf8:	f7ff ffd6 	bl	d6ca8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6cfc:	4628      	mov	r0, r5
   d6cfe:	f7fd f9e2 	bl	d40c6 <__cxa_guard_release>
   d6d02:	4a07      	ldr	r2, [pc, #28]	; (d6d20 <_Z22__fetch_global_Serial1v+0x44>)
   d6d04:	4907      	ldr	r1, [pc, #28]	; (d6d24 <_Z22__fetch_global_Serial1v+0x48>)
   d6d06:	4805      	ldr	r0, [pc, #20]	; (d6d1c <_Z22__fetch_global_Serial1v+0x40>)
   d6d08:	f000 fdd2 	bl	d78b0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6d0c:	4803      	ldr	r0, [pc, #12]	; (d6d1c <_Z22__fetch_global_Serial1v+0x40>)
   d6d0e:	bd38      	pop	{r3, r4, r5, pc}
   d6d10:	2003e4c4 	.word	0x2003e4c4
   d6d14:	2003e4c8 	.word	0x2003e4c8
   d6d18:	2003e440 	.word	0x2003e440
   d6d1c:	2003e42c 	.word	0x2003e42c
   d6d20:	2003e1c4 	.word	0x2003e1c4
   d6d24:	000d6c25 	.word	0x000d6c25

000d6d28 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6d28:	4770      	bx	lr

000d6d2a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d2c:	4606      	mov	r6, r0
   d6d2e:	4615      	mov	r5, r2
   d6d30:	460c      	mov	r4, r1
   d6d32:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6d34:	42bc      	cmp	r4, r7
   d6d36:	d006      	beq.n	d6d46 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6d38:	6833      	ldr	r3, [r6, #0]
   d6d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6d3e:	689b      	ldr	r3, [r3, #8]
   d6d40:	4630      	mov	r0, r6
   d6d42:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6d44:	e7f6      	b.n	d6d34 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6d46:	4628      	mov	r0, r5
   d6d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d4a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6d4a:	2200      	movs	r2, #0
   d6d4c:	7c00      	ldrb	r0, [r0, #16]
   d6d4e:	f7ff b9cb 	b.w	d60e8 <HAL_I2C_Write_Data>

000d6d52 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6d52:	2100      	movs	r1, #0
   d6d54:	7c00      	ldrb	r0, [r0, #16]
   d6d56:	f7ff b9cf 	b.w	d60f8 <HAL_I2C_Available_Data>

000d6d5a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6d5a:	2100      	movs	r1, #0
   d6d5c:	7c00      	ldrb	r0, [r0, #16]
   d6d5e:	f7ff b9d3 	b.w	d6108 <HAL_I2C_Read_Data>

000d6d62 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6d62:	2100      	movs	r1, #0
   d6d64:	7c00      	ldrb	r0, [r0, #16]
   d6d66:	f7ff b9d7 	b.w	d6118 <HAL_I2C_Peek_Data>

000d6d6a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6d6a:	2100      	movs	r1, #0
   d6d6c:	7c00      	ldrb	r0, [r0, #16]
   d6d6e:	f7ff b9db 	b.w	d6128 <HAL_I2C_Flush_Data>

000d6d72 <_ZN7TwoWireD0Ev>:
   d6d72:	b510      	push	{r4, lr}
   d6d74:	2114      	movs	r1, #20
   d6d76:	4604      	mov	r4, r0
   d6d78:	f000 fda8 	bl	d78cc <_ZdlPvj>
   d6d7c:	4620      	mov	r0, r4
   d6d7e:	bd10      	pop	{r4, pc}

000d6d80 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6d80:	b510      	push	{r4, lr}
   d6d82:	4604      	mov	r4, r0
   d6d84:	2300      	movs	r3, #0
   d6d86:	6063      	str	r3, [r4, #4]
   d6d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6d8c:	60a3      	str	r3, [r4, #8]
   d6d8e:	4b04      	ldr	r3, [pc, #16]	; (d6da0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6d90:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6d92:	4608      	mov	r0, r1
   d6d94:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6d96:	4611      	mov	r1, r2
   d6d98:	f7ff f9d6 	bl	d6148 <HAL_I2C_Init>
}
   d6d9c:	4620      	mov	r0, r4
   d6d9e:	bd10      	pop	{r4, pc}
   d6da0:	000dad14 	.word	0x000dad14

000d6da4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6da4:	2300      	movs	r3, #0
   d6da6:	461a      	mov	r2, r3
   d6da8:	4619      	mov	r1, r3
   d6daa:	7c00      	ldrb	r0, [r0, #16]
   d6dac:	f7ff b984 	b.w	d60b8 <HAL_I2C_Begin>

000d6db0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6db0:	b570      	push	{r4, r5, r6, lr}
   d6db2:	460c      	mov	r4, r1
   d6db4:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d6db6:	2514      	movs	r5, #20
   d6db8:	4606      	mov	r6, r0
   d6dba:	462a      	mov	r2, r5
   d6dbc:	2100      	movs	r1, #0
   d6dbe:	a801      	add	r0, sp, #4
   d6dc0:	f001 fc1a 	bl	d85f8 <memset>
   d6dc4:	7823      	ldrb	r3, [r4, #0]
   d6dc6:	f88d 3008 	strb.w	r3, [sp, #8]
   d6dca:	6863      	ldr	r3, [r4, #4]
   d6dcc:	9303      	str	r3, [sp, #12]
   d6dce:	68e3      	ldr	r3, [r4, #12]
   d6dd0:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d6dd2:	2200      	movs	r2, #0
   d6dd4:	7a23      	ldrb	r3, [r4, #8]
   d6dd6:	7c30      	ldrb	r0, [r6, #16]
   d6dd8:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6ddc:	a901      	add	r1, sp, #4
   d6dde:	9305      	str	r3, [sp, #20]
   d6de0:	f7ff f9ba 	bl	d6158 <HAL_I2C_Request_Data_Ex>
}
   d6de4:	b006      	add	sp, #24
   d6de6:	bd70      	pop	{r4, r5, r6, pc}

000d6de8 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d6de8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6dea:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6dec:	f88d 1000 	strb.w	r1, [sp]
   d6df0:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6df4:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6df6:	bf18      	it	ne
   d6df8:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6dfa:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d6dfc:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6dfe:	f88d 3008 	strb.w	r3, [sp, #8]
   d6e02:	f7ff ffd5 	bl	d6db0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6e06:	b005      	add	sp, #20
   d6e08:	f85d fb04 	ldr.w	pc, [sp], #4

000d6e0c <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d6e0c:	2301      	movs	r3, #1
   d6e0e:	f7ff bfeb 	b.w	d6de8 <_ZN7TwoWire11requestFromEhjh>

000d6e12 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6e12:	2200      	movs	r2, #0
   d6e14:	7c00      	ldrb	r0, [r0, #16]
   d6e16:	f7ff b957 	b.w	d60c8 <HAL_I2C_Begin_Transmission>

000d6e1a <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d6e1a:	b2c9      	uxtb	r1, r1
   d6e1c:	f7ff bff9 	b.w	d6e12 <_ZN7TwoWire17beginTransmissionEh>

000d6e20 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6e20:	2200      	movs	r2, #0
   d6e22:	7c00      	ldrb	r0, [r0, #16]
   d6e24:	f7ff b958 	b.w	d60d8 <HAL_I2C_End_Transmission>

000d6e28 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6e28:	2101      	movs	r1, #1
   d6e2a:	f7ff bff9 	b.w	d6e20 <_ZN7TwoWire15endTransmissionEh>

000d6e2e <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6e2e:	2100      	movs	r1, #0
   d6e30:	7c00      	ldrb	r0, [r0, #16]
   d6e32:	f7ff b981 	b.w	d6138 <HAL_I2C_Is_Enabled>

000d6e36 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6e36:	2200      	movs	r2, #0
   d6e38:	4611      	mov	r1, r2
   d6e3a:	6840      	ldr	r0, [r0, #4]
   d6e3c:	f7ff ba60 	b.w	d6300 <network_listening>

000d6e40 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6e40:	2200      	movs	r2, #0
   d6e42:	4611      	mov	r1, r2
   d6e44:	6840      	ldr	r0, [r0, #4]
   d6e46:	f7ff ba6b 	b.w	d6320 <network_get_listen_timeout>

000d6e4a <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6e4a:	2200      	movs	r2, #0
   d6e4c:	6840      	ldr	r0, [r0, #4]
   d6e4e:	f7ff ba5f 	b.w	d6310 <network_set_listen_timeout>

000d6e52 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6e52:	2200      	movs	r2, #0
   d6e54:	f081 0101 	eor.w	r1, r1, #1
   d6e58:	6840      	ldr	r0, [r0, #4]
   d6e5a:	f7ff ba49 	b.w	d62f0 <network_listen>

000d6e5e <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6e5e:	2300      	movs	r3, #0
   d6e60:	461a      	mov	r2, r3
   d6e62:	2101      	movs	r1, #1
   d6e64:	6840      	ldr	r0, [r0, #4]
   d6e66:	f7ff ba3b 	b.w	d62e0 <network_off>

000d6e6a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6e6a:	2300      	movs	r3, #0
   d6e6c:	461a      	mov	r2, r3
   d6e6e:	4619      	mov	r1, r3
   d6e70:	6840      	ldr	r0, [r0, #4]
   d6e72:	f7ff ba2d 	b.w	d62d0 <network_on>

000d6e76 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6e76:	2200      	movs	r2, #0
   d6e78:	4611      	mov	r1, r2
   d6e7a:	6840      	ldr	r0, [r0, #4]
   d6e7c:	f7ff ba20 	b.w	d62c0 <network_ready>

000d6e80 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6e80:	2200      	movs	r2, #0
   d6e82:	4611      	mov	r1, r2
   d6e84:	6840      	ldr	r0, [r0, #4]
   d6e86:	f7ff ba0b 	b.w	d62a0 <network_connecting>

000d6e8a <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e8a:	2200      	movs	r2, #0
   d6e8c:	2102      	movs	r1, #2
   d6e8e:	6840      	ldr	r0, [r0, #4]
   d6e90:	f7ff ba0e 	b.w	d62b0 <network_disconnect>

000d6e94 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6e94:	2300      	movs	r3, #0
   d6e96:	461a      	mov	r2, r3
   d6e98:	6840      	ldr	r0, [r0, #4]
   d6e9a:	f7ff b9f9 	b.w	d6290 <network_connect>

000d6e9e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6e9e:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6ea0:	4605      	mov	r5, r0
   d6ea2:	b188      	cbz	r0, d6ec8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6ea4:	6804      	ldr	r4, [r0, #0]
   d6ea6:	b14c      	cbz	r4, d6ebc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d6ea8:	68a3      	ldr	r3, [r4, #8]
   d6eaa:	b11b      	cbz	r3, d6eb4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6eac:	2203      	movs	r2, #3
   d6eae:	4621      	mov	r1, r4
   d6eb0:	4620      	mov	r0, r4
   d6eb2:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6eb4:	2110      	movs	r1, #16
   d6eb6:	4620      	mov	r0, r4
   d6eb8:	f000 fd08 	bl	d78cc <_ZdlPvj>
   d6ebc:	4628      	mov	r0, r5
   d6ebe:	2114      	movs	r1, #20
      }
   d6ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6ec4:	f000 bd02 	b.w	d78cc <_ZdlPvj>
   d6ec8:	bd38      	pop	{r3, r4, r5, pc}

000d6eca <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6eca:	b110      	cbz	r0, d6ed2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6ecc:	6803      	ldr	r3, [r0, #0]
   d6ece:	685b      	ldr	r3, [r3, #4]
   d6ed0:	4718      	bx	r3
   d6ed2:	4770      	bx	lr

000d6ed4 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6ed4:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6ed6:	6803      	ldr	r3, [r0, #0]
   d6ed8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6eda:	b1bb      	cbz	r3, d6f0c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6edc:	6858      	ldr	r0, [r3, #4]
   d6ede:	f7ff f86b 	bl	d5fb8 <os_thread_is_current>
   d6ee2:	b978      	cbnz	r0, d6f04 <_ZN6ThreadD1Ev+0x30>
   d6ee4:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6ee6:	7c5a      	ldrb	r2, [r3, #17]
   d6ee8:	b912      	cbnz	r2, d6ef0 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6eea:	6858      	ldr	r0, [r3, #4]
   d6eec:	f7ff f86c 	bl	d5fc8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6ef0:	6823      	ldr	r3, [r4, #0]
   d6ef2:	6858      	ldr	r0, [r3, #4]
   d6ef4:	f7ff f870 	bl	d5fd8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ef8:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6efa:	2300      	movs	r3, #0
   d6efc:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6efe:	b128      	cbz	r0, d6f0c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6f00:	f7ff ffcd 	bl	d6e9e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6f04:	6820      	ldr	r0, [r4, #0]
   d6f06:	b108      	cbz	r0, d6f0c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6f08:	f7ff ffc9 	bl	d6e9e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6f0c:	4620      	mov	r0, r4
   d6f0e:	bd10      	pop	{r4, pc}

000d6f10 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6f10:	b538      	push	{r3, r4, r5, lr}
   d6f12:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6f14:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6f18:	b108      	cbz	r0, d6f1e <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6f1a:	f7fd f8c2 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6f1e:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6f22:	b108      	cbz	r0, d6f28 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6f24:	f7ff f868 	bl	d5ff8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6f28:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6f2c:	b135      	cbz	r5, d6f3c <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f2e:	4628      	mov	r0, r5
   d6f30:	f7ff ffd0 	bl	d6ed4 <_ZN6ThreadD1Ev>
   d6f34:	2104      	movs	r1, #4
   d6f36:	4628      	mov	r0, r5
   d6f38:	f000 fcc8 	bl	d78cc <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6f3c:	6820      	ldr	r0, [r4, #0]
   d6f3e:	b108      	cbz	r0, d6f44 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6f40:	f7ff ffc3 	bl	d6eca <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6f44:	4620      	mov	r0, r4
   d6f46:	bd38      	pop	{r3, r4, r5, pc}

000d6f48 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6f48:	b510      	push	{r4, lr}
   d6f4a:	4b04      	ldr	r3, [pc, #16]	; (d6f5c <_ZN5spark9MeshClassD1Ev+0x14>)
   d6f4c:	4604      	mov	r4, r0
   d6f4e:	f840 3b08 	str.w	r3, [r0], #8
   d6f52:	f7ff ffdd 	bl	d6f10 <_ZN5spark11MeshPublishD1Ev>
   d6f56:	4620      	mov	r0, r4
   d6f58:	bd10      	pop	{r4, pc}
   d6f5a:	bf00      	nop
   d6f5c:	000dad3c 	.word	0x000dad3c

000d6f60 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6f60:	b538      	push	{r3, r4, r5, lr}
   d6f62:	4c0e      	ldr	r4, [pc, #56]	; (d6f9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6f64:	4b0e      	ldr	r3, [pc, #56]	; (d6fa0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6f66:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6f68:	2500      	movs	r5, #0
   d6f6a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6f6c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6f70:	6063      	str	r3, [r4, #4]
   d6f72:	60a5      	str	r5, [r4, #8]
   d6f74:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6f78:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6f7c:	f7ff f834 	bl	d5fe8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6f80:	4b08      	ldr	r3, [pc, #32]	; (d6fa4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6f82:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6f86:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6f8a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6f8c:	4620      	mov	r0, r4
   d6f8e:	4a06      	ldr	r2, [pc, #24]	; (d6fa8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6f90:	4906      	ldr	r1, [pc, #24]	; (d6fac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6f96:	f000 bc8b 	b.w	d78b0 <__aeabi_atexit>
   d6f9a:	bf00      	nop
   d6f9c:	2003e54c 	.word	0x2003e54c
   d6fa0:	000dae24 	.word	0x000dae24
   d6fa4:	000dad3c 	.word	0x000dad3c
   d6fa8:	2003e1c4 	.word	0x2003e1c4
   d6fac:	000d6f49 	.word	0x000d6f49

000d6fb0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6fb2:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6fb4:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6fb6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6fba:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6fbc:	2201      	movs	r2, #1
   d6fbe:	f04f 33ff 	mov.w	r3, #4294967295
   d6fc2:	4621      	mov	r1, r4
   d6fc4:	47a8      	blx	r5
}
   d6fc6:	b003      	add	sp, #12
   d6fc8:	bd30      	pop	{r4, r5, pc}

000d6fca <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6fca:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6fcc:	6803      	ldr	r3, [r0, #0]
   d6fce:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6fd0:	f04f 33ff 	mov.w	r3, #4294967295
   d6fd4:	46a4      	mov	ip, r4
}
   d6fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6fda:	4760      	bx	ip

000d6fdc <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6fde:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d6fe0:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6fe2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d6fe6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6fe8:	4621      	mov	r1, r4
   d6fea:	4613      	mov	r3, r2
   d6fec:	2201      	movs	r2, #1
   d6fee:	47a8      	blx	r5
}
   d6ff0:	b003      	add	sp, #12
   d6ff2:	bd30      	pop	{r4, r5, pc}

000d6ff4 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d6ff4:	4770      	bx	lr

000d6ff6 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6ff6:	b538      	push	{r3, r4, r5, lr}
   d6ff8:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6ffa:	681a      	ldr	r2, [r3, #0]
   d6ffc:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6ffe:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d7000:	da05      	bge.n	d700e <_ZN9TCPClient9connectedEv+0x18>
   d7002:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7006:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d700a:	429a      	cmp	r2, r3
   d700c:	d001      	beq.n	d7012 <_ZN9TCPClient9connectedEv+0x1c>
   d700e:	2501      	movs	r5, #1
   d7010:	e00b      	b.n	d702a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d7012:	6803      	ldr	r3, [r0, #0]
   d7014:	691b      	ldr	r3, [r3, #16]
   d7016:	4798      	blx	r3
   d7018:	2800      	cmp	r0, #0
   d701a:	bf14      	ite	ne
   d701c:	2501      	movne	r5, #1
   d701e:	2500      	moveq	r5, #0
        if (!rv) {
   d7020:	d103      	bne.n	d702a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d7022:	6823      	ldr	r3, [r4, #0]
   d7024:	4620      	mov	r0, r4
   d7026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7028:	4798      	blx	r3
        }
    }
    return rv;
}
   d702a:	4628      	mov	r0, r5
   d702c:	bd38      	pop	{r3, r4, r5, pc}

000d702e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d702e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d7030:	6818      	ldr	r0, [r3, #0]
}
   d7032:	43c0      	mvns	r0, r0
   d7034:	0fc0      	lsrs	r0, r0, #31
   d7036:	4770      	bx	lr

000d7038 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7038:	4770      	bx	lr

000d703a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d703a:	2000      	movs	r0, #0
   d703c:	4770      	bx	lr

000d703e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d703e:	b510      	push	{r4, lr}
   d7040:	2114      	movs	r1, #20
   d7042:	4604      	mov	r4, r0
   d7044:	f000 fc42 	bl	d78cc <_ZdlPvj>
   d7048:	4620      	mov	r0, r4
   d704a:	bd10      	pop	{r4, pc}

000d704c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d704c:	f7fd b827 	b.w	d409e <_ZdlPv>

000d7050 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7050:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7052:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d7054:	2200      	movs	r2, #0
   d7056:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d7058:	9202      	str	r2, [sp, #8]
   d705a:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d705c:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d705e:	4604      	mov	r4, r0
   d7060:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7062:	d008      	beq.n	d7076 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d7064:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7068:	fbb3 f1f2 	udiv	r1, r3, r2
   d706c:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d706e:	fb02 3111 	mls	r1, r2, r1, r3
   d7072:	434a      	muls	r2, r1
   d7074:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7076:	6960      	ldr	r0, [r4, #20]
   d7078:	2308      	movs	r3, #8
   d707a:	9300      	str	r3, [sp, #0]
   d707c:	f241 0205 	movw	r2, #4101	; 0x1005
   d7080:	446b      	add	r3, sp
   d7082:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7086:	6800      	ldr	r0, [r0, #0]
   d7088:	f7ff f86e 	bl	d6168 <sock_setsockopt>
    if (ret < 0) {
   d708c:	2800      	cmp	r0, #0
   d708e:	db08      	blt.n	d70a2 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d7090:	6960      	ldr	r0, [r4, #20]
   d7092:	2300      	movs	r3, #0
   d7094:	4632      	mov	r2, r6
   d7096:	4629      	mov	r1, r5
   d7098:	6800      	ldr	r0, [r0, #0]
   d709a:	f7ff f885 	bl	d61a8 <sock_send>
    if (ret < 0) {
   d709e:	2800      	cmp	r0, #0
   d70a0:	da04      	bge.n	d70ac <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d70a2:	f7ff f96d 	bl	d6380 <__errno>
   d70a6:	6803      	ldr	r3, [r0, #0]
   d70a8:	6063      	str	r3, [r4, #4]
   d70aa:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d70ac:	b004      	add	sp, #16
   d70ae:	bd70      	pop	{r4, r5, r6, pc}

000d70b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d70b0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d70b2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d70b4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d70b6:	689b      	ldr	r3, [r3, #8]
   d70b8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d70ba:	68a3      	ldr	r3, [r4, #8]
   d70bc:	3b01      	subs	r3, #1
   d70be:	60a3      	str	r3, [r4, #8]
   d70c0:	b92b      	cbnz	r3, d70ce <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d70c2:	6823      	ldr	r3, [r4, #0]
   d70c4:	4620      	mov	r0, r4
   d70c6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d70c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d70cc:	4718      	bx	r3
   d70ce:	bd10      	pop	{r4, pc}

000d70d0 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d70d0:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d70d2:	4604      	mov	r4, r0
   d70d4:	694d      	ldr	r5, [r1, #20]
   d70d6:	4b05      	ldr	r3, [pc, #20]	; (d70ec <_ZN9TCPClient8remoteIPEv+0x1c>)
   d70d8:	f844 3b04 	str.w	r3, [r4], #4
   d70dc:	358c      	adds	r5, #140	; 0x8c
   d70de:	4606      	mov	r6, r0
   d70e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d70e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d70e4:	682b      	ldr	r3, [r5, #0]
   d70e6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d70e8:	4630      	mov	r0, r6
   d70ea:	bd70      	pop	{r4, r5, r6, pc}
   d70ec:	000daca0 	.word	0x000daca0

000d70f0 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d70f0:	b510      	push	{r4, lr}
   d70f2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d70f4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d70f8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d70fc:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d70fe:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7100:	d005      	beq.n	d710e <_ZN9TCPClient4peekEv+0x1e>
   d7102:	6962      	ldr	r2, [r4, #20]
   d7104:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7108:	4413      	add	r3, r2
   d710a:	7918      	ldrb	r0, [r3, #4]
   d710c:	bd10      	pop	{r4, pc}
   d710e:	6803      	ldr	r3, [r0, #0]
   d7110:	691b      	ldr	r3, [r3, #16]
   d7112:	4798      	blx	r3
   d7114:	2800      	cmp	r0, #0
   d7116:	d1f4      	bne.n	d7102 <_ZN9TCPClient4peekEv+0x12>
   d7118:	f04f 30ff 	mov.w	r0, #4294967295
}
   d711c:	bd10      	pop	{r4, pc}

000d711e <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d711e:	b510      	push	{r4, lr}
   d7120:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7122:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7126:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d712a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d712c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d712e:	d008      	beq.n	d7142 <_ZN9TCPClient4readEv+0x24>
   d7130:	6962      	ldr	r2, [r4, #20]
   d7132:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7136:	1c59      	adds	r1, r3, #1
   d7138:	4413      	add	r3, r2
   d713a:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d713e:	7918      	ldrb	r0, [r3, #4]
   d7140:	bd10      	pop	{r4, pc}
   d7142:	6803      	ldr	r3, [r0, #0]
   d7144:	691b      	ldr	r3, [r3, #16]
   d7146:	4798      	blx	r3
   d7148:	2800      	cmp	r0, #0
   d714a:	d1f1      	bne.n	d7130 <_ZN9TCPClient4readEv+0x12>
   d714c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7150:	bd10      	pop	{r4, pc}

000d7152 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7154:	6943      	ldr	r3, [r0, #20]
   d7156:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d7158:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d715c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7160:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7162:	4605      	mov	r5, r0
   d7164:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d7166:	d106      	bne.n	d7176 <_ZN9TCPClient4readEPhj+0x24>
   d7168:	6803      	ldr	r3, [r0, #0]
   d716a:	691b      	ldr	r3, [r3, #16]
   d716c:	4798      	blx	r3
   d716e:	b910      	cbnz	r0, d7176 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d7170:	f04f 34ff 	mov.w	r4, #4294967295
   d7174:	e014      	b.n	d71a0 <_ZN9TCPClient4readEPhj+0x4e>
   d7176:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d7178:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d717c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7180:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7182:	42bc      	cmp	r4, r7
   d7184:	bf28      	it	cs
   d7186:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7188:	4419      	add	r1, r3
   d718a:	4622      	mov	r2, r4
   d718c:	3104      	adds	r1, #4
   d718e:	4630      	mov	r0, r6
   d7190:	f001 fa0c 	bl	d85ac <memcpy>
   d7194:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7196:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d719a:	4423      	add	r3, r4
   d719c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d71a0:	4620      	mov	r0, r4
   d71a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d71a4 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d71a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d71a8:	4698      	mov	r8, r3
    stop();
   d71aa:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d71ac:	b093      	sub	sp, #76	; 0x4c
    stop();
   d71ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d71b0:	460d      	mov	r5, r1
   d71b2:	4606      	mov	r6, r0
   d71b4:	4617      	mov	r7, r2
    stop();
   d71b6:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d71b8:	ab12      	add	r3, sp, #72	; 0x48
   d71ba:	2400      	movs	r4, #0
   d71bc:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d71c0:	4622      	mov	r2, r4
   d71c2:	4621      	mov	r1, r4
   d71c4:	4628      	mov	r0, r5
   d71c6:	f7fe fe4f 	bl	d5e68 <netdb_getaddrinfo>
   d71ca:	4681      	mov	r9, r0
   d71cc:	2800      	cmp	r0, #0
   d71ce:	d13d      	bne.n	d724c <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d71d0:	9b00      	ldr	r3, [sp, #0]
   d71d2:	2b00      	cmp	r3, #0
   d71d4:	d056      	beq.n	d7284 <_ZN9TCPClient7connectEPKctm+0xe0>
   d71d6:	695b      	ldr	r3, [r3, #20]
   d71d8:	2b00      	cmp	r3, #0
   d71da:	d053      	beq.n	d7284 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d71dc:	a806      	add	r0, sp, #24
   d71de:	f7ff fc4f 	bl	d6a80 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d71e2:	9b00      	ldr	r3, [sp, #0]
   d71e4:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d71e6:	7863      	ldrb	r3, [r4, #1]
   d71e8:	2b02      	cmp	r3, #2
   d71ea:	d101      	bne.n	d71f0 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d71ec:	1d21      	adds	r1, r4, #4
   d71ee:	e013      	b.n	d7218 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d71f0:	2b0a      	cmp	r3, #10
   d71f2:	d114      	bne.n	d721e <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d71f4:	2211      	movs	r2, #17
   d71f6:	4649      	mov	r1, r9
   d71f8:	a801      	add	r0, sp, #4
   d71fa:	f001 f9fd 	bl	d85f8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d71fe:	68a3      	ldr	r3, [r4, #8]
   d7200:	bb33      	cbnz	r3, d7250 <_ZN9TCPClient7connectEPKctm+0xac>
   d7202:	68e3      	ldr	r3, [r4, #12]
   d7204:	bb23      	cbnz	r3, d7250 <_ZN9TCPClient7connectEPKctm+0xac>
   d7206:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d720a:	6925      	ldr	r5, [r4, #16]
   d720c:	f7fe ff04 	bl	d6018 <inet_htonl>
   d7210:	4285      	cmp	r5, r0
   d7212:	d11d      	bne.n	d7250 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7214:	f104 0114 	add.w	r1, r4, #20
   d7218:	a806      	add	r0, sp, #24
   d721a:	f7ff fc74 	bl	d6b06 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d721e:	a806      	add	r0, sp, #24
   d7220:	f7ff fc4e 	bl	d6ac0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7224:	2800      	cmp	r0, #0
   d7226:	d02d      	beq.n	d7284 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d7228:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d722a:	ad07      	add	r5, sp, #28
   d722c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7230:	4b18      	ldr	r3, [pc, #96]	; (d7294 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d7232:	930c      	str	r3, [sp, #48]	; 0x30
   d7234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7236:	ac0d      	add	r4, sp, #52	; 0x34
   d7238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d723a:	682b      	ldr	r3, [r5, #0]
   d723c:	7023      	strb	r3, [r4, #0]
   d723e:	463a      	mov	r2, r7
   d7240:	4643      	mov	r3, r8
   d7242:	a90c      	add	r1, sp, #48	; 0x30
   d7244:	4630      	mov	r0, r6
   d7246:	47c8      	blx	r9
   d7248:	4681      	mov	r9, r0
   d724a:	e01b      	b.n	d7284 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d724c:	46a1      	mov	r9, r4
   d724e:	e019      	b.n	d7284 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7250:	f104 0308 	add.w	r3, r4, #8
   d7254:	ad01      	add	r5, sp, #4
   d7256:	3418      	adds	r4, #24
   d7258:	6818      	ldr	r0, [r3, #0]
   d725a:	6859      	ldr	r1, [r3, #4]
   d725c:	462a      	mov	r2, r5
   d725e:	c203      	stmia	r2!, {r0, r1}
   d7260:	3308      	adds	r3, #8
   d7262:	42a3      	cmp	r3, r4
   d7264:	4615      	mov	r5, r2
   d7266:	d1f7      	bne.n	d7258 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d7268:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d726a:	a901      	add	r1, sp, #4
   d726c:	a80c      	add	r0, sp, #48	; 0x30
   d726e:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7270:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7274:	f7ff fc12 	bl	d6a9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d727a:	ac07      	add	r4, sp, #28
   d727c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d727e:	682b      	ldr	r3, [r5, #0]
   d7280:	7023      	strb	r3, [r4, #0]
   d7282:	e7cc      	b.n	d721e <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d7284:	9800      	ldr	r0, [sp, #0]
   d7286:	f7fe fde7 	bl	d5e58 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d728a:	4648      	mov	r0, r9
   d728c:	b013      	add	sp, #76	; 0x4c
   d728e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7292:	bf00      	nop
   d7294:	000daca0 	.word	0x000daca0

000d7298 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d7298:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d729a:	2300      	movs	r3, #0
   d729c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d72a0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d72a2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d72a6:	4770      	bx	lr

000d72a8 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d72a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d72ac:	461e      	mov	r6, r3
    stop();
   d72ae:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d72b0:	460c      	mov	r4, r1
   d72b2:	b08a      	sub	sp, #40	; 0x28
    stop();
   d72b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d72b6:	4605      	mov	r5, r0
   d72b8:	4617      	mov	r7, r2
    stop();
   d72ba:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d72bc:	7d23      	ldrb	r3, [r4, #20]
   d72be:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d72c2:	2b04      	cmp	r3, #4
   d72c4:	bf0c      	ite	eq
   d72c6:	2002      	moveq	r0, #2
   d72c8:	200a      	movne	r0, #10
   d72ca:	2206      	movs	r2, #6
   d72cc:	2101      	movs	r1, #1
   d72ce:	f7fe ff73 	bl	d61b8 <sock_socket>
   d72d2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d72d6:	696b      	ldr	r3, [r5, #20]
   d72d8:	681b      	ldr	r3, [r3, #0]
   d72da:	2b00      	cmp	r3, #0
   d72dc:	db18      	blt.n	d7310 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d72de:	4628      	mov	r0, r5
   d72e0:	f7ff ffda 	bl	d7298 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d72e4:	b1d6      	cbz	r6, d731c <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d72e6:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d72e8:	a903      	add	r1, sp, #12
   d72ea:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d72ec:	9303      	str	r3, [sp, #12]
   d72ee:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d72f2:	f7fe fe41 	bl	d5f78 <if_index_to_name>
   d72f6:	b958      	cbnz	r0, d7310 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d72f8:	6968      	ldr	r0, [r5, #20]
   d72fa:	2306      	movs	r3, #6
   d72fc:	9300      	str	r3, [sp, #0]
   d72fe:	f241 020b 	movw	r2, #4107	; 0x100b
   d7302:	ab03      	add	r3, sp, #12
   d7304:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7308:	6800      	ldr	r0, [r0, #0]
   d730a:	f7fe ff2d 	bl	d6168 <sock_setsockopt>
   d730e:	b128      	cbz	r0, d731c <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7310:	682b      	ldr	r3, [r5, #0]
   d7312:	4628      	mov	r0, r5
   d7314:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7316:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7318:	4798      	blx	r3
   d731a:	e03b      	b.n	d7394 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d731c:	261c      	movs	r6, #28
   d731e:	4632      	mov	r2, r6
   d7320:	2100      	movs	r1, #0
   d7322:	a803      	add	r0, sp, #12
   d7324:	f001 f968 	bl	d85f8 <memset>
    if (ip.version() == 4) {
   d7328:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d732a:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d732e:	2b04      	cmp	r3, #4
   d7330:	d10c      	bne.n	d734c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7332:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d7334:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7336:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d733a:	f7fe fe75 	bl	d6028 <inet_htons>
   d733e:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7342:	6860      	ldr	r0, [r4, #4]
   d7344:	f7fe fe68 	bl	d6018 <inet_htonl>
   d7348:	9004      	str	r0, [sp, #16]
   d734a:	e013      	b.n	d7374 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d734c:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d734e:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7350:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d7354:	f7fe fe68 	bl	d6028 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7358:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d735a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d735e:	1d23      	adds	r3, r4, #4
   d7360:	f104 0714 	add.w	r7, r4, #20
   d7364:	6818      	ldr	r0, [r3, #0]
   d7366:	6859      	ldr	r1, [r3, #4]
   d7368:	4632      	mov	r2, r6
   d736a:	c203      	stmia	r2!, {r0, r1}
   d736c:	3308      	adds	r3, #8
   d736e:	42bb      	cmp	r3, r7
   d7370:	4616      	mov	r6, r2
   d7372:	d1f7      	bne.n	d7364 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7374:	696b      	ldr	r3, [r5, #20]
   d7376:	221c      	movs	r2, #28
   d7378:	a903      	add	r1, sp, #12
   d737a:	6818      	ldr	r0, [r3, #0]
   d737c:	f7fe ff04 	bl	d6188 <sock_connect>
   d7380:	2800      	cmp	r0, #0
   d7382:	d1c5      	bne.n	d7310 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d7384:	3404      	adds	r4, #4
   d7386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7388:	696d      	ldr	r5, [r5, #20]
   d738a:	358c      	adds	r5, #140	; 0x8c
   d738c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d738e:	6823      	ldr	r3, [r4, #0]
   d7390:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d7392:	2401      	movs	r4, #1
}
   d7394:	4620      	mov	r0, r4
   d7396:	b00a      	add	sp, #40	; 0x28
   d7398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d739c <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d739c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d739e:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d73a0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d73a2:	6818      	ldr	r0, [r3, #0]
   d73a4:	2800      	cmp	r0, #0
   d73a6:	db01      	blt.n	d73ac <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d73a8:	f7fe fee6 	bl	d6178 <sock_close>
   d73ac:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d73ae:	f04f 32ff 	mov.w	r2, #4294967295
   d73b2:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d73b4:	6960      	ldr	r0, [r4, #20]
   d73b6:	2211      	movs	r2, #17
   d73b8:	2100      	movs	r1, #0
   d73ba:	308c      	adds	r0, #140	; 0x8c
   d73bc:	f001 f91c 	bl	d85f8 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d73c0:	4620      	mov	r0, r4
}
   d73c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d73c6:	f7ff bf67 	b.w	d7298 <_ZN9TCPClient12flush_bufferEv>
	...

000d73cc <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d73cc:	b530      	push	{r4, r5, lr}
   d73ce:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d73d0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d73d4:	b08b      	sub	sp, #44	; 0x2c
   d73d6:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d73d8:	b11b      	cbz	r3, d73e2 <_ZN9TCPClient9availableEv+0x16>
   d73da:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d73de:	429a      	cmp	r2, r3
   d73e0:	d040      	beq.n	d7464 <_ZN9TCPClient9availableEv+0x98>
   d73e2:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d73e4:	6818      	ldr	r0, [r3, #0]
   d73e6:	2800      	cmp	r0, #0
   d73e8:	db3f      	blt.n	d746a <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d73ea:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d73ee:	2d7f      	cmp	r5, #127	; 0x7f
   d73f0:	d83b      	bhi.n	d746a <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d73f2:	1d19      	adds	r1, r3, #4
   d73f4:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d73f8:	2308      	movs	r3, #8
   d73fa:	4429      	add	r1, r5
   d73fc:	f7fe fecc 	bl	d6198 <sock_recv>
            if (ret > 0) {
   d7400:	2800      	cmp	r0, #0
   d7402:	dd0c      	ble.n	d741e <_ZN9TCPClient9availableEv+0x52>
   d7404:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7406:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d740a:	b90a      	cbnz	r2, d7410 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d740c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7410:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d7412:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7416:	4418      	add	r0, r3
   d7418:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d741c:	e025      	b.n	d746a <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d741e:	f7fe ffaf 	bl	d6380 <__errno>
   d7422:	6803      	ldr	r3, [r0, #0]
   d7424:	2b0b      	cmp	r3, #11
   d7426:	d020      	beq.n	d746a <_ZN9TCPClient9availableEv+0x9e>
   d7428:	f7fe ffaa 	bl	d6380 <__errno>
   d742c:	6803      	ldr	r3, [r0, #0]
   d742e:	2b0b      	cmp	r3, #11
   d7430:	d01b      	beq.n	d746a <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d7432:	2320      	movs	r3, #32
   d7434:	2500      	movs	r5, #0
   d7436:	9302      	str	r3, [sp, #8]
   d7438:	9503      	str	r5, [sp, #12]
   d743a:	f7fe ffa1 	bl	d6380 <__errno>
   d743e:	6803      	ldr	r3, [r0, #0]
   d7440:	9301      	str	r3, [sp, #4]
   d7442:	4b0e      	ldr	r3, [pc, #56]	; (d747c <_ZN9TCPClient9availableEv+0xb0>)
   d7444:	9300      	str	r3, [sp, #0]
   d7446:	aa02      	add	r2, sp, #8
   d7448:	462b      	mov	r3, r5
   d744a:	490d      	ldr	r1, [pc, #52]	; (d7480 <_ZN9TCPClient9availableEv+0xb4>)
   d744c:	2032      	movs	r0, #50	; 0x32
   d744e:	f7fe fef3 	bl	d6238 <log_message>
                    sock_close(d_->sock);
   d7452:	6963      	ldr	r3, [r4, #20]
   d7454:	6818      	ldr	r0, [r3, #0]
   d7456:	f7fe fe8f 	bl	d6178 <sock_close>
   d745a:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d745c:	f04f 32ff 	mov.w	r2, #4294967295
   d7460:	601a      	str	r2, [r3, #0]
   d7462:	e002      	b.n	d746a <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d7464:	f7ff ff18 	bl	d7298 <_ZN9TCPClient12flush_bufferEv>
   d7468:	e7bb      	b.n	d73e2 <_ZN9TCPClient9availableEv+0x16>
   d746a:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d746c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7470:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d7474:	1a18      	subs	r0, r3, r0
}
   d7476:	b00b      	add	sp, #44	; 0x2c
   d7478:	bd30      	pop	{r4, r5, pc}
   d747a:	bf00      	nop
   d747c:	000dadd7 	.word	0x000dadd7
   d7480:	000dadd0 	.word	0x000dadd0

000d7484 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7484:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7486:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7488:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d748a:	6001      	str	r1, [r0, #0]
   d748c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d7490:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d7494:	3088      	adds	r0, #136	; 0x88
   d7496:	f7ff faf3 	bl	d6a80 <_ZN9IPAddressC1Ev>
}
   d749a:	4620      	mov	r0, r4
   d749c:	bd10      	pop	{r4, pc}
	...

000d74a0 <_ZN9TCPClientC1Ei>:
   d74a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d74a4:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d74a6:	2300      	movs	r3, #0
   d74a8:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d74aa:	4a14      	ldr	r2, [pc, #80]	; (d74fc <_ZN9TCPClientC1Ei+0x5c>)
   d74ac:	6043      	str	r3, [r0, #4]
   d74ae:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d74b0:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d74b2:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d74b4:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d74b6:	20a0      	movs	r0, #160	; 0xa0
   d74b8:	460e      	mov	r6, r1
   d74ba:	f7fc fdee 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d74be:	4605      	mov	r5, r0
   d74c0:	b110      	cbz	r0, d74c8 <_ZN9TCPClientC1Ei+0x28>
   d74c2:	4631      	mov	r1, r6
   d74c4:	f7ff ffde 	bl	d7484 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d74c8:	2014      	movs	r0, #20
   d74ca:	f7fc fde6 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d74ce:	4603      	mov	r3, r0
   d74d0:	b128      	cbz	r0, d74de <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d74d2:	2201      	movs	r2, #1
   d74d4:	6042      	str	r2, [r0, #4]
   d74d6:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d74d8:	4a09      	ldr	r2, [pc, #36]	; (d7500 <_ZN9TCPClientC1Ei+0x60>)
   d74da:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d74dc:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d74de:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d74e0:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d74e2:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d74e4:	b128      	cbz	r0, d74f2 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d74e6:	6843      	ldr	r3, [r0, #4]
   d74e8:	3b01      	subs	r3, #1
   d74ea:	6043      	str	r3, [r0, #4]
   d74ec:	b90b      	cbnz	r3, d74f2 <_ZN9TCPClientC1Ei+0x52>
   d74ee:	f7ff fddf 	bl	d70b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d74f2:	4620      	mov	r0, r4
   d74f4:	f7ff fed0 	bl	d7298 <_ZN9TCPClient12flush_bufferEv>
}
   d74f8:	4620      	mov	r0, r4
   d74fa:	bd70      	pop	{r4, r5, r6, pc}
   d74fc:	000dad8c 	.word	0x000dad8c
   d7500:	000dad70 	.word	0x000dad70

000d7504 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7504:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7506:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d750a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d750c:	f7ff ffc8 	bl	d74a0 <_ZN9TCPClientC1Ei>
}
   d7510:	4620      	mov	r0, r4
   d7512:	bd10      	pop	{r4, pc}

000d7514 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d7514:	b510      	push	{r4, lr}
   d7516:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7518:	6800      	ldr	r0, [r0, #0]
   d751a:	2800      	cmp	r0, #0
   d751c:	db01      	blt.n	d7522 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d751e:	f7fe fe2b 	bl	d6178 <sock_close>
    }
}
   d7522:	4620      	mov	r0, r4
   d7524:	bd10      	pop	{r4, pc}

000d7526 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7526:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7528:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d752a:	4620      	mov	r0, r4
   d752c:	f7ff fff2 	bl	d7514 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d7530:	b124      	cbz	r4, d753c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7532:	4620      	mov	r0, r4
   d7534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7538:	f7fc bdb1 	b.w	d409e <_ZdlPv>
   d753c:	bd10      	pop	{r4, pc}

000d753e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d753e:	2200      	movs	r2, #0
   d7540:	4611      	mov	r1, r2
   d7542:	6840      	ldr	r0, [r0, #4]
   d7544:	f7fe bebc 	b.w	d62c0 <network_ready>

000d7548 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7548:	2200      	movs	r2, #0
   d754a:	4611      	mov	r1, r2
   d754c:	6840      	ldr	r0, [r0, #4]
   d754e:	f7fe bed7 	b.w	d6300 <network_listening>

000d7552 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7552:	2200      	movs	r2, #0
   d7554:	4611      	mov	r1, r2
   d7556:	6840      	ldr	r0, [r0, #4]
   d7558:	f7fe bee2 	b.w	d6320 <network_get_listen_timeout>

000d755c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d755c:	2200      	movs	r2, #0
   d755e:	6840      	ldr	r0, [r0, #4]
   d7560:	f7fe bed6 	b.w	d6310 <network_set_listen_timeout>

000d7564 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7564:	2200      	movs	r2, #0
   d7566:	f081 0101 	eor.w	r1, r1, #1
   d756a:	6840      	ldr	r0, [r0, #4]
   d756c:	f7fe bec0 	b.w	d62f0 <network_listen>

000d7570 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7570:	2300      	movs	r3, #0
   d7572:	461a      	mov	r2, r3
   d7574:	4619      	mov	r1, r3
   d7576:	6840      	ldr	r0, [r0, #4]
   d7578:	f7fe beb2 	b.w	d62e0 <network_off>

000d757c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d757c:	2300      	movs	r3, #0
   d757e:	461a      	mov	r2, r3
   d7580:	4619      	mov	r1, r3
   d7582:	6840      	ldr	r0, [r0, #4]
   d7584:	f7fe bea4 	b.w	d62d0 <network_on>

000d7588 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7588:	2200      	movs	r2, #0
   d758a:	4611      	mov	r1, r2
   d758c:	6840      	ldr	r0, [r0, #4]
   d758e:	f7fe be87 	b.w	d62a0 <network_connecting>

000d7592 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7592:	2200      	movs	r2, #0
   d7594:	2102      	movs	r1, #2
   d7596:	6840      	ldr	r0, [r0, #4]
   d7598:	f7fe be8a 	b.w	d62b0 <network_disconnect>

000d759c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d759c:	2300      	movs	r3, #0
   d759e:	461a      	mov	r2, r3
   d75a0:	6840      	ldr	r0, [r0, #4]
   d75a2:	f7fe be75 	b.w	d6290 <network_connect>
	...

000d75a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d75a8:	4b02      	ldr	r3, [pc, #8]	; (d75b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d75aa:	2204      	movs	r2, #4
   d75ac:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d75ae:	4a02      	ldr	r2, [pc, #8]	; (d75b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d75b0:	601a      	str	r2, [r3, #0]
   d75b2:	4770      	bx	lr
   d75b4:	2003e720 	.word	0x2003e720
   d75b8:	000dadf0 	.word	0x000dadf0

000d75bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d75bc:	2300      	movs	r3, #0
   d75be:	461a      	mov	r2, r3
   d75c0:	6840      	ldr	r0, [r0, #4]
   d75c2:	f7fe be65 	b.w	d6290 <network_connect>

000d75c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d75c6:	2200      	movs	r2, #0
   d75c8:	2102      	movs	r1, #2
   d75ca:	6840      	ldr	r0, [r0, #4]
   d75cc:	f7fe be70 	b.w	d62b0 <network_disconnect>

000d75d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d75d0:	2200      	movs	r2, #0
   d75d2:	4611      	mov	r1, r2
   d75d4:	6840      	ldr	r0, [r0, #4]
   d75d6:	f7fe be63 	b.w	d62a0 <network_connecting>

000d75da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d75da:	2200      	movs	r2, #0
   d75dc:	4611      	mov	r1, r2
   d75de:	6840      	ldr	r0, [r0, #4]
   d75e0:	f7fe be6e 	b.w	d62c0 <network_ready>

000d75e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d75e4:	2300      	movs	r3, #0
   d75e6:	461a      	mov	r2, r3
   d75e8:	4619      	mov	r1, r3
   d75ea:	6840      	ldr	r0, [r0, #4]
   d75ec:	f7fe be70 	b.w	d62d0 <network_on>

000d75f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d75f0:	2300      	movs	r3, #0
   d75f2:	461a      	mov	r2, r3
   d75f4:	4619      	mov	r1, r3
   d75f6:	6840      	ldr	r0, [r0, #4]
   d75f8:	f7fe be72 	b.w	d62e0 <network_off>

000d75fc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d75fc:	2200      	movs	r2, #0
   d75fe:	f081 0101 	eor.w	r1, r1, #1
   d7602:	6840      	ldr	r0, [r0, #4]
   d7604:	f7fe be74 	b.w	d62f0 <network_listen>

000d7608 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7608:	2200      	movs	r2, #0
   d760a:	6840      	ldr	r0, [r0, #4]
   d760c:	f7fe be80 	b.w	d6310 <network_set_listen_timeout>

000d7610 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7610:	2200      	movs	r2, #0
   d7612:	4611      	mov	r1, r2
   d7614:	6840      	ldr	r0, [r0, #4]
   d7616:	f7fe be83 	b.w	d6320 <network_get_listen_timeout>

000d761a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d761a:	2200      	movs	r2, #0
   d761c:	4611      	mov	r1, r2
   d761e:	6840      	ldr	r0, [r0, #4]
   d7620:	f7fe be6e 	b.w	d6300 <network_listening>

000d7624 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7628:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d762a:	b095      	sub	sp, #84	; 0x54
   d762c:	4616      	mov	r6, r2
   d762e:	460d      	mov	r5, r1
   d7630:	4607      	mov	r7, r0
    IPAddress addr;
   d7632:	f7ff fa25 	bl	d6a80 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7636:	4621      	mov	r1, r4
   d7638:	2220      	movs	r2, #32
   d763a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d763c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d763e:	f000 ffdb 	bl	d85f8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7642:	2340      	movs	r3, #64	; 0x40
   d7644:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7646:	4621      	mov	r1, r4
   d7648:	466b      	mov	r3, sp
   d764a:	aa0c      	add	r2, sp, #48	; 0x30
   d764c:	4630      	mov	r0, r6
   d764e:	f7fe fc0b 	bl	d5e68 <netdb_getaddrinfo>
    if (!r) {
   d7652:	4604      	mov	r4, r0
   d7654:	2800      	cmp	r0, #0
   d7656:	d144      	bne.n	d76e2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7658:	4602      	mov	r2, r0
   d765a:	2101      	movs	r1, #1
   d765c:	6868      	ldr	r0, [r5, #4]
   d765e:	f7fe fe2f 	bl	d62c0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7662:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7664:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7666:	4622      	mov	r2, r4
   d7668:	6868      	ldr	r0, [r5, #4]
   d766a:	f7fe fe29 	bl	d62c0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d766e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7670:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7672:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7674:	2e00      	cmp	r6, #0
   d7676:	d034      	beq.n	d76e2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7678:	2900      	cmp	r1, #0
   d767a:	d132      	bne.n	d76e2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d767c:	6873      	ldr	r3, [r6, #4]
   d767e:	2b02      	cmp	r3, #2
   d7680:	d002      	beq.n	d7688 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7682:	2b0a      	cmp	r3, #10
   d7684:	d009      	beq.n	d769a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7686:	e02a      	b.n	d76de <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7688:	f1b8 0f00 	cmp.w	r8, #0
   d768c:	d027      	beq.n	d76de <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d768e:	6971      	ldr	r1, [r6, #20]
   d7690:	4638      	mov	r0, r7
   d7692:	3104      	adds	r1, #4
   d7694:	f7ff fa37 	bl	d6b06 <_ZN9IPAddressaSEPKh>
   d7698:	e020      	b.n	d76dc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d769a:	f1b9 0f00 	cmp.w	r9, #0
   d769e:	d01e      	beq.n	d76de <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d76a0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d76a2:	2211      	movs	r2, #17
   d76a4:	a801      	add	r0, sp, #4
   d76a6:	f000 ffa7 	bl	d85f8 <memset>
                    a.v = 6;
   d76aa:	2306      	movs	r3, #6
   d76ac:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d76b0:	ad01      	add	r5, sp, #4
   d76b2:	f104 0308 	add.w	r3, r4, #8
   d76b6:	3418      	adds	r4, #24
   d76b8:	6818      	ldr	r0, [r3, #0]
   d76ba:	6859      	ldr	r1, [r3, #4]
   d76bc:	462a      	mov	r2, r5
   d76be:	c203      	stmia	r2!, {r0, r1}
   d76c0:	3308      	adds	r3, #8
   d76c2:	42a3      	cmp	r3, r4
   d76c4:	4615      	mov	r5, r2
   d76c6:	d1f7      	bne.n	d76b8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d76c8:	a901      	add	r1, sp, #4
   d76ca:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d76cc:	ad07      	add	r5, sp, #28
   d76ce:	f7ff f9e5 	bl	d6a9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d76d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d76d4:	1d3c      	adds	r4, r7, #4
   d76d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d76d8:	682b      	ldr	r3, [r5, #0]
   d76da:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d76dc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d76de:	69f6      	ldr	r6, [r6, #28]
   d76e0:	e7c8      	b.n	d7674 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d76e2:	9800      	ldr	r0, [sp, #0]
   d76e4:	f7fe fbb8 	bl	d5e58 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d76e8:	4638      	mov	r0, r7
   d76ea:	b015      	add	sp, #84	; 0x54
   d76ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d76f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d76f0:	4b02      	ldr	r3, [pc, #8]	; (d76fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d76f2:	4a03      	ldr	r2, [pc, #12]	; (d7700 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d76f4:	601a      	str	r2, [r3, #0]
   d76f6:	2200      	movs	r2, #0
   d76f8:	605a      	str	r2, [r3, #4]
   d76fa:	4770      	bx	lr
   d76fc:	2003e728 	.word	0x2003e728
   d7700:	000dae24 	.word	0x000dae24

000d7704 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7704:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7706:	4e18      	ldr	r6, [pc, #96]	; (d7768 <pinAvailable+0x64>)
   d7708:	6831      	ldr	r1, [r6, #0]
   d770a:	f011 0501 	ands.w	r5, r1, #1
   d770e:	4604      	mov	r4, r0
   d7710:	d10a      	bne.n	d7728 <pinAvailable+0x24>
   d7712:	4630      	mov	r0, r6
   d7714:	f7fc fcd2 	bl	d40bc <__cxa_guard_acquire>
   d7718:	b130      	cbz	r0, d7728 <pinAvailable+0x24>
   d771a:	4629      	mov	r1, r5
   d771c:	4813      	ldr	r0, [pc, #76]	; (d776c <pinAvailable+0x68>)
   d771e:	f7fe fe7b 	bl	d6418 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7722:	4630      	mov	r0, r6
   d7724:	f7fc fccf 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d7728:	4810      	ldr	r0, [pc, #64]	; (d776c <pinAvailable+0x68>)
   d772a:	f7fe ff97 	bl	d665c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d772e:	b128      	cbz	r0, d773c <pinAvailable+0x38>
   d7730:	f1a4 030b 	sub.w	r3, r4, #11
   d7734:	2b02      	cmp	r3, #2
   d7736:	d801      	bhi.n	d773c <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d7738:	2000      	movs	r0, #0
   d773a:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d773c:	f000 f892 	bl	d7864 <_Z19__fetch_global_Wirev>
   d7740:	f7ff fb75 	bl	d6e2e <_ZN7TwoWire9isEnabledEv>
   d7744:	b108      	cbz	r0, d774a <pinAvailable+0x46>
   d7746:	2c01      	cmp	r4, #1
   d7748:	d9f6      	bls.n	d7738 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d774a:	f7ff fac7 	bl	d6cdc <_Z22__fetch_global_Serial1v>
   d774e:	f7ff fac1 	bl	d6cd4 <_ZN11USARTSerial9isEnabledEv>
   d7752:	b118      	cbz	r0, d775c <pinAvailable+0x58>
   d7754:	f1a4 0309 	sub.w	r3, r4, #9
   d7758:	2b01      	cmp	r3, #1
   d775a:	d9ed      	bls.n	d7738 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d775c:	2c23      	cmp	r4, #35	; 0x23
   d775e:	bf8c      	ite	hi
   d7760:	2000      	movhi	r0, #0
   d7762:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7764:	bd70      	pop	{r4, r5, r6, pc}
   d7766:	bf00      	nop
   d7768:	2003e3b0 	.word	0x2003e3b0
   d776c:	2003e3b4 	.word	0x2003e3b4

000d7770 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7770:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7772:	b538      	push	{r3, r4, r5, lr}
   d7774:	4604      	mov	r4, r0
   d7776:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7778:	d80a      	bhi.n	d7790 <pinMode+0x20>
   d777a:	29ff      	cmp	r1, #255	; 0xff
   d777c:	d008      	beq.n	d7790 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d777e:	f7ff ffc1 	bl	d7704 <pinAvailable>
   d7782:	b128      	cbz	r0, d7790 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7784:	4629      	mov	r1, r5
   d7786:	4620      	mov	r0, r4
}
   d7788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d778c:	f7fe bb7c 	b.w	d5e88 <HAL_Pin_Mode>
   d7790:	bd38      	pop	{r3, r4, r5, pc}

000d7792 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7792:	b538      	push	{r3, r4, r5, lr}
   d7794:	4604      	mov	r4, r0
   d7796:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7798:	f7fe fb7e 	bl	d5e98 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d779c:	28ff      	cmp	r0, #255	; 0xff
   d779e:	d010      	beq.n	d77c2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d77a0:	2806      	cmp	r0, #6
   d77a2:	d804      	bhi.n	d77ae <digitalWrite+0x1c>
   d77a4:	234d      	movs	r3, #77	; 0x4d
   d77a6:	fa23 f000 	lsr.w	r0, r3, r0
   d77aa:	07c3      	lsls	r3, r0, #31
   d77ac:	d409      	bmi.n	d77c2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d77ae:	4620      	mov	r0, r4
   d77b0:	f7ff ffa8 	bl	d7704 <pinAvailable>
   d77b4:	b128      	cbz	r0, d77c2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d77b6:	4629      	mov	r1, r5
   d77b8:	4620      	mov	r0, r4
}
   d77ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d77be:	f7fe bb73 	b.w	d5ea8 <HAL_GPIO_Write>
   d77c2:	bd38      	pop	{r3, r4, r5, pc}

000d77c4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d77c4:	b510      	push	{r4, lr}
   d77c6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d77c8:	f7fe fb66 	bl	d5e98 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d77cc:	3804      	subs	r0, #4
   d77ce:	b2c0      	uxtb	r0, r0
   d77d0:	2801      	cmp	r0, #1
   d77d2:	d908      	bls.n	d77e6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d77d4:	4620      	mov	r0, r4
   d77d6:	f7ff ff95 	bl	d7704 <pinAvailable>
   d77da:	b120      	cbz	r0, d77e6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d77dc:	4620      	mov	r0, r4
}
   d77de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d77e2:	f7fe bb69 	b.w	d5eb8 <HAL_GPIO_Read>
}
   d77e6:	2000      	movs	r0, #0
   d77e8:	bd10      	pop	{r4, pc}

000d77ea <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d77ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d77ee:	4690      	mov	r8, r2
   d77f0:	461e      	mov	r6, r3
   d77f2:	2407      	movs	r4, #7
   d77f4:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d77f6:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d77f8:	f1b8 0f00 	cmp.w	r8, #0
   d77fc:	d104      	bne.n	d7808 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d77fe:	f1c4 0107 	rsb	r1, r4, #7
   d7802:	fa46 f101 	asr.w	r1, r6, r1
   d7806:	e001      	b.n	d780c <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d7808:	fa46 f104 	asr.w	r1, r6, r4
   d780c:	f001 0101 	and.w	r1, r1, #1
   d7810:	4638      	mov	r0, r7
   d7812:	f7ff ffbe 	bl	d7792 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d7816:	2101      	movs	r1, #1
   d7818:	4628      	mov	r0, r5
   d781a:	f7ff ffba 	bl	d7792 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d781e:	2100      	movs	r1, #0
   d7820:	4628      	mov	r0, r5
   d7822:	f7ff ffb6 	bl	d7792 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d7826:	f114 34ff 	adds.w	r4, r4, #4294967295
   d782a:	d2e5      	bcs.n	d77f8 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d782c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7830 <_Z17acquireWireBufferv>:
   d7830:	b570      	push	{r4, r5, r6, lr}
   d7832:	4604      	mov	r4, r0
   d7834:	2514      	movs	r5, #20
   d7836:	462a      	mov	r2, r5
   d7838:	4e09      	ldr	r6, [pc, #36]	; (d7860 <_Z17acquireWireBufferv+0x30>)
   d783a:	2100      	movs	r1, #0
   d783c:	f000 fedc 	bl	d85f8 <memset>
   d7840:	8025      	strh	r5, [r4, #0]
   d7842:	2520      	movs	r5, #32
   d7844:	4631      	mov	r1, r6
   d7846:	60a5      	str	r5, [r4, #8]
   d7848:	6125      	str	r5, [r4, #16]
   d784a:	4628      	mov	r0, r5
   d784c:	f000 f840 	bl	d78d0 <_ZnajRKSt9nothrow_t>
   d7850:	4631      	mov	r1, r6
   d7852:	6060      	str	r0, [r4, #4]
   d7854:	4628      	mov	r0, r5
   d7856:	f000 f83b 	bl	d78d0 <_ZnajRKSt9nothrow_t>
   d785a:	60e0      	str	r0, [r4, #12]
   d785c:	4620      	mov	r0, r4
   d785e:	bd70      	pop	{r4, r5, r6, pc}
   d7860:	000dae50 	.word	0x000dae50

000d7864 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7864:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7866:	4d0e      	ldr	r5, [pc, #56]	; (d78a0 <_Z19__fetch_global_Wirev+0x3c>)
   d7868:	6829      	ldr	r1, [r5, #0]
   d786a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d786e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7870:	d113      	bne.n	d789a <_Z19__fetch_global_Wirev+0x36>
   d7872:	4628      	mov	r0, r5
   d7874:	f7fc fc22 	bl	d40bc <__cxa_guard_acquire>
   d7878:	b178      	cbz	r0, d789a <_Z19__fetch_global_Wirev+0x36>
   d787a:	a801      	add	r0, sp, #4
   d787c:	f7ff ffd8 	bl	d7830 <_Z17acquireWireBufferv>
   d7880:	aa01      	add	r2, sp, #4
   d7882:	4621      	mov	r1, r4
   d7884:	4807      	ldr	r0, [pc, #28]	; (d78a4 <_Z19__fetch_global_Wirev+0x40>)
   d7886:	f7ff fa7b 	bl	d6d80 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d788a:	4628      	mov	r0, r5
   d788c:	f7fc fc1b 	bl	d40c6 <__cxa_guard_release>
   d7890:	4a05      	ldr	r2, [pc, #20]	; (d78a8 <_Z19__fetch_global_Wirev+0x44>)
   d7892:	4906      	ldr	r1, [pc, #24]	; (d78ac <_Z19__fetch_global_Wirev+0x48>)
   d7894:	4803      	ldr	r0, [pc, #12]	; (d78a4 <_Z19__fetch_global_Wirev+0x40>)
   d7896:	f000 f80b 	bl	d78b0 <__aeabi_atexit>
	return wire;
}
   d789a:	4802      	ldr	r0, [pc, #8]	; (d78a4 <_Z19__fetch_global_Wirev+0x40>)
   d789c:	b007      	add	sp, #28
   d789e:	bd30      	pop	{r4, r5, pc}
   d78a0:	2003e734 	.word	0x2003e734
   d78a4:	2003e738 	.word	0x2003e738
   d78a8:	2003e1c4 	.word	0x2003e1c4
   d78ac:	000d6d29 	.word	0x000d6d29

000d78b0 <__aeabi_atexit>:
   d78b0:	460b      	mov	r3, r1
   d78b2:	4601      	mov	r1, r0
   d78b4:	4618      	mov	r0, r3
   d78b6:	f000 be53 	b.w	d8560 <__cxa_atexit>
	...

000d78bc <_ZSt15get_new_handlerv>:
   d78bc:	4b02      	ldr	r3, [pc, #8]	; (d78c8 <_ZSt15get_new_handlerv+0xc>)
   d78be:	6818      	ldr	r0, [r3, #0]
   d78c0:	f3bf 8f5f 	dmb	sy
   d78c4:	4770      	bx	lr
   d78c6:	bf00      	nop
   d78c8:	2003e74c 	.word	0x2003e74c

000d78cc <_ZdlPvj>:
   d78cc:	f7fc bbe7 	b.w	d409e <_ZdlPv>

000d78d0 <_ZnajRKSt9nothrow_t>:
   d78d0:	f000 b800 	b.w	d78d4 <_ZnwjRKSt9nothrow_t>

000d78d4 <_ZnwjRKSt9nothrow_t>:
   d78d4:	b510      	push	{r4, lr}
   d78d6:	2800      	cmp	r0, #0
   d78d8:	bf14      	ite	ne
   d78da:	4604      	movne	r4, r0
   d78dc:	2401      	moveq	r4, #1
   d78de:	4620      	mov	r0, r4
   d78e0:	f7fe fd2e 	bl	d6340 <malloc>
   d78e4:	b920      	cbnz	r0, d78f0 <_ZnwjRKSt9nothrow_t+0x1c>
   d78e6:	f7ff ffe9 	bl	d78bc <_ZSt15get_new_handlerv>
   d78ea:	b108      	cbz	r0, d78f0 <_ZnwjRKSt9nothrow_t+0x1c>
   d78ec:	4780      	blx	r0
   d78ee:	e7f6      	b.n	d78de <_ZnwjRKSt9nothrow_t+0xa>
   d78f0:	bd10      	pop	{r4, pc}
	...

000d78f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d78f4:	4b18      	ldr	r3, [pc, #96]	; (d7958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d78f6:	681a      	ldr	r2, [r3, #0]
   d78f8:	07d1      	lsls	r1, r2, #31
   d78fa:	bf5c      	itt	pl
   d78fc:	2201      	movpl	r2, #1
   d78fe:	601a      	strpl	r2, [r3, #0]
   d7900:	4b16      	ldr	r3, [pc, #88]	; (d795c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7902:	681a      	ldr	r2, [r3, #0]
   d7904:	07d2      	lsls	r2, r2, #31
   d7906:	bf5c      	itt	pl
   d7908:	2201      	movpl	r2, #1
   d790a:	601a      	strpl	r2, [r3, #0]
   d790c:	4b14      	ldr	r3, [pc, #80]	; (d7960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d790e:	681a      	ldr	r2, [r3, #0]
   d7910:	07d0      	lsls	r0, r2, #31
   d7912:	bf5c      	itt	pl
   d7914:	2201      	movpl	r2, #1
   d7916:	601a      	strpl	r2, [r3, #0]
   d7918:	4b12      	ldr	r3, [pc, #72]	; (d7964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d791a:	681a      	ldr	r2, [r3, #0]
   d791c:	07d1      	lsls	r1, r2, #31
   d791e:	bf5c      	itt	pl
   d7920:	2201      	movpl	r2, #1
   d7922:	601a      	strpl	r2, [r3, #0]
   d7924:	4b10      	ldr	r3, [pc, #64]	; (d7968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7926:	681a      	ldr	r2, [r3, #0]
   d7928:	07d2      	lsls	r2, r2, #31
   d792a:	bf5c      	itt	pl
   d792c:	2201      	movpl	r2, #1
   d792e:	601a      	strpl	r2, [r3, #0]
   d7930:	4b0e      	ldr	r3, [pc, #56]	; (d796c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7932:	681a      	ldr	r2, [r3, #0]
   d7934:	07d0      	lsls	r0, r2, #31
   d7936:	bf5c      	itt	pl
   d7938:	2201      	movpl	r2, #1
   d793a:	601a      	strpl	r2, [r3, #0]
   d793c:	4b0c      	ldr	r3, [pc, #48]	; (d7970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d793e:	681a      	ldr	r2, [r3, #0]
   d7940:	07d1      	lsls	r1, r2, #31
   d7942:	bf5c      	itt	pl
   d7944:	2201      	movpl	r2, #1
   d7946:	601a      	strpl	r2, [r3, #0]
   d7948:	4b0a      	ldr	r3, [pc, #40]	; (d7974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d794a:	681a      	ldr	r2, [r3, #0]
   d794c:	07d2      	lsls	r2, r2, #31
   d794e:	bf5c      	itt	pl
   d7950:	2201      	movpl	r2, #1
   d7952:	601a      	strpl	r2, [r3, #0]
   d7954:	4770      	bx	lr
   d7956:	bf00      	nop
   d7958:	2003e76c 	.word	0x2003e76c
   d795c:	2003e768 	.word	0x2003e768
   d7960:	2003e764 	.word	0x2003e764
   d7964:	2003e760 	.word	0x2003e760
   d7968:	2003e75c 	.word	0x2003e75c
   d796c:	2003e758 	.word	0x2003e758
   d7970:	2003e754 	.word	0x2003e754
   d7974:	2003e750 	.word	0x2003e750

000d7978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7978:	4b24      	ldr	r3, [pc, #144]	; (d7a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d797a:	681a      	ldr	r2, [r3, #0]
   d797c:	07d0      	lsls	r0, r2, #31
   d797e:	bf5c      	itt	pl
   d7980:	2201      	movpl	r2, #1
   d7982:	601a      	strpl	r2, [r3, #0]
   d7984:	4b22      	ldr	r3, [pc, #136]	; (d7a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7986:	681a      	ldr	r2, [r3, #0]
   d7988:	07d1      	lsls	r1, r2, #31
   d798a:	bf5c      	itt	pl
   d798c:	2201      	movpl	r2, #1
   d798e:	601a      	strpl	r2, [r3, #0]
   d7990:	4b20      	ldr	r3, [pc, #128]	; (d7a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7992:	681a      	ldr	r2, [r3, #0]
   d7994:	07d2      	lsls	r2, r2, #31
   d7996:	bf5c      	itt	pl
   d7998:	2201      	movpl	r2, #1
   d799a:	601a      	strpl	r2, [r3, #0]
   d799c:	4b1e      	ldr	r3, [pc, #120]	; (d7a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d799e:	681a      	ldr	r2, [r3, #0]
   d79a0:	07d0      	lsls	r0, r2, #31
   d79a2:	bf5c      	itt	pl
   d79a4:	2201      	movpl	r2, #1
   d79a6:	601a      	strpl	r2, [r3, #0]
   d79a8:	4b1c      	ldr	r3, [pc, #112]	; (d7a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d79aa:	681a      	ldr	r2, [r3, #0]
   d79ac:	07d1      	lsls	r1, r2, #31
   d79ae:	bf5c      	itt	pl
   d79b0:	2201      	movpl	r2, #1
   d79b2:	601a      	strpl	r2, [r3, #0]
   d79b4:	4b1a      	ldr	r3, [pc, #104]	; (d7a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d79b6:	681a      	ldr	r2, [r3, #0]
   d79b8:	07d2      	lsls	r2, r2, #31
   d79ba:	bf5c      	itt	pl
   d79bc:	2201      	movpl	r2, #1
   d79be:	601a      	strpl	r2, [r3, #0]
   d79c0:	4b18      	ldr	r3, [pc, #96]	; (d7a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d79c2:	681a      	ldr	r2, [r3, #0]
   d79c4:	07d0      	lsls	r0, r2, #31
   d79c6:	bf5c      	itt	pl
   d79c8:	2201      	movpl	r2, #1
   d79ca:	601a      	strpl	r2, [r3, #0]
   d79cc:	4b16      	ldr	r3, [pc, #88]	; (d7a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d79ce:	681a      	ldr	r2, [r3, #0]
   d79d0:	07d1      	lsls	r1, r2, #31
   d79d2:	bf5c      	itt	pl
   d79d4:	2201      	movpl	r2, #1
   d79d6:	601a      	strpl	r2, [r3, #0]
   d79d8:	4b14      	ldr	r3, [pc, #80]	; (d7a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d79da:	681a      	ldr	r2, [r3, #0]
   d79dc:	07d2      	lsls	r2, r2, #31
   d79de:	bf5c      	itt	pl
   d79e0:	2201      	movpl	r2, #1
   d79e2:	601a      	strpl	r2, [r3, #0]
   d79e4:	4b12      	ldr	r3, [pc, #72]	; (d7a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d79e6:	681a      	ldr	r2, [r3, #0]
   d79e8:	07d0      	lsls	r0, r2, #31
   d79ea:	bf5c      	itt	pl
   d79ec:	2201      	movpl	r2, #1
   d79ee:	601a      	strpl	r2, [r3, #0]
   d79f0:	4b10      	ldr	r3, [pc, #64]	; (d7a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d79f2:	681a      	ldr	r2, [r3, #0]
   d79f4:	07d1      	lsls	r1, r2, #31
   d79f6:	bf5c      	itt	pl
   d79f8:	2201      	movpl	r2, #1
   d79fa:	601a      	strpl	r2, [r3, #0]
   d79fc:	4b0e      	ldr	r3, [pc, #56]	; (d7a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d79fe:	681a      	ldr	r2, [r3, #0]
   d7a00:	07d2      	lsls	r2, r2, #31
   d7a02:	bf5c      	itt	pl
   d7a04:	2201      	movpl	r2, #1
   d7a06:	601a      	strpl	r2, [r3, #0]
   d7a08:	4770      	bx	lr
   d7a0a:	bf00      	nop
   d7a0c:	2003e79c 	.word	0x2003e79c
   d7a10:	2003e798 	.word	0x2003e798
   d7a14:	2003e794 	.word	0x2003e794
   d7a18:	2003e790 	.word	0x2003e790
   d7a1c:	2003e78c 	.word	0x2003e78c
   d7a20:	2003e788 	.word	0x2003e788
   d7a24:	2003e784 	.word	0x2003e784
   d7a28:	2003e780 	.word	0x2003e780
   d7a2c:	2003e77c 	.word	0x2003e77c
   d7a30:	2003e778 	.word	0x2003e778
   d7a34:	2003e774 	.word	0x2003e774
   d7a38:	2003e770 	.word	0x2003e770

000d7a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7a3c:	4b24      	ldr	r3, [pc, #144]	; (d7ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7a3e:	681a      	ldr	r2, [r3, #0]
   d7a40:	07d0      	lsls	r0, r2, #31
   d7a42:	bf5c      	itt	pl
   d7a44:	2201      	movpl	r2, #1
   d7a46:	601a      	strpl	r2, [r3, #0]
   d7a48:	4b22      	ldr	r3, [pc, #136]	; (d7ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7a4a:	681a      	ldr	r2, [r3, #0]
   d7a4c:	07d1      	lsls	r1, r2, #31
   d7a4e:	bf5c      	itt	pl
   d7a50:	2201      	movpl	r2, #1
   d7a52:	601a      	strpl	r2, [r3, #0]
   d7a54:	4b20      	ldr	r3, [pc, #128]	; (d7ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7a56:	681a      	ldr	r2, [r3, #0]
   d7a58:	07d2      	lsls	r2, r2, #31
   d7a5a:	bf5c      	itt	pl
   d7a5c:	2201      	movpl	r2, #1
   d7a5e:	601a      	strpl	r2, [r3, #0]
   d7a60:	4b1e      	ldr	r3, [pc, #120]	; (d7adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7a62:	681a      	ldr	r2, [r3, #0]
   d7a64:	07d0      	lsls	r0, r2, #31
   d7a66:	bf5c      	itt	pl
   d7a68:	2201      	movpl	r2, #1
   d7a6a:	601a      	strpl	r2, [r3, #0]
   d7a6c:	4b1c      	ldr	r3, [pc, #112]	; (d7ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7a6e:	681a      	ldr	r2, [r3, #0]
   d7a70:	07d1      	lsls	r1, r2, #31
   d7a72:	bf5c      	itt	pl
   d7a74:	2201      	movpl	r2, #1
   d7a76:	601a      	strpl	r2, [r3, #0]
   d7a78:	4b1a      	ldr	r3, [pc, #104]	; (d7ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7a7a:	681a      	ldr	r2, [r3, #0]
   d7a7c:	07d2      	lsls	r2, r2, #31
   d7a7e:	bf5c      	itt	pl
   d7a80:	2201      	movpl	r2, #1
   d7a82:	601a      	strpl	r2, [r3, #0]
   d7a84:	4b18      	ldr	r3, [pc, #96]	; (d7ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7a86:	681a      	ldr	r2, [r3, #0]
   d7a88:	07d0      	lsls	r0, r2, #31
   d7a8a:	bf5c      	itt	pl
   d7a8c:	2201      	movpl	r2, #1
   d7a8e:	601a      	strpl	r2, [r3, #0]
   d7a90:	4b16      	ldr	r3, [pc, #88]	; (d7aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7a92:	681a      	ldr	r2, [r3, #0]
   d7a94:	07d1      	lsls	r1, r2, #31
   d7a96:	bf5c      	itt	pl
   d7a98:	2201      	movpl	r2, #1
   d7a9a:	601a      	strpl	r2, [r3, #0]
   d7a9c:	4b14      	ldr	r3, [pc, #80]	; (d7af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7a9e:	681a      	ldr	r2, [r3, #0]
   d7aa0:	07d2      	lsls	r2, r2, #31
   d7aa2:	bf5c      	itt	pl
   d7aa4:	2201      	movpl	r2, #1
   d7aa6:	601a      	strpl	r2, [r3, #0]
   d7aa8:	4b12      	ldr	r3, [pc, #72]	; (d7af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7aaa:	681a      	ldr	r2, [r3, #0]
   d7aac:	07d0      	lsls	r0, r2, #31
   d7aae:	bf5c      	itt	pl
   d7ab0:	2201      	movpl	r2, #1
   d7ab2:	601a      	strpl	r2, [r3, #0]
   d7ab4:	4b10      	ldr	r3, [pc, #64]	; (d7af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7ab6:	681a      	ldr	r2, [r3, #0]
   d7ab8:	07d1      	lsls	r1, r2, #31
   d7aba:	bf5c      	itt	pl
   d7abc:	2201      	movpl	r2, #1
   d7abe:	601a      	strpl	r2, [r3, #0]
   d7ac0:	4b0e      	ldr	r3, [pc, #56]	; (d7afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7ac2:	681a      	ldr	r2, [r3, #0]
   d7ac4:	07d2      	lsls	r2, r2, #31
   d7ac6:	bf5c      	itt	pl
   d7ac8:	2201      	movpl	r2, #1
   d7aca:	601a      	strpl	r2, [r3, #0]
   d7acc:	4770      	bx	lr
   d7ace:	bf00      	nop
   d7ad0:	2003e7cc 	.word	0x2003e7cc
   d7ad4:	2003e7c8 	.word	0x2003e7c8
   d7ad8:	2003e7c4 	.word	0x2003e7c4
   d7adc:	2003e7c0 	.word	0x2003e7c0
   d7ae0:	2003e7bc 	.word	0x2003e7bc
   d7ae4:	2003e7b8 	.word	0x2003e7b8
   d7ae8:	2003e7b4 	.word	0x2003e7b4
   d7aec:	2003e7b0 	.word	0x2003e7b0
   d7af0:	2003e7ac 	.word	0x2003e7ac
   d7af4:	2003e7a8 	.word	0x2003e7a8
   d7af8:	2003e7a4 	.word	0x2003e7a4
   d7afc:	2003e7a0 	.word	0x2003e7a0

000d7b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7b00:	4b18      	ldr	r3, [pc, #96]	; (d7b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7b02:	681a      	ldr	r2, [r3, #0]
   d7b04:	07d1      	lsls	r1, r2, #31
   d7b06:	bf5c      	itt	pl
   d7b08:	2201      	movpl	r2, #1
   d7b0a:	601a      	strpl	r2, [r3, #0]
   d7b0c:	4b16      	ldr	r3, [pc, #88]	; (d7b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7b0e:	681a      	ldr	r2, [r3, #0]
   d7b10:	07d2      	lsls	r2, r2, #31
   d7b12:	bf5c      	itt	pl
   d7b14:	2201      	movpl	r2, #1
   d7b16:	601a      	strpl	r2, [r3, #0]
   d7b18:	4b14      	ldr	r3, [pc, #80]	; (d7b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7b1a:	681a      	ldr	r2, [r3, #0]
   d7b1c:	07d0      	lsls	r0, r2, #31
   d7b1e:	bf5c      	itt	pl
   d7b20:	2201      	movpl	r2, #1
   d7b22:	601a      	strpl	r2, [r3, #0]
   d7b24:	4b12      	ldr	r3, [pc, #72]	; (d7b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7b26:	681a      	ldr	r2, [r3, #0]
   d7b28:	07d1      	lsls	r1, r2, #31
   d7b2a:	bf5c      	itt	pl
   d7b2c:	2201      	movpl	r2, #1
   d7b2e:	601a      	strpl	r2, [r3, #0]
   d7b30:	4b10      	ldr	r3, [pc, #64]	; (d7b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7b32:	681a      	ldr	r2, [r3, #0]
   d7b34:	07d2      	lsls	r2, r2, #31
   d7b36:	bf5c      	itt	pl
   d7b38:	2201      	movpl	r2, #1
   d7b3a:	601a      	strpl	r2, [r3, #0]
   d7b3c:	4b0e      	ldr	r3, [pc, #56]	; (d7b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7b3e:	681a      	ldr	r2, [r3, #0]
   d7b40:	07d0      	lsls	r0, r2, #31
   d7b42:	bf5c      	itt	pl
   d7b44:	2201      	movpl	r2, #1
   d7b46:	601a      	strpl	r2, [r3, #0]
   d7b48:	4b0c      	ldr	r3, [pc, #48]	; (d7b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7b4a:	681a      	ldr	r2, [r3, #0]
   d7b4c:	07d1      	lsls	r1, r2, #31
   d7b4e:	bf5c      	itt	pl
   d7b50:	2201      	movpl	r2, #1
   d7b52:	601a      	strpl	r2, [r3, #0]
   d7b54:	4b0a      	ldr	r3, [pc, #40]	; (d7b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7b56:	681a      	ldr	r2, [r3, #0]
   d7b58:	07d2      	lsls	r2, r2, #31
   d7b5a:	bf5c      	itt	pl
   d7b5c:	2201      	movpl	r2, #1
   d7b5e:	601a      	strpl	r2, [r3, #0]
   d7b60:	4770      	bx	lr
   d7b62:	bf00      	nop
   d7b64:	2003e7ec 	.word	0x2003e7ec
   d7b68:	2003e7e8 	.word	0x2003e7e8
   d7b6c:	2003e7e4 	.word	0x2003e7e4
   d7b70:	2003e7e0 	.word	0x2003e7e0
   d7b74:	2003e7dc 	.word	0x2003e7dc
   d7b78:	2003e7d8 	.word	0x2003e7d8
   d7b7c:	2003e7d4 	.word	0x2003e7d4
   d7b80:	2003e7d0 	.word	0x2003e7d0

000d7b84 <__aeabi_drsub>:
   d7b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7b88:	e002      	b.n	d7b90 <__adddf3>
   d7b8a:	bf00      	nop

000d7b8c <__aeabi_dsub>:
   d7b8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7b90 <__adddf3>:
   d7b90:	b530      	push	{r4, r5, lr}
   d7b92:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7b96:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7b9a:	ea94 0f05 	teq	r4, r5
   d7b9e:	bf08      	it	eq
   d7ba0:	ea90 0f02 	teqeq	r0, r2
   d7ba4:	bf1f      	itttt	ne
   d7ba6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7baa:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7bae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7bb2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7bb6:	f000 80e2 	beq.w	d7d7e <__adddf3+0x1ee>
   d7bba:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7bbe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7bc2:	bfb8      	it	lt
   d7bc4:	426d      	neglt	r5, r5
   d7bc6:	dd0c      	ble.n	d7be2 <__adddf3+0x52>
   d7bc8:	442c      	add	r4, r5
   d7bca:	ea80 0202 	eor.w	r2, r0, r2
   d7bce:	ea81 0303 	eor.w	r3, r1, r3
   d7bd2:	ea82 0000 	eor.w	r0, r2, r0
   d7bd6:	ea83 0101 	eor.w	r1, r3, r1
   d7bda:	ea80 0202 	eor.w	r2, r0, r2
   d7bde:	ea81 0303 	eor.w	r3, r1, r3
   d7be2:	2d36      	cmp	r5, #54	; 0x36
   d7be4:	bf88      	it	hi
   d7be6:	bd30      	pophi	{r4, r5, pc}
   d7be8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7bec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7bf0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7bf4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7bf8:	d002      	beq.n	d7c00 <__adddf3+0x70>
   d7bfa:	4240      	negs	r0, r0
   d7bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7c00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7c04:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7c08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7c0c:	d002      	beq.n	d7c14 <__adddf3+0x84>
   d7c0e:	4252      	negs	r2, r2
   d7c10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7c14:	ea94 0f05 	teq	r4, r5
   d7c18:	f000 80a7 	beq.w	d7d6a <__adddf3+0x1da>
   d7c1c:	f1a4 0401 	sub.w	r4, r4, #1
   d7c20:	f1d5 0e20 	rsbs	lr, r5, #32
   d7c24:	db0d      	blt.n	d7c42 <__adddf3+0xb2>
   d7c26:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7c2a:	fa22 f205 	lsr.w	r2, r2, r5
   d7c2e:	1880      	adds	r0, r0, r2
   d7c30:	f141 0100 	adc.w	r1, r1, #0
   d7c34:	fa03 f20e 	lsl.w	r2, r3, lr
   d7c38:	1880      	adds	r0, r0, r2
   d7c3a:	fa43 f305 	asr.w	r3, r3, r5
   d7c3e:	4159      	adcs	r1, r3
   d7c40:	e00e      	b.n	d7c60 <__adddf3+0xd0>
   d7c42:	f1a5 0520 	sub.w	r5, r5, #32
   d7c46:	f10e 0e20 	add.w	lr, lr, #32
   d7c4a:	2a01      	cmp	r2, #1
   d7c4c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7c50:	bf28      	it	cs
   d7c52:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7c56:	fa43 f305 	asr.w	r3, r3, r5
   d7c5a:	18c0      	adds	r0, r0, r3
   d7c5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7c60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7c64:	d507      	bpl.n	d7c76 <__adddf3+0xe6>
   d7c66:	f04f 0e00 	mov.w	lr, #0
   d7c6a:	f1dc 0c00 	rsbs	ip, ip, #0
   d7c6e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7c72:	eb6e 0101 	sbc.w	r1, lr, r1
   d7c76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7c7a:	d31b      	bcc.n	d7cb4 <__adddf3+0x124>
   d7c7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7c80:	d30c      	bcc.n	d7c9c <__adddf3+0x10c>
   d7c82:	0849      	lsrs	r1, r1, #1
   d7c84:	ea5f 0030 	movs.w	r0, r0, rrx
   d7c88:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7c8c:	f104 0401 	add.w	r4, r4, #1
   d7c90:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7c94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7c98:	f080 809a 	bcs.w	d7dd0 <__adddf3+0x240>
   d7c9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7ca0:	bf08      	it	eq
   d7ca2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7ca6:	f150 0000 	adcs.w	r0, r0, #0
   d7caa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7cae:	ea41 0105 	orr.w	r1, r1, r5
   d7cb2:	bd30      	pop	{r4, r5, pc}
   d7cb4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7cb8:	4140      	adcs	r0, r0
   d7cba:	eb41 0101 	adc.w	r1, r1, r1
   d7cbe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7cc2:	f1a4 0401 	sub.w	r4, r4, #1
   d7cc6:	d1e9      	bne.n	d7c9c <__adddf3+0x10c>
   d7cc8:	f091 0f00 	teq	r1, #0
   d7ccc:	bf04      	itt	eq
   d7cce:	4601      	moveq	r1, r0
   d7cd0:	2000      	moveq	r0, #0
   d7cd2:	fab1 f381 	clz	r3, r1
   d7cd6:	bf08      	it	eq
   d7cd8:	3320      	addeq	r3, #32
   d7cda:	f1a3 030b 	sub.w	r3, r3, #11
   d7cde:	f1b3 0220 	subs.w	r2, r3, #32
   d7ce2:	da0c      	bge.n	d7cfe <__adddf3+0x16e>
   d7ce4:	320c      	adds	r2, #12
   d7ce6:	dd08      	ble.n	d7cfa <__adddf3+0x16a>
   d7ce8:	f102 0c14 	add.w	ip, r2, #20
   d7cec:	f1c2 020c 	rsb	r2, r2, #12
   d7cf0:	fa01 f00c 	lsl.w	r0, r1, ip
   d7cf4:	fa21 f102 	lsr.w	r1, r1, r2
   d7cf8:	e00c      	b.n	d7d14 <__adddf3+0x184>
   d7cfa:	f102 0214 	add.w	r2, r2, #20
   d7cfe:	bfd8      	it	le
   d7d00:	f1c2 0c20 	rsble	ip, r2, #32
   d7d04:	fa01 f102 	lsl.w	r1, r1, r2
   d7d08:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7d0c:	bfdc      	itt	le
   d7d0e:	ea41 010c 	orrle.w	r1, r1, ip
   d7d12:	4090      	lslle	r0, r2
   d7d14:	1ae4      	subs	r4, r4, r3
   d7d16:	bfa2      	ittt	ge
   d7d18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7d1c:	4329      	orrge	r1, r5
   d7d1e:	bd30      	popge	{r4, r5, pc}
   d7d20:	ea6f 0404 	mvn.w	r4, r4
   d7d24:	3c1f      	subs	r4, #31
   d7d26:	da1c      	bge.n	d7d62 <__adddf3+0x1d2>
   d7d28:	340c      	adds	r4, #12
   d7d2a:	dc0e      	bgt.n	d7d4a <__adddf3+0x1ba>
   d7d2c:	f104 0414 	add.w	r4, r4, #20
   d7d30:	f1c4 0220 	rsb	r2, r4, #32
   d7d34:	fa20 f004 	lsr.w	r0, r0, r4
   d7d38:	fa01 f302 	lsl.w	r3, r1, r2
   d7d3c:	ea40 0003 	orr.w	r0, r0, r3
   d7d40:	fa21 f304 	lsr.w	r3, r1, r4
   d7d44:	ea45 0103 	orr.w	r1, r5, r3
   d7d48:	bd30      	pop	{r4, r5, pc}
   d7d4a:	f1c4 040c 	rsb	r4, r4, #12
   d7d4e:	f1c4 0220 	rsb	r2, r4, #32
   d7d52:	fa20 f002 	lsr.w	r0, r0, r2
   d7d56:	fa01 f304 	lsl.w	r3, r1, r4
   d7d5a:	ea40 0003 	orr.w	r0, r0, r3
   d7d5e:	4629      	mov	r1, r5
   d7d60:	bd30      	pop	{r4, r5, pc}
   d7d62:	fa21 f004 	lsr.w	r0, r1, r4
   d7d66:	4629      	mov	r1, r5
   d7d68:	bd30      	pop	{r4, r5, pc}
   d7d6a:	f094 0f00 	teq	r4, #0
   d7d6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7d72:	bf06      	itte	eq
   d7d74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7d78:	3401      	addeq	r4, #1
   d7d7a:	3d01      	subne	r5, #1
   d7d7c:	e74e      	b.n	d7c1c <__adddf3+0x8c>
   d7d7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7d82:	bf18      	it	ne
   d7d84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7d88:	d029      	beq.n	d7dde <__adddf3+0x24e>
   d7d8a:	ea94 0f05 	teq	r4, r5
   d7d8e:	bf08      	it	eq
   d7d90:	ea90 0f02 	teqeq	r0, r2
   d7d94:	d005      	beq.n	d7da2 <__adddf3+0x212>
   d7d96:	ea54 0c00 	orrs.w	ip, r4, r0
   d7d9a:	bf04      	itt	eq
   d7d9c:	4619      	moveq	r1, r3
   d7d9e:	4610      	moveq	r0, r2
   d7da0:	bd30      	pop	{r4, r5, pc}
   d7da2:	ea91 0f03 	teq	r1, r3
   d7da6:	bf1e      	ittt	ne
   d7da8:	2100      	movne	r1, #0
   d7daa:	2000      	movne	r0, #0
   d7dac:	bd30      	popne	{r4, r5, pc}
   d7dae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7db2:	d105      	bne.n	d7dc0 <__adddf3+0x230>
   d7db4:	0040      	lsls	r0, r0, #1
   d7db6:	4149      	adcs	r1, r1
   d7db8:	bf28      	it	cs
   d7dba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7dbe:	bd30      	pop	{r4, r5, pc}
   d7dc0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7dc4:	bf3c      	itt	cc
   d7dc6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7dca:	bd30      	popcc	{r4, r5, pc}
   d7dcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7dd0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7dd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7dd8:	f04f 0000 	mov.w	r0, #0
   d7ddc:	bd30      	pop	{r4, r5, pc}
   d7dde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7de2:	bf1a      	itte	ne
   d7de4:	4619      	movne	r1, r3
   d7de6:	4610      	movne	r0, r2
   d7de8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7dec:	bf1c      	itt	ne
   d7dee:	460b      	movne	r3, r1
   d7df0:	4602      	movne	r2, r0
   d7df2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7df6:	bf06      	itte	eq
   d7df8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7dfc:	ea91 0f03 	teqeq	r1, r3
   d7e00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7e04:	bd30      	pop	{r4, r5, pc}
   d7e06:	bf00      	nop

000d7e08 <__aeabi_ui2d>:
   d7e08:	f090 0f00 	teq	r0, #0
   d7e0c:	bf04      	itt	eq
   d7e0e:	2100      	moveq	r1, #0
   d7e10:	4770      	bxeq	lr
   d7e12:	b530      	push	{r4, r5, lr}
   d7e14:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7e18:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7e1c:	f04f 0500 	mov.w	r5, #0
   d7e20:	f04f 0100 	mov.w	r1, #0
   d7e24:	e750      	b.n	d7cc8 <__adddf3+0x138>
   d7e26:	bf00      	nop

000d7e28 <__aeabi_i2d>:
   d7e28:	f090 0f00 	teq	r0, #0
   d7e2c:	bf04      	itt	eq
   d7e2e:	2100      	moveq	r1, #0
   d7e30:	4770      	bxeq	lr
   d7e32:	b530      	push	{r4, r5, lr}
   d7e34:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7e38:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7e3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7e40:	bf48      	it	mi
   d7e42:	4240      	negmi	r0, r0
   d7e44:	f04f 0100 	mov.w	r1, #0
   d7e48:	e73e      	b.n	d7cc8 <__adddf3+0x138>
   d7e4a:	bf00      	nop

000d7e4c <__aeabi_f2d>:
   d7e4c:	0042      	lsls	r2, r0, #1
   d7e4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7e52:	ea4f 0131 	mov.w	r1, r1, rrx
   d7e56:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7e5a:	bf1f      	itttt	ne
   d7e5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7e60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7e64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7e68:	4770      	bxne	lr
   d7e6a:	f092 0f00 	teq	r2, #0
   d7e6e:	bf14      	ite	ne
   d7e70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7e74:	4770      	bxeq	lr
   d7e76:	b530      	push	{r4, r5, lr}
   d7e78:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7e7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7e80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7e84:	e720      	b.n	d7cc8 <__adddf3+0x138>
   d7e86:	bf00      	nop

000d7e88 <__aeabi_ul2d>:
   d7e88:	ea50 0201 	orrs.w	r2, r0, r1
   d7e8c:	bf08      	it	eq
   d7e8e:	4770      	bxeq	lr
   d7e90:	b530      	push	{r4, r5, lr}
   d7e92:	f04f 0500 	mov.w	r5, #0
   d7e96:	e00a      	b.n	d7eae <__aeabi_l2d+0x16>

000d7e98 <__aeabi_l2d>:
   d7e98:	ea50 0201 	orrs.w	r2, r0, r1
   d7e9c:	bf08      	it	eq
   d7e9e:	4770      	bxeq	lr
   d7ea0:	b530      	push	{r4, r5, lr}
   d7ea2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7ea6:	d502      	bpl.n	d7eae <__aeabi_l2d+0x16>
   d7ea8:	4240      	negs	r0, r0
   d7eaa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7eae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7eb2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7eb6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7eba:	f43f aedc 	beq.w	d7c76 <__adddf3+0xe6>
   d7ebe:	f04f 0203 	mov.w	r2, #3
   d7ec2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7ec6:	bf18      	it	ne
   d7ec8:	3203      	addne	r2, #3
   d7eca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7ece:	bf18      	it	ne
   d7ed0:	3203      	addne	r2, #3
   d7ed2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7ed6:	f1c2 0320 	rsb	r3, r2, #32
   d7eda:	fa00 fc03 	lsl.w	ip, r0, r3
   d7ede:	fa20 f002 	lsr.w	r0, r0, r2
   d7ee2:	fa01 fe03 	lsl.w	lr, r1, r3
   d7ee6:	ea40 000e 	orr.w	r0, r0, lr
   d7eea:	fa21 f102 	lsr.w	r1, r1, r2
   d7eee:	4414      	add	r4, r2
   d7ef0:	e6c1      	b.n	d7c76 <__adddf3+0xe6>
   d7ef2:	bf00      	nop

000d7ef4 <__aeabi_dmul>:
   d7ef4:	b570      	push	{r4, r5, r6, lr}
   d7ef6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7efa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7efe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7f02:	bf1d      	ittte	ne
   d7f04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7f08:	ea94 0f0c 	teqne	r4, ip
   d7f0c:	ea95 0f0c 	teqne	r5, ip
   d7f10:	f000 f8de 	bleq	d80d0 <__aeabi_dmul+0x1dc>
   d7f14:	442c      	add	r4, r5
   d7f16:	ea81 0603 	eor.w	r6, r1, r3
   d7f1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7f1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7f22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7f26:	bf18      	it	ne
   d7f28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7f2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7f30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7f34:	d038      	beq.n	d7fa8 <__aeabi_dmul+0xb4>
   d7f36:	fba0 ce02 	umull	ip, lr, r0, r2
   d7f3a:	f04f 0500 	mov.w	r5, #0
   d7f3e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7f42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7f46:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7f4a:	f04f 0600 	mov.w	r6, #0
   d7f4e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7f52:	f09c 0f00 	teq	ip, #0
   d7f56:	bf18      	it	ne
   d7f58:	f04e 0e01 	orrne.w	lr, lr, #1
   d7f5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7f60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7f64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7f68:	d204      	bcs.n	d7f74 <__aeabi_dmul+0x80>
   d7f6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7f6e:	416d      	adcs	r5, r5
   d7f70:	eb46 0606 	adc.w	r6, r6, r6
   d7f74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7f78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7f7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7f80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7f84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7f88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7f8c:	bf88      	it	hi
   d7f8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7f92:	d81e      	bhi.n	d7fd2 <__aeabi_dmul+0xde>
   d7f94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7f98:	bf08      	it	eq
   d7f9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7f9e:	f150 0000 	adcs.w	r0, r0, #0
   d7fa2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7fa6:	bd70      	pop	{r4, r5, r6, pc}
   d7fa8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7fac:	ea46 0101 	orr.w	r1, r6, r1
   d7fb0:	ea40 0002 	orr.w	r0, r0, r2
   d7fb4:	ea81 0103 	eor.w	r1, r1, r3
   d7fb8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7fbc:	bfc2      	ittt	gt
   d7fbe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7fc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7fc6:	bd70      	popgt	{r4, r5, r6, pc}
   d7fc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7fcc:	f04f 0e00 	mov.w	lr, #0
   d7fd0:	3c01      	subs	r4, #1
   d7fd2:	f300 80ab 	bgt.w	d812c <__aeabi_dmul+0x238>
   d7fd6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7fda:	bfde      	ittt	le
   d7fdc:	2000      	movle	r0, #0
   d7fde:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7fe2:	bd70      	pople	{r4, r5, r6, pc}
   d7fe4:	f1c4 0400 	rsb	r4, r4, #0
   d7fe8:	3c20      	subs	r4, #32
   d7fea:	da35      	bge.n	d8058 <__aeabi_dmul+0x164>
   d7fec:	340c      	adds	r4, #12
   d7fee:	dc1b      	bgt.n	d8028 <__aeabi_dmul+0x134>
   d7ff0:	f104 0414 	add.w	r4, r4, #20
   d7ff4:	f1c4 0520 	rsb	r5, r4, #32
   d7ff8:	fa00 f305 	lsl.w	r3, r0, r5
   d7ffc:	fa20 f004 	lsr.w	r0, r0, r4
   d8000:	fa01 f205 	lsl.w	r2, r1, r5
   d8004:	ea40 0002 	orr.w	r0, r0, r2
   d8008:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d800c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8010:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8014:	fa21 f604 	lsr.w	r6, r1, r4
   d8018:	eb42 0106 	adc.w	r1, r2, r6
   d801c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8020:	bf08      	it	eq
   d8022:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8026:	bd70      	pop	{r4, r5, r6, pc}
   d8028:	f1c4 040c 	rsb	r4, r4, #12
   d802c:	f1c4 0520 	rsb	r5, r4, #32
   d8030:	fa00 f304 	lsl.w	r3, r0, r4
   d8034:	fa20 f005 	lsr.w	r0, r0, r5
   d8038:	fa01 f204 	lsl.w	r2, r1, r4
   d803c:	ea40 0002 	orr.w	r0, r0, r2
   d8040:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8044:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8048:	f141 0100 	adc.w	r1, r1, #0
   d804c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8050:	bf08      	it	eq
   d8052:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8056:	bd70      	pop	{r4, r5, r6, pc}
   d8058:	f1c4 0520 	rsb	r5, r4, #32
   d805c:	fa00 f205 	lsl.w	r2, r0, r5
   d8060:	ea4e 0e02 	orr.w	lr, lr, r2
   d8064:	fa20 f304 	lsr.w	r3, r0, r4
   d8068:	fa01 f205 	lsl.w	r2, r1, r5
   d806c:	ea43 0302 	orr.w	r3, r3, r2
   d8070:	fa21 f004 	lsr.w	r0, r1, r4
   d8074:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8078:	fa21 f204 	lsr.w	r2, r1, r4
   d807c:	ea20 0002 	bic.w	r0, r0, r2
   d8080:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8084:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8088:	bf08      	it	eq
   d808a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d808e:	bd70      	pop	{r4, r5, r6, pc}
   d8090:	f094 0f00 	teq	r4, #0
   d8094:	d10f      	bne.n	d80b6 <__aeabi_dmul+0x1c2>
   d8096:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d809a:	0040      	lsls	r0, r0, #1
   d809c:	eb41 0101 	adc.w	r1, r1, r1
   d80a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d80a4:	bf08      	it	eq
   d80a6:	3c01      	subeq	r4, #1
   d80a8:	d0f7      	beq.n	d809a <__aeabi_dmul+0x1a6>
   d80aa:	ea41 0106 	orr.w	r1, r1, r6
   d80ae:	f095 0f00 	teq	r5, #0
   d80b2:	bf18      	it	ne
   d80b4:	4770      	bxne	lr
   d80b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d80ba:	0052      	lsls	r2, r2, #1
   d80bc:	eb43 0303 	adc.w	r3, r3, r3
   d80c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d80c4:	bf08      	it	eq
   d80c6:	3d01      	subeq	r5, #1
   d80c8:	d0f7      	beq.n	d80ba <__aeabi_dmul+0x1c6>
   d80ca:	ea43 0306 	orr.w	r3, r3, r6
   d80ce:	4770      	bx	lr
   d80d0:	ea94 0f0c 	teq	r4, ip
   d80d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d80d8:	bf18      	it	ne
   d80da:	ea95 0f0c 	teqne	r5, ip
   d80de:	d00c      	beq.n	d80fa <__aeabi_dmul+0x206>
   d80e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d80e4:	bf18      	it	ne
   d80e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d80ea:	d1d1      	bne.n	d8090 <__aeabi_dmul+0x19c>
   d80ec:	ea81 0103 	eor.w	r1, r1, r3
   d80f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d80f4:	f04f 0000 	mov.w	r0, #0
   d80f8:	bd70      	pop	{r4, r5, r6, pc}
   d80fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d80fe:	bf06      	itte	eq
   d8100:	4610      	moveq	r0, r2
   d8102:	4619      	moveq	r1, r3
   d8104:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8108:	d019      	beq.n	d813e <__aeabi_dmul+0x24a>
   d810a:	ea94 0f0c 	teq	r4, ip
   d810e:	d102      	bne.n	d8116 <__aeabi_dmul+0x222>
   d8110:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8114:	d113      	bne.n	d813e <__aeabi_dmul+0x24a>
   d8116:	ea95 0f0c 	teq	r5, ip
   d811a:	d105      	bne.n	d8128 <__aeabi_dmul+0x234>
   d811c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8120:	bf1c      	itt	ne
   d8122:	4610      	movne	r0, r2
   d8124:	4619      	movne	r1, r3
   d8126:	d10a      	bne.n	d813e <__aeabi_dmul+0x24a>
   d8128:	ea81 0103 	eor.w	r1, r1, r3
   d812c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8130:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8134:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8138:	f04f 0000 	mov.w	r0, #0
   d813c:	bd70      	pop	{r4, r5, r6, pc}
   d813e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8142:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8146:	bd70      	pop	{r4, r5, r6, pc}

000d8148 <__aeabi_ddiv>:
   d8148:	b570      	push	{r4, r5, r6, lr}
   d814a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d814e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8152:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8156:	bf1d      	ittte	ne
   d8158:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d815c:	ea94 0f0c 	teqne	r4, ip
   d8160:	ea95 0f0c 	teqne	r5, ip
   d8164:	f000 f8a7 	bleq	d82b6 <__aeabi_ddiv+0x16e>
   d8168:	eba4 0405 	sub.w	r4, r4, r5
   d816c:	ea81 0e03 	eor.w	lr, r1, r3
   d8170:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8174:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8178:	f000 8088 	beq.w	d828c <__aeabi_ddiv+0x144>
   d817c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8180:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8184:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8188:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d818c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8190:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8194:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8198:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d819c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d81a0:	429d      	cmp	r5, r3
   d81a2:	bf08      	it	eq
   d81a4:	4296      	cmpeq	r6, r2
   d81a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d81aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d81ae:	d202      	bcs.n	d81b6 <__aeabi_ddiv+0x6e>
   d81b0:	085b      	lsrs	r3, r3, #1
   d81b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d81b6:	1ab6      	subs	r6, r6, r2
   d81b8:	eb65 0503 	sbc.w	r5, r5, r3
   d81bc:	085b      	lsrs	r3, r3, #1
   d81be:	ea4f 0232 	mov.w	r2, r2, rrx
   d81c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d81c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d81ca:	ebb6 0e02 	subs.w	lr, r6, r2
   d81ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   d81d2:	bf22      	ittt	cs
   d81d4:	1ab6      	subcs	r6, r6, r2
   d81d6:	4675      	movcs	r5, lr
   d81d8:	ea40 000c 	orrcs.w	r0, r0, ip
   d81dc:	085b      	lsrs	r3, r3, #1
   d81de:	ea4f 0232 	mov.w	r2, r2, rrx
   d81e2:	ebb6 0e02 	subs.w	lr, r6, r2
   d81e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d81ea:	bf22      	ittt	cs
   d81ec:	1ab6      	subcs	r6, r6, r2
   d81ee:	4675      	movcs	r5, lr
   d81f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d81f4:	085b      	lsrs	r3, r3, #1
   d81f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d81fa:	ebb6 0e02 	subs.w	lr, r6, r2
   d81fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8202:	bf22      	ittt	cs
   d8204:	1ab6      	subcs	r6, r6, r2
   d8206:	4675      	movcs	r5, lr
   d8208:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d820c:	085b      	lsrs	r3, r3, #1
   d820e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8212:	ebb6 0e02 	subs.w	lr, r6, r2
   d8216:	eb75 0e03 	sbcs.w	lr, r5, r3
   d821a:	bf22      	ittt	cs
   d821c:	1ab6      	subcs	r6, r6, r2
   d821e:	4675      	movcs	r5, lr
   d8220:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8224:	ea55 0e06 	orrs.w	lr, r5, r6
   d8228:	d018      	beq.n	d825c <__aeabi_ddiv+0x114>
   d822a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d822e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8232:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8236:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d823a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d823e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8242:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8246:	d1c0      	bne.n	d81ca <__aeabi_ddiv+0x82>
   d8248:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d824c:	d10b      	bne.n	d8266 <__aeabi_ddiv+0x11e>
   d824e:	ea41 0100 	orr.w	r1, r1, r0
   d8252:	f04f 0000 	mov.w	r0, #0
   d8256:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d825a:	e7b6      	b.n	d81ca <__aeabi_ddiv+0x82>
   d825c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8260:	bf04      	itt	eq
   d8262:	4301      	orreq	r1, r0
   d8264:	2000      	moveq	r0, #0
   d8266:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d826a:	bf88      	it	hi
   d826c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8270:	f63f aeaf 	bhi.w	d7fd2 <__aeabi_dmul+0xde>
   d8274:	ebb5 0c03 	subs.w	ip, r5, r3
   d8278:	bf04      	itt	eq
   d827a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d827e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8282:	f150 0000 	adcs.w	r0, r0, #0
   d8286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d828a:	bd70      	pop	{r4, r5, r6, pc}
   d828c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8290:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8294:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8298:	bfc2      	ittt	gt
   d829a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d829e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d82a2:	bd70      	popgt	{r4, r5, r6, pc}
   d82a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d82a8:	f04f 0e00 	mov.w	lr, #0
   d82ac:	3c01      	subs	r4, #1
   d82ae:	e690      	b.n	d7fd2 <__aeabi_dmul+0xde>
   d82b0:	ea45 0e06 	orr.w	lr, r5, r6
   d82b4:	e68d      	b.n	d7fd2 <__aeabi_dmul+0xde>
   d82b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d82ba:	ea94 0f0c 	teq	r4, ip
   d82be:	bf08      	it	eq
   d82c0:	ea95 0f0c 	teqeq	r5, ip
   d82c4:	f43f af3b 	beq.w	d813e <__aeabi_dmul+0x24a>
   d82c8:	ea94 0f0c 	teq	r4, ip
   d82cc:	d10a      	bne.n	d82e4 <__aeabi_ddiv+0x19c>
   d82ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d82d2:	f47f af34 	bne.w	d813e <__aeabi_dmul+0x24a>
   d82d6:	ea95 0f0c 	teq	r5, ip
   d82da:	f47f af25 	bne.w	d8128 <__aeabi_dmul+0x234>
   d82de:	4610      	mov	r0, r2
   d82e0:	4619      	mov	r1, r3
   d82e2:	e72c      	b.n	d813e <__aeabi_dmul+0x24a>
   d82e4:	ea95 0f0c 	teq	r5, ip
   d82e8:	d106      	bne.n	d82f8 <__aeabi_ddiv+0x1b0>
   d82ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d82ee:	f43f aefd 	beq.w	d80ec <__aeabi_dmul+0x1f8>
   d82f2:	4610      	mov	r0, r2
   d82f4:	4619      	mov	r1, r3
   d82f6:	e722      	b.n	d813e <__aeabi_dmul+0x24a>
   d82f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d82fc:	bf18      	it	ne
   d82fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8302:	f47f aec5 	bne.w	d8090 <__aeabi_dmul+0x19c>
   d8306:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d830a:	f47f af0d 	bne.w	d8128 <__aeabi_dmul+0x234>
   d830e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8312:	f47f aeeb 	bne.w	d80ec <__aeabi_dmul+0x1f8>
   d8316:	e712      	b.n	d813e <__aeabi_dmul+0x24a>

000d8318 <__gedf2>:
   d8318:	f04f 3cff 	mov.w	ip, #4294967295
   d831c:	e006      	b.n	d832c <__cmpdf2+0x4>
   d831e:	bf00      	nop

000d8320 <__ledf2>:
   d8320:	f04f 0c01 	mov.w	ip, #1
   d8324:	e002      	b.n	d832c <__cmpdf2+0x4>
   d8326:	bf00      	nop

000d8328 <__cmpdf2>:
   d8328:	f04f 0c01 	mov.w	ip, #1
   d832c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8330:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8334:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8338:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d833c:	bf18      	it	ne
   d833e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8342:	d01b      	beq.n	d837c <__cmpdf2+0x54>
   d8344:	b001      	add	sp, #4
   d8346:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d834a:	bf0c      	ite	eq
   d834c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8350:	ea91 0f03 	teqne	r1, r3
   d8354:	bf02      	ittt	eq
   d8356:	ea90 0f02 	teqeq	r0, r2
   d835a:	2000      	moveq	r0, #0
   d835c:	4770      	bxeq	lr
   d835e:	f110 0f00 	cmn.w	r0, #0
   d8362:	ea91 0f03 	teq	r1, r3
   d8366:	bf58      	it	pl
   d8368:	4299      	cmppl	r1, r3
   d836a:	bf08      	it	eq
   d836c:	4290      	cmpeq	r0, r2
   d836e:	bf2c      	ite	cs
   d8370:	17d8      	asrcs	r0, r3, #31
   d8372:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8376:	f040 0001 	orr.w	r0, r0, #1
   d837a:	4770      	bx	lr
   d837c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8380:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8384:	d102      	bne.n	d838c <__cmpdf2+0x64>
   d8386:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d838a:	d107      	bne.n	d839c <__cmpdf2+0x74>
   d838c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8390:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8394:	d1d6      	bne.n	d8344 <__cmpdf2+0x1c>
   d8396:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d839a:	d0d3      	beq.n	d8344 <__cmpdf2+0x1c>
   d839c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d83a0:	4770      	bx	lr
   d83a2:	bf00      	nop

000d83a4 <__aeabi_cdrcmple>:
   d83a4:	4684      	mov	ip, r0
   d83a6:	4610      	mov	r0, r2
   d83a8:	4662      	mov	r2, ip
   d83aa:	468c      	mov	ip, r1
   d83ac:	4619      	mov	r1, r3
   d83ae:	4663      	mov	r3, ip
   d83b0:	e000      	b.n	d83b4 <__aeabi_cdcmpeq>
   d83b2:	bf00      	nop

000d83b4 <__aeabi_cdcmpeq>:
   d83b4:	b501      	push	{r0, lr}
   d83b6:	f7ff ffb7 	bl	d8328 <__cmpdf2>
   d83ba:	2800      	cmp	r0, #0
   d83bc:	bf48      	it	mi
   d83be:	f110 0f00 	cmnmi.w	r0, #0
   d83c2:	bd01      	pop	{r0, pc}

000d83c4 <__aeabi_dcmpeq>:
   d83c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d83c8:	f7ff fff4 	bl	d83b4 <__aeabi_cdcmpeq>
   d83cc:	bf0c      	ite	eq
   d83ce:	2001      	moveq	r0, #1
   d83d0:	2000      	movne	r0, #0
   d83d2:	f85d fb08 	ldr.w	pc, [sp], #8
   d83d6:	bf00      	nop

000d83d8 <__aeabi_dcmplt>:
   d83d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d83dc:	f7ff ffea 	bl	d83b4 <__aeabi_cdcmpeq>
   d83e0:	bf34      	ite	cc
   d83e2:	2001      	movcc	r0, #1
   d83e4:	2000      	movcs	r0, #0
   d83e6:	f85d fb08 	ldr.w	pc, [sp], #8
   d83ea:	bf00      	nop

000d83ec <__aeabi_dcmple>:
   d83ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d83f0:	f7ff ffe0 	bl	d83b4 <__aeabi_cdcmpeq>
   d83f4:	bf94      	ite	ls
   d83f6:	2001      	movls	r0, #1
   d83f8:	2000      	movhi	r0, #0
   d83fa:	f85d fb08 	ldr.w	pc, [sp], #8
   d83fe:	bf00      	nop

000d8400 <__aeabi_dcmpge>:
   d8400:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8404:	f7ff ffce 	bl	d83a4 <__aeabi_cdrcmple>
   d8408:	bf94      	ite	ls
   d840a:	2001      	movls	r0, #1
   d840c:	2000      	movhi	r0, #0
   d840e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8412:	bf00      	nop

000d8414 <__aeabi_dcmpgt>:
   d8414:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8418:	f7ff ffc4 	bl	d83a4 <__aeabi_cdrcmple>
   d841c:	bf34      	ite	cc
   d841e:	2001      	movcc	r0, #1
   d8420:	2000      	movcs	r0, #0
   d8422:	f85d fb08 	ldr.w	pc, [sp], #8
   d8426:	bf00      	nop

000d8428 <__aeabi_d2iz>:
   d8428:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d842c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8430:	d215      	bcs.n	d845e <__aeabi_d2iz+0x36>
   d8432:	d511      	bpl.n	d8458 <__aeabi_d2iz+0x30>
   d8434:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8438:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d843c:	d912      	bls.n	d8464 <__aeabi_d2iz+0x3c>
   d843e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8442:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8446:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d844a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d844e:	fa23 f002 	lsr.w	r0, r3, r2
   d8452:	bf18      	it	ne
   d8454:	4240      	negne	r0, r0
   d8456:	4770      	bx	lr
   d8458:	f04f 0000 	mov.w	r0, #0
   d845c:	4770      	bx	lr
   d845e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8462:	d105      	bne.n	d8470 <__aeabi_d2iz+0x48>
   d8464:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8468:	bf08      	it	eq
   d846a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d846e:	4770      	bx	lr
   d8470:	f04f 0000 	mov.w	r0, #0
   d8474:	4770      	bx	lr
   d8476:	bf00      	nop

000d8478 <__aeabi_d2uiz>:
   d8478:	004a      	lsls	r2, r1, #1
   d847a:	d211      	bcs.n	d84a0 <__aeabi_d2uiz+0x28>
   d847c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8480:	d211      	bcs.n	d84a6 <__aeabi_d2uiz+0x2e>
   d8482:	d50d      	bpl.n	d84a0 <__aeabi_d2uiz+0x28>
   d8484:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8488:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d848c:	d40e      	bmi.n	d84ac <__aeabi_d2uiz+0x34>
   d848e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8492:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8496:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d849a:	fa23 f002 	lsr.w	r0, r3, r2
   d849e:	4770      	bx	lr
   d84a0:	f04f 0000 	mov.w	r0, #0
   d84a4:	4770      	bx	lr
   d84a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d84aa:	d102      	bne.n	d84b2 <__aeabi_d2uiz+0x3a>
   d84ac:	f04f 30ff 	mov.w	r0, #4294967295
   d84b0:	4770      	bx	lr
   d84b2:	f04f 0000 	mov.w	r0, #0
   d84b6:	4770      	bx	lr

000d84b8 <__aeabi_d2f>:
   d84b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d84bc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d84c0:	bf24      	itt	cs
   d84c2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d84c6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d84ca:	d90d      	bls.n	d84e8 <__aeabi_d2f+0x30>
   d84cc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d84d0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d84d4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d84d8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d84dc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d84e0:	bf08      	it	eq
   d84e2:	f020 0001 	biceq.w	r0, r0, #1
   d84e6:	4770      	bx	lr
   d84e8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d84ec:	d121      	bne.n	d8532 <__aeabi_d2f+0x7a>
   d84ee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d84f2:	bfbc      	itt	lt
   d84f4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d84f8:	4770      	bxlt	lr
   d84fa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d84fe:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8502:	f1c2 0218 	rsb	r2, r2, #24
   d8506:	f1c2 0c20 	rsb	ip, r2, #32
   d850a:	fa10 f30c 	lsls.w	r3, r0, ip
   d850e:	fa20 f002 	lsr.w	r0, r0, r2
   d8512:	bf18      	it	ne
   d8514:	f040 0001 	orrne.w	r0, r0, #1
   d8518:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d851c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8520:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8524:	ea40 000c 	orr.w	r0, r0, ip
   d8528:	fa23 f302 	lsr.w	r3, r3, r2
   d852c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8530:	e7cc      	b.n	d84cc <__aeabi_d2f+0x14>
   d8532:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8536:	d107      	bne.n	d8548 <__aeabi_d2f+0x90>
   d8538:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d853c:	bf1e      	ittt	ne
   d853e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8542:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8546:	4770      	bxne	lr
   d8548:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d854c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8550:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8554:	4770      	bx	lr
   d8556:	bf00      	nop

000d8558 <atof>:
   d8558:	2100      	movs	r1, #0
   d855a:	f000 bef5 	b.w	d9348 <strtod>
	...

000d8560 <__cxa_atexit>:
   d8560:	b510      	push	{r4, lr}
   d8562:	4c05      	ldr	r4, [pc, #20]	; (d8578 <__cxa_atexit+0x18>)
   d8564:	4613      	mov	r3, r2
   d8566:	b12c      	cbz	r4, d8574 <__cxa_atexit+0x14>
   d8568:	460a      	mov	r2, r1
   d856a:	4601      	mov	r1, r0
   d856c:	2002      	movs	r0, #2
   d856e:	f3af 8000 	nop.w
   d8572:	bd10      	pop	{r4, pc}
   d8574:	4620      	mov	r0, r4
   d8576:	bd10      	pop	{r4, pc}
   d8578:	00000000 	.word	0x00000000

000d857c <ldiv>:
   d857c:	2900      	cmp	r1, #0
   d857e:	b510      	push	{r4, lr}
   d8580:	fb91 f4f2 	sdiv	r4, r1, r2
   d8584:	fb02 1314 	mls	r3, r2, r4, r1
   d8588:	db04      	blt.n	d8594 <ldiv+0x18>
   d858a:	2b00      	cmp	r3, #0
   d858c:	da07      	bge.n	d859e <ldiv+0x22>
   d858e:	3401      	adds	r4, #1
   d8590:	1a9b      	subs	r3, r3, r2
   d8592:	e004      	b.n	d859e <ldiv+0x22>
   d8594:	2b00      	cmp	r3, #0
   d8596:	bfc4      	itt	gt
   d8598:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d859c:	189b      	addgt	r3, r3, r2
   d859e:	6004      	str	r4, [r0, #0]
   d85a0:	6043      	str	r3, [r0, #4]
   d85a2:	bd10      	pop	{r4, pc}

000d85a4 <_localeconv_r>:
   d85a4:	4800      	ldr	r0, [pc, #0]	; (d85a8 <_localeconv_r+0x4>)
   d85a6:	4770      	bx	lr
   d85a8:	2003e18c 	.word	0x2003e18c

000d85ac <memcpy>:
   d85ac:	b510      	push	{r4, lr}
   d85ae:	1e43      	subs	r3, r0, #1
   d85b0:	440a      	add	r2, r1
   d85b2:	4291      	cmp	r1, r2
   d85b4:	d004      	beq.n	d85c0 <memcpy+0x14>
   d85b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d85ba:	f803 4f01 	strb.w	r4, [r3, #1]!
   d85be:	e7f8      	b.n	d85b2 <memcpy+0x6>
   d85c0:	bd10      	pop	{r4, pc}

000d85c2 <memmove>:
   d85c2:	4288      	cmp	r0, r1
   d85c4:	b510      	push	{r4, lr}
   d85c6:	eb01 0302 	add.w	r3, r1, r2
   d85ca:	d801      	bhi.n	d85d0 <memmove+0xe>
   d85cc:	1e42      	subs	r2, r0, #1
   d85ce:	e00b      	b.n	d85e8 <memmove+0x26>
   d85d0:	4298      	cmp	r0, r3
   d85d2:	d2fb      	bcs.n	d85cc <memmove+0xa>
   d85d4:	1881      	adds	r1, r0, r2
   d85d6:	1ad2      	subs	r2, r2, r3
   d85d8:	42d3      	cmn	r3, r2
   d85da:	d004      	beq.n	d85e6 <memmove+0x24>
   d85dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d85e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d85e4:	e7f8      	b.n	d85d8 <memmove+0x16>
   d85e6:	bd10      	pop	{r4, pc}
   d85e8:	4299      	cmp	r1, r3
   d85ea:	d004      	beq.n	d85f6 <memmove+0x34>
   d85ec:	f811 4b01 	ldrb.w	r4, [r1], #1
   d85f0:	f802 4f01 	strb.w	r4, [r2, #1]!
   d85f4:	e7f8      	b.n	d85e8 <memmove+0x26>
   d85f6:	bd10      	pop	{r4, pc}

000d85f8 <memset>:
   d85f8:	4402      	add	r2, r0
   d85fa:	4603      	mov	r3, r0
   d85fc:	4293      	cmp	r3, r2
   d85fe:	d002      	beq.n	d8606 <memset+0xe>
   d8600:	f803 1b01 	strb.w	r1, [r3], #1
   d8604:	e7fa      	b.n	d85fc <memset+0x4>
   d8606:	4770      	bx	lr

000d8608 <srand>:
   d8608:	b538      	push	{r3, r4, r5, lr}
   d860a:	4b12      	ldr	r3, [pc, #72]	; (d8654 <srand+0x4c>)
   d860c:	681c      	ldr	r4, [r3, #0]
   d860e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8610:	4605      	mov	r5, r0
   d8612:	b9d3      	cbnz	r3, d864a <srand+0x42>
   d8614:	2018      	movs	r0, #24
   d8616:	f7fd fe93 	bl	d6340 <malloc>
   d861a:	f243 330e 	movw	r3, #13070	; 0x330e
   d861e:	63a0      	str	r0, [r4, #56]	; 0x38
   d8620:	8003      	strh	r3, [r0, #0]
   d8622:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8626:	8043      	strh	r3, [r0, #2]
   d8628:	f241 2334 	movw	r3, #4660	; 0x1234
   d862c:	8083      	strh	r3, [r0, #4]
   d862e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8632:	80c3      	strh	r3, [r0, #6]
   d8634:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8638:	8103      	strh	r3, [r0, #8]
   d863a:	2305      	movs	r3, #5
   d863c:	8143      	strh	r3, [r0, #10]
   d863e:	230b      	movs	r3, #11
   d8640:	8183      	strh	r3, [r0, #12]
   d8642:	2201      	movs	r2, #1
   d8644:	2300      	movs	r3, #0
   d8646:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d864a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d864c:	2200      	movs	r2, #0
   d864e:	611d      	str	r5, [r3, #16]
   d8650:	615a      	str	r2, [r3, #20]
   d8652:	bd38      	pop	{r3, r4, r5, pc}
   d8654:	2003e188 	.word	0x2003e188

000d8658 <strcpy>:
   d8658:	4603      	mov	r3, r0
   d865a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d865e:	f803 2b01 	strb.w	r2, [r3], #1
   d8662:	2a00      	cmp	r2, #0
   d8664:	d1f9      	bne.n	d865a <strcpy+0x2>
   d8666:	4770      	bx	lr

000d8668 <strlen>:
   d8668:	4603      	mov	r3, r0
   d866a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d866e:	2a00      	cmp	r2, #0
   d8670:	d1fb      	bne.n	d866a <strlen+0x2>
   d8672:	1a18      	subs	r0, r3, r0
   d8674:	3801      	subs	r0, #1
   d8676:	4770      	bx	lr

000d8678 <strncasecmp>:
   d8678:	4b10      	ldr	r3, [pc, #64]	; (d86bc <strncasecmp+0x44>)
   d867a:	b570      	push	{r4, r5, r6, lr}
   d867c:	681e      	ldr	r6, [r3, #0]
   d867e:	440a      	add	r2, r1
   d8680:	4291      	cmp	r1, r2
   d8682:	d017      	beq.n	d86b4 <strncasecmp+0x3c>
   d8684:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8688:	18f4      	adds	r4, r6, r3
   d868a:	7864      	ldrb	r4, [r4, #1]
   d868c:	f004 0403 	and.w	r4, r4, #3
   d8690:	2c01      	cmp	r4, #1
   d8692:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8696:	eb06 0504 	add.w	r5, r6, r4
   d869a:	bf08      	it	eq
   d869c:	3320      	addeq	r3, #32
   d869e:	786d      	ldrb	r5, [r5, #1]
   d86a0:	f005 0503 	and.w	r5, r5, #3
   d86a4:	2d01      	cmp	r5, #1
   d86a6:	bf08      	it	eq
   d86a8:	3420      	addeq	r4, #32
   d86aa:	1b1b      	subs	r3, r3, r4
   d86ac:	d103      	bne.n	d86b6 <strncasecmp+0x3e>
   d86ae:	2c00      	cmp	r4, #0
   d86b0:	d1e6      	bne.n	d8680 <strncasecmp+0x8>
   d86b2:	e000      	b.n	d86b6 <strncasecmp+0x3e>
   d86b4:	2300      	movs	r3, #0
   d86b6:	4618      	mov	r0, r3
   d86b8:	bd70      	pop	{r4, r5, r6, pc}
   d86ba:	bf00      	nop
   d86bc:	2003e124 	.word	0x2003e124

000d86c0 <strncmp>:
   d86c0:	b530      	push	{r4, r5, lr}
   d86c2:	b182      	cbz	r2, d86e6 <strncmp+0x26>
   d86c4:	1e45      	subs	r5, r0, #1
   d86c6:	3901      	subs	r1, #1
   d86c8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d86cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d86d0:	42a3      	cmp	r3, r4
   d86d2:	d106      	bne.n	d86e2 <strncmp+0x22>
   d86d4:	43ec      	mvns	r4, r5
   d86d6:	4414      	add	r4, r2
   d86d8:	42e0      	cmn	r0, r4
   d86da:	d001      	beq.n	d86e0 <strncmp+0x20>
   d86dc:	2b00      	cmp	r3, #0
   d86de:	d1f3      	bne.n	d86c8 <strncmp+0x8>
   d86e0:	461c      	mov	r4, r3
   d86e2:	1b18      	subs	r0, r3, r4
   d86e4:	bd30      	pop	{r4, r5, pc}
   d86e6:	4610      	mov	r0, r2
   d86e8:	bd30      	pop	{r4, r5, pc}

000d86ea <strncpy>:
   d86ea:	b510      	push	{r4, lr}
   d86ec:	4603      	mov	r3, r0
   d86ee:	b142      	cbz	r2, d8702 <strncpy+0x18>
   d86f0:	f811 4b01 	ldrb.w	r4, [r1], #1
   d86f4:	f803 4b01 	strb.w	r4, [r3], #1
   d86f8:	3a01      	subs	r2, #1
   d86fa:	2c00      	cmp	r4, #0
   d86fc:	d1f7      	bne.n	d86ee <strncpy+0x4>
   d86fe:	441a      	add	r2, r3
   d8700:	e000      	b.n	d8704 <strncpy+0x1a>
   d8702:	bd10      	pop	{r4, pc}
   d8704:	4293      	cmp	r3, r2
   d8706:	d002      	beq.n	d870e <strncpy+0x24>
   d8708:	f803 4b01 	strb.w	r4, [r3], #1
   d870c:	e7fa      	b.n	d8704 <strncpy+0x1a>
   d870e:	bd10      	pop	{r4, pc}

000d8710 <sulp>:
   d8710:	b570      	push	{r4, r5, r6, lr}
   d8712:	4604      	mov	r4, r0
   d8714:	460d      	mov	r5, r1
   d8716:	ec45 4b10 	vmov	d0, r4, r5
   d871a:	4616      	mov	r6, r2
   d871c:	f001 fc00 	bl	d9f20 <__ulp>
   d8720:	ec51 0b10 	vmov	r0, r1, d0
   d8724:	b17e      	cbz	r6, d8746 <sulp+0x36>
   d8726:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d872a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d872e:	2b00      	cmp	r3, #0
   d8730:	dd09      	ble.n	d8746 <sulp+0x36>
   d8732:	051b      	lsls	r3, r3, #20
   d8734:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d8738:	2400      	movs	r4, #0
   d873a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d873e:	4622      	mov	r2, r4
   d8740:	462b      	mov	r3, r5
   d8742:	f7ff fbd7 	bl	d7ef4 <__aeabi_dmul>
   d8746:	bd70      	pop	{r4, r5, r6, pc}

000d8748 <_strtod_r>:
   d8748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d874c:	b09d      	sub	sp, #116	; 0x74
   d874e:	2300      	movs	r3, #0
   d8750:	9002      	str	r0, [sp, #8]
   d8752:	460c      	mov	r4, r1
   d8754:	9213      	str	r2, [sp, #76]	; 0x4c
   d8756:	9318      	str	r3, [sp, #96]	; 0x60
   d8758:	f04f 0a00 	mov.w	sl, #0
   d875c:	f04f 0b00 	mov.w	fp, #0
   d8760:	9117      	str	r1, [sp, #92]	; 0x5c
   d8762:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8764:	781a      	ldrb	r2, [r3, #0]
   d8766:	2a0d      	cmp	r2, #13
   d8768:	d805      	bhi.n	d8776 <_strtod_r+0x2e>
   d876a:	2a09      	cmp	r2, #9
   d876c:	d213      	bcs.n	d8796 <_strtod_r+0x4e>
   d876e:	2a00      	cmp	r2, #0
   d8770:	f000 81ac 	beq.w	d8acc <_strtod_r+0x384>
   d8774:	e012      	b.n	d879c <_strtod_r+0x54>
   d8776:	2a2b      	cmp	r2, #43	; 0x2b
   d8778:	d004      	beq.n	d8784 <_strtod_r+0x3c>
   d877a:	2a2d      	cmp	r2, #45	; 0x2d
   d877c:	d004      	beq.n	d8788 <_strtod_r+0x40>
   d877e:	2a20      	cmp	r2, #32
   d8780:	d10c      	bne.n	d879c <_strtod_r+0x54>
   d8782:	e008      	b.n	d8796 <_strtod_r+0x4e>
   d8784:	2200      	movs	r2, #0
   d8786:	e000      	b.n	d878a <_strtod_r+0x42>
   d8788:	2201      	movs	r2, #1
   d878a:	920c      	str	r2, [sp, #48]	; 0x30
   d878c:	1c5a      	adds	r2, r3, #1
   d878e:	9217      	str	r2, [sp, #92]	; 0x5c
   d8790:	785b      	ldrb	r3, [r3, #1]
   d8792:	b92b      	cbnz	r3, d87a0 <_strtod_r+0x58>
   d8794:	e19a      	b.n	d8acc <_strtod_r+0x384>
   d8796:	3301      	adds	r3, #1
   d8798:	9317      	str	r3, [sp, #92]	; 0x5c
   d879a:	e7e2      	b.n	d8762 <_strtod_r+0x1a>
   d879c:	2300      	movs	r3, #0
   d879e:	930c      	str	r3, [sp, #48]	; 0x30
   d87a0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d87a2:	782b      	ldrb	r3, [r5, #0]
   d87a4:	2b30      	cmp	r3, #48	; 0x30
   d87a6:	d15c      	bne.n	d8862 <_strtod_r+0x11a>
   d87a8:	786b      	ldrb	r3, [r5, #1]
   d87aa:	2b58      	cmp	r3, #88	; 0x58
   d87ac:	d001      	beq.n	d87b2 <_strtod_r+0x6a>
   d87ae:	2b78      	cmp	r3, #120	; 0x78
   d87b0:	d14c      	bne.n	d884c <_strtod_r+0x104>
   d87b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d87b4:	9301      	str	r3, [sp, #4]
   d87b6:	ab18      	add	r3, sp, #96	; 0x60
   d87b8:	9300      	str	r3, [sp, #0]
   d87ba:	4aa9      	ldr	r2, [pc, #676]	; (d8a60 <_strtod_r+0x318>)
   d87bc:	9802      	ldr	r0, [sp, #8]
   d87be:	ab19      	add	r3, sp, #100	; 0x64
   d87c0:	a917      	add	r1, sp, #92	; 0x5c
   d87c2:	f000 fe14 	bl	d93ee <__gethex>
   d87c6:	f010 0607 	ands.w	r6, r0, #7
   d87ca:	4604      	mov	r4, r0
   d87cc:	f000 8587 	beq.w	d92de <_strtod_r+0xb96>
   d87d0:	2e06      	cmp	r6, #6
   d87d2:	d105      	bne.n	d87e0 <_strtod_r+0x98>
   d87d4:	3501      	adds	r5, #1
   d87d6:	2300      	movs	r3, #0
   d87d8:	9517      	str	r5, [sp, #92]	; 0x5c
   d87da:	930c      	str	r3, [sp, #48]	; 0x30
   d87dc:	f000 bd7f 	b.w	d92de <_strtod_r+0xb96>
   d87e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d87e2:	b13a      	cbz	r2, d87f4 <_strtod_r+0xac>
   d87e4:	2135      	movs	r1, #53	; 0x35
   d87e6:	a81a      	add	r0, sp, #104	; 0x68
   d87e8:	f001 fc87 	bl	da0fa <__copybits>
   d87ec:	9918      	ldr	r1, [sp, #96]	; 0x60
   d87ee:	9802      	ldr	r0, [sp, #8]
   d87f0:	f001 f904 	bl	d99fc <_Bfree>
   d87f4:	2e06      	cmp	r6, #6
   d87f6:	d822      	bhi.n	d883e <_strtod_r+0xf6>
   d87f8:	e8df f006 	tbb	[pc, r6]
   d87fc:	18080d04 	.word	0x18080d04
   d8800:	0d1d      	.short	0x0d1d
   d8802:	04          	.byte	0x04
   d8803:	00          	.byte	0x00
   d8804:	f04f 0b00 	mov.w	fp, #0
   d8808:	46da      	mov	sl, fp
   d880a:	e018      	b.n	d883e <_strtod_r+0xf6>
   d880c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d8810:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d8814:	e013      	b.n	d883e <_strtod_r+0xf6>
   d8816:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d8818:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d881a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d881e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d8822:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d8826:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d882a:	e008      	b.n	d883e <_strtod_r+0xf6>
   d882c:	f8df b234 	ldr.w	fp, [pc, #564]	; d8a64 <_strtod_r+0x31c>
   d8830:	f04f 0a00 	mov.w	sl, #0
   d8834:	e003      	b.n	d883e <_strtod_r+0xf6>
   d8836:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d883a:	f04f 3aff 	mov.w	sl, #4294967295
   d883e:	0721      	lsls	r1, r4, #28
   d8840:	f140 854d 	bpl.w	d92de <_strtod_r+0xb96>
   d8844:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d8848:	f000 bd49 	b.w	d92de <_strtod_r+0xb96>
   d884c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d884e:	1c5a      	adds	r2, r3, #1
   d8850:	9217      	str	r2, [sp, #92]	; 0x5c
   d8852:	785b      	ldrb	r3, [r3, #1]
   d8854:	2b30      	cmp	r3, #48	; 0x30
   d8856:	d0f9      	beq.n	d884c <_strtod_r+0x104>
   d8858:	2b00      	cmp	r3, #0
   d885a:	f000 8540 	beq.w	d92de <_strtod_r+0xb96>
   d885e:	2301      	movs	r3, #1
   d8860:	e000      	b.n	d8864 <_strtod_r+0x11c>
   d8862:	2300      	movs	r3, #0
   d8864:	f04f 0800 	mov.w	r8, #0
   d8868:	9306      	str	r3, [sp, #24]
   d886a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d886c:	9307      	str	r3, [sp, #28]
   d886e:	f8cd 8014 	str.w	r8, [sp, #20]
   d8872:	f8cd 8010 	str.w	r8, [sp, #16]
   d8876:	220a      	movs	r2, #10
   d8878:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d887a:	782e      	ldrb	r6, [r5, #0]
   d887c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d8880:	b2d9      	uxtb	r1, r3
   d8882:	2909      	cmp	r1, #9
   d8884:	d80e      	bhi.n	d88a4 <_strtod_r+0x15c>
   d8886:	9904      	ldr	r1, [sp, #16]
   d8888:	2908      	cmp	r1, #8
   d888a:	bfdd      	ittte	le
   d888c:	9905      	ldrle	r1, [sp, #20]
   d888e:	fb02 3301 	mlale	r3, r2, r1, r3
   d8892:	9305      	strle	r3, [sp, #20]
   d8894:	fb02 3808 	mlagt	r8, r2, r8, r3
   d8898:	9b04      	ldr	r3, [sp, #16]
   d889a:	3501      	adds	r5, #1
   d889c:	3301      	adds	r3, #1
   d889e:	9304      	str	r3, [sp, #16]
   d88a0:	9517      	str	r5, [sp, #92]	; 0x5c
   d88a2:	e7e9      	b.n	d8878 <_strtod_r+0x130>
   d88a4:	9802      	ldr	r0, [sp, #8]
   d88a6:	f7ff fe7d 	bl	d85a4 <_localeconv_r>
   d88aa:	6807      	ldr	r7, [r0, #0]
   d88ac:	9802      	ldr	r0, [sp, #8]
   d88ae:	f7ff fe79 	bl	d85a4 <_localeconv_r>
   d88b2:	6800      	ldr	r0, [r0, #0]
   d88b4:	f7ff fed8 	bl	d8668 <strlen>
   d88b8:	4639      	mov	r1, r7
   d88ba:	4602      	mov	r2, r0
   d88bc:	4628      	mov	r0, r5
   d88be:	f7ff feff 	bl	d86c0 <strncmp>
   d88c2:	4607      	mov	r7, r0
   d88c4:	b128      	cbz	r0, d88d2 <_strtod_r+0x18a>
   d88c6:	2000      	movs	r0, #0
   d88c8:	4633      	mov	r3, r6
   d88ca:	9d04      	ldr	r5, [sp, #16]
   d88cc:	4602      	mov	r2, r0
   d88ce:	4601      	mov	r1, r0
   d88d0:	e057      	b.n	d8982 <_strtod_r+0x23a>
   d88d2:	9802      	ldr	r0, [sp, #8]
   d88d4:	f7ff fe66 	bl	d85a4 <_localeconv_r>
   d88d8:	6800      	ldr	r0, [r0, #0]
   d88da:	f7ff fec5 	bl	d8668 <strlen>
   d88de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d88e0:	181a      	adds	r2, r3, r0
   d88e2:	9217      	str	r2, [sp, #92]	; 0x5c
   d88e4:	9a04      	ldr	r2, [sp, #16]
   d88e6:	5c1b      	ldrb	r3, [r3, r0]
   d88e8:	2a00      	cmp	r2, #0
   d88ea:	d142      	bne.n	d8972 <_strtod_r+0x22a>
   d88ec:	4610      	mov	r0, r2
   d88ee:	2b30      	cmp	r3, #48	; 0x30
   d88f0:	d105      	bne.n	d88fe <_strtod_r+0x1b6>
   d88f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d88f4:	1c5a      	adds	r2, r3, #1
   d88f6:	9217      	str	r2, [sp, #92]	; 0x5c
   d88f8:	3001      	adds	r0, #1
   d88fa:	785b      	ldrb	r3, [r3, #1]
   d88fc:	e7f7      	b.n	d88ee <_strtod_r+0x1a6>
   d88fe:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d8902:	2a08      	cmp	r2, #8
   d8904:	d843      	bhi.n	d898e <_strtod_r+0x246>
   d8906:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d8908:	9207      	str	r2, [sp, #28]
   d890a:	4602      	mov	r2, r0
   d890c:	2000      	movs	r0, #0
   d890e:	4605      	mov	r5, r0
   d8910:	3b30      	subs	r3, #48	; 0x30
   d8912:	f100 0101 	add.w	r1, r0, #1
   d8916:	d026      	beq.n	d8966 <_strtod_r+0x21e>
   d8918:	440a      	add	r2, r1
   d891a:	eb05 0c00 	add.w	ip, r5, r0
   d891e:	4629      	mov	r1, r5
   d8920:	260a      	movs	r6, #10
   d8922:	4561      	cmp	r1, ip
   d8924:	d00e      	beq.n	d8944 <_strtod_r+0x1fc>
   d8926:	3101      	adds	r1, #1
   d8928:	f101 3eff 	add.w	lr, r1, #4294967295
   d892c:	f1be 0f08 	cmp.w	lr, #8
   d8930:	dc03      	bgt.n	d893a <_strtod_r+0x1f2>
   d8932:	9f05      	ldr	r7, [sp, #20]
   d8934:	4377      	muls	r7, r6
   d8936:	9705      	str	r7, [sp, #20]
   d8938:	e7f3      	b.n	d8922 <_strtod_r+0x1da>
   d893a:	2910      	cmp	r1, #16
   d893c:	bfd8      	it	le
   d893e:	fb06 f808 	mulle.w	r8, r6, r8
   d8942:	e7ee      	b.n	d8922 <_strtod_r+0x1da>
   d8944:	4428      	add	r0, r5
   d8946:	2808      	cmp	r0, #8
   d8948:	f100 0501 	add.w	r5, r0, #1
   d894c:	dc05      	bgt.n	d895a <_strtod_r+0x212>
   d894e:	9805      	ldr	r0, [sp, #20]
   d8950:	210a      	movs	r1, #10
   d8952:	fb01 3300 	mla	r3, r1, r0, r3
   d8956:	9305      	str	r3, [sp, #20]
   d8958:	e004      	b.n	d8964 <_strtod_r+0x21c>
   d895a:	2d10      	cmp	r5, #16
   d895c:	bfdc      	itt	le
   d895e:	210a      	movle	r1, #10
   d8960:	fb01 3808 	mlale	r8, r1, r8, r3
   d8964:	2100      	movs	r1, #0
   d8966:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8968:	1c58      	adds	r0, r3, #1
   d896a:	9017      	str	r0, [sp, #92]	; 0x5c
   d896c:	785b      	ldrb	r3, [r3, #1]
   d896e:	4608      	mov	r0, r1
   d8970:	e002      	b.n	d8978 <_strtod_r+0x230>
   d8972:	9d04      	ldr	r5, [sp, #16]
   d8974:	4638      	mov	r0, r7
   d8976:	463a      	mov	r2, r7
   d8978:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d897c:	2909      	cmp	r1, #9
   d897e:	d9c7      	bls.n	d8910 <_strtod_r+0x1c8>
   d8980:	2101      	movs	r1, #1
   d8982:	2b65      	cmp	r3, #101	; 0x65
   d8984:	d001      	beq.n	d898a <_strtod_r+0x242>
   d8986:	2b45      	cmp	r3, #69	; 0x45
   d8988:	d151      	bne.n	d8a2e <_strtod_r+0x2e6>
   d898a:	b96d      	cbnz	r5, d89a8 <_strtod_r+0x260>
   d898c:	e004      	b.n	d8998 <_strtod_r+0x250>
   d898e:	2b65      	cmp	r3, #101	; 0x65
   d8990:	f040 84b3 	bne.w	d92fa <_strtod_r+0xbb2>
   d8994:	2200      	movs	r2, #0
   d8996:	2101      	movs	r1, #1
   d8998:	b928      	cbnz	r0, d89a6 <_strtod_r+0x25e>
   d899a:	9b06      	ldr	r3, [sp, #24]
   d899c:	2b00      	cmp	r3, #0
   d899e:	f000 8095 	beq.w	d8acc <_strtod_r+0x384>
   d89a2:	4605      	mov	r5, r0
   d89a4:	e000      	b.n	d89a8 <_strtod_r+0x260>
   d89a6:	2500      	movs	r5, #0
   d89a8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d89aa:	1c63      	adds	r3, r4, #1
   d89ac:	9317      	str	r3, [sp, #92]	; 0x5c
   d89ae:	7863      	ldrb	r3, [r4, #1]
   d89b0:	2b2b      	cmp	r3, #43	; 0x2b
   d89b2:	d006      	beq.n	d89c2 <_strtod_r+0x27a>
   d89b4:	2b2d      	cmp	r3, #45	; 0x2d
   d89b6:	d002      	beq.n	d89be <_strtod_r+0x276>
   d89b8:	2600      	movs	r6, #0
   d89ba:	9603      	str	r6, [sp, #12]
   d89bc:	e006      	b.n	d89cc <_strtod_r+0x284>
   d89be:	2301      	movs	r3, #1
   d89c0:	e000      	b.n	d89c4 <_strtod_r+0x27c>
   d89c2:	2300      	movs	r3, #0
   d89c4:	9303      	str	r3, [sp, #12]
   d89c6:	1ca3      	adds	r3, r4, #2
   d89c8:	9317      	str	r3, [sp, #92]	; 0x5c
   d89ca:	78a3      	ldrb	r3, [r4, #2]
   d89cc:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d89d0:	2e09      	cmp	r6, #9
   d89d2:	d82b      	bhi.n	d8a2c <_strtod_r+0x2e4>
   d89d4:	2b30      	cmp	r3, #48	; 0x30
   d89d6:	d104      	bne.n	d89e2 <_strtod_r+0x29a>
   d89d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d89da:	1c5e      	adds	r6, r3, #1
   d89dc:	9617      	str	r6, [sp, #92]	; 0x5c
   d89de:	785b      	ldrb	r3, [r3, #1]
   d89e0:	e7f8      	b.n	d89d4 <_strtod_r+0x28c>
   d89e2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d89e6:	2e08      	cmp	r6, #8
   d89e8:	d821      	bhi.n	d8a2e <_strtod_r+0x2e6>
   d89ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d89ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d89f0:	f04f 0c0a 	mov.w	ip, #10
   d89f4:	461f      	mov	r7, r3
   d89f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d89f8:	1c5e      	adds	r6, r3, #1
   d89fa:	9617      	str	r6, [sp, #92]	; 0x5c
   d89fc:	785b      	ldrb	r3, [r3, #1]
   d89fe:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d8a02:	f1b9 0f09 	cmp.w	r9, #9
   d8a06:	d804      	bhi.n	d8a12 <_strtod_r+0x2ca>
   d8a08:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d8a0c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d8a10:	e7f1      	b.n	d89f6 <_strtod_r+0x2ae>
   d8a12:	1bf6      	subs	r6, r6, r7
   d8a14:	2e08      	cmp	r6, #8
   d8a16:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d8a1a:	dc02      	bgt.n	d8a22 <_strtod_r+0x2da>
   d8a1c:	45f1      	cmp	r9, lr
   d8a1e:	bfa8      	it	ge
   d8a20:	46f1      	movge	r9, lr
   d8a22:	9e03      	ldr	r6, [sp, #12]
   d8a24:	b12e      	cbz	r6, d8a32 <_strtod_r+0x2ea>
   d8a26:	f1c9 0900 	rsb	r9, r9, #0
   d8a2a:	e002      	b.n	d8a32 <_strtod_r+0x2ea>
   d8a2c:	9417      	str	r4, [sp, #92]	; 0x5c
   d8a2e:	f04f 0900 	mov.w	r9, #0
   d8a32:	2d00      	cmp	r5, #0
   d8a34:	d153      	bne.n	d8ade <_strtod_r+0x396>
   d8a36:	2800      	cmp	r0, #0
   d8a38:	f040 8451 	bne.w	d92de <_strtod_r+0xb96>
   d8a3c:	9a06      	ldr	r2, [sp, #24]
   d8a3e:	2a00      	cmp	r2, #0
   d8a40:	f040 844d 	bne.w	d92de <_strtod_r+0xb96>
   d8a44:	2900      	cmp	r1, #0
   d8a46:	d141      	bne.n	d8acc <_strtod_r+0x384>
   d8a48:	2b4e      	cmp	r3, #78	; 0x4e
   d8a4a:	d020      	beq.n	d8a8e <_strtod_r+0x346>
   d8a4c:	dc02      	bgt.n	d8a54 <_strtod_r+0x30c>
   d8a4e:	2b49      	cmp	r3, #73	; 0x49
   d8a50:	d00a      	beq.n	d8a68 <_strtod_r+0x320>
   d8a52:	e03b      	b.n	d8acc <_strtod_r+0x384>
   d8a54:	2b69      	cmp	r3, #105	; 0x69
   d8a56:	d007      	beq.n	d8a68 <_strtod_r+0x320>
   d8a58:	2b6e      	cmp	r3, #110	; 0x6e
   d8a5a:	d018      	beq.n	d8a8e <_strtod_r+0x346>
   d8a5c:	e036      	b.n	d8acc <_strtod_r+0x384>
   d8a5e:	bf00      	nop
   d8a60:	000dafbc 	.word	0x000dafbc
   d8a64:	7ff00000 	.word	0x7ff00000
   d8a68:	49a8      	ldr	r1, [pc, #672]	; (d8d0c <_strtod_r+0x5c4>)
   d8a6a:	a817      	add	r0, sp, #92	; 0x5c
   d8a6c:	f000 fef0 	bl	d9850 <__match>
   d8a70:	b360      	cbz	r0, d8acc <_strtod_r+0x384>
   d8a72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8a74:	49a6      	ldr	r1, [pc, #664]	; (d8d10 <_strtod_r+0x5c8>)
   d8a76:	3b01      	subs	r3, #1
   d8a78:	a817      	add	r0, sp, #92	; 0x5c
   d8a7a:	9317      	str	r3, [sp, #92]	; 0x5c
   d8a7c:	f000 fee8 	bl	d9850 <__match>
   d8a80:	b910      	cbnz	r0, d8a88 <_strtod_r+0x340>
   d8a82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8a84:	3301      	adds	r3, #1
   d8a86:	9317      	str	r3, [sp, #92]	; 0x5c
   d8a88:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d8d2c <_strtod_r+0x5e4>
   d8a8c:	e01a      	b.n	d8ac4 <_strtod_r+0x37c>
   d8a8e:	49a1      	ldr	r1, [pc, #644]	; (d8d14 <_strtod_r+0x5cc>)
   d8a90:	a817      	add	r0, sp, #92	; 0x5c
   d8a92:	f000 fedd 	bl	d9850 <__match>
   d8a96:	b1c8      	cbz	r0, d8acc <_strtod_r+0x384>
   d8a98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8a9a:	781b      	ldrb	r3, [r3, #0]
   d8a9c:	2b28      	cmp	r3, #40	; 0x28
   d8a9e:	d10f      	bne.n	d8ac0 <_strtod_r+0x378>
   d8aa0:	aa1a      	add	r2, sp, #104	; 0x68
   d8aa2:	499d      	ldr	r1, [pc, #628]	; (d8d18 <_strtod_r+0x5d0>)
   d8aa4:	a817      	add	r0, sp, #92	; 0x5c
   d8aa6:	f000 fee6 	bl	d9876 <__hexnan>
   d8aaa:	2805      	cmp	r0, #5
   d8aac:	d108      	bne.n	d8ac0 <_strtod_r+0x378>
   d8aae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d8ab0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d8ab4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d8ab8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d8abc:	f000 bc0f 	b.w	d92de <_strtod_r+0xb96>
   d8ac0:	f8df b26c 	ldr.w	fp, [pc, #620]	; d8d30 <_strtod_r+0x5e8>
   d8ac4:	f04f 0a00 	mov.w	sl, #0
   d8ac8:	f000 bc09 	b.w	d92de <_strtod_r+0xb96>
   d8acc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d8ace:	9417      	str	r4, [sp, #92]	; 0x5c
   d8ad0:	2b00      	cmp	r3, #0
   d8ad2:	f000 840f 	beq.w	d92f4 <_strtod_r+0xbac>
   d8ad6:	2300      	movs	r3, #0
   d8ad8:	930c      	str	r3, [sp, #48]	; 0x30
   d8ada:	f000 bc02 	b.w	d92e2 <_strtod_r+0xb9a>
   d8ade:	9b04      	ldr	r3, [sp, #16]
   d8ae0:	9805      	ldr	r0, [sp, #20]
   d8ae2:	2b00      	cmp	r3, #0
   d8ae4:	bf08      	it	eq
   d8ae6:	462b      	moveq	r3, r5
   d8ae8:	2d10      	cmp	r5, #16
   d8aea:	462c      	mov	r4, r5
   d8aec:	ebc2 0909 	rsb	r9, r2, r9
   d8af0:	bfa8      	it	ge
   d8af2:	2410      	movge	r4, #16
   d8af4:	9304      	str	r3, [sp, #16]
   d8af6:	f7ff f987 	bl	d7e08 <__aeabi_ui2d>
   d8afa:	2c09      	cmp	r4, #9
   d8afc:	4682      	mov	sl, r0
   d8afe:	468b      	mov	fp, r1
   d8b00:	dd13      	ble.n	d8b2a <_strtod_r+0x3e2>
   d8b02:	4b86      	ldr	r3, [pc, #536]	; (d8d1c <_strtod_r+0x5d4>)
   d8b04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d8b08:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d8b0c:	f7ff f9f2 	bl	d7ef4 <__aeabi_dmul>
   d8b10:	4606      	mov	r6, r0
   d8b12:	4640      	mov	r0, r8
   d8b14:	460f      	mov	r7, r1
   d8b16:	f7ff f977 	bl	d7e08 <__aeabi_ui2d>
   d8b1a:	4602      	mov	r2, r0
   d8b1c:	460b      	mov	r3, r1
   d8b1e:	4630      	mov	r0, r6
   d8b20:	4639      	mov	r1, r7
   d8b22:	f7ff f835 	bl	d7b90 <__adddf3>
   d8b26:	4682      	mov	sl, r0
   d8b28:	468b      	mov	fp, r1
   d8b2a:	2d0f      	cmp	r5, #15
   d8b2c:	dc36      	bgt.n	d8b9c <_strtod_r+0x454>
   d8b2e:	f1b9 0f00 	cmp.w	r9, #0
   d8b32:	f000 83d4 	beq.w	d92de <_strtod_r+0xb96>
   d8b36:	dd24      	ble.n	d8b82 <_strtod_r+0x43a>
   d8b38:	f1b9 0f16 	cmp.w	r9, #22
   d8b3c:	dc07      	bgt.n	d8b4e <_strtod_r+0x406>
   d8b3e:	4d77      	ldr	r5, [pc, #476]	; (d8d1c <_strtod_r+0x5d4>)
   d8b40:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d8b44:	4652      	mov	r2, sl
   d8b46:	465b      	mov	r3, fp
   d8b48:	e9d9 0100 	ldrd	r0, r1, [r9]
   d8b4c:	e014      	b.n	d8b78 <_strtod_r+0x430>
   d8b4e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d8b52:	4599      	cmp	r9, r3
   d8b54:	dc22      	bgt.n	d8b9c <_strtod_r+0x454>
   d8b56:	4c71      	ldr	r4, [pc, #452]	; (d8d1c <_strtod_r+0x5d4>)
   d8b58:	f1c5 050f 	rsb	r5, r5, #15
   d8b5c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d8b60:	ebc5 0509 	rsb	r5, r5, r9
   d8b64:	4652      	mov	r2, sl
   d8b66:	465b      	mov	r3, fp
   d8b68:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8b6c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d8b70:	f7ff f9c0 	bl	d7ef4 <__aeabi_dmul>
   d8b74:	e9d4 2300 	ldrd	r2, r3, [r4]
   d8b78:	f7ff f9bc 	bl	d7ef4 <__aeabi_dmul>
   d8b7c:	4682      	mov	sl, r0
   d8b7e:	468b      	mov	fp, r1
   d8b80:	e3ad      	b.n	d92de <_strtod_r+0xb96>
   d8b82:	f119 0f16 	cmn.w	r9, #22
   d8b86:	db09      	blt.n	d8b9c <_strtod_r+0x454>
   d8b88:	4d64      	ldr	r5, [pc, #400]	; (d8d1c <_strtod_r+0x5d4>)
   d8b8a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d8b8e:	e9d9 2300 	ldrd	r2, r3, [r9]
   d8b92:	4650      	mov	r0, sl
   d8b94:	4659      	mov	r1, fp
   d8b96:	f7ff fad7 	bl	d8148 <__aeabi_ddiv>
   d8b9a:	e7ef      	b.n	d8b7c <_strtod_r+0x434>
   d8b9c:	1b2c      	subs	r4, r5, r4
   d8b9e:	444c      	add	r4, r9
   d8ba0:	2c00      	cmp	r4, #0
   d8ba2:	dd57      	ble.n	d8c54 <_strtod_r+0x50c>
   d8ba4:	f014 010f 	ands.w	r1, r4, #15
   d8ba8:	d00a      	beq.n	d8bc0 <_strtod_r+0x478>
   d8baa:	4b5c      	ldr	r3, [pc, #368]	; (d8d1c <_strtod_r+0x5d4>)
   d8bac:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d8bb0:	4652      	mov	r2, sl
   d8bb2:	465b      	mov	r3, fp
   d8bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8bb8:	f7ff f99c 	bl	d7ef4 <__aeabi_dmul>
   d8bbc:	4682      	mov	sl, r0
   d8bbe:	468b      	mov	fp, r1
   d8bc0:	f034 040f 	bics.w	r4, r4, #15
   d8bc4:	f000 80b8 	beq.w	d8d38 <_strtod_r+0x5f0>
   d8bc8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d8bcc:	dd0b      	ble.n	d8be6 <_strtod_r+0x49e>
   d8bce:	2400      	movs	r4, #0
   d8bd0:	4625      	mov	r5, r4
   d8bd2:	9405      	str	r4, [sp, #20]
   d8bd4:	9404      	str	r4, [sp, #16]
   d8bd6:	9a02      	ldr	r2, [sp, #8]
   d8bd8:	f8df b150 	ldr.w	fp, [pc, #336]	; d8d2c <_strtod_r+0x5e4>
   d8bdc:	2322      	movs	r3, #34	; 0x22
   d8bde:	6013      	str	r3, [r2, #0]
   d8be0:	f04f 0a00 	mov.w	sl, #0
   d8be4:	e187      	b.n	d8ef6 <_strtod_r+0x7ae>
   d8be6:	4e4e      	ldr	r6, [pc, #312]	; (d8d20 <_strtod_r+0x5d8>)
   d8be8:	2300      	movs	r3, #0
   d8bea:	1124      	asrs	r4, r4, #4
   d8bec:	4650      	mov	r0, sl
   d8bee:	4659      	mov	r1, fp
   d8bf0:	4698      	mov	r8, r3
   d8bf2:	4637      	mov	r7, r6
   d8bf4:	2c01      	cmp	r4, #1
   d8bf6:	dd0b      	ble.n	d8c10 <_strtod_r+0x4c8>
   d8bf8:	07e2      	lsls	r2, r4, #31
   d8bfa:	d504      	bpl.n	d8c06 <_strtod_r+0x4be>
   d8bfc:	e9d6 2300 	ldrd	r2, r3, [r6]
   d8c00:	f7ff f978 	bl	d7ef4 <__aeabi_dmul>
   d8c04:	2301      	movs	r3, #1
   d8c06:	f108 0801 	add.w	r8, r8, #1
   d8c0a:	1064      	asrs	r4, r4, #1
   d8c0c:	3608      	adds	r6, #8
   d8c0e:	e7f1      	b.n	d8bf4 <_strtod_r+0x4ac>
   d8c10:	b10b      	cbz	r3, d8c16 <_strtod_r+0x4ce>
   d8c12:	4682      	mov	sl, r0
   d8c14:	468b      	mov	fp, r1
   d8c16:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d8c1a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d8c1e:	4652      	mov	r2, sl
   d8c20:	465b      	mov	r3, fp
   d8c22:	e9d7 0100 	ldrd	r0, r1, [r7]
   d8c26:	f7ff f965 	bl	d7ef4 <__aeabi_dmul>
   d8c2a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8c2e:	468b      	mov	fp, r1
   d8c30:	460a      	mov	r2, r1
   d8c32:	0d1b      	lsrs	r3, r3, #20
   d8c34:	493b      	ldr	r1, [pc, #236]	; (d8d24 <_strtod_r+0x5dc>)
   d8c36:	051b      	lsls	r3, r3, #20
   d8c38:	428b      	cmp	r3, r1
   d8c3a:	4682      	mov	sl, r0
   d8c3c:	d8c7      	bhi.n	d8bce <_strtod_r+0x486>
   d8c3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d8c42:	428b      	cmp	r3, r1
   d8c44:	bf86      	itte	hi
   d8c46:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d8d34 <_strtod_r+0x5ec>
   d8c4a:	f04f 3aff 	movhi.w	sl, #4294967295
   d8c4e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d8c52:	e071      	b.n	d8d38 <_strtod_r+0x5f0>
   d8c54:	d070      	beq.n	d8d38 <_strtod_r+0x5f0>
   d8c56:	4264      	negs	r4, r4
   d8c58:	f014 020f 	ands.w	r2, r4, #15
   d8c5c:	d00a      	beq.n	d8c74 <_strtod_r+0x52c>
   d8c5e:	4b2f      	ldr	r3, [pc, #188]	; (d8d1c <_strtod_r+0x5d4>)
   d8c60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d8c64:	4650      	mov	r0, sl
   d8c66:	4659      	mov	r1, fp
   d8c68:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c6c:	f7ff fa6c 	bl	d8148 <__aeabi_ddiv>
   d8c70:	4682      	mov	sl, r0
   d8c72:	468b      	mov	fp, r1
   d8c74:	1124      	asrs	r4, r4, #4
   d8c76:	d05f      	beq.n	d8d38 <_strtod_r+0x5f0>
   d8c78:	2c1f      	cmp	r4, #31
   d8c7a:	dd04      	ble.n	d8c86 <_strtod_r+0x53e>
   d8c7c:	2400      	movs	r4, #0
   d8c7e:	4625      	mov	r5, r4
   d8c80:	9405      	str	r4, [sp, #20]
   d8c82:	9404      	str	r4, [sp, #16]
   d8c84:	e130      	b.n	d8ee8 <_strtod_r+0x7a0>
   d8c86:	f014 0f10 	tst.w	r4, #16
   d8c8a:	bf0c      	ite	eq
   d8c8c:	2300      	moveq	r3, #0
   d8c8e:	236a      	movne	r3, #106	; 0x6a
   d8c90:	4e25      	ldr	r6, [pc, #148]	; (d8d28 <_strtod_r+0x5e0>)
   d8c92:	9303      	str	r3, [sp, #12]
   d8c94:	4650      	mov	r0, sl
   d8c96:	4659      	mov	r1, fp
   d8c98:	2300      	movs	r3, #0
   d8c9a:	2c00      	cmp	r4, #0
   d8c9c:	dd09      	ble.n	d8cb2 <_strtod_r+0x56a>
   d8c9e:	07e2      	lsls	r2, r4, #31
   d8ca0:	d504      	bpl.n	d8cac <_strtod_r+0x564>
   d8ca2:	e9d6 2300 	ldrd	r2, r3, [r6]
   d8ca6:	f7ff f925 	bl	d7ef4 <__aeabi_dmul>
   d8caa:	2301      	movs	r3, #1
   d8cac:	1064      	asrs	r4, r4, #1
   d8cae:	3608      	adds	r6, #8
   d8cb0:	e7f3      	b.n	d8c9a <_strtod_r+0x552>
   d8cb2:	b10b      	cbz	r3, d8cb8 <_strtod_r+0x570>
   d8cb4:	4682      	mov	sl, r0
   d8cb6:	468b      	mov	fp, r1
   d8cb8:	9b03      	ldr	r3, [sp, #12]
   d8cba:	b1eb      	cbz	r3, d8cf8 <_strtod_r+0x5b0>
   d8cbc:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d8cc0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8cc4:	2b00      	cmp	r3, #0
   d8cc6:	4659      	mov	r1, fp
   d8cc8:	dd16      	ble.n	d8cf8 <_strtod_r+0x5b0>
   d8cca:	2b1f      	cmp	r3, #31
   d8ccc:	dd0e      	ble.n	d8cec <_strtod_r+0x5a4>
   d8cce:	2b34      	cmp	r3, #52	; 0x34
   d8cd0:	bfde      	ittt	le
   d8cd2:	3b20      	suble	r3, #32
   d8cd4:	f04f 32ff 	movle.w	r2, #4294967295
   d8cd8:	fa02 f303 	lslle.w	r3, r2, r3
   d8cdc:	f04f 0a00 	mov.w	sl, #0
   d8ce0:	bfcc      	ite	gt
   d8ce2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d8ce6:	ea03 0b01 	andle.w	fp, r3, r1
   d8cea:	e005      	b.n	d8cf8 <_strtod_r+0x5b0>
   d8cec:	f04f 32ff 	mov.w	r2, #4294967295
   d8cf0:	fa02 f303 	lsl.w	r3, r2, r3
   d8cf4:	ea03 0a0a 	and.w	sl, r3, sl
   d8cf8:	2200      	movs	r2, #0
   d8cfa:	2300      	movs	r3, #0
   d8cfc:	4650      	mov	r0, sl
   d8cfe:	4659      	mov	r1, fp
   d8d00:	f7ff fb60 	bl	d83c4 <__aeabi_dcmpeq>
   d8d04:	2800      	cmp	r0, #0
   d8d06:	d1b9      	bne.n	d8c7c <_strtod_r+0x534>
   d8d08:	e018      	b.n	d8d3c <_strtod_r+0x5f4>
   d8d0a:	bf00      	nop
   d8d0c:	000dafe4 	.word	0x000dafe4
   d8d10:	000dafe7 	.word	0x000dafe7
   d8d14:	000dafed 	.word	0x000dafed
   d8d18:	000dafd0 	.word	0x000dafd0
   d8d1c:	000db018 	.word	0x000db018
   d8d20:	000db0e0 	.word	0x000db0e0
   d8d24:	7ca00000 	.word	0x7ca00000
   d8d28:	000daff0 	.word	0x000daff0
   d8d2c:	7ff00000 	.word	0x7ff00000
   d8d30:	fff80000 	.word	0xfff80000
   d8d34:	7fefffff 	.word	0x7fefffff
   d8d38:	2300      	movs	r3, #0
   d8d3a:	9303      	str	r3, [sp, #12]
   d8d3c:	9b05      	ldr	r3, [sp, #20]
   d8d3e:	9300      	str	r3, [sp, #0]
   d8d40:	9a04      	ldr	r2, [sp, #16]
   d8d42:	9907      	ldr	r1, [sp, #28]
   d8d44:	9802      	ldr	r0, [sp, #8]
   d8d46:	462b      	mov	r3, r5
   d8d48:	f000 feaa 	bl	d9aa0 <__s2b>
   d8d4c:	9005      	str	r0, [sp, #20]
   d8d4e:	2800      	cmp	r0, #0
   d8d50:	f43f af3d 	beq.w	d8bce <_strtod_r+0x486>
   d8d54:	f1b9 0f00 	cmp.w	r9, #0
   d8d58:	f1c9 0300 	rsb	r3, r9, #0
   d8d5c:	bfa8      	it	ge
   d8d5e:	2300      	movge	r3, #0
   d8d60:	930d      	str	r3, [sp, #52]	; 0x34
   d8d62:	2400      	movs	r4, #0
   d8d64:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d8d68:	9312      	str	r3, [sp, #72]	; 0x48
   d8d6a:	4625      	mov	r5, r4
   d8d6c:	9b05      	ldr	r3, [sp, #20]
   d8d6e:	9802      	ldr	r0, [sp, #8]
   d8d70:	6859      	ldr	r1, [r3, #4]
   d8d72:	f000 fe0e 	bl	d9992 <_Balloc>
   d8d76:	9004      	str	r0, [sp, #16]
   d8d78:	2800      	cmp	r0, #0
   d8d7a:	f43f af2c 	beq.w	d8bd6 <_strtod_r+0x48e>
   d8d7e:	9b05      	ldr	r3, [sp, #20]
   d8d80:	691a      	ldr	r2, [r3, #16]
   d8d82:	3202      	adds	r2, #2
   d8d84:	f103 010c 	add.w	r1, r3, #12
   d8d88:	0092      	lsls	r2, r2, #2
   d8d8a:	300c      	adds	r0, #12
   d8d8c:	f7ff fc0e 	bl	d85ac <memcpy>
   d8d90:	aa1a      	add	r2, sp, #104	; 0x68
   d8d92:	a919      	add	r1, sp, #100	; 0x64
   d8d94:	ec4b ab10 	vmov	d0, sl, fp
   d8d98:	9802      	ldr	r0, [sp, #8]
   d8d9a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d8d9e:	f001 f934 	bl	da00a <__d2b>
   d8da2:	9018      	str	r0, [sp, #96]	; 0x60
   d8da4:	2800      	cmp	r0, #0
   d8da6:	f43f af16 	beq.w	d8bd6 <_strtod_r+0x48e>
   d8daa:	2101      	movs	r1, #1
   d8dac:	9802      	ldr	r0, [sp, #8]
   d8dae:	f000 ff02 	bl	d9bb6 <__i2b>
   d8db2:	4605      	mov	r5, r0
   d8db4:	2800      	cmp	r0, #0
   d8db6:	f43f af0e 	beq.w	d8bd6 <_strtod_r+0x48e>
   d8dba:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8dbc:	9903      	ldr	r1, [sp, #12]
   d8dbe:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d8dc0:	2b00      	cmp	r3, #0
   d8dc2:	bfad      	iteet	ge
   d8dc4:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d8dc6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d8dc8:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d8dcc:	eb02 0803 	addge.w	r8, r2, r3
   d8dd0:	bfb8      	it	lt
   d8dd2:	1ad2      	sublt	r2, r2, r3
   d8dd4:	eba3 0301 	sub.w	r3, r3, r1
   d8dd8:	4433      	add	r3, r6
   d8dda:	49b5      	ldr	r1, [pc, #724]	; (d90b0 <_strtod_r+0x968>)
   d8ddc:	bfa8      	it	ge
   d8dde:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d8de0:	3b01      	subs	r3, #1
   d8de2:	428b      	cmp	r3, r1
   d8de4:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d8de8:	f280 808a 	bge.w	d8f00 <_strtod_r+0x7b8>
   d8dec:	1ac9      	subs	r1, r1, r3
   d8dee:	291f      	cmp	r1, #31
   d8df0:	bfc8      	it	gt
   d8df2:	4fb0      	ldrgt	r7, [pc, #704]	; (d90b4 <_strtod_r+0x96c>)
   d8df4:	f04f 0901 	mov.w	r9, #1
   d8df8:	bfd4      	ite	le
   d8dfa:	fa09 f301 	lslle.w	r3, r9, r1
   d8dfe:	1aff      	subgt	r7, r7, r3
   d8e00:	eba6 0601 	sub.w	r6, r6, r1
   d8e04:	bfd9      	ittee	le
   d8e06:	9306      	strle	r3, [sp, #24]
   d8e08:	2700      	movle	r7, #0
   d8e0a:	fa09 f707 	lslgt.w	r7, r9, r7
   d8e0e:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d8e12:	eb08 0906 	add.w	r9, r8, r6
   d8e16:	9b03      	ldr	r3, [sp, #12]
   d8e18:	45c8      	cmp	r8, r9
   d8e1a:	4416      	add	r6, r2
   d8e1c:	441e      	add	r6, r3
   d8e1e:	4643      	mov	r3, r8
   d8e20:	bfa8      	it	ge
   d8e22:	464b      	movge	r3, r9
   d8e24:	42b3      	cmp	r3, r6
   d8e26:	bfa8      	it	ge
   d8e28:	4633      	movge	r3, r6
   d8e2a:	2b00      	cmp	r3, #0
   d8e2c:	bfc2      	ittt	gt
   d8e2e:	ebc3 0909 	rsbgt	r9, r3, r9
   d8e32:	1af6      	subgt	r6, r6, r3
   d8e34:	ebc3 0808 	rsbgt	r8, r3, r8
   d8e38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d8e3a:	2b00      	cmp	r3, #0
   d8e3c:	d164      	bne.n	d8f08 <_strtod_r+0x7c0>
   d8e3e:	f1b9 0f00 	cmp.w	r9, #0
   d8e42:	dc7a      	bgt.n	d8f3a <_strtod_r+0x7f2>
   d8e44:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d8e46:	2b00      	cmp	r3, #0
   d8e48:	f040 8081 	bne.w	d8f4e <_strtod_r+0x806>
   d8e4c:	2e00      	cmp	r6, #0
   d8e4e:	f300 8088 	bgt.w	d8f62 <_strtod_r+0x81a>
   d8e52:	f1b8 0f00 	cmp.w	r8, #0
   d8e56:	f300 808e 	bgt.w	d8f76 <_strtod_r+0x82e>
   d8e5a:	9a04      	ldr	r2, [sp, #16]
   d8e5c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8e5e:	9802      	ldr	r0, [sp, #8]
   d8e60:	f000 ffff 	bl	d9e62 <__mdiff>
   d8e64:	4604      	mov	r4, r0
   d8e66:	2800      	cmp	r0, #0
   d8e68:	f43f aeb5 	beq.w	d8bd6 <_strtod_r+0x48e>
   d8e6c:	68c3      	ldr	r3, [r0, #12]
   d8e6e:	9307      	str	r3, [sp, #28]
   d8e70:	2300      	movs	r3, #0
   d8e72:	60c3      	str	r3, [r0, #12]
   d8e74:	4629      	mov	r1, r5
   d8e76:	f000 ffd8 	bl	d9e2a <__mcmp>
   d8e7a:	2800      	cmp	r0, #0
   d8e7c:	f280 8089 	bge.w	d8f92 <_strtod_r+0x84a>
   d8e80:	9b07      	ldr	r3, [sp, #28]
   d8e82:	2b00      	cmp	r3, #0
   d8e84:	f040 8204 	bne.w	d9290 <_strtod_r+0xb48>
   d8e88:	f1ba 0f00 	cmp.w	sl, #0
   d8e8c:	f040 8200 	bne.w	d9290 <_strtod_r+0xb48>
   d8e90:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8e94:	2b00      	cmp	r3, #0
   d8e96:	f040 81fb 	bne.w	d9290 <_strtod_r+0xb48>
   d8e9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8e9e:	0d1b      	lsrs	r3, r3, #20
   d8ea0:	051b      	lsls	r3, r3, #20
   d8ea2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d8ea6:	f240 81f3 	bls.w	d9290 <_strtod_r+0xb48>
   d8eaa:	6963      	ldr	r3, [r4, #20]
   d8eac:	2b00      	cmp	r3, #0
   d8eae:	d06c      	beq.n	d8f8a <_strtod_r+0x842>
   d8eb0:	4621      	mov	r1, r4
   d8eb2:	2201      	movs	r2, #1
   d8eb4:	9802      	ldr	r0, [sp, #8]
   d8eb6:	f000 ff67 	bl	d9d88 <__lshift>
   d8eba:	4629      	mov	r1, r5
   d8ebc:	4604      	mov	r4, r0
   d8ebe:	f000 ffb4 	bl	d9e2a <__mcmp>
   d8ec2:	2800      	cmp	r0, #0
   d8ec4:	f340 81e4 	ble.w	d9290 <_strtod_r+0xb48>
   d8ec8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8ecc:	9a03      	ldr	r2, [sp, #12]
   d8ece:	0d1b      	lsrs	r3, r3, #20
   d8ed0:	051b      	lsls	r3, r3, #20
   d8ed2:	2a00      	cmp	r2, #0
   d8ed4:	f000 808c 	beq.w	d8ff0 <_strtod_r+0x8a8>
   d8ed8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d8edc:	f300 8088 	bgt.w	d8ff0 <_strtod_r+0x8a8>
   d8ee0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d8ee4:	f300 81d6 	bgt.w	d9294 <_strtod_r+0xb4c>
   d8ee8:	9a02      	ldr	r2, [sp, #8]
   d8eea:	2322      	movs	r3, #34	; 0x22
   d8eec:	f04f 0a00 	mov.w	sl, #0
   d8ef0:	f04f 0b00 	mov.w	fp, #0
   d8ef4:	6013      	str	r3, [r2, #0]
   d8ef6:	9b05      	ldr	r3, [sp, #20]
   d8ef8:	2b00      	cmp	r3, #0
   d8efa:	f040 81dc 	bne.w	d92b6 <_strtod_r+0xb6e>
   d8efe:	e1ee      	b.n	d92de <_strtod_r+0xb96>
   d8f00:	2301      	movs	r3, #1
   d8f02:	2700      	movs	r7, #0
   d8f04:	9306      	str	r3, [sp, #24]
   d8f06:	e784      	b.n	d8e12 <_strtod_r+0x6ca>
   d8f08:	4629      	mov	r1, r5
   d8f0a:	461a      	mov	r2, r3
   d8f0c:	9802      	ldr	r0, [sp, #8]
   d8f0e:	f000 feed 	bl	d9cec <__pow5mult>
   d8f12:	4605      	mov	r5, r0
   d8f14:	2800      	cmp	r0, #0
   d8f16:	f43f ae5e 	beq.w	d8bd6 <_strtod_r+0x48e>
   d8f1a:	4601      	mov	r1, r0
   d8f1c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d8f1e:	9802      	ldr	r0, [sp, #8]
   d8f20:	f000 fe52 	bl	d9bc8 <__multiply>
   d8f24:	9007      	str	r0, [sp, #28]
   d8f26:	2800      	cmp	r0, #0
   d8f28:	f43f ae55 	beq.w	d8bd6 <_strtod_r+0x48e>
   d8f2c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8f2e:	9802      	ldr	r0, [sp, #8]
   d8f30:	f000 fd64 	bl	d99fc <_Bfree>
   d8f34:	9b07      	ldr	r3, [sp, #28]
   d8f36:	9318      	str	r3, [sp, #96]	; 0x60
   d8f38:	e781      	b.n	d8e3e <_strtod_r+0x6f6>
   d8f3a:	464a      	mov	r2, r9
   d8f3c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8f3e:	9802      	ldr	r0, [sp, #8]
   d8f40:	f000 ff22 	bl	d9d88 <__lshift>
   d8f44:	9018      	str	r0, [sp, #96]	; 0x60
   d8f46:	2800      	cmp	r0, #0
   d8f48:	f47f af7c 	bne.w	d8e44 <_strtod_r+0x6fc>
   d8f4c:	e643      	b.n	d8bd6 <_strtod_r+0x48e>
   d8f4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d8f50:	9904      	ldr	r1, [sp, #16]
   d8f52:	9802      	ldr	r0, [sp, #8]
   d8f54:	f000 feca 	bl	d9cec <__pow5mult>
   d8f58:	9004      	str	r0, [sp, #16]
   d8f5a:	2800      	cmp	r0, #0
   d8f5c:	f47f af76 	bne.w	d8e4c <_strtod_r+0x704>
   d8f60:	e639      	b.n	d8bd6 <_strtod_r+0x48e>
   d8f62:	4632      	mov	r2, r6
   d8f64:	9904      	ldr	r1, [sp, #16]
   d8f66:	9802      	ldr	r0, [sp, #8]
   d8f68:	f000 ff0e 	bl	d9d88 <__lshift>
   d8f6c:	9004      	str	r0, [sp, #16]
   d8f6e:	2800      	cmp	r0, #0
   d8f70:	f47f af6f 	bne.w	d8e52 <_strtod_r+0x70a>
   d8f74:	e62f      	b.n	d8bd6 <_strtod_r+0x48e>
   d8f76:	4629      	mov	r1, r5
   d8f78:	4642      	mov	r2, r8
   d8f7a:	9802      	ldr	r0, [sp, #8]
   d8f7c:	f000 ff04 	bl	d9d88 <__lshift>
   d8f80:	4605      	mov	r5, r0
   d8f82:	2800      	cmp	r0, #0
   d8f84:	f47f af69 	bne.w	d8e5a <_strtod_r+0x712>
   d8f88:	e625      	b.n	d8bd6 <_strtod_r+0x48e>
   d8f8a:	6923      	ldr	r3, [r4, #16]
   d8f8c:	2b01      	cmp	r3, #1
   d8f8e:	dc8f      	bgt.n	d8eb0 <_strtod_r+0x768>
   d8f90:	e17e      	b.n	d9290 <_strtod_r+0xb48>
   d8f92:	d161      	bne.n	d9058 <_strtod_r+0x910>
   d8f94:	9a07      	ldr	r2, [sp, #28]
   d8f96:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8f9a:	b322      	cbz	r2, d8fe6 <_strtod_r+0x89e>
   d8f9c:	4946      	ldr	r1, [pc, #280]	; (d90b8 <_strtod_r+0x970>)
   d8f9e:	428b      	cmp	r3, r1
   d8fa0:	465a      	mov	r2, fp
   d8fa2:	d12e      	bne.n	d9002 <_strtod_r+0x8ba>
   d8fa4:	9b03      	ldr	r3, [sp, #12]
   d8fa6:	4651      	mov	r1, sl
   d8fa8:	b163      	cbz	r3, d8fc4 <_strtod_r+0x87c>
   d8faa:	4b44      	ldr	r3, [pc, #272]	; (d90bc <_strtod_r+0x974>)
   d8fac:	4013      	ands	r3, r2
   d8fae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d8fb2:	d807      	bhi.n	d8fc4 <_strtod_r+0x87c>
   d8fb4:	0d1b      	lsrs	r3, r3, #20
   d8fb6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8fba:	f04f 30ff 	mov.w	r0, #4294967295
   d8fbe:	fa00 f303 	lsl.w	r3, r0, r3
   d8fc2:	e001      	b.n	d8fc8 <_strtod_r+0x880>
   d8fc4:	f04f 33ff 	mov.w	r3, #4294967295
   d8fc8:	428b      	cmp	r3, r1
   d8fca:	d11a      	bne.n	d9002 <_strtod_r+0x8ba>
   d8fcc:	493c      	ldr	r1, [pc, #240]	; (d90c0 <_strtod_r+0x978>)
   d8fce:	428a      	cmp	r2, r1
   d8fd0:	d102      	bne.n	d8fd8 <_strtod_r+0x890>
   d8fd2:	3301      	adds	r3, #1
   d8fd4:	f43f adff 	beq.w	d8bd6 <_strtod_r+0x48e>
   d8fd8:	4b38      	ldr	r3, [pc, #224]	; (d90bc <_strtod_r+0x974>)
   d8fda:	4013      	ands	r3, r2
   d8fdc:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d8fe0:	f04f 0a00 	mov.w	sl, #0
   d8fe4:	e154      	b.n	d9290 <_strtod_r+0xb48>
   d8fe6:	b963      	cbnz	r3, d9002 <_strtod_r+0x8ba>
   d8fe8:	f1ba 0f00 	cmp.w	sl, #0
   d8fec:	d109      	bne.n	d9002 <_strtod_r+0x8ba>
   d8fee:	e76b      	b.n	d8ec8 <_strtod_r+0x780>
   d8ff0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d8ff4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d8ff8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d8ffc:	f04f 3aff 	mov.w	sl, #4294967295
   d9000:	e146      	b.n	d9290 <_strtod_r+0xb48>
   d9002:	b117      	cbz	r7, d900a <_strtod_r+0x8c2>
   d9004:	ea17 0f0b 	tst.w	r7, fp
   d9008:	e002      	b.n	d9010 <_strtod_r+0x8c8>
   d900a:	9b06      	ldr	r3, [sp, #24]
   d900c:	ea13 0f0a 	tst.w	r3, sl
   d9010:	f000 813e 	beq.w	d9290 <_strtod_r+0xb48>
   d9014:	9b07      	ldr	r3, [sp, #28]
   d9016:	9a03      	ldr	r2, [sp, #12]
   d9018:	4650      	mov	r0, sl
   d901a:	4659      	mov	r1, fp
   d901c:	b153      	cbz	r3, d9034 <_strtod_r+0x8ec>
   d901e:	f7ff fb77 	bl	d8710 <sulp>
   d9022:	4602      	mov	r2, r0
   d9024:	460b      	mov	r3, r1
   d9026:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d902a:	f7fe fdb1 	bl	d7b90 <__adddf3>
   d902e:	4682      	mov	sl, r0
   d9030:	468b      	mov	fp, r1
   d9032:	e12d      	b.n	d9290 <_strtod_r+0xb48>
   d9034:	f7ff fb6c 	bl	d8710 <sulp>
   d9038:	4602      	mov	r2, r0
   d903a:	460b      	mov	r3, r1
   d903c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d9040:	f7fe fda4 	bl	d7b8c <__aeabi_dsub>
   d9044:	2200      	movs	r2, #0
   d9046:	2300      	movs	r3, #0
   d9048:	4682      	mov	sl, r0
   d904a:	468b      	mov	fp, r1
   d904c:	f7ff f9ba 	bl	d83c4 <__aeabi_dcmpeq>
   d9050:	2800      	cmp	r0, #0
   d9052:	f47f af49 	bne.w	d8ee8 <_strtod_r+0x7a0>
   d9056:	e11b      	b.n	d9290 <_strtod_r+0xb48>
   d9058:	4629      	mov	r1, r5
   d905a:	4620      	mov	r0, r4
   d905c:	f001 f823 	bl	da0a6 <__ratio>
   d9060:	ec57 6b10 	vmov	r6, r7, d0
   d9064:	2200      	movs	r2, #0
   d9066:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d906a:	ee10 0a10 	vmov	r0, s0
   d906e:	4639      	mov	r1, r7
   d9070:	f7ff f9bc 	bl	d83ec <__aeabi_dcmple>
   d9074:	2800      	cmp	r0, #0
   d9076:	d042      	beq.n	d90fe <_strtod_r+0x9b6>
   d9078:	9b07      	ldr	r3, [sp, #28]
   d907a:	b123      	cbz	r3, d9086 <_strtod_r+0x93e>
   d907c:	f04f 0800 	mov.w	r8, #0
   d9080:	f8df 9040 	ldr.w	r9, [pc, #64]	; d90c4 <_strtod_r+0x97c>
   d9084:	e011      	b.n	d90aa <_strtod_r+0x962>
   d9086:	f1ba 0f00 	cmp.w	sl, #0
   d908a:	d103      	bne.n	d9094 <_strtod_r+0x94c>
   d908c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9090:	b93b      	cbnz	r3, d90a2 <_strtod_r+0x95a>
   d9092:	e01b      	b.n	d90cc <_strtod_r+0x984>
   d9094:	f1ba 0f01 	cmp.w	sl, #1
   d9098:	d103      	bne.n	d90a2 <_strtod_r+0x95a>
   d909a:	f1bb 0f00 	cmp.w	fp, #0
   d909e:	f43f af23 	beq.w	d8ee8 <_strtod_r+0x7a0>
   d90a2:	f8df 9024 	ldr.w	r9, [pc, #36]	; d90c8 <_strtod_r+0x980>
   d90a6:	f04f 0800 	mov.w	r8, #0
   d90aa:	2600      	movs	r6, #0
   d90ac:	4f05      	ldr	r7, [pc, #20]	; (d90c4 <_strtod_r+0x97c>)
   d90ae:	e039      	b.n	d9124 <_strtod_r+0x9dc>
   d90b0:	fffffc02 	.word	0xfffffc02
   d90b4:	fffffbe2 	.word	0xfffffbe2
   d90b8:	000fffff 	.word	0x000fffff
   d90bc:	7ff00000 	.word	0x7ff00000
   d90c0:	7fefffff 	.word	0x7fefffff
   d90c4:	3ff00000 	.word	0x3ff00000
   d90c8:	bff00000 	.word	0xbff00000
   d90cc:	2200      	movs	r2, #0
   d90ce:	4b98      	ldr	r3, [pc, #608]	; (d9330 <_strtod_r+0xbe8>)
   d90d0:	4630      	mov	r0, r6
   d90d2:	4639      	mov	r1, r7
   d90d4:	f7ff f980 	bl	d83d8 <__aeabi_dcmplt>
   d90d8:	b940      	cbnz	r0, d90ec <_strtod_r+0x9a4>
   d90da:	4630      	mov	r0, r6
   d90dc:	4639      	mov	r1, r7
   d90de:	2200      	movs	r2, #0
   d90e0:	4b94      	ldr	r3, [pc, #592]	; (d9334 <_strtod_r+0xbec>)
   d90e2:	f7fe ff07 	bl	d7ef4 <__aeabi_dmul>
   d90e6:	4606      	mov	r6, r0
   d90e8:	460f      	mov	r7, r1
   d90ea:	e001      	b.n	d90f0 <_strtod_r+0x9a8>
   d90ec:	4f91      	ldr	r7, [pc, #580]	; (d9334 <_strtod_r+0xbec>)
   d90ee:	2600      	movs	r6, #0
   d90f0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d90f4:	9614      	str	r6, [sp, #80]	; 0x50
   d90f6:	9315      	str	r3, [sp, #84]	; 0x54
   d90f8:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d90fc:	e012      	b.n	d9124 <_strtod_r+0x9dc>
   d90fe:	4b8d      	ldr	r3, [pc, #564]	; (d9334 <_strtod_r+0xbec>)
   d9100:	4630      	mov	r0, r6
   d9102:	4639      	mov	r1, r7
   d9104:	2200      	movs	r2, #0
   d9106:	f7fe fef5 	bl	d7ef4 <__aeabi_dmul>
   d910a:	9b07      	ldr	r3, [sp, #28]
   d910c:	4606      	mov	r6, r0
   d910e:	460f      	mov	r7, r1
   d9110:	b923      	cbnz	r3, d911c <_strtod_r+0x9d4>
   d9112:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9116:	900e      	str	r0, [sp, #56]	; 0x38
   d9118:	930f      	str	r3, [sp, #60]	; 0x3c
   d911a:	e001      	b.n	d9120 <_strtod_r+0x9d8>
   d911c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d9120:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d9124:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9128:	0d1b      	lsrs	r3, r3, #20
   d912a:	051b      	lsls	r3, r3, #20
   d912c:	9306      	str	r3, [sp, #24]
   d912e:	9a06      	ldr	r2, [sp, #24]
   d9130:	4b81      	ldr	r3, [pc, #516]	; (d9338 <_strtod_r+0xbf0>)
   d9132:	429a      	cmp	r2, r3
   d9134:	d12b      	bne.n	d918e <_strtod_r+0xa46>
   d9136:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d913a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d913e:	ec4b ab10 	vmov	d0, sl, fp
   d9142:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d9146:	f000 feeb 	bl	d9f20 <__ulp>
   d914a:	4640      	mov	r0, r8
   d914c:	ec53 2b10 	vmov	r2, r3, d0
   d9150:	4649      	mov	r1, r9
   d9152:	f7fe fecf 	bl	d7ef4 <__aeabi_dmul>
   d9156:	4652      	mov	r2, sl
   d9158:	465b      	mov	r3, fp
   d915a:	f7fe fd19 	bl	d7b90 <__adddf3>
   d915e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d9162:	0d1b      	lsrs	r3, r3, #20
   d9164:	4a75      	ldr	r2, [pc, #468]	; (d933c <_strtod_r+0xbf4>)
   d9166:	051b      	lsls	r3, r3, #20
   d9168:	4293      	cmp	r3, r2
   d916a:	4682      	mov	sl, r0
   d916c:	d90c      	bls.n	d9188 <_strtod_r+0xa40>
   d916e:	4b74      	ldr	r3, [pc, #464]	; (d9340 <_strtod_r+0xbf8>)
   d9170:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d9172:	429a      	cmp	r2, r3
   d9174:	d103      	bne.n	d917e <_strtod_r+0xa36>
   d9176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9178:	3301      	adds	r3, #1
   d917a:	f43f ad2c 	beq.w	d8bd6 <_strtod_r+0x48e>
   d917e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d9340 <_strtod_r+0xbf8>
   d9182:	f04f 3aff 	mov.w	sl, #4294967295
   d9186:	e072      	b.n	d926e <_strtod_r+0xb26>
   d9188:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d918c:	e038      	b.n	d9200 <_strtod_r+0xab8>
   d918e:	9b03      	ldr	r3, [sp, #12]
   d9190:	b333      	cbz	r3, d91e0 <_strtod_r+0xa98>
   d9192:	9b06      	ldr	r3, [sp, #24]
   d9194:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9198:	d822      	bhi.n	d91e0 <_strtod_r+0xa98>
   d919a:	a35d      	add	r3, pc, #372	; (adr r3, d9310 <_strtod_r+0xbc8>)
   d919c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91a0:	4630      	mov	r0, r6
   d91a2:	4639      	mov	r1, r7
   d91a4:	f7ff f922 	bl	d83ec <__aeabi_dcmple>
   d91a8:	b1a8      	cbz	r0, d91d6 <_strtod_r+0xa8e>
   d91aa:	4639      	mov	r1, r7
   d91ac:	4630      	mov	r0, r6
   d91ae:	f7ff f963 	bl	d8478 <__aeabi_d2uiz>
   d91b2:	2800      	cmp	r0, #0
   d91b4:	bf08      	it	eq
   d91b6:	2001      	moveq	r0, #1
   d91b8:	f7fe fe26 	bl	d7e08 <__aeabi_ui2d>
   d91bc:	9b07      	ldr	r3, [sp, #28]
   d91be:	4606      	mov	r6, r0
   d91c0:	460f      	mov	r7, r1
   d91c2:	b923      	cbnz	r3, d91ce <_strtod_r+0xa86>
   d91c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d91c8:	9010      	str	r0, [sp, #64]	; 0x40
   d91ca:	9311      	str	r3, [sp, #68]	; 0x44
   d91cc:	e001      	b.n	d91d2 <_strtod_r+0xa8a>
   d91ce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d91d2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d91d6:	9a06      	ldr	r2, [sp, #24]
   d91d8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d91dc:	ebc2 0903 	rsb	r9, r2, r3
   d91e0:	ed9d 0b08 	vldr	d0, [sp, #32]
   d91e4:	f000 fe9c 	bl	d9f20 <__ulp>
   d91e8:	4640      	mov	r0, r8
   d91ea:	ec53 2b10 	vmov	r2, r3, d0
   d91ee:	4649      	mov	r1, r9
   d91f0:	f7fe fe80 	bl	d7ef4 <__aeabi_dmul>
   d91f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d91f8:	f7fe fcca 	bl	d7b90 <__adddf3>
   d91fc:	4682      	mov	sl, r0
   d91fe:	468b      	mov	fp, r1
   d9200:	9b03      	ldr	r3, [sp, #12]
   d9202:	bba3      	cbnz	r3, d926e <_strtod_r+0xb26>
   d9204:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9208:	0d1b      	lsrs	r3, r3, #20
   d920a:	9a06      	ldr	r2, [sp, #24]
   d920c:	051b      	lsls	r3, r3, #20
   d920e:	429a      	cmp	r2, r3
   d9210:	46d8      	mov	r8, fp
   d9212:	d12c      	bne.n	d926e <_strtod_r+0xb26>
   d9214:	4639      	mov	r1, r7
   d9216:	4630      	mov	r0, r6
   d9218:	f7ff f906 	bl	d8428 <__aeabi_d2iz>
   d921c:	f7fe fe04 	bl	d7e28 <__aeabi_i2d>
   d9220:	460b      	mov	r3, r1
   d9222:	4602      	mov	r2, r0
   d9224:	4639      	mov	r1, r7
   d9226:	4630      	mov	r0, r6
   d9228:	f7fe fcb0 	bl	d7b8c <__aeabi_dsub>
   d922c:	9b07      	ldr	r3, [sp, #28]
   d922e:	4606      	mov	r6, r0
   d9230:	460f      	mov	r7, r1
   d9232:	b92b      	cbnz	r3, d9240 <_strtod_r+0xaf8>
   d9234:	f1ba 0f00 	cmp.w	sl, #0
   d9238:	d102      	bne.n	d9240 <_strtod_r+0xaf8>
   d923a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d923e:	b183      	cbz	r3, d9262 <_strtod_r+0xb1a>
   d9240:	a335      	add	r3, pc, #212	; (adr r3, d9318 <_strtod_r+0xbd0>)
   d9242:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9246:	4630      	mov	r0, r6
   d9248:	4639      	mov	r1, r7
   d924a:	f7ff f8c5 	bl	d83d8 <__aeabi_dcmplt>
   d924e:	2800      	cmp	r0, #0
   d9250:	d131      	bne.n	d92b6 <_strtod_r+0xb6e>
   d9252:	a333      	add	r3, pc, #204	; (adr r3, d9320 <_strtod_r+0xbd8>)
   d9254:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9258:	4630      	mov	r0, r6
   d925a:	4639      	mov	r1, r7
   d925c:	f7ff f8da 	bl	d8414 <__aeabi_dcmpgt>
   d9260:	e004      	b.n	d926c <_strtod_r+0xb24>
   d9262:	a331      	add	r3, pc, #196	; (adr r3, d9328 <_strtod_r+0xbe0>)
   d9264:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9268:	f7ff f8b6 	bl	d83d8 <__aeabi_dcmplt>
   d926c:	bb18      	cbnz	r0, d92b6 <_strtod_r+0xb6e>
   d926e:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9270:	9802      	ldr	r0, [sp, #8]
   d9272:	f000 fbc3 	bl	d99fc <_Bfree>
   d9276:	9904      	ldr	r1, [sp, #16]
   d9278:	9802      	ldr	r0, [sp, #8]
   d927a:	f000 fbbf 	bl	d99fc <_Bfree>
   d927e:	4629      	mov	r1, r5
   d9280:	9802      	ldr	r0, [sp, #8]
   d9282:	f000 fbbb 	bl	d99fc <_Bfree>
   d9286:	4621      	mov	r1, r4
   d9288:	9802      	ldr	r0, [sp, #8]
   d928a:	f000 fbb7 	bl	d99fc <_Bfree>
   d928e:	e56d      	b.n	d8d6c <_strtod_r+0x624>
   d9290:	9b03      	ldr	r3, [sp, #12]
   d9292:	b183      	cbz	r3, d92b6 <_strtod_r+0xb6e>
   d9294:	4b2b      	ldr	r3, [pc, #172]	; (d9344 <_strtod_r+0xbfc>)
   d9296:	930b      	str	r3, [sp, #44]	; 0x2c
   d9298:	2300      	movs	r3, #0
   d929a:	930a      	str	r3, [sp, #40]	; 0x28
   d929c:	4650      	mov	r0, sl
   d929e:	4659      	mov	r1, fp
   d92a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d92a4:	f7fe fe26 	bl	d7ef4 <__aeabi_dmul>
   d92a8:	4682      	mov	sl, r0
   d92aa:	468b      	mov	fp, r1
   d92ac:	b919      	cbnz	r1, d92b6 <_strtod_r+0xb6e>
   d92ae:	b910      	cbnz	r0, d92b6 <_strtod_r+0xb6e>
   d92b0:	9a02      	ldr	r2, [sp, #8]
   d92b2:	2322      	movs	r3, #34	; 0x22
   d92b4:	6013      	str	r3, [r2, #0]
   d92b6:	9918      	ldr	r1, [sp, #96]	; 0x60
   d92b8:	9802      	ldr	r0, [sp, #8]
   d92ba:	f000 fb9f 	bl	d99fc <_Bfree>
   d92be:	9904      	ldr	r1, [sp, #16]
   d92c0:	9802      	ldr	r0, [sp, #8]
   d92c2:	f000 fb9b 	bl	d99fc <_Bfree>
   d92c6:	4629      	mov	r1, r5
   d92c8:	9802      	ldr	r0, [sp, #8]
   d92ca:	f000 fb97 	bl	d99fc <_Bfree>
   d92ce:	9905      	ldr	r1, [sp, #20]
   d92d0:	9802      	ldr	r0, [sp, #8]
   d92d2:	f000 fb93 	bl	d99fc <_Bfree>
   d92d6:	4621      	mov	r1, r4
   d92d8:	9802      	ldr	r0, [sp, #8]
   d92da:	f000 fb8f 	bl	d99fc <_Bfree>
   d92de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d92e0:	b113      	cbz	r3, d92e8 <_strtod_r+0xba0>
   d92e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d92e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d92e6:	6013      	str	r3, [r2, #0]
   d92e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d92ea:	b11b      	cbz	r3, d92f4 <_strtod_r+0xbac>
   d92ec:	4652      	mov	r2, sl
   d92ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d92f2:	e007      	b.n	d9304 <_strtod_r+0xbbc>
   d92f4:	4652      	mov	r2, sl
   d92f6:	465b      	mov	r3, fp
   d92f8:	e004      	b.n	d9304 <_strtod_r+0xbbc>
   d92fa:	2500      	movs	r5, #0
   d92fc:	462a      	mov	r2, r5
   d92fe:	2101      	movs	r1, #1
   d9300:	f7ff bb41 	b.w	d8986 <_strtod_r+0x23e>
   d9304:	ec43 2b10 	vmov	d0, r2, r3
   d9308:	b01d      	add	sp, #116	; 0x74
   d930a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d930e:	bf00      	nop
   d9310:	ffc00000 	.word	0xffc00000
   d9314:	41dfffff 	.word	0x41dfffff
   d9318:	94a03595 	.word	0x94a03595
   d931c:	3fdfffff 	.word	0x3fdfffff
   d9320:	35afe535 	.word	0x35afe535
   d9324:	3fe00000 	.word	0x3fe00000
   d9328:	94a03595 	.word	0x94a03595
   d932c:	3fcfffff 	.word	0x3fcfffff
   d9330:	3ff00000 	.word	0x3ff00000
   d9334:	3fe00000 	.word	0x3fe00000
   d9338:	7fe00000 	.word	0x7fe00000
   d933c:	7c9fffff 	.word	0x7c9fffff
   d9340:	7fefffff 	.word	0x7fefffff
   d9344:	39500000 	.word	0x39500000

000d9348 <strtod>:
   d9348:	4b02      	ldr	r3, [pc, #8]	; (d9354 <strtod+0xc>)
   d934a:	460a      	mov	r2, r1
   d934c:	4601      	mov	r1, r0
   d934e:	6818      	ldr	r0, [r3, #0]
   d9350:	f7ff b9fa 	b.w	d8748 <_strtod_r>
   d9354:	2003e188 	.word	0x2003e188

000d9358 <rshift>:
   d9358:	b5f0      	push	{r4, r5, r6, r7, lr}
   d935a:	6906      	ldr	r6, [r0, #16]
   d935c:	114b      	asrs	r3, r1, #5
   d935e:	42b3      	cmp	r3, r6
   d9360:	f100 0514 	add.w	r5, r0, #20
   d9364:	da27      	bge.n	d93b6 <rshift+0x5e>
   d9366:	f011 011f 	ands.w	r1, r1, #31
   d936a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d936e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d9372:	d101      	bne.n	d9378 <rshift+0x20>
   d9374:	4629      	mov	r1, r5
   d9376:	e016      	b.n	d93a6 <rshift+0x4e>
   d9378:	1d14      	adds	r4, r2, #4
   d937a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d937e:	f1c1 0e20 	rsb	lr, r1, #32
   d9382:	40ca      	lsrs	r2, r1
   d9384:	462b      	mov	r3, r5
   d9386:	42b4      	cmp	r4, r6
   d9388:	d209      	bcs.n	d939e <rshift+0x46>
   d938a:	6827      	ldr	r7, [r4, #0]
   d938c:	fa07 f70e 	lsl.w	r7, r7, lr
   d9390:	433a      	orrs	r2, r7
   d9392:	f843 2b04 	str.w	r2, [r3], #4
   d9396:	f854 2b04 	ldr.w	r2, [r4], #4
   d939a:	40ca      	lsrs	r2, r1
   d939c:	e7f3      	b.n	d9386 <rshift+0x2e>
   d939e:	601a      	str	r2, [r3, #0]
   d93a0:	b152      	cbz	r2, d93b8 <rshift+0x60>
   d93a2:	3304      	adds	r3, #4
   d93a4:	e008      	b.n	d93b8 <rshift+0x60>
   d93a6:	42b2      	cmp	r2, r6
   d93a8:	460b      	mov	r3, r1
   d93aa:	d205      	bcs.n	d93b8 <rshift+0x60>
   d93ac:	f852 3b04 	ldr.w	r3, [r2], #4
   d93b0:	f841 3b04 	str.w	r3, [r1], #4
   d93b4:	e7f7      	b.n	d93a6 <rshift+0x4e>
   d93b6:	462b      	mov	r3, r5
   d93b8:	1b5b      	subs	r3, r3, r5
   d93ba:	109b      	asrs	r3, r3, #2
   d93bc:	6103      	str	r3, [r0, #16]
   d93be:	b903      	cbnz	r3, d93c2 <rshift+0x6a>
   d93c0:	6143      	str	r3, [r0, #20]
   d93c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d93c4 <__hexdig_fun>:
   d93c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d93c8:	2b09      	cmp	r3, #9
   d93ca:	d801      	bhi.n	d93d0 <__hexdig_fun+0xc>
   d93cc:	3820      	subs	r0, #32
   d93ce:	e00a      	b.n	d93e6 <__hexdig_fun+0x22>
   d93d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d93d4:	2b05      	cmp	r3, #5
   d93d6:	d801      	bhi.n	d93dc <__hexdig_fun+0x18>
   d93d8:	3847      	subs	r0, #71	; 0x47
   d93da:	e004      	b.n	d93e6 <__hexdig_fun+0x22>
   d93dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d93e0:	2b05      	cmp	r3, #5
   d93e2:	d802      	bhi.n	d93ea <__hexdig_fun+0x26>
   d93e4:	3827      	subs	r0, #39	; 0x27
   d93e6:	b2c0      	uxtb	r0, r0
   d93e8:	4770      	bx	lr
   d93ea:	2000      	movs	r0, #0
   d93ec:	4770      	bx	lr

000d93ee <__gethex>:
   d93ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d93f2:	b08b      	sub	sp, #44	; 0x2c
   d93f4:	468a      	mov	sl, r1
   d93f6:	4690      	mov	r8, r2
   d93f8:	9306      	str	r3, [sp, #24]
   d93fa:	9002      	str	r0, [sp, #8]
   d93fc:	f7ff f8d2 	bl	d85a4 <_localeconv_r>
   d9400:	6803      	ldr	r3, [r0, #0]
   d9402:	9303      	str	r3, [sp, #12]
   d9404:	4618      	mov	r0, r3
   d9406:	f7ff f92f 	bl	d8668 <strlen>
   d940a:	9b03      	ldr	r3, [sp, #12]
   d940c:	9001      	str	r0, [sp, #4]
   d940e:	4403      	add	r3, r0
   d9410:	f04f 0b00 	mov.w	fp, #0
   d9414:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d9418:	9307      	str	r3, [sp, #28]
   d941a:	f8da 3000 	ldr.w	r3, [sl]
   d941e:	3302      	adds	r3, #2
   d9420:	461f      	mov	r7, r3
   d9422:	f813 0b01 	ldrb.w	r0, [r3], #1
   d9426:	2830      	cmp	r0, #48	; 0x30
   d9428:	d102      	bne.n	d9430 <__gethex+0x42>
   d942a:	f10b 0b01 	add.w	fp, fp, #1
   d942e:	e7f7      	b.n	d9420 <__gethex+0x32>
   d9430:	f7ff ffc8 	bl	d93c4 <__hexdig_fun>
   d9434:	4604      	mov	r4, r0
   d9436:	b9e0      	cbnz	r0, d9472 <__gethex+0x84>
   d9438:	9a01      	ldr	r2, [sp, #4]
   d943a:	9903      	ldr	r1, [sp, #12]
   d943c:	4638      	mov	r0, r7
   d943e:	f7ff f93f 	bl	d86c0 <strncmp>
   d9442:	2800      	cmp	r0, #0
   d9444:	d134      	bne.n	d94b0 <__gethex+0xc2>
   d9446:	9b01      	ldr	r3, [sp, #4]
   d9448:	5cf8      	ldrb	r0, [r7, r3]
   d944a:	18fe      	adds	r6, r7, r3
   d944c:	f7ff ffba 	bl	d93c4 <__hexdig_fun>
   d9450:	b380      	cbz	r0, d94b4 <__gethex+0xc6>
   d9452:	4633      	mov	r3, r6
   d9454:	7818      	ldrb	r0, [r3, #0]
   d9456:	2830      	cmp	r0, #48	; 0x30
   d9458:	461f      	mov	r7, r3
   d945a:	f103 0301 	add.w	r3, r3, #1
   d945e:	d0f9      	beq.n	d9454 <__gethex+0x66>
   d9460:	f7ff ffb0 	bl	d93c4 <__hexdig_fun>
   d9464:	fab0 f580 	clz	r5, r0
   d9468:	096d      	lsrs	r5, r5, #5
   d946a:	4634      	mov	r4, r6
   d946c:	f04f 0b01 	mov.w	fp, #1
   d9470:	e001      	b.n	d9476 <__gethex+0x88>
   d9472:	2500      	movs	r5, #0
   d9474:	462c      	mov	r4, r5
   d9476:	463a      	mov	r2, r7
   d9478:	4616      	mov	r6, r2
   d947a:	3201      	adds	r2, #1
   d947c:	7830      	ldrb	r0, [r6, #0]
   d947e:	f7ff ffa1 	bl	d93c4 <__hexdig_fun>
   d9482:	2800      	cmp	r0, #0
   d9484:	d1f8      	bne.n	d9478 <__gethex+0x8a>
   d9486:	9a01      	ldr	r2, [sp, #4]
   d9488:	9903      	ldr	r1, [sp, #12]
   d948a:	4630      	mov	r0, r6
   d948c:	f7ff f918 	bl	d86c0 <strncmp>
   d9490:	b950      	cbnz	r0, d94a8 <__gethex+0xba>
   d9492:	b954      	cbnz	r4, d94aa <__gethex+0xbc>
   d9494:	9b01      	ldr	r3, [sp, #4]
   d9496:	18f4      	adds	r4, r6, r3
   d9498:	4622      	mov	r2, r4
   d949a:	4616      	mov	r6, r2
   d949c:	3201      	adds	r2, #1
   d949e:	7830      	ldrb	r0, [r6, #0]
   d94a0:	f7ff ff90 	bl	d93c4 <__hexdig_fun>
   d94a4:	2800      	cmp	r0, #0
   d94a6:	d1f8      	bne.n	d949a <__gethex+0xac>
   d94a8:	b134      	cbz	r4, d94b8 <__gethex+0xca>
   d94aa:	1ba4      	subs	r4, r4, r6
   d94ac:	00a4      	lsls	r4, r4, #2
   d94ae:	e003      	b.n	d94b8 <__gethex+0xca>
   d94b0:	463e      	mov	r6, r7
   d94b2:	e000      	b.n	d94b6 <__gethex+0xc8>
   d94b4:	4604      	mov	r4, r0
   d94b6:	2501      	movs	r5, #1
   d94b8:	7833      	ldrb	r3, [r6, #0]
   d94ba:	2b50      	cmp	r3, #80	; 0x50
   d94bc:	d001      	beq.n	d94c2 <__gethex+0xd4>
   d94be:	2b70      	cmp	r3, #112	; 0x70
   d94c0:	d12a      	bne.n	d9518 <__gethex+0x12a>
   d94c2:	7873      	ldrb	r3, [r6, #1]
   d94c4:	2b2b      	cmp	r3, #43	; 0x2b
   d94c6:	d008      	beq.n	d94da <__gethex+0xec>
   d94c8:	2b2d      	cmp	r3, #45	; 0x2d
   d94ca:	d003      	beq.n	d94d4 <__gethex+0xe6>
   d94cc:	1c71      	adds	r1, r6, #1
   d94ce:	f04f 0900 	mov.w	r9, #0
   d94d2:	e005      	b.n	d94e0 <__gethex+0xf2>
   d94d4:	f04f 0901 	mov.w	r9, #1
   d94d8:	e001      	b.n	d94de <__gethex+0xf0>
   d94da:	f04f 0900 	mov.w	r9, #0
   d94de:	1cb1      	adds	r1, r6, #2
   d94e0:	7808      	ldrb	r0, [r1, #0]
   d94e2:	f7ff ff6f 	bl	d93c4 <__hexdig_fun>
   d94e6:	1e43      	subs	r3, r0, #1
   d94e8:	b2db      	uxtb	r3, r3
   d94ea:	2b18      	cmp	r3, #24
   d94ec:	d814      	bhi.n	d9518 <__gethex+0x12a>
   d94ee:	f1a0 0210 	sub.w	r2, r0, #16
   d94f2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d94f6:	f7ff ff65 	bl	d93c4 <__hexdig_fun>
   d94fa:	1e43      	subs	r3, r0, #1
   d94fc:	b2db      	uxtb	r3, r3
   d94fe:	2b18      	cmp	r3, #24
   d9500:	d804      	bhi.n	d950c <__gethex+0x11e>
   d9502:	230a      	movs	r3, #10
   d9504:	fb03 0202 	mla	r2, r3, r2, r0
   d9508:	3a10      	subs	r2, #16
   d950a:	e7f2      	b.n	d94f2 <__gethex+0x104>
   d950c:	f1b9 0f00 	cmp.w	r9, #0
   d9510:	d000      	beq.n	d9514 <__gethex+0x126>
   d9512:	4252      	negs	r2, r2
   d9514:	4414      	add	r4, r2
   d9516:	e000      	b.n	d951a <__gethex+0x12c>
   d9518:	4631      	mov	r1, r6
   d951a:	f8ca 1000 	str.w	r1, [sl]
   d951e:	b12d      	cbz	r5, d952c <__gethex+0x13e>
   d9520:	f1bb 0f00 	cmp.w	fp, #0
   d9524:	bf14      	ite	ne
   d9526:	2000      	movne	r0, #0
   d9528:	2006      	moveq	r0, #6
   d952a:	e17c      	b.n	d9826 <__gethex+0x438>
   d952c:	1bf3      	subs	r3, r6, r7
   d952e:	3b01      	subs	r3, #1
   d9530:	4629      	mov	r1, r5
   d9532:	2b07      	cmp	r3, #7
   d9534:	dd02      	ble.n	d953c <__gethex+0x14e>
   d9536:	3101      	adds	r1, #1
   d9538:	105b      	asrs	r3, r3, #1
   d953a:	e7fa      	b.n	d9532 <__gethex+0x144>
   d953c:	9802      	ldr	r0, [sp, #8]
   d953e:	f000 fa28 	bl	d9992 <_Balloc>
   d9542:	9b01      	ldr	r3, [sp, #4]
   d9544:	f100 0a14 	add.w	sl, r0, #20
   d9548:	f04f 0900 	mov.w	r9, #0
   d954c:	f1c3 0301 	rsb	r3, r3, #1
   d9550:	4605      	mov	r5, r0
   d9552:	f8cd a010 	str.w	sl, [sp, #16]
   d9556:	46cb      	mov	fp, r9
   d9558:	9308      	str	r3, [sp, #32]
   d955a:	42b7      	cmp	r7, r6
   d955c:	d22f      	bcs.n	d95be <__gethex+0x1d0>
   d955e:	1e73      	subs	r3, r6, #1
   d9560:	9305      	str	r3, [sp, #20]
   d9562:	9a07      	ldr	r2, [sp, #28]
   d9564:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d9568:	4293      	cmp	r3, r2
   d956a:	d00b      	beq.n	d9584 <__gethex+0x196>
   d956c:	f1bb 0f20 	cmp.w	fp, #32
   d9570:	d116      	bne.n	d95a0 <__gethex+0x1b2>
   d9572:	9b04      	ldr	r3, [sp, #16]
   d9574:	f8c3 9000 	str.w	r9, [r3]
   d9578:	3304      	adds	r3, #4
   d957a:	f04f 0900 	mov.w	r9, #0
   d957e:	9304      	str	r3, [sp, #16]
   d9580:	46cb      	mov	fp, r9
   d9582:	e00d      	b.n	d95a0 <__gethex+0x1b2>
   d9584:	9b05      	ldr	r3, [sp, #20]
   d9586:	9a08      	ldr	r2, [sp, #32]
   d9588:	4413      	add	r3, r2
   d958a:	429f      	cmp	r7, r3
   d958c:	d8ee      	bhi.n	d956c <__gethex+0x17e>
   d958e:	4618      	mov	r0, r3
   d9590:	9a01      	ldr	r2, [sp, #4]
   d9592:	9903      	ldr	r1, [sp, #12]
   d9594:	9309      	str	r3, [sp, #36]	; 0x24
   d9596:	f7ff f893 	bl	d86c0 <strncmp>
   d959a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d959c:	b168      	cbz	r0, d95ba <__gethex+0x1cc>
   d959e:	e7e5      	b.n	d956c <__gethex+0x17e>
   d95a0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d95a4:	f7ff ff0e 	bl	d93c4 <__hexdig_fun>
   d95a8:	f000 000f 	and.w	r0, r0, #15
   d95ac:	fa00 f00b 	lsl.w	r0, r0, fp
   d95b0:	9b05      	ldr	r3, [sp, #20]
   d95b2:	ea49 0900 	orr.w	r9, r9, r0
   d95b6:	f10b 0b04 	add.w	fp, fp, #4
   d95ba:	461e      	mov	r6, r3
   d95bc:	e7cd      	b.n	d955a <__gethex+0x16c>
   d95be:	9804      	ldr	r0, [sp, #16]
   d95c0:	f840 9b04 	str.w	r9, [r0], #4
   d95c4:	ebca 0000 	rsb	r0, sl, r0
   d95c8:	1080      	asrs	r0, r0, #2
   d95ca:	6128      	str	r0, [r5, #16]
   d95cc:	0147      	lsls	r7, r0, #5
   d95ce:	4648      	mov	r0, r9
   d95d0:	f000 faa4 	bl	d9b1c <__hi0bits>
   d95d4:	f8d8 6000 	ldr.w	r6, [r8]
   d95d8:	1a38      	subs	r0, r7, r0
   d95da:	42b0      	cmp	r0, r6
   d95dc:	dd26      	ble.n	d962c <__gethex+0x23e>
   d95de:	1b87      	subs	r7, r0, r6
   d95e0:	4639      	mov	r1, r7
   d95e2:	4628      	mov	r0, r5
   d95e4:	f000 fda3 	bl	da12e <__any_on>
   d95e8:	b1c8      	cbz	r0, d961e <__gethex+0x230>
   d95ea:	1e7b      	subs	r3, r7, #1
   d95ec:	1159      	asrs	r1, r3, #5
   d95ee:	f003 021f 	and.w	r2, r3, #31
   d95f2:	f04f 0901 	mov.w	r9, #1
   d95f6:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   d95fa:	fa09 f202 	lsl.w	r2, r9, r2
   d95fe:	420a      	tst	r2, r1
   d9600:	d00e      	beq.n	d9620 <__gethex+0x232>
   d9602:	454b      	cmp	r3, r9
   d9604:	dc02      	bgt.n	d960c <__gethex+0x21e>
   d9606:	f04f 0902 	mov.w	r9, #2
   d960a:	e009      	b.n	d9620 <__gethex+0x232>
   d960c:	1eb9      	subs	r1, r7, #2
   d960e:	4628      	mov	r0, r5
   d9610:	f000 fd8d 	bl	da12e <__any_on>
   d9614:	2800      	cmp	r0, #0
   d9616:	d0f6      	beq.n	d9606 <__gethex+0x218>
   d9618:	f04f 0903 	mov.w	r9, #3
   d961c:	e000      	b.n	d9620 <__gethex+0x232>
   d961e:	4681      	mov	r9, r0
   d9620:	4639      	mov	r1, r7
   d9622:	4628      	mov	r0, r5
   d9624:	f7ff fe98 	bl	d9358 <rshift>
   d9628:	443c      	add	r4, r7
   d962a:	e00c      	b.n	d9646 <__gethex+0x258>
   d962c:	da09      	bge.n	d9642 <__gethex+0x254>
   d962e:	1a37      	subs	r7, r6, r0
   d9630:	4629      	mov	r1, r5
   d9632:	463a      	mov	r2, r7
   d9634:	9802      	ldr	r0, [sp, #8]
   d9636:	f000 fba7 	bl	d9d88 <__lshift>
   d963a:	1be4      	subs	r4, r4, r7
   d963c:	4605      	mov	r5, r0
   d963e:	f100 0a14 	add.w	sl, r0, #20
   d9642:	f04f 0900 	mov.w	r9, #0
   d9646:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d964a:	429c      	cmp	r4, r3
   d964c:	dd08      	ble.n	d9660 <__gethex+0x272>
   d964e:	9802      	ldr	r0, [sp, #8]
   d9650:	4629      	mov	r1, r5
   d9652:	f000 f9d3 	bl	d99fc <_Bfree>
   d9656:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9658:	2300      	movs	r3, #0
   d965a:	6013      	str	r3, [r2, #0]
   d965c:	20a3      	movs	r0, #163	; 0xa3
   d965e:	e0e2      	b.n	d9826 <__gethex+0x438>
   d9660:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d9664:	4284      	cmp	r4, r0
   d9666:	da53      	bge.n	d9710 <__gethex+0x322>
   d9668:	1b04      	subs	r4, r0, r4
   d966a:	42a6      	cmp	r6, r4
   d966c:	dc2e      	bgt.n	d96cc <__gethex+0x2de>
   d966e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9672:	2b02      	cmp	r3, #2
   d9674:	d01a      	beq.n	d96ac <__gethex+0x2be>
   d9676:	2b03      	cmp	r3, #3
   d9678:	d01c      	beq.n	d96b4 <__gethex+0x2c6>
   d967a:	2b01      	cmp	r3, #1
   d967c:	d11d      	bne.n	d96ba <__gethex+0x2cc>
   d967e:	42a6      	cmp	r6, r4
   d9680:	d11b      	bne.n	d96ba <__gethex+0x2cc>
   d9682:	2e01      	cmp	r6, #1
   d9684:	dc0b      	bgt.n	d969e <__gethex+0x2b0>
   d9686:	9a06      	ldr	r2, [sp, #24]
   d9688:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d968c:	6013      	str	r3, [r2, #0]
   d968e:	2301      	movs	r3, #1
   d9690:	612b      	str	r3, [r5, #16]
   d9692:	f8ca 3000 	str.w	r3, [sl]
   d9696:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9698:	2062      	movs	r0, #98	; 0x62
   d969a:	601d      	str	r5, [r3, #0]
   d969c:	e0c3      	b.n	d9826 <__gethex+0x438>
   d969e:	1e71      	subs	r1, r6, #1
   d96a0:	4628      	mov	r0, r5
   d96a2:	f000 fd44 	bl	da12e <__any_on>
   d96a6:	2800      	cmp	r0, #0
   d96a8:	d1ed      	bne.n	d9686 <__gethex+0x298>
   d96aa:	e006      	b.n	d96ba <__gethex+0x2cc>
   d96ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d96ae:	2b00      	cmp	r3, #0
   d96b0:	d0e9      	beq.n	d9686 <__gethex+0x298>
   d96b2:	e002      	b.n	d96ba <__gethex+0x2cc>
   d96b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d96b6:	2b00      	cmp	r3, #0
   d96b8:	d1e5      	bne.n	d9686 <__gethex+0x298>
   d96ba:	9802      	ldr	r0, [sp, #8]
   d96bc:	4629      	mov	r1, r5
   d96be:	f000 f99d 	bl	d99fc <_Bfree>
   d96c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d96c4:	2300      	movs	r3, #0
   d96c6:	6013      	str	r3, [r2, #0]
   d96c8:	2050      	movs	r0, #80	; 0x50
   d96ca:	e0ac      	b.n	d9826 <__gethex+0x438>
   d96cc:	1e67      	subs	r7, r4, #1
   d96ce:	f1b9 0f00 	cmp.w	r9, #0
   d96d2:	d106      	bne.n	d96e2 <__gethex+0x2f4>
   d96d4:	b13f      	cbz	r7, d96e6 <__gethex+0x2f8>
   d96d6:	4639      	mov	r1, r7
   d96d8:	4628      	mov	r0, r5
   d96da:	f000 fd28 	bl	da12e <__any_on>
   d96de:	4681      	mov	r9, r0
   d96e0:	e001      	b.n	d96e6 <__gethex+0x2f8>
   d96e2:	f04f 0901 	mov.w	r9, #1
   d96e6:	117a      	asrs	r2, r7, #5
   d96e8:	2301      	movs	r3, #1
   d96ea:	f007 071f 	and.w	r7, r7, #31
   d96ee:	fa03 f707 	lsl.w	r7, r3, r7
   d96f2:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   d96f6:	4621      	mov	r1, r4
   d96f8:	421f      	tst	r7, r3
   d96fa:	4628      	mov	r0, r5
   d96fc:	bf18      	it	ne
   d96fe:	f049 0902 	orrne.w	r9, r9, #2
   d9702:	1b36      	subs	r6, r6, r4
   d9704:	f7ff fe28 	bl	d9358 <rshift>
   d9708:	2702      	movs	r7, #2
   d970a:	f8d8 4004 	ldr.w	r4, [r8, #4]
   d970e:	e000      	b.n	d9712 <__gethex+0x324>
   d9710:	2701      	movs	r7, #1
   d9712:	f1b9 0f00 	cmp.w	r9, #0
   d9716:	f000 8081 	beq.w	d981c <__gethex+0x42e>
   d971a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d971e:	2b02      	cmp	r3, #2
   d9720:	d00e      	beq.n	d9740 <__gethex+0x352>
   d9722:	2b03      	cmp	r3, #3
   d9724:	d010      	beq.n	d9748 <__gethex+0x35a>
   d9726:	2b01      	cmp	r3, #1
   d9728:	d176      	bne.n	d9818 <__gethex+0x42a>
   d972a:	f019 0f02 	tst.w	r9, #2
   d972e:	d073      	beq.n	d9818 <__gethex+0x42a>
   d9730:	f8da 0000 	ldr.w	r0, [sl]
   d9734:	ea49 0900 	orr.w	r9, r9, r0
   d9738:	f019 0f01 	tst.w	r9, #1
   d973c:	d107      	bne.n	d974e <__gethex+0x360>
   d973e:	e06b      	b.n	d9818 <__gethex+0x42a>
   d9740:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9742:	f1c3 0301 	rsb	r3, r3, #1
   d9746:	9315      	str	r3, [sp, #84]	; 0x54
   d9748:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d974a:	2b00      	cmp	r3, #0
   d974c:	d064      	beq.n	d9818 <__gethex+0x42a>
   d974e:	f8d5 a010 	ldr.w	sl, [r5, #16]
   d9752:	f105 0314 	add.w	r3, r5, #20
   d9756:	ea4f 098a 	mov.w	r9, sl, lsl #2
   d975a:	eb03 0109 	add.w	r1, r3, r9
   d975e:	2000      	movs	r0, #0
   d9760:	681a      	ldr	r2, [r3, #0]
   d9762:	f1b2 3fff 	cmp.w	r2, #4294967295
   d9766:	d002      	beq.n	d976e <__gethex+0x380>
   d9768:	3201      	adds	r2, #1
   d976a:	601a      	str	r2, [r3, #0]
   d976c:	e020      	b.n	d97b0 <__gethex+0x3c2>
   d976e:	f843 0b04 	str.w	r0, [r3], #4
   d9772:	4299      	cmp	r1, r3
   d9774:	d8f4      	bhi.n	d9760 <__gethex+0x372>
   d9776:	68ab      	ldr	r3, [r5, #8]
   d9778:	459a      	cmp	sl, r3
   d977a:	db12      	blt.n	d97a2 <__gethex+0x3b4>
   d977c:	6869      	ldr	r1, [r5, #4]
   d977e:	9802      	ldr	r0, [sp, #8]
   d9780:	3101      	adds	r1, #1
   d9782:	f000 f906 	bl	d9992 <_Balloc>
   d9786:	692a      	ldr	r2, [r5, #16]
   d9788:	3202      	adds	r2, #2
   d978a:	f105 010c 	add.w	r1, r5, #12
   d978e:	4683      	mov	fp, r0
   d9790:	0092      	lsls	r2, r2, #2
   d9792:	300c      	adds	r0, #12
   d9794:	f7fe ff0a 	bl	d85ac <memcpy>
   d9798:	4629      	mov	r1, r5
   d979a:	9802      	ldr	r0, [sp, #8]
   d979c:	f000 f92e 	bl	d99fc <_Bfree>
   d97a0:	465d      	mov	r5, fp
   d97a2:	692b      	ldr	r3, [r5, #16]
   d97a4:	1c5a      	adds	r2, r3, #1
   d97a6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   d97aa:	612a      	str	r2, [r5, #16]
   d97ac:	2201      	movs	r2, #1
   d97ae:	615a      	str	r2, [r3, #20]
   d97b0:	2f02      	cmp	r7, #2
   d97b2:	f105 0214 	add.w	r2, r5, #20
   d97b6:	d111      	bne.n	d97dc <__gethex+0x3ee>
   d97b8:	f8d8 3000 	ldr.w	r3, [r8]
   d97bc:	3b01      	subs	r3, #1
   d97be:	429e      	cmp	r6, r3
   d97c0:	d127      	bne.n	d9812 <__gethex+0x424>
   d97c2:	1171      	asrs	r1, r6, #5
   d97c4:	2301      	movs	r3, #1
   d97c6:	f006 061f 	and.w	r6, r6, #31
   d97ca:	fa03 f606 	lsl.w	r6, r3, r6
   d97ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   d97d2:	421e      	tst	r6, r3
   d97d4:	bf0c      	ite	eq
   d97d6:	2702      	moveq	r7, #2
   d97d8:	2701      	movne	r7, #1
   d97da:	e01a      	b.n	d9812 <__gethex+0x424>
   d97dc:	692b      	ldr	r3, [r5, #16]
   d97de:	459a      	cmp	sl, r3
   d97e0:	da0a      	bge.n	d97f8 <__gethex+0x40a>
   d97e2:	2101      	movs	r1, #1
   d97e4:	4628      	mov	r0, r5
   d97e6:	f7ff fdb7 	bl	d9358 <rshift>
   d97ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d97ee:	3401      	adds	r4, #1
   d97f0:	429c      	cmp	r4, r3
   d97f2:	f73f af2c 	bgt.w	d964e <__gethex+0x260>
   d97f6:	e00b      	b.n	d9810 <__gethex+0x422>
   d97f8:	f016 061f 	ands.w	r6, r6, #31
   d97fc:	d008      	beq.n	d9810 <__gethex+0x422>
   d97fe:	4491      	add	r9, r2
   d9800:	f1c6 0620 	rsb	r6, r6, #32
   d9804:	f859 0c04 	ldr.w	r0, [r9, #-4]
   d9808:	f000 f988 	bl	d9b1c <__hi0bits>
   d980c:	42b0      	cmp	r0, r6
   d980e:	dbe8      	blt.n	d97e2 <__gethex+0x3f4>
   d9810:	2701      	movs	r7, #1
   d9812:	f047 0720 	orr.w	r7, r7, #32
   d9816:	e001      	b.n	d981c <__gethex+0x42e>
   d9818:	f047 0710 	orr.w	r7, r7, #16
   d981c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d981e:	601d      	str	r5, [r3, #0]
   d9820:	9b06      	ldr	r3, [sp, #24]
   d9822:	4638      	mov	r0, r7
   d9824:	601c      	str	r4, [r3, #0]
   d9826:	b00b      	add	sp, #44	; 0x2c
   d9828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d982c <L_shift>:
   d982c:	f1c2 0208 	rsb	r2, r2, #8
   d9830:	0092      	lsls	r2, r2, #2
   d9832:	b570      	push	{r4, r5, r6, lr}
   d9834:	f1c2 0620 	rsb	r6, r2, #32
   d9838:	6843      	ldr	r3, [r0, #4]
   d983a:	6805      	ldr	r5, [r0, #0]
   d983c:	fa03 f406 	lsl.w	r4, r3, r6
   d9840:	432c      	orrs	r4, r5
   d9842:	40d3      	lsrs	r3, r2
   d9844:	6004      	str	r4, [r0, #0]
   d9846:	f840 3f04 	str.w	r3, [r0, #4]!
   d984a:	4288      	cmp	r0, r1
   d984c:	d3f4      	bcc.n	d9838 <L_shift+0xc>
   d984e:	bd70      	pop	{r4, r5, r6, pc}

000d9850 <__match>:
   d9850:	b530      	push	{r4, r5, lr}
   d9852:	6803      	ldr	r3, [r0, #0]
   d9854:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9858:	3301      	adds	r3, #1
   d985a:	b14c      	cbz	r4, d9870 <__match+0x20>
   d985c:	781a      	ldrb	r2, [r3, #0]
   d985e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d9862:	2d19      	cmp	r5, #25
   d9864:	bf98      	it	ls
   d9866:	3220      	addls	r2, #32
   d9868:	42a2      	cmp	r2, r4
   d986a:	d0f3      	beq.n	d9854 <__match+0x4>
   d986c:	2000      	movs	r0, #0
   d986e:	bd30      	pop	{r4, r5, pc}
   d9870:	6003      	str	r3, [r0, #0]
   d9872:	2001      	movs	r0, #1
   d9874:	bd30      	pop	{r4, r5, pc}

000d9876 <__hexnan>:
   d9876:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d987a:	680b      	ldr	r3, [r1, #0]
   d987c:	f8d0 b000 	ldr.w	fp, [r0]
   d9880:	115e      	asrs	r6, r3, #5
   d9882:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d9886:	f013 031f 	ands.w	r3, r3, #31
   d988a:	b085      	sub	sp, #20
   d988c:	bf18      	it	ne
   d988e:	3604      	addne	r6, #4
   d9890:	1f35      	subs	r5, r6, #4
   d9892:	4617      	mov	r7, r2
   d9894:	2200      	movs	r2, #0
   d9896:	4682      	mov	sl, r0
   d9898:	9301      	str	r3, [sp, #4]
   d989a:	f846 2c04 	str.w	r2, [r6, #-4]
   d989e:	46a8      	mov	r8, r5
   d98a0:	462c      	mov	r4, r5
   d98a2:	9200      	str	r2, [sp, #0]
   d98a4:	4691      	mov	r9, r2
   d98a6:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   d98aa:	2900      	cmp	r1, #0
   d98ac:	d03c      	beq.n	d9928 <__hexnan+0xb2>
   d98ae:	4608      	mov	r0, r1
   d98b0:	9203      	str	r2, [sp, #12]
   d98b2:	9102      	str	r1, [sp, #8]
   d98b4:	f7ff fd86 	bl	d93c4 <__hexdig_fun>
   d98b8:	9a03      	ldr	r2, [sp, #12]
   d98ba:	bb00      	cbnz	r0, d98fe <__hexnan+0x88>
   d98bc:	9902      	ldr	r1, [sp, #8]
   d98be:	2920      	cmp	r1, #32
   d98c0:	d816      	bhi.n	d98f0 <__hexnan+0x7a>
   d98c2:	9b00      	ldr	r3, [sp, #0]
   d98c4:	4599      	cmp	r9, r3
   d98c6:	ddee      	ble.n	d98a6 <__hexnan+0x30>
   d98c8:	4544      	cmp	r4, r8
   d98ca:	d205      	bcs.n	d98d8 <__hexnan+0x62>
   d98cc:	2a07      	cmp	r2, #7
   d98ce:	dc03      	bgt.n	d98d8 <__hexnan+0x62>
   d98d0:	4641      	mov	r1, r8
   d98d2:	4620      	mov	r0, r4
   d98d4:	f7ff ffaa 	bl	d982c <L_shift>
   d98d8:	42bc      	cmp	r4, r7
   d98da:	d923      	bls.n	d9924 <__hexnan+0xae>
   d98dc:	2300      	movs	r3, #0
   d98de:	f1a4 0804 	sub.w	r8, r4, #4
   d98e2:	f844 3c04 	str.w	r3, [r4, #-4]
   d98e6:	f8cd 9000 	str.w	r9, [sp]
   d98ea:	4644      	mov	r4, r8
   d98ec:	461a      	mov	r2, r3
   d98ee:	e7da      	b.n	d98a6 <__hexnan+0x30>
   d98f0:	2929      	cmp	r1, #41	; 0x29
   d98f2:	d148      	bne.n	d9986 <__hexnan+0x110>
   d98f4:	f10b 0301 	add.w	r3, fp, #1
   d98f8:	f8ca 3000 	str.w	r3, [sl]
   d98fc:	e014      	b.n	d9928 <__hexnan+0xb2>
   d98fe:	3201      	adds	r2, #1
   d9900:	2a08      	cmp	r2, #8
   d9902:	f109 0901 	add.w	r9, r9, #1
   d9906:	dd06      	ble.n	d9916 <__hexnan+0xa0>
   d9908:	42bc      	cmp	r4, r7
   d990a:	d9cc      	bls.n	d98a6 <__hexnan+0x30>
   d990c:	2300      	movs	r3, #0
   d990e:	f844 3c04 	str.w	r3, [r4, #-4]
   d9912:	2201      	movs	r2, #1
   d9914:	3c04      	subs	r4, #4
   d9916:	6821      	ldr	r1, [r4, #0]
   d9918:	f000 000f 	and.w	r0, r0, #15
   d991c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   d9920:	6020      	str	r0, [r4, #0]
   d9922:	e7c0      	b.n	d98a6 <__hexnan+0x30>
   d9924:	2208      	movs	r2, #8
   d9926:	e7be      	b.n	d98a6 <__hexnan+0x30>
   d9928:	f1b9 0f00 	cmp.w	r9, #0
   d992c:	d02b      	beq.n	d9986 <__hexnan+0x110>
   d992e:	4544      	cmp	r4, r8
   d9930:	d205      	bcs.n	d993e <__hexnan+0xc8>
   d9932:	2a07      	cmp	r2, #7
   d9934:	dc03      	bgt.n	d993e <__hexnan+0xc8>
   d9936:	4641      	mov	r1, r8
   d9938:	4620      	mov	r0, r4
   d993a:	f7ff ff77 	bl	d982c <L_shift>
   d993e:	42bc      	cmp	r4, r7
   d9940:	d90c      	bls.n	d995c <__hexnan+0xe6>
   d9942:	463b      	mov	r3, r7
   d9944:	f854 2b04 	ldr.w	r2, [r4], #4
   d9948:	f843 2b04 	str.w	r2, [r3], #4
   d994c:	42a5      	cmp	r5, r4
   d994e:	d2f9      	bcs.n	d9944 <__hexnan+0xce>
   d9950:	2200      	movs	r2, #0
   d9952:	f843 2b04 	str.w	r2, [r3], #4
   d9956:	429d      	cmp	r5, r3
   d9958:	d2fb      	bcs.n	d9952 <__hexnan+0xdc>
   d995a:	e00b      	b.n	d9974 <__hexnan+0xfe>
   d995c:	9b01      	ldr	r3, [sp, #4]
   d995e:	b14b      	cbz	r3, d9974 <__hexnan+0xfe>
   d9960:	f1c3 0220 	rsb	r2, r3, #32
   d9964:	f04f 33ff 	mov.w	r3, #4294967295
   d9968:	40d3      	lsrs	r3, r2
   d996a:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d996e:	4013      	ands	r3, r2
   d9970:	f846 3c04 	str.w	r3, [r6, #-4]
   d9974:	682b      	ldr	r3, [r5, #0]
   d9976:	b943      	cbnz	r3, d998a <__hexnan+0x114>
   d9978:	42bd      	cmp	r5, r7
   d997a:	d102      	bne.n	d9982 <__hexnan+0x10c>
   d997c:	2301      	movs	r3, #1
   d997e:	602b      	str	r3, [r5, #0]
   d9980:	e003      	b.n	d998a <__hexnan+0x114>
   d9982:	3d04      	subs	r5, #4
   d9984:	e7f6      	b.n	d9974 <__hexnan+0xfe>
   d9986:	2004      	movs	r0, #4
   d9988:	e000      	b.n	d998c <__hexnan+0x116>
   d998a:	2005      	movs	r0, #5
   d998c:	b005      	add	sp, #20
   d998e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9992 <_Balloc>:
   d9992:	b570      	push	{r4, r5, r6, lr}
   d9994:	6a45      	ldr	r5, [r0, #36]	; 0x24
   d9996:	4604      	mov	r4, r0
   d9998:	460e      	mov	r6, r1
   d999a:	b93d      	cbnz	r5, d99ac <_Balloc+0x1a>
   d999c:	2010      	movs	r0, #16
   d999e:	f7fc fccf 	bl	d6340 <malloc>
   d99a2:	6260      	str	r0, [r4, #36]	; 0x24
   d99a4:	6045      	str	r5, [r0, #4]
   d99a6:	6085      	str	r5, [r0, #8]
   d99a8:	6005      	str	r5, [r0, #0]
   d99aa:	60c5      	str	r5, [r0, #12]
   d99ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d99ae:	68eb      	ldr	r3, [r5, #12]
   d99b0:	b143      	cbz	r3, d99c4 <_Balloc+0x32>
   d99b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d99b4:	68db      	ldr	r3, [r3, #12]
   d99b6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   d99ba:	b178      	cbz	r0, d99dc <_Balloc+0x4a>
   d99bc:	6802      	ldr	r2, [r0, #0]
   d99be:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   d99c2:	e017      	b.n	d99f4 <_Balloc+0x62>
   d99c4:	2221      	movs	r2, #33	; 0x21
   d99c6:	2104      	movs	r1, #4
   d99c8:	4620      	mov	r0, r4
   d99ca:	f000 fbd2 	bl	da172 <_calloc_r>
   d99ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d99d0:	60e8      	str	r0, [r5, #12]
   d99d2:	68db      	ldr	r3, [r3, #12]
   d99d4:	2b00      	cmp	r3, #0
   d99d6:	d1ec      	bne.n	d99b2 <_Balloc+0x20>
   d99d8:	2000      	movs	r0, #0
   d99da:	bd70      	pop	{r4, r5, r6, pc}
   d99dc:	2101      	movs	r1, #1
   d99de:	fa01 f506 	lsl.w	r5, r1, r6
   d99e2:	1d6a      	adds	r2, r5, #5
   d99e4:	0092      	lsls	r2, r2, #2
   d99e6:	4620      	mov	r0, r4
   d99e8:	f000 fbc3 	bl	da172 <_calloc_r>
   d99ec:	2800      	cmp	r0, #0
   d99ee:	d0f3      	beq.n	d99d8 <_Balloc+0x46>
   d99f0:	6046      	str	r6, [r0, #4]
   d99f2:	6085      	str	r5, [r0, #8]
   d99f4:	2300      	movs	r3, #0
   d99f6:	6103      	str	r3, [r0, #16]
   d99f8:	60c3      	str	r3, [r0, #12]
   d99fa:	bd70      	pop	{r4, r5, r6, pc}

000d99fc <_Bfree>:
   d99fc:	b570      	push	{r4, r5, r6, lr}
   d99fe:	6a44      	ldr	r4, [r0, #36]	; 0x24
   d9a00:	4606      	mov	r6, r0
   d9a02:	460d      	mov	r5, r1
   d9a04:	b93c      	cbnz	r4, d9a16 <_Bfree+0x1a>
   d9a06:	2010      	movs	r0, #16
   d9a08:	f7fc fc9a 	bl	d6340 <malloc>
   d9a0c:	6270      	str	r0, [r6, #36]	; 0x24
   d9a0e:	6044      	str	r4, [r0, #4]
   d9a10:	6084      	str	r4, [r0, #8]
   d9a12:	6004      	str	r4, [r0, #0]
   d9a14:	60c4      	str	r4, [r0, #12]
   d9a16:	b13d      	cbz	r5, d9a28 <_Bfree+0x2c>
   d9a18:	6a73      	ldr	r3, [r6, #36]	; 0x24
   d9a1a:	686a      	ldr	r2, [r5, #4]
   d9a1c:	68db      	ldr	r3, [r3, #12]
   d9a1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d9a22:	6029      	str	r1, [r5, #0]
   d9a24:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   d9a28:	bd70      	pop	{r4, r5, r6, pc}

000d9a2a <__multadd>:
   d9a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9a2e:	690d      	ldr	r5, [r1, #16]
   d9a30:	461f      	mov	r7, r3
   d9a32:	4606      	mov	r6, r0
   d9a34:	460c      	mov	r4, r1
   d9a36:	f101 0e14 	add.w	lr, r1, #20
   d9a3a:	2300      	movs	r3, #0
   d9a3c:	f8de 0000 	ldr.w	r0, [lr]
   d9a40:	b281      	uxth	r1, r0
   d9a42:	fb02 7101 	mla	r1, r2, r1, r7
   d9a46:	0c0f      	lsrs	r7, r1, #16
   d9a48:	0c00      	lsrs	r0, r0, #16
   d9a4a:	fb02 7000 	mla	r0, r2, r0, r7
   d9a4e:	b289      	uxth	r1, r1
   d9a50:	3301      	adds	r3, #1
   d9a52:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   d9a56:	429d      	cmp	r5, r3
   d9a58:	ea4f 4710 	mov.w	r7, r0, lsr #16
   d9a5c:	f84e 1b04 	str.w	r1, [lr], #4
   d9a60:	dcec      	bgt.n	d9a3c <__multadd+0x12>
   d9a62:	b1d7      	cbz	r7, d9a9a <__multadd+0x70>
   d9a64:	68a3      	ldr	r3, [r4, #8]
   d9a66:	429d      	cmp	r5, r3
   d9a68:	db12      	blt.n	d9a90 <__multadd+0x66>
   d9a6a:	6861      	ldr	r1, [r4, #4]
   d9a6c:	4630      	mov	r0, r6
   d9a6e:	3101      	adds	r1, #1
   d9a70:	f7ff ff8f 	bl	d9992 <_Balloc>
   d9a74:	6922      	ldr	r2, [r4, #16]
   d9a76:	3202      	adds	r2, #2
   d9a78:	f104 010c 	add.w	r1, r4, #12
   d9a7c:	4680      	mov	r8, r0
   d9a7e:	0092      	lsls	r2, r2, #2
   d9a80:	300c      	adds	r0, #12
   d9a82:	f7fe fd93 	bl	d85ac <memcpy>
   d9a86:	4621      	mov	r1, r4
   d9a88:	4630      	mov	r0, r6
   d9a8a:	f7ff ffb7 	bl	d99fc <_Bfree>
   d9a8e:	4644      	mov	r4, r8
   d9a90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   d9a94:	3501      	adds	r5, #1
   d9a96:	615f      	str	r7, [r3, #20]
   d9a98:	6125      	str	r5, [r4, #16]
   d9a9a:	4620      	mov	r0, r4
   d9a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9aa0 <__s2b>:
   d9aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9aa4:	460c      	mov	r4, r1
   d9aa6:	4615      	mov	r5, r2
   d9aa8:	461f      	mov	r7, r3
   d9aaa:	2209      	movs	r2, #9
   d9aac:	3308      	adds	r3, #8
   d9aae:	4606      	mov	r6, r0
   d9ab0:	fb93 f3f2 	sdiv	r3, r3, r2
   d9ab4:	2100      	movs	r1, #0
   d9ab6:	2201      	movs	r2, #1
   d9ab8:	429a      	cmp	r2, r3
   d9aba:	da02      	bge.n	d9ac2 <__s2b+0x22>
   d9abc:	0052      	lsls	r2, r2, #1
   d9abe:	3101      	adds	r1, #1
   d9ac0:	e7fa      	b.n	d9ab8 <__s2b+0x18>
   d9ac2:	4630      	mov	r0, r6
   d9ac4:	f7ff ff65 	bl	d9992 <_Balloc>
   d9ac8:	9b08      	ldr	r3, [sp, #32]
   d9aca:	6143      	str	r3, [r0, #20]
   d9acc:	2d09      	cmp	r5, #9
   d9ace:	f04f 0301 	mov.w	r3, #1
   d9ad2:	6103      	str	r3, [r0, #16]
   d9ad4:	dd11      	ble.n	d9afa <__s2b+0x5a>
   d9ad6:	f104 0809 	add.w	r8, r4, #9
   d9ada:	46c1      	mov	r9, r8
   d9adc:	442c      	add	r4, r5
   d9ade:	f819 3b01 	ldrb.w	r3, [r9], #1
   d9ae2:	4601      	mov	r1, r0
   d9ae4:	3b30      	subs	r3, #48	; 0x30
   d9ae6:	220a      	movs	r2, #10
   d9ae8:	4630      	mov	r0, r6
   d9aea:	f7ff ff9e 	bl	d9a2a <__multadd>
   d9aee:	45a1      	cmp	r9, r4
   d9af0:	d1f5      	bne.n	d9ade <__s2b+0x3e>
   d9af2:	eb08 0405 	add.w	r4, r8, r5
   d9af6:	3c08      	subs	r4, #8
   d9af8:	e001      	b.n	d9afe <__s2b+0x5e>
   d9afa:	340a      	adds	r4, #10
   d9afc:	2509      	movs	r5, #9
   d9afe:	1b2d      	subs	r5, r5, r4
   d9b00:	1963      	adds	r3, r4, r5
   d9b02:	429f      	cmp	r7, r3
   d9b04:	dd08      	ble.n	d9b18 <__s2b+0x78>
   d9b06:	f814 3b01 	ldrb.w	r3, [r4], #1
   d9b0a:	4601      	mov	r1, r0
   d9b0c:	3b30      	subs	r3, #48	; 0x30
   d9b0e:	220a      	movs	r2, #10
   d9b10:	4630      	mov	r0, r6
   d9b12:	f7ff ff8a 	bl	d9a2a <__multadd>
   d9b16:	e7f3      	b.n	d9b00 <__s2b+0x60>
   d9b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9b1c <__hi0bits>:
   d9b1c:	0c03      	lsrs	r3, r0, #16
   d9b1e:	041b      	lsls	r3, r3, #16
   d9b20:	b913      	cbnz	r3, d9b28 <__hi0bits+0xc>
   d9b22:	0400      	lsls	r0, r0, #16
   d9b24:	2310      	movs	r3, #16
   d9b26:	e000      	b.n	d9b2a <__hi0bits+0xe>
   d9b28:	2300      	movs	r3, #0
   d9b2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d9b2e:	bf04      	itt	eq
   d9b30:	0200      	lsleq	r0, r0, #8
   d9b32:	3308      	addeq	r3, #8
   d9b34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d9b38:	bf04      	itt	eq
   d9b3a:	0100      	lsleq	r0, r0, #4
   d9b3c:	3304      	addeq	r3, #4
   d9b3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d9b42:	bf04      	itt	eq
   d9b44:	0080      	lsleq	r0, r0, #2
   d9b46:	3302      	addeq	r3, #2
   d9b48:	2800      	cmp	r0, #0
   d9b4a:	db03      	blt.n	d9b54 <__hi0bits+0x38>
   d9b4c:	0042      	lsls	r2, r0, #1
   d9b4e:	d503      	bpl.n	d9b58 <__hi0bits+0x3c>
   d9b50:	1c58      	adds	r0, r3, #1
   d9b52:	4770      	bx	lr
   d9b54:	4618      	mov	r0, r3
   d9b56:	4770      	bx	lr
   d9b58:	2020      	movs	r0, #32
   d9b5a:	4770      	bx	lr

000d9b5c <__lo0bits>:
   d9b5c:	6803      	ldr	r3, [r0, #0]
   d9b5e:	f013 0207 	ands.w	r2, r3, #7
   d9b62:	d00b      	beq.n	d9b7c <__lo0bits+0x20>
   d9b64:	07d9      	lsls	r1, r3, #31
   d9b66:	d422      	bmi.n	d9bae <__lo0bits+0x52>
   d9b68:	079a      	lsls	r2, r3, #30
   d9b6a:	bf4b      	itete	mi
   d9b6c:	085b      	lsrmi	r3, r3, #1
   d9b6e:	089b      	lsrpl	r3, r3, #2
   d9b70:	6003      	strmi	r3, [r0, #0]
   d9b72:	6003      	strpl	r3, [r0, #0]
   d9b74:	bf4c      	ite	mi
   d9b76:	2001      	movmi	r0, #1
   d9b78:	2002      	movpl	r0, #2
   d9b7a:	4770      	bx	lr
   d9b7c:	b299      	uxth	r1, r3
   d9b7e:	b909      	cbnz	r1, d9b84 <__lo0bits+0x28>
   d9b80:	0c1b      	lsrs	r3, r3, #16
   d9b82:	2210      	movs	r2, #16
   d9b84:	f013 0fff 	tst.w	r3, #255	; 0xff
   d9b88:	bf04      	itt	eq
   d9b8a:	0a1b      	lsreq	r3, r3, #8
   d9b8c:	3208      	addeq	r2, #8
   d9b8e:	0719      	lsls	r1, r3, #28
   d9b90:	bf04      	itt	eq
   d9b92:	091b      	lsreq	r3, r3, #4
   d9b94:	3204      	addeq	r2, #4
   d9b96:	0799      	lsls	r1, r3, #30
   d9b98:	bf04      	itt	eq
   d9b9a:	089b      	lsreq	r3, r3, #2
   d9b9c:	3202      	addeq	r2, #2
   d9b9e:	07d9      	lsls	r1, r3, #31
   d9ba0:	d402      	bmi.n	d9ba8 <__lo0bits+0x4c>
   d9ba2:	085b      	lsrs	r3, r3, #1
   d9ba4:	d005      	beq.n	d9bb2 <__lo0bits+0x56>
   d9ba6:	3201      	adds	r2, #1
   d9ba8:	6003      	str	r3, [r0, #0]
   d9baa:	4610      	mov	r0, r2
   d9bac:	4770      	bx	lr
   d9bae:	2000      	movs	r0, #0
   d9bb0:	4770      	bx	lr
   d9bb2:	2020      	movs	r0, #32
   d9bb4:	4770      	bx	lr

000d9bb6 <__i2b>:
   d9bb6:	b510      	push	{r4, lr}
   d9bb8:	460c      	mov	r4, r1
   d9bba:	2101      	movs	r1, #1
   d9bbc:	f7ff fee9 	bl	d9992 <_Balloc>
   d9bc0:	2201      	movs	r2, #1
   d9bc2:	6144      	str	r4, [r0, #20]
   d9bc4:	6102      	str	r2, [r0, #16]
   d9bc6:	bd10      	pop	{r4, pc}

000d9bc8 <__multiply>:
   d9bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9bcc:	4614      	mov	r4, r2
   d9bce:	690a      	ldr	r2, [r1, #16]
   d9bd0:	6923      	ldr	r3, [r4, #16]
   d9bd2:	429a      	cmp	r2, r3
   d9bd4:	bfb8      	it	lt
   d9bd6:	460b      	movlt	r3, r1
   d9bd8:	4688      	mov	r8, r1
   d9bda:	bfbc      	itt	lt
   d9bdc:	46a0      	movlt	r8, r4
   d9bde:	461c      	movlt	r4, r3
   d9be0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   d9be4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d9be8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9bec:	f8d8 1004 	ldr.w	r1, [r8, #4]
   d9bf0:	eb07 0609 	add.w	r6, r7, r9
   d9bf4:	429e      	cmp	r6, r3
   d9bf6:	bfc8      	it	gt
   d9bf8:	3101      	addgt	r1, #1
   d9bfa:	f7ff feca 	bl	d9992 <_Balloc>
   d9bfe:	f100 0514 	add.w	r5, r0, #20
   d9c02:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   d9c06:	462b      	mov	r3, r5
   d9c08:	2200      	movs	r2, #0
   d9c0a:	4563      	cmp	r3, ip
   d9c0c:	d202      	bcs.n	d9c14 <__multiply+0x4c>
   d9c0e:	f843 2b04 	str.w	r2, [r3], #4
   d9c12:	e7fa      	b.n	d9c0a <__multiply+0x42>
   d9c14:	f104 0214 	add.w	r2, r4, #20
   d9c18:	f108 0114 	add.w	r1, r8, #20
   d9c1c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d9c20:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   d9c24:	9300      	str	r3, [sp, #0]
   d9c26:	9b00      	ldr	r3, [sp, #0]
   d9c28:	9201      	str	r2, [sp, #4]
   d9c2a:	4293      	cmp	r3, r2
   d9c2c:	d957      	bls.n	d9cde <__multiply+0x116>
   d9c2e:	f8b2 b000 	ldrh.w	fp, [r2]
   d9c32:	f1bb 0f00 	cmp.w	fp, #0
   d9c36:	d023      	beq.n	d9c80 <__multiply+0xb8>
   d9c38:	4689      	mov	r9, r1
   d9c3a:	46ae      	mov	lr, r5
   d9c3c:	f04f 0800 	mov.w	r8, #0
   d9c40:	f859 4b04 	ldr.w	r4, [r9], #4
   d9c44:	f8be a000 	ldrh.w	sl, [lr]
   d9c48:	b2a3      	uxth	r3, r4
   d9c4a:	fb0b a303 	mla	r3, fp, r3, sl
   d9c4e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   d9c52:	f8de 4000 	ldr.w	r4, [lr]
   d9c56:	4443      	add	r3, r8
   d9c58:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d9c5c:	fb0b 840a 	mla	r4, fp, sl, r8
   d9c60:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   d9c64:	46f2      	mov	sl, lr
   d9c66:	b29b      	uxth	r3, r3
   d9c68:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   d9c6c:	454f      	cmp	r7, r9
   d9c6e:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d9c72:	f84a 3b04 	str.w	r3, [sl], #4
   d9c76:	d901      	bls.n	d9c7c <__multiply+0xb4>
   d9c78:	46d6      	mov	lr, sl
   d9c7a:	e7e1      	b.n	d9c40 <__multiply+0x78>
   d9c7c:	f8ce 8004 	str.w	r8, [lr, #4]
   d9c80:	9b01      	ldr	r3, [sp, #4]
   d9c82:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   d9c86:	3204      	adds	r2, #4
   d9c88:	f1ba 0f00 	cmp.w	sl, #0
   d9c8c:	d021      	beq.n	d9cd2 <__multiply+0x10a>
   d9c8e:	682b      	ldr	r3, [r5, #0]
   d9c90:	462c      	mov	r4, r5
   d9c92:	4689      	mov	r9, r1
   d9c94:	f04f 0800 	mov.w	r8, #0
   d9c98:	f8b9 e000 	ldrh.w	lr, [r9]
   d9c9c:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   d9ca0:	fb0a be0e 	mla	lr, sl, lr, fp
   d9ca4:	44f0      	add	r8, lr
   d9ca6:	46a3      	mov	fp, r4
   d9ca8:	b29b      	uxth	r3, r3
   d9caa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   d9cae:	f84b 3b04 	str.w	r3, [fp], #4
   d9cb2:	f859 3b04 	ldr.w	r3, [r9], #4
   d9cb6:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   d9cba:	0c1b      	lsrs	r3, r3, #16
   d9cbc:	fb0a e303 	mla	r3, sl, r3, lr
   d9cc0:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   d9cc4:	454f      	cmp	r7, r9
   d9cc6:	ea4f 4813 	mov.w	r8, r3, lsr #16
   d9cca:	d901      	bls.n	d9cd0 <__multiply+0x108>
   d9ccc:	465c      	mov	r4, fp
   d9cce:	e7e3      	b.n	d9c98 <__multiply+0xd0>
   d9cd0:	6063      	str	r3, [r4, #4]
   d9cd2:	3504      	adds	r5, #4
   d9cd4:	e7a7      	b.n	d9c26 <__multiply+0x5e>
   d9cd6:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   d9cda:	b913      	cbnz	r3, d9ce2 <__multiply+0x11a>
   d9cdc:	3e01      	subs	r6, #1
   d9cde:	2e00      	cmp	r6, #0
   d9ce0:	dcf9      	bgt.n	d9cd6 <__multiply+0x10e>
   d9ce2:	6106      	str	r6, [r0, #16]
   d9ce4:	b003      	add	sp, #12
   d9ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d9cec <__pow5mult>:
   d9cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9cf0:	4615      	mov	r5, r2
   d9cf2:	f012 0203 	ands.w	r2, r2, #3
   d9cf6:	4606      	mov	r6, r0
   d9cf8:	460f      	mov	r7, r1
   d9cfa:	d007      	beq.n	d9d0c <__pow5mult+0x20>
   d9cfc:	3a01      	subs	r2, #1
   d9cfe:	4c21      	ldr	r4, [pc, #132]	; (d9d84 <__pow5mult+0x98>)
   d9d00:	2300      	movs	r3, #0
   d9d02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d9d06:	f7ff fe90 	bl	d9a2a <__multadd>
   d9d0a:	4607      	mov	r7, r0
   d9d0c:	10ad      	asrs	r5, r5, #2
   d9d0e:	d036      	beq.n	d9d7e <__pow5mult+0x92>
   d9d10:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d9d12:	b93c      	cbnz	r4, d9d24 <__pow5mult+0x38>
   d9d14:	2010      	movs	r0, #16
   d9d16:	f7fc fb13 	bl	d6340 <malloc>
   d9d1a:	6270      	str	r0, [r6, #36]	; 0x24
   d9d1c:	6044      	str	r4, [r0, #4]
   d9d1e:	6084      	str	r4, [r0, #8]
   d9d20:	6004      	str	r4, [r0, #0]
   d9d22:	60c4      	str	r4, [r0, #12]
   d9d24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d9d28:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d9d2c:	b94c      	cbnz	r4, d9d42 <__pow5mult+0x56>
   d9d2e:	f240 2171 	movw	r1, #625	; 0x271
   d9d32:	4630      	mov	r0, r6
   d9d34:	f7ff ff3f 	bl	d9bb6 <__i2b>
   d9d38:	2300      	movs	r3, #0
   d9d3a:	f8c8 0008 	str.w	r0, [r8, #8]
   d9d3e:	4604      	mov	r4, r0
   d9d40:	6003      	str	r3, [r0, #0]
   d9d42:	f04f 0800 	mov.w	r8, #0
   d9d46:	07eb      	lsls	r3, r5, #31
   d9d48:	d50a      	bpl.n	d9d60 <__pow5mult+0x74>
   d9d4a:	4639      	mov	r1, r7
   d9d4c:	4622      	mov	r2, r4
   d9d4e:	4630      	mov	r0, r6
   d9d50:	f7ff ff3a 	bl	d9bc8 <__multiply>
   d9d54:	4639      	mov	r1, r7
   d9d56:	4681      	mov	r9, r0
   d9d58:	4630      	mov	r0, r6
   d9d5a:	f7ff fe4f 	bl	d99fc <_Bfree>
   d9d5e:	464f      	mov	r7, r9
   d9d60:	106d      	asrs	r5, r5, #1
   d9d62:	d00c      	beq.n	d9d7e <__pow5mult+0x92>
   d9d64:	6820      	ldr	r0, [r4, #0]
   d9d66:	b108      	cbz	r0, d9d6c <__pow5mult+0x80>
   d9d68:	4604      	mov	r4, r0
   d9d6a:	e7ec      	b.n	d9d46 <__pow5mult+0x5a>
   d9d6c:	4622      	mov	r2, r4
   d9d6e:	4621      	mov	r1, r4
   d9d70:	4630      	mov	r0, r6
   d9d72:	f7ff ff29 	bl	d9bc8 <__multiply>
   d9d76:	6020      	str	r0, [r4, #0]
   d9d78:	f8c0 8000 	str.w	r8, [r0]
   d9d7c:	e7f4      	b.n	d9d68 <__pow5mult+0x7c>
   d9d7e:	4638      	mov	r0, r7
   d9d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9d84:	000db108 	.word	0x000db108

000d9d88 <__lshift>:
   d9d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9d8c:	460c      	mov	r4, r1
   d9d8e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d9d92:	6926      	ldr	r6, [r4, #16]
   d9d94:	6849      	ldr	r1, [r1, #4]
   d9d96:	68a3      	ldr	r3, [r4, #8]
   d9d98:	4456      	add	r6, sl
   d9d9a:	4607      	mov	r7, r0
   d9d9c:	4691      	mov	r9, r2
   d9d9e:	1c75      	adds	r5, r6, #1
   d9da0:	42ab      	cmp	r3, r5
   d9da2:	da02      	bge.n	d9daa <__lshift+0x22>
   d9da4:	3101      	adds	r1, #1
   d9da6:	005b      	lsls	r3, r3, #1
   d9da8:	e7fa      	b.n	d9da0 <__lshift+0x18>
   d9daa:	4638      	mov	r0, r7
   d9dac:	f7ff fdf1 	bl	d9992 <_Balloc>
   d9db0:	2300      	movs	r3, #0
   d9db2:	4680      	mov	r8, r0
   d9db4:	f100 0114 	add.w	r1, r0, #20
   d9db8:	461a      	mov	r2, r3
   d9dba:	4553      	cmp	r3, sl
   d9dbc:	da03      	bge.n	d9dc6 <__lshift+0x3e>
   d9dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   d9dc2:	3301      	adds	r3, #1
   d9dc4:	e7f9      	b.n	d9dba <__lshift+0x32>
   d9dc6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   d9dca:	6920      	ldr	r0, [r4, #16]
   d9dcc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d9dd0:	f019 091f 	ands.w	r9, r9, #31
   d9dd4:	f104 0114 	add.w	r1, r4, #20
   d9dd8:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   d9ddc:	d014      	beq.n	d9e08 <__lshift+0x80>
   d9dde:	f1c9 0c20 	rsb	ip, r9, #32
   d9de2:	2200      	movs	r2, #0
   d9de4:	6808      	ldr	r0, [r1, #0]
   d9de6:	fa00 f009 	lsl.w	r0, r0, r9
   d9dea:	4302      	orrs	r2, r0
   d9dec:	469a      	mov	sl, r3
   d9dee:	f843 2b04 	str.w	r2, [r3], #4
   d9df2:	f851 2b04 	ldr.w	r2, [r1], #4
   d9df6:	458e      	cmp	lr, r1
   d9df8:	fa22 f20c 	lsr.w	r2, r2, ip
   d9dfc:	d8f2      	bhi.n	d9de4 <__lshift+0x5c>
   d9dfe:	f8ca 2004 	str.w	r2, [sl, #4]
   d9e02:	b142      	cbz	r2, d9e16 <__lshift+0x8e>
   d9e04:	1cb5      	adds	r5, r6, #2
   d9e06:	e006      	b.n	d9e16 <__lshift+0x8e>
   d9e08:	3b04      	subs	r3, #4
   d9e0a:	f851 2b04 	ldr.w	r2, [r1], #4
   d9e0e:	f843 2f04 	str.w	r2, [r3, #4]!
   d9e12:	458e      	cmp	lr, r1
   d9e14:	d8f9      	bhi.n	d9e0a <__lshift+0x82>
   d9e16:	3d01      	subs	r5, #1
   d9e18:	4638      	mov	r0, r7
   d9e1a:	f8c8 5010 	str.w	r5, [r8, #16]
   d9e1e:	4621      	mov	r1, r4
   d9e20:	f7ff fdec 	bl	d99fc <_Bfree>
   d9e24:	4640      	mov	r0, r8
   d9e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d9e2a <__mcmp>:
   d9e2a:	6903      	ldr	r3, [r0, #16]
   d9e2c:	690a      	ldr	r2, [r1, #16]
   d9e2e:	1a9b      	subs	r3, r3, r2
   d9e30:	b510      	push	{r4, lr}
   d9e32:	d111      	bne.n	d9e58 <__mcmp+0x2e>
   d9e34:	0092      	lsls	r2, r2, #2
   d9e36:	3014      	adds	r0, #20
   d9e38:	3114      	adds	r1, #20
   d9e3a:	1883      	adds	r3, r0, r2
   d9e3c:	440a      	add	r2, r1
   d9e3e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   d9e42:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   d9e46:	428c      	cmp	r4, r1
   d9e48:	d002      	beq.n	d9e50 <__mcmp+0x26>
   d9e4a:	d307      	bcc.n	d9e5c <__mcmp+0x32>
   d9e4c:	2001      	movs	r0, #1
   d9e4e:	bd10      	pop	{r4, pc}
   d9e50:	4298      	cmp	r0, r3
   d9e52:	d3f4      	bcc.n	d9e3e <__mcmp+0x14>
   d9e54:	2000      	movs	r0, #0
   d9e56:	bd10      	pop	{r4, pc}
   d9e58:	4618      	mov	r0, r3
   d9e5a:	bd10      	pop	{r4, pc}
   d9e5c:	f04f 30ff 	mov.w	r0, #4294967295
   d9e60:	bd10      	pop	{r4, pc}

000d9e62 <__mdiff>:
   d9e62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9e66:	460c      	mov	r4, r1
   d9e68:	4607      	mov	r7, r0
   d9e6a:	4611      	mov	r1, r2
   d9e6c:	4620      	mov	r0, r4
   d9e6e:	4615      	mov	r5, r2
   d9e70:	f7ff ffdb 	bl	d9e2a <__mcmp>
   d9e74:	1e06      	subs	r6, r0, #0
   d9e76:	d108      	bne.n	d9e8a <__mdiff+0x28>
   d9e78:	4631      	mov	r1, r6
   d9e7a:	4638      	mov	r0, r7
   d9e7c:	f7ff fd89 	bl	d9992 <_Balloc>
   d9e80:	2301      	movs	r3, #1
   d9e82:	6103      	str	r3, [r0, #16]
   d9e84:	6146      	str	r6, [r0, #20]
   d9e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9e8a:	bfbc      	itt	lt
   d9e8c:	4623      	movlt	r3, r4
   d9e8e:	462c      	movlt	r4, r5
   d9e90:	4638      	mov	r0, r7
   d9e92:	6861      	ldr	r1, [r4, #4]
   d9e94:	bfba      	itte	lt
   d9e96:	461d      	movlt	r5, r3
   d9e98:	2601      	movlt	r6, #1
   d9e9a:	2600      	movge	r6, #0
   d9e9c:	f7ff fd79 	bl	d9992 <_Balloc>
   d9ea0:	692b      	ldr	r3, [r5, #16]
   d9ea2:	60c6      	str	r6, [r0, #12]
   d9ea4:	6926      	ldr	r6, [r4, #16]
   d9ea6:	f105 0914 	add.w	r9, r5, #20
   d9eaa:	3414      	adds	r4, #20
   d9eac:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   d9eb0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   d9eb4:	f100 0514 	add.w	r5, r0, #20
   d9eb8:	f04f 0c00 	mov.w	ip, #0
   d9ebc:	f854 3b04 	ldr.w	r3, [r4], #4
   d9ec0:	f859 2b04 	ldr.w	r2, [r9], #4
   d9ec4:	fa1c f183 	uxtah	r1, ip, r3
   d9ec8:	fa1f fe82 	uxth.w	lr, r2
   d9ecc:	0c12      	lsrs	r2, r2, #16
   d9ece:	ebce 0101 	rsb	r1, lr, r1
   d9ed2:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   d9ed6:	eb03 4321 	add.w	r3, r3, r1, asr #16
   d9eda:	b289      	uxth	r1, r1
   d9edc:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d9ee0:	45c8      	cmp	r8, r9
   d9ee2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   d9ee6:	46a6      	mov	lr, r4
   d9ee8:	f845 3b04 	str.w	r3, [r5], #4
   d9eec:	d8e6      	bhi.n	d9ebc <__mdiff+0x5a>
   d9eee:	45be      	cmp	lr, r7
   d9ef0:	d20e      	bcs.n	d9f10 <__mdiff+0xae>
   d9ef2:	f85e 1b04 	ldr.w	r1, [lr], #4
   d9ef6:	fa1c f281 	uxtah	r2, ip, r1
   d9efa:	1413      	asrs	r3, r2, #16
   d9efc:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   d9f00:	b292      	uxth	r2, r2
   d9f02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   d9f06:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d9f0a:	f845 2b04 	str.w	r2, [r5], #4
   d9f0e:	e7ee      	b.n	d9eee <__mdiff+0x8c>
   d9f10:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   d9f14:	b90b      	cbnz	r3, d9f1a <__mdiff+0xb8>
   d9f16:	3e01      	subs	r6, #1
   d9f18:	e7fa      	b.n	d9f10 <__mdiff+0xae>
   d9f1a:	6106      	str	r6, [r0, #16]
   d9f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9f20 <__ulp>:
   d9f20:	4b12      	ldr	r3, [pc, #72]	; (d9f6c <__ulp+0x4c>)
   d9f22:	ee10 2a90 	vmov	r2, s1
   d9f26:	401a      	ands	r2, r3
   d9f28:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   d9f2c:	2b00      	cmp	r3, #0
   d9f2e:	dd02      	ble.n	d9f36 <__ulp+0x16>
   d9f30:	2000      	movs	r0, #0
   d9f32:	4619      	mov	r1, r3
   d9f34:	e017      	b.n	d9f66 <__ulp+0x46>
   d9f36:	425b      	negs	r3, r3
   d9f38:	151b      	asrs	r3, r3, #20
   d9f3a:	2b13      	cmp	r3, #19
   d9f3c:	f04f 0000 	mov.w	r0, #0
   d9f40:	f04f 0100 	mov.w	r1, #0
   d9f44:	dc04      	bgt.n	d9f50 <__ulp+0x30>
   d9f46:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   d9f4a:	fa42 f103 	asr.w	r1, r2, r3
   d9f4e:	e00a      	b.n	d9f66 <__ulp+0x46>
   d9f50:	3b14      	subs	r3, #20
   d9f52:	2b1e      	cmp	r3, #30
   d9f54:	f04f 0201 	mov.w	r2, #1
   d9f58:	bfda      	itte	le
   d9f5a:	f1c3 031f 	rsble	r3, r3, #31
   d9f5e:	fa02 f303 	lslle.w	r3, r2, r3
   d9f62:	4613      	movgt	r3, r2
   d9f64:	4618      	mov	r0, r3
   d9f66:	ec41 0b10 	vmov	d0, r0, r1
   d9f6a:	4770      	bx	lr
   d9f6c:	7ff00000 	.word	0x7ff00000

000d9f70 <__b2d>:
   d9f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9f72:	6905      	ldr	r5, [r0, #16]
   d9f74:	f100 0614 	add.w	r6, r0, #20
   d9f78:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   d9f7c:	1f2f      	subs	r7, r5, #4
   d9f7e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d9f82:	4620      	mov	r0, r4
   d9f84:	f7ff fdca 	bl	d9b1c <__hi0bits>
   d9f88:	f1c0 0320 	rsb	r3, r0, #32
   d9f8c:	280a      	cmp	r0, #10
   d9f8e:	600b      	str	r3, [r1, #0]
   d9f90:	dc14      	bgt.n	d9fbc <__b2d+0x4c>
   d9f92:	f1c0 0e0b 	rsb	lr, r0, #11
   d9f96:	fa24 f10e 	lsr.w	r1, r4, lr
   d9f9a:	42be      	cmp	r6, r7
   d9f9c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   d9fa0:	bf34      	ite	cc
   d9fa2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9fa6:	2100      	movcs	r1, #0
   d9fa8:	3015      	adds	r0, #21
   d9faa:	fa04 f000 	lsl.w	r0, r4, r0
   d9fae:	fa21 f10e 	lsr.w	r1, r1, lr
   d9fb2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d9fb6:	ea40 0201 	orr.w	r2, r0, r1
   d9fba:	e023      	b.n	da004 <__b2d+0x94>
   d9fbc:	42be      	cmp	r6, r7
   d9fbe:	bf3a      	itte	cc
   d9fc0:	f1a5 0708 	subcc.w	r7, r5, #8
   d9fc4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9fc8:	2100      	movcs	r1, #0
   d9fca:	380b      	subs	r0, #11
   d9fcc:	d015      	beq.n	d9ffa <__b2d+0x8a>
   d9fce:	4084      	lsls	r4, r0
   d9fd0:	f1c0 0520 	rsb	r5, r0, #32
   d9fd4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   d9fd8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   d9fdc:	42b7      	cmp	r7, r6
   d9fde:	fa21 fe05 	lsr.w	lr, r1, r5
   d9fe2:	ea44 030e 	orr.w	r3, r4, lr
   d9fe6:	bf8c      	ite	hi
   d9fe8:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   d9fec:	2400      	movls	r4, #0
   d9fee:	fa01 f000 	lsl.w	r0, r1, r0
   d9ff2:	40ec      	lsrs	r4, r5
   d9ff4:	ea40 0204 	orr.w	r2, r0, r4
   d9ff8:	e004      	b.n	da004 <__b2d+0x94>
   d9ffa:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   d9ffe:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   da002:	460a      	mov	r2, r1
   da004:	ec43 2b10 	vmov	d0, r2, r3
   da008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da00a <__d2b>:
   da00a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da00e:	460e      	mov	r6, r1
   da010:	2101      	movs	r1, #1
   da012:	ec59 8b10 	vmov	r8, r9, d0
   da016:	4615      	mov	r5, r2
   da018:	f7ff fcbb 	bl	d9992 <_Balloc>
   da01c:	f3c9 540a 	ubfx	r4, r9, #20, #11
   da020:	4607      	mov	r7, r0
   da022:	f3c9 0313 	ubfx	r3, r9, #0, #20
   da026:	b10c      	cbz	r4, da02c <__d2b+0x22>
   da028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da02c:	9301      	str	r3, [sp, #4]
   da02e:	f1b8 0f00 	cmp.w	r8, #0
   da032:	d019      	beq.n	da068 <__d2b+0x5e>
   da034:	a802      	add	r0, sp, #8
   da036:	f840 8d08 	str.w	r8, [r0, #-8]!
   da03a:	f7ff fd8f 	bl	d9b5c <__lo0bits>
   da03e:	9b00      	ldr	r3, [sp, #0]
   da040:	b148      	cbz	r0, da056 <__d2b+0x4c>
   da042:	9a01      	ldr	r2, [sp, #4]
   da044:	f1c0 0120 	rsb	r1, r0, #32
   da048:	fa02 f101 	lsl.w	r1, r2, r1
   da04c:	430b      	orrs	r3, r1
   da04e:	40c2      	lsrs	r2, r0
   da050:	617b      	str	r3, [r7, #20]
   da052:	9201      	str	r2, [sp, #4]
   da054:	e000      	b.n	da058 <__d2b+0x4e>
   da056:	617b      	str	r3, [r7, #20]
   da058:	9b01      	ldr	r3, [sp, #4]
   da05a:	61bb      	str	r3, [r7, #24]
   da05c:	2b00      	cmp	r3, #0
   da05e:	bf14      	ite	ne
   da060:	2102      	movne	r1, #2
   da062:	2101      	moveq	r1, #1
   da064:	6139      	str	r1, [r7, #16]
   da066:	e007      	b.n	da078 <__d2b+0x6e>
   da068:	a801      	add	r0, sp, #4
   da06a:	f7ff fd77 	bl	d9b5c <__lo0bits>
   da06e:	9b01      	ldr	r3, [sp, #4]
   da070:	617b      	str	r3, [r7, #20]
   da072:	2101      	movs	r1, #1
   da074:	6139      	str	r1, [r7, #16]
   da076:	3020      	adds	r0, #32
   da078:	b134      	cbz	r4, da088 <__d2b+0x7e>
   da07a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   da07e:	4404      	add	r4, r0
   da080:	6034      	str	r4, [r6, #0]
   da082:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   da086:	e009      	b.n	da09c <__d2b+0x92>
   da088:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   da08c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   da090:	6030      	str	r0, [r6, #0]
   da092:	6918      	ldr	r0, [r3, #16]
   da094:	f7ff fd42 	bl	d9b1c <__hi0bits>
   da098:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   da09c:	6028      	str	r0, [r5, #0]
   da09e:	4638      	mov	r0, r7
   da0a0:	b003      	add	sp, #12
   da0a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000da0a6 <__ratio>:
   da0a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da0aa:	4688      	mov	r8, r1
   da0ac:	4669      	mov	r1, sp
   da0ae:	4681      	mov	r9, r0
   da0b0:	f7ff ff5e 	bl	d9f70 <__b2d>
   da0b4:	a901      	add	r1, sp, #4
   da0b6:	4640      	mov	r0, r8
   da0b8:	ec55 4b10 	vmov	r4, r5, d0
   da0bc:	f7ff ff58 	bl	d9f70 <__b2d>
   da0c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   da0c4:	f8d8 2010 	ldr.w	r2, [r8, #16]
   da0c8:	1a9a      	subs	r2, r3, r2
   da0ca:	e89d 000a 	ldmia.w	sp, {r1, r3}
   da0ce:	1ac9      	subs	r1, r1, r3
   da0d0:	ec57 6b10 	vmov	r6, r7, d0
   da0d4:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   da0d8:	2b00      	cmp	r3, #0
   da0da:	bfcc      	ite	gt
   da0dc:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   da0e0:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   da0e4:	4632      	mov	r2, r6
   da0e6:	463b      	mov	r3, r7
   da0e8:	4620      	mov	r0, r4
   da0ea:	4629      	mov	r1, r5
   da0ec:	f7fe f82c 	bl	d8148 <__aeabi_ddiv>
   da0f0:	ec41 0b10 	vmov	d0, r0, r1
   da0f4:	b003      	add	sp, #12
   da0f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000da0fa <__copybits>:
   da0fa:	3901      	subs	r1, #1
   da0fc:	b510      	push	{r4, lr}
   da0fe:	1149      	asrs	r1, r1, #5
   da100:	6914      	ldr	r4, [r2, #16]
   da102:	3101      	adds	r1, #1
   da104:	f102 0314 	add.w	r3, r2, #20
   da108:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   da10c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   da110:	42a3      	cmp	r3, r4
   da112:	4602      	mov	r2, r0
   da114:	d204      	bcs.n	da120 <__copybits+0x26>
   da116:	f853 2b04 	ldr.w	r2, [r3], #4
   da11a:	f840 2b04 	str.w	r2, [r0], #4
   da11e:	e7f7      	b.n	da110 <__copybits+0x16>
   da120:	2300      	movs	r3, #0
   da122:	428a      	cmp	r2, r1
   da124:	d202      	bcs.n	da12c <__copybits+0x32>
   da126:	f842 3b04 	str.w	r3, [r2], #4
   da12a:	e7fa      	b.n	da122 <__copybits+0x28>
   da12c:	bd10      	pop	{r4, pc}

000da12e <__any_on>:
   da12e:	f100 0214 	add.w	r2, r0, #20
   da132:	6900      	ldr	r0, [r0, #16]
   da134:	114b      	asrs	r3, r1, #5
   da136:	4298      	cmp	r0, r3
   da138:	b510      	push	{r4, lr}
   da13a:	db0c      	blt.n	da156 <__any_on+0x28>
   da13c:	dd0c      	ble.n	da158 <__any_on+0x2a>
   da13e:	f011 011f 	ands.w	r1, r1, #31
   da142:	d009      	beq.n	da158 <__any_on+0x2a>
   da144:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   da148:	fa24 f001 	lsr.w	r0, r4, r1
   da14c:	fa00 f101 	lsl.w	r1, r0, r1
   da150:	428c      	cmp	r4, r1
   da152:	d10c      	bne.n	da16e <__any_on+0x40>
   da154:	e000      	b.n	da158 <__any_on+0x2a>
   da156:	4603      	mov	r3, r0
   da158:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   da15c:	4293      	cmp	r3, r2
   da15e:	d904      	bls.n	da16a <__any_on+0x3c>
   da160:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   da164:	2900      	cmp	r1, #0
   da166:	d0f9      	beq.n	da15c <__any_on+0x2e>
   da168:	e001      	b.n	da16e <__any_on+0x40>
   da16a:	2000      	movs	r0, #0
   da16c:	bd10      	pop	{r4, pc}
   da16e:	2001      	movs	r0, #1
   da170:	bd10      	pop	{r4, pc}

000da172 <_calloc_r>:
   da172:	b538      	push	{r3, r4, r5, lr}
   da174:	fb02 f401 	mul.w	r4, r2, r1
   da178:	4621      	mov	r1, r4
   da17a:	f7fc f8f9 	bl	d6370 <_malloc_r>
   da17e:	4605      	mov	r5, r0
   da180:	b118      	cbz	r0, da18a <_calloc_r+0x18>
   da182:	4622      	mov	r2, r4
   da184:	2100      	movs	r1, #0
   da186:	f7fe fa37 	bl	d85f8 <memset>
   da18a:	4628      	mov	r0, r5
   da18c:	bd38      	pop	{r3, r4, r5, pc}

000da18e <link_code_end>:
	...

000da190 <dynalib_user>:
   da190:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   da1a0:	0000 0000 6f43 6e6e 6365 6974 676e 7420     ....Connecting t
   da1b0:	206f 514d 5454 2e2e 202e 5200 7465 7972     o MQTT... .Retry
   da1c0:	6e69 2067 514d 5454 6320 6e6f 656e 7463     ing MQTT connect
   da1d0:	6f69 206e 6e69 3520 7320 6365 6e6f 7364     ion in 5 seconds
   da1e0:	2e2e 002e 514d 5454 4320 6e6f 656e 7463     ....MQTT Connect
   da1f0:	6465 0021 6950 676e 6e69 2067 514d 5454     ed!.Pinging MQTT
   da200:	0a20 4400 7369 6f63 6e6e 6365 6974 676e      ..Disconnecting
   da210:	0a20 6e00 6369 736b 796b 6968 6867 6900      ..nickskyhigh.i
   da220:	2e6f 6461 6661 7572 7469 632e 6d6f 6100     o.adafruit.com.a
   da230:	6f69 6e5f 5664 394d 4733 5379 7974 5346     io_ndVM93GyStyFS
   da240:	584e 6c4b 5249 716b 7946 4145 4d51 007a     NXKlIRkqFyEAQMz.
   da250:	696e 6b63 6b73 6879 6769 2f68 6566 6465     nickskyhigh/feed
   da260:	2f73 6361 6974 6176 6574 6e00 6369 736b     s/activate.nicks
   da270:	796b 6968 6867 662f 6565 7364 742f 7275     kyhigh/feeds/tur
   da280:	6f6e 006e 696e 6b63 6b73 6879 6769 2f68     non.nickskyhigh/
   da290:	6566 6465 2f73 6e69 6973 6564 6574 706d     feeds/insidetemp
   da2a0:	0000 0000                                   ....

000da2a4 <_ZTVN8particle13__SPISettingsE>:
	...
   da2ac:	4479 000d 6564 6166 6c75 2074 4d00 4253     yD..default .MSB
   da2bc:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   da2cc:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   da2dc:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   da2ec:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000da2f8 <_ZTV18DHTSensorTypeDHT22>:
	...
   da300:	4bf1 000d 4bf5 000d 4b61 000d 4bb9 000d     .K...K..aK...K..
   da310:	4844 3154 0031 4844 3254 0032 726e 7866     DHT11.DHT22.nrfx
   da320:	695f 7332 695f 696e 2074 7265 6f72 3d72     _i2s_init error=
   da330:	6c25 0075 726e 7866 695f 7332 735f 6174     %lu.nrfx_i2s_sta
   da340:	7472 6520 7272 726f 253d 756c 6200 6461     rt error=%lu.bad
   da350:	6320 6568 6b63 7573 006d 6170 7269 3d73      checksum.pairs=
   da360:	6425 6520 7078 6365 6574 2064 3034 7200     %d expected 40.r
   da370:	7465 7972 6e69 0067                         etrying.

000da378 <_ZTV18DHTSensorTypeDHT11>:
	...
   da380:	4bf3 000d 4c03 000d 4b43 000d 4b51 000d     .K...L..CK..QK..

000da390 <_ZTV16Adafruit_SSD1306>:
	...
   da398:	40cd 000d 4391 000d 5691 000d 676d 000d     .@...C...V..mg..
   da3a8:	4f8d 000d 5391 000d 4e15 000d 4ca1 000d     .O...S...N...L..
   da3b8:	5451 000d 54e7 000d 551f 000d 553b 000d     QT...T...U..;U..

000da3c8 <_ZTV12Adafruit_GFX>:
	...
   da3d8:	5691 000d 676d 000d 40a9 000d 5391 000d     .V..mg...@...S..
   da3e8:	54b1 000d 54cd 000d 5451 000d 54e7 000d     .T...T..QT...T..
   da3f8:	551f 000d 553b 000d                         .U..;U..

000da400 <_ZL4font>:
   da400:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   da410:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   da420:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   da430:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   da440:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   da450:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   da460:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   da470:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   da480:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   da490:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   da4a0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   da4b0:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   da4c0:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   da4d0:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   da4e0:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   da4f0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   da500:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   da510:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   da520:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   da530:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   da540:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   da550:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   da560:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   da570:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   da580:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   da590:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   da5a0:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   da5b0:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   da5c0:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   da5d0:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   da5e0:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   da5f0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   da600:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   da610:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   da620:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   da630:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   da640:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   da650:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   da660:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   da670:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   da680:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   da690:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   da6a0:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   da6b0:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   da6c0:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   da6d0:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   da6e0:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   da6f0:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   da700:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   da710:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   da720:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   da730:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   da740:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   da750:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   da760:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   da770:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   da780:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   da790:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   da7a0:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   da7b0:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   da7c0:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   da7d0:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   da7e0:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   da7f0:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   da800:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   da810:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   da820:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   da830:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   da840:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   da850:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   da860:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   da870:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   da880:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   da890:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   da8a0:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   da8b0:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   da8c0:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   da8d0:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   da8e0:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   da8f0:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000da8fc <_ZTV19Adafruit_MQTT_SPARK>:
	...
   da904:	40cf 000d 439f 000d 571b 000d 57c7 000d     .@...C...W...W..
   da914:	57f9 000d 572f 000d 576f 000d               .W../W..oW..

000da920 <_ZTV13Adafruit_MQTT>:
	...
   da930:	40a9 000d 40a9 000d 40a9 000d 40a9 000d     .@...@...@...@..
   da940:	40a9 000d                                   .@..

000da944 <CSWTCH.52>:
   da944:	a9a5 000d a9b9 000d a989 000d a9cb 000d     ................
   da954:	aa10 000d aa55 000d aa75 000d aaa8 000d     ....U...u.......
   da964:	aac2 000d aaf9 000d 5b20 7830 5d00 202c     ........ [0x.], 
   da974:	0a00 0009 7244 706f 6570 2064 2061 6170     ....Dropped a pa
   da984:	6b63 7465 5500 6b6e 6f6e 6e77 6520 7272     cket.Unknown err
   da994:	726f 4d00 5451 0054 2525 6425 252e 6664     or.MQTT.%%%d.%df
   da9a4:	4600 6961 656c 2064 6f74 7320 6275 6373     .Failed to subsc
   da9b4:	6972 6562 4300 6e6f 656e 7463 6f69 206e     ribe.Connection 
   da9c4:	6166 6c69 6465 5400 6568 5320 7265 6576     failed.The Serve
   da9d4:	2072 6f64 7365 6e20 746f 7320 7075 6f70     r does not suppo
   da9e4:	7472 7420 6568 6c20 7665 6c65 6f20 2066     rt the level of 
   da9f4:	6874 2065 514d 5454 7020 6f72 6f74 6f63     the MQTT protoco
   daa04:	206c 6572 7571 7365 6574 0064 6854 2065     l requested.The 
   daa14:	6c43 6569 746e 6920 6564 746e 6669 6569     Client identifie
   daa24:	2072 7369 6320 726f 6572 7463 5520 4654     r is correct UTF
   daa34:	382d 6220 7475 6e20 746f 6120 6c6c 776f     -8 but not allow
   daa44:	6465 6220 2079 6874 2065 6553 7672 7265     ed by the Server
   daa54:	5400 6568 4d20 5451 2054 6573 7672 6369     .The MQTT servic
   daa64:	2065 7369 7520 616e 6176 6c69 6261 656c     e is unavailable
   daa74:	5400 6568 6420 7461 2061 6e69 7420 6568     .The data in the
   daa84:	7520 6573 2072 616e 656d 6f20 2072 6170      user name or pa
   daa94:	7373 6f77 6472 6920 2073 616d 666c 726f     ssword is malfor
   daaa4:	656d 0064 6f4e 2074 7561 6874 726f 7a69     med.Not authoriz
   daab4:	6465 7420 206f 6f63 6e6e 6365 0074 7845     ed to connect.Ex
   daac4:	6563 6465 6465 7220 6365 6e6f 656e 7463     ceeded reconnect
   daad4:	7220 7461 2065 696c 696d 2e74 5020 656c      rate limit. Ple
   daae4:	7361 2065 7274 2079 6761 6961 206e 616c     ase try again la
   daaf4:	6574 2e72 5900 756f 6820 7661 2065 6562     ter..You have be
   dab04:	6e65 6220 6e61 656e 2064 7266 6d6f 6320     en banned from c
   dab14:	6e6f 656e 7463 6e69 2e67 5020 656c 7361     onnecting. Pleas
   dab24:	2065 6f63 746e 6361 2074 6874 2065 514d     e contact the MQ
   dab34:	5454 7320 7265 6576 2072 6461 696d 696e     TT server admini
   dab44:	7473 6172 6f74 2072 6f66 2072 6f6d 6572     strator for more
   dab54:	6420 7465 6961 736c 002e 0000                details....

000dab60 <_ZTVN5spark13EthernetClassE>:
	...
   dab68:	63ef 000d 63e5 000d 63db 000d 63d1 000d     .c...c...c...c..
   dab78:	63c5 000d 63b9 000d 63ad 000d 63a5 000d     .c...c...c...c..
   dab88:	639b 000d 6391 000d 7625 000d               .c...c..%v..

000dab94 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dab94:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   daba4:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   dabb4:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   dabc4:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   dabd4:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   dabe4:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   dabf4:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   dac04:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   dac14:	3130 7530 0020 205d 2800 3a29 0020 5b20     010u .] .(): . [
   dac24:	6300 646f 2065 203d 2500 0069 6564 6174     .code = .%i.deta
   dac34:	6c69 2073 203d 0d00 000a 6e6c 6600 006e     ils = ....ln.fn.
   dac44:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   dac54:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   dac64:	7000 6e61 6369 6100 6c6c 5a00 2500 302b     .panic.all.Z.%+0
   dac74:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
   dac84:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   dac94:	6d69 0065                                   ime.

000dac98 <_ZTV9IPAddress>:
	...
   daca0:	6a1d 000d 6a0d 000d 6a0f 000d               .j...j...j..

000dacac <_ZTV9USBSerial>:
	...
   dacb4:	6b21 000d 6b71 000d 6b7f 000d 676d 000d     !k..qk...k..mg..
   dacc4:	6b5d 000d 6b23 000d 6b39 000d 6b6b 000d     ]k..#k..9k..kk..
   dacd4:	6b4f 000d 6b1d 000d                         Ok...k..

000dacdc <_ZTV11USARTSerial>:
	...
   dace4:	6c25 000d 6c75 000d 6c83 000d 676d 000d     %l..ul...l..mg..
   dacf4:	6c39 000d 6c5b 000d 6c47 000d 6c6f 000d     9l..[l..Gl..ol..
   dad04:	6c27 000d 6c2b 000d                         'l..+l..

000dad0c <_ZTV7TwoWire>:
	...
   dad14:	6d29 000d 6d73 000d 6d4b 000d 6d2b 000d     )m..sm..Km..+m..
   dad24:	6d53 000d 6d5b 000d 6d63 000d 6d6b 000d     Sm..[m..cm..km..

000dad34 <_ZTVN5spark9MeshClassE>:
	...
   dad3c:	6e95 000d 6e8b 000d 6e81 000d 6e77 000d     .n...n...n..wn..
   dad4c:	6e6b 000d 6e5f 000d 6e53 000d 6e4b 000d     kn.._n..Sn..Kn..
   dad5c:	6e41 000d 6e37 000d 7625 000d               An..7n..%v..

000dad68 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dad70:	7039 000d 703f 000d 7527 000d 704d 000d     9p..?p..'u..Mp..
   dad80:	703b 000d                                   ;p..

000dad84 <_ZTV9TCPClient>:
	...
   dad8c:	40d1 000d 4105 000d 6fb1 000d 6fcb 000d     .@...A...o...o..
   dad9c:	73cd 000d 711f 000d 70f1 000d 6ff5 000d     .s...q...p...o..
   dadac:	72a9 000d 71a5 000d 7153 000d 739d 000d     .r...q..Sq...s..
   dadbc:	6ff7 000d 702f 000d 6fdd 000d 7051 000d     .o../p...o..Qp..
   dadcc:	70d1 000d 6977 6972 676e 7200 6365 2076     .p..wiring.recv 
   daddc:	7265 6f72 2072 203d 6425 0000               error = %d..

000dade8 <_ZTVN5spark9WiFiClassE>:
	...
   dadf0:	759d 000d 7593 000d 7589 000d 753f 000d     .u...u...u..?u..
   dae00:	757d 000d 7571 000d 7565 000d 755d 000d     }u..qu..eu..]u..
   dae10:	7553 000d 7549 000d 7625 000d               Su..Iu..%v..

000dae1c <_ZTVN5spark12NetworkClassE>:
	...
   dae24:	75bd 000d 75c7 000d 75d1 000d 75db 000d     .u...u...u...u..
   dae34:	75e5 000d 75f1 000d 75fd 000d 7609 000d     .u...u...u...v..
   dae44:	7611 000d 761b 000d 7625 000d               .v...v..%v..

000dae50 <_ZSt7nothrow>:
	...

000dae51 <_ctype_>:
   dae51:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dae61:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dae71:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dae81:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dae91:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   daea1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   daeb1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   daec1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   daed1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000daf54 <__sf_fake_stdin>:
	...

000daf74 <__sf_fake_stdout>:
	...

000daf94 <__sf_fake_stderr>:
	...
   dafb4:	0043 4f50 4953 0058                         C.POSIX.

000dafbc <fpi.5344>:
   dafbc:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dafcc:	0000 0000                                   ....

000dafd0 <fpinan.5380>:
   dafd0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dafe0:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

000daff0 <tinytens>:
   daff0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   db000:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   db010:	6f43 64ac 0628 1168                         Co.d(.h.

000db018 <__mprec_tens>:
   db018:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   db028:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   db038:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   db048:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   db058:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   db068:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   db078:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   db088:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   db098:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   db0a8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   db0b8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   db0c8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   db0d8:	9db4 79d9 7843 44ea                         ...yCx.D

000db0e0 <__mprec_bigtens>:
   db0e0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   db0f0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   db100:	bf3c 7f73 4fdd 7515                         <.s..O.u

000db108 <p05.5387>:
   db108:	0005 0000 0019 0000 007d 0000               ........}...

000db114 <link_const_variable_data_end>:
   db114:	000d43ad 	.word	0x000d43ad
   db118:	000d4b3f 	.word	0x000d4b3f
   db11c:	000d4c5d 	.word	0x000d4c5d
   db120:	000d538d 	.word	0x000d538d
   db124:	000d5717 	.word	0x000d5717
   db128:	000d5859 	.word	0x000d5859
   db12c:	000d5e4f 	.word	0x000d5e4f
   db130:	000d5e53 	.word	0x000d5e53
   db134:	000d63f9 	.word	0x000d63f9
   db138:	000d6681 	.word	0x000d6681
   db13c:	000d6745 	.word	0x000d6745
   db140:	000d68a9 	.word	0x000d68a9
   db144:	000d68b9 	.word	0x000d68b9
   db148:	000d68e1 	.word	0x000d68e1
   db14c:	000d6f61 	.word	0x000d6f61
   db150:	000d75a9 	.word	0x000d75a9
   db154:	000d76f1 	.word	0x000d76f1
   db158:	000d78f5 	.word	0x000d78f5
   db15c:	000d7979 	.word	0x000d7979
   db160:	000d7a3d 	.word	0x000d7a3d
   db164:	000d7b01 	.word	0x000d7b01

000db168 <link_constructors_end>:
	...
