
c:/Users/Nick/Desktop/Iot/Capstone/Elkins_capstone/target/1.5.2/argon/Elkins_capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007140  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000db160  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000004c0  2003dd08  000db164  0001dd08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000628  2003e1c8  2003e1c8  0002e1c8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000db624  000db624  0002b624  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000db64c  000db64c  0002b64c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00104b73  00000000  00000000  0002b650  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015973  00000000  00000000  001301c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000230d7  00000000  00000000  00145b36  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002cc8  00000000  00000000  00168c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000050f0  00000000  00000000  0016b8d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003e5c4  00000000  00000000  001709c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00037182  00000000  00000000  001aef89  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010c42c  00000000  00000000  001e610b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e688  00000000  00000000  002f2538  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fab3 	bl	d859c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fad3 	bl	d85e8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dd08 	.word	0x2003dd08
   d404c:	000db164 	.word	0x000db164
   d4050:	2003e1c8 	.word	0x2003e1c8
   d4054:	2003e1c8 	.word	0x2003e1c8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 fca1 	bl	d69a4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000db158 	.word	0x000db158
   d4084:	000db104 	.word	0x000db104

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b88c 	b.w	d41a4 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f8f3 	bl	d4278 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 bc47 	b.w	d6928 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 b949 	b.w	d6330 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 b94f 	b.w	d6340 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 b94d 	b.w	d6340 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f002 f8b2 	bl	d6218 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d5f89 	.word	0x000d5f89

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40cc:	4770      	bx	lr

000d40ce <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40ce:	4770      	bx	lr

000d40d0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40d0:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40d2:	6984      	ldr	r4, [r0, #24]
   d40d4:	4b0a      	ldr	r3, [pc, #40]	; (d4100 <_ZN9TCPClientD1Ev+0x30>)
   d40d6:	6003      	str	r3, [r0, #0]
   d40d8:	4605      	mov	r5, r0
   d40da:	b17c      	cbz	r4, d40fc <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40dc:	6863      	ldr	r3, [r4, #4]
   d40de:	3b01      	subs	r3, #1
   d40e0:	6063      	str	r3, [r4, #4]
   d40e2:	b95b      	cbnz	r3, d40fc <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d40e4:	6823      	ldr	r3, [r4, #0]
   d40e6:	4620      	mov	r0, r4
   d40e8:	689b      	ldr	r3, [r3, #8]
   d40ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40ec:	68a3      	ldr	r3, [r4, #8]
   d40ee:	3b01      	subs	r3, #1
   d40f0:	60a3      	str	r3, [r4, #8]
   d40f2:	b91b      	cbnz	r3, d40fc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40f4:	6823      	ldr	r3, [r4, #0]
   d40f6:	4620      	mov	r0, r4
   d40f8:	68db      	ldr	r3, [r3, #12]
   d40fa:	4798      	blx	r3
   d40fc:	4628      	mov	r0, r5
   d40fe:	bd38      	pop	{r3, r4, r5, pc}
   d4100:	000dad7c 	.word	0x000dad7c

000d4104 <_ZN9TCPClientD0Ev>:
   d4104:	b510      	push	{r4, lr}
   d4106:	4604      	mov	r4, r0
   d4108:	f7ff ffe2 	bl	d40d0 <_ZN9TCPClientD1Ev>
   d410c:	4620      	mov	r0, r4
   d410e:	211c      	movs	r1, #28
   d4110:	f003 fbd4 	bl	d78bc <_ZdlPvj>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <_Z11climatereadv>:
      lastTime = millis();
    }

}

void climateread() {
   d4118:	b508      	push	{r3, lr}
  intemp = bme.readTemperature();
   d411a:	4804      	ldr	r0, [pc, #16]	; (d412c <_Z11climatereadv+0x14>)
   d411c:	f000 faa0 	bl	d4660 <_ZN15Adafruit_BME28015readTemperatureEv>
   d4120:	4b03      	ldr	r3, [pc, #12]	; (d4130 <_Z11climatereadv+0x18>)
   d4122:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d4126:	ed83 0a00 	vstr	s0, [r3]
   d412a:	bd08      	pop	{r3, pc}
   d412c:	2003e328 	.word	0x2003e328
   d4130:	2003e308 	.word	0x2003e308

000d4134 <_Z12MQTT_connectv>:

}



void MQTT_connect() { //connection to adafruit.io
   d4134:	b538      	push	{r3, r4, r5, lr}
  int8_t ret;
 
 
  if (mqtt.connected()) {
   d4136:	4817      	ldr	r0, [pc, #92]	; (d4194 <_Z12MQTT_connectv+0x60>)
   d4138:	f001 fae7 	bl	d570a <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   d413c:	bb40      	cbnz	r0, d4190 <_Z12MQTT_connectv+0x5c>
    return;
  }
 
  Serial.print("Connecting to MQTT... ");
   d413e:	f002 fd43 	bl	d6bc8 <_Z16_fetch_usbserialv>
   d4142:	4915      	ldr	r1, [pc, #84]	; (d4198 <_Z12MQTT_connectv+0x64>)
   d4144:	f002 fb30 	bl	d67a8 <_ZN5Print5printEPKc>
 
  while ((ret = mqtt.connect()) != 0) { 
   d4148:	4812      	ldr	r0, [pc, #72]	; (d4194 <_Z12MQTT_connectv+0x60>)
   d414a:	f001 fdfc 	bl	d5d46 <_ZN13Adafruit_MQTT7connectEv>
   d414e:	4604      	mov	r4, r0
   d4150:	b1b8      	cbz	r0, d4182 <_Z12MQTT_connectv+0x4e>
       Serial.println(mqtt.connectErrorString(ret));
   d4152:	f002 fd39 	bl	d6bc8 <_Z16_fetch_usbserialv>
   d4156:	4621      	mov	r1, r4
   d4158:	4605      	mov	r5, r0
   d415a:	480e      	ldr	r0, [pc, #56]	; (d4194 <_Z12MQTT_connectv+0x60>)
   d415c:	f001 fc0e 	bl	d597c <_ZN13Adafruit_MQTT18connectErrorStringEa>
   d4160:	4601      	mov	r1, r0
   d4162:	4628      	mov	r0, r5
   d4164:	f002 fb33 	bl	d67ce <_ZN5Print7printlnEPKc>
       Serial.println("Retrying MQTT connection in 5 seconds...");
   d4168:	f002 fd2e 	bl	d6bc8 <_Z16_fetch_usbserialv>
   d416c:	490b      	ldr	r1, [pc, #44]	; (d419c <_Z12MQTT_connectv+0x68>)
   d416e:	f002 fb2e 	bl	d67ce <_ZN5Print7printlnEPKc>
       mqtt.disconnect();
   d4172:	4808      	ldr	r0, [pc, #32]	; (d4194 <_Z12MQTT_connectv+0x60>)
   d4174:	f001 fc10 	bl	d5998 <_ZN13Adafruit_MQTT10disconnectEv>
       delay(5000);  
   d4178:	f241 3088 	movw	r0, #5000	; 0x1388
   d417c:	f002 fb9e 	bl	d68bc <delay>
   d4180:	e7e2      	b.n	d4148 <_Z12MQTT_connectv+0x14>
  }
  Serial.println("MQTT Connected!");
   d4182:	f002 fd21 	bl	d6bc8 <_Z16_fetch_usbserialv>
   d4186:	4906      	ldr	r1, [pc, #24]	; (d41a0 <_Z12MQTT_connectv+0x6c>)
}
   d4188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  
  }
  Serial.println("MQTT Connected!");
   d418c:	f002 bb1f 	b.w	d67ce <_ZN5Print7printlnEPKc>
   d4190:	bd38      	pop	{r3, r4, r5, pc}
   d4192:	bf00      	nop
   d4194:	2003e208 	.word	0x2003e208
   d4198:	000da194 	.word	0x000da194
   d419c:	000da1ab 	.word	0x000da1ab
   d41a0:	000da1d4 	.word	0x000da1d4

000d41a4 <setup>:
int pushbutton = D9;
int intemp;    //Temperature for the inside -- bme280
int totalstate; // This is the integer to show what the current state of the unit is
bool status = false;

void setup() {
   d41a4:	b510      	push	{r4, lr}
  pinMode(A0, INPUT);
   d41a6:	2100      	movs	r1, #0
   d41a8:	2013      	movs	r0, #19
   d41aa:	f003 fad9 	bl	d7760 <pinMode>
  pinMode(relay1, OUTPUT);
   d41ae:	4b15      	ldr	r3, [pc, #84]	; (d4204 <setup+0x60>)
  pinMode(relay2, OUTPUT);
  pinMode(relay3, OUTPUT);
   display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d41b0:	4c15      	ldr	r4, [pc, #84]	; (d4208 <setup+0x64>)
int totalstate; // This is the integer to show what the current state of the unit is
bool status = false;

void setup() {
  pinMode(A0, INPUT);
  pinMode(relay1, OUTPUT);
   d41b2:	8818      	ldrh	r0, [r3, #0]
   d41b4:	2101      	movs	r1, #1
   d41b6:	f003 fad3 	bl	d7760 <pinMode>
  pinMode(relay2, OUTPUT);
   d41ba:	4b14      	ldr	r3, [pc, #80]	; (d420c <setup+0x68>)
   d41bc:	2101      	movs	r1, #1
   d41be:	8818      	ldrh	r0, [r3, #0]
   d41c0:	f003 face 	bl	d7760 <pinMode>
  pinMode(relay3, OUTPUT);
   d41c4:	4b12      	ldr	r3, [pc, #72]	; (d4210 <setup+0x6c>)
   d41c6:	2101      	movs	r1, #1
   d41c8:	8818      	ldrh	r0, [r3, #0]
   d41ca:	f003 fac9 	bl	d7760 <pinMode>
   display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d41ce:	223c      	movs	r2, #60	; 0x3c
   d41d0:	4620      	mov	r0, r4
   d41d2:	2102      	movs	r1, #2
   d41d4:	f000 ff82 	bl	d50dc <_ZN16Adafruit_SSD13065beginEhh>
  display.setTextColor(WHITE);
   d41d8:	2101      	movs	r1, #1
   d41da:	4620      	mov	r0, r4
   d41dc:	f001 fa88 	bl	d56f0 <_ZN12Adafruit_GFX12setTextColorEt>
  bme.begin();
   d41e0:	480c      	ldr	r0, [pc, #48]	; (d4214 <setup+0x70>)
   d41e2:	f000 fc8f 	bl	d4b04 <_ZN15Adafruit_BME2805beginEv>
  display.display();
   d41e6:	4620      	mov	r0, r4
   d41e8:	f001 f84a 	bl	d5280 <_ZN16Adafruit_SSD13067displayEv>
  delay(750);
   d41ec:	f240 20ee 	movw	r0, #750	; 0x2ee
   d41f0:	f002 fb64 	bl	d68bc <delay>
  
  MQTT_connect();
   d41f4:	f7ff ff9e 	bl	d4134 <_Z12MQTT_connectv>
  mqtt.subscribe(&turnon);
   d41f8:	4907      	ldr	r1, [pc, #28]	; (d4218 <setup+0x74>)
   d41fa:	4808      	ldr	r0, [pc, #32]	; (d421c <setup+0x78>)
  


}
   d41fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  bme.begin();
  display.display();
  delay(750);
  
  MQTT_connect();
  mqtt.subscribe(&turnon);
   d4200:	f001 bbde 	b.w	d59c0 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>
   d4204:	2003dd08 	.word	0x2003dd08
   d4208:	2003e2e4 	.word	0x2003e2e4
   d420c:	2003dd0c 	.word	0x2003dd0c
   d4210:	2003dd10 	.word	0x2003dd10
   d4214:	2003e328 	.word	0x2003e328
   d4218:	2003e1cc 	.word	0x2003e1cc
   d421c:	2003e208 	.word	0x2003e208

000d4220 <_Z5ping1v>:
       delay(5000);  
  }
  Serial.println("MQTT Connected!");
}

void ping1() {  //pings adafruit.io to make sure  connection is active
   d4220:	b538      	push	{r3, r4, r5, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4222:	f001 feb9 	bl	d5f98 <HAL_Timer_Get_Milli_Seconds>
   if ((millis()-last)>30000) {
   d4226:	4b10      	ldr	r3, [pc, #64]	; (d4268 <_Z5ping1v+0x48>)
   d4228:	681a      	ldr	r2, [r3, #0]
   d422a:	1a80      	subs	r0, r0, r2
   d422c:	f247 5230 	movw	r2, #30000	; 0x7530
   d4230:	4290      	cmp	r0, r2
   d4232:	461c      	mov	r4, r3
   d4234:	d917      	bls.n	d4266 <_Z5ping1v+0x46>
      Serial.printf("Pinging MQTT \n");
   d4236:	f002 fcc7 	bl	d6bc8 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d423a:	4a0c      	ldr	r2, [pc, #48]	; (d426c <_Z5ping1v+0x4c>)
   d423c:	2100      	movs	r1, #0
   d423e:	f002 faf0 	bl	d6822 <_ZN5Print11printf_implEbPKcz>
      
      if(! mqtt.ping()) {
   d4242:	2101      	movs	r1, #1
   d4244:	480a      	ldr	r0, [pc, #40]	; (d4270 <_Z5ping1v+0x50>)
   d4246:	f001 fc55 	bl	d5af4 <_ZN13Adafruit_MQTT4pingEh>
   d424a:	4605      	mov	r5, r0
   d424c:	b940      	cbnz	r0, d4260 <_Z5ping1v+0x40>
        Serial.printf("Disconnecting \n");
   d424e:	f002 fcbb 	bl	d6bc8 <_Z16_fetch_usbserialv>
   d4252:	4a08      	ldr	r2, [pc, #32]	; (d4274 <_Z5ping1v+0x54>)
   d4254:	4629      	mov	r1, r5
   d4256:	f002 fae4 	bl	d6822 <_ZN5Print11printf_implEbPKcz>
        mqtt.disconnect();
   d425a:	4805      	ldr	r0, [pc, #20]	; (d4270 <_Z5ping1v+0x50>)
   d425c:	f001 fb9c 	bl	d5998 <_ZN13Adafruit_MQTT10disconnectEv>
   d4260:	f001 fe9a 	bl	d5f98 <HAL_Timer_Get_Milli_Seconds>
      }
      last = millis();
   d4264:	6020      	str	r0, [r4, #0]
   d4266:	bd38      	pop	{r3, r4, r5, pc}
   d4268:	2003e204 	.word	0x2003e204
   d426c:	000da1e4 	.word	0x000da1e4
   d4270:	2003e208 	.word	0x2003e208
   d4274:	000da1f3 	.word	0x000da1f3

000d4278 <loop>:
  


}

void loop() {
   d4278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ping1(); // calls on the mqtt ping to keep active connection to adafruit
   d427a:	f7ff ffd1 	bl	d4220 <_Z5ping1v>
  //onoff();
  digitalWrite(relay1, HIGH);
   d427e:	4b35      	ldr	r3, [pc, #212]	; (d4354 <loop+0xdc>)
  digitalWrite(relay2,HIGH);
  digitalWrite(relay3,HIGH);
  climateread();
  display.clearDisplay();
  display.println(totalstate);
   d4280:	4d35      	ldr	r5, [pc, #212]	; (d4358 <loop+0xe0>)
}

void loop() {
  ping1(); // calls on the mqtt ping to keep active connection to adafruit
  //onoff();
  digitalWrite(relay1, HIGH);
   d4282:	8818      	ldrh	r0, [r3, #0]
   d4284:	2101      	movs	r1, #1
   d4286:	f003 fa7c 	bl	d7782 <digitalWrite>
  digitalWrite(relay2,HIGH);
   d428a:	4b34      	ldr	r3, [pc, #208]	; (d435c <loop+0xe4>)
   d428c:	2101      	movs	r1, #1
   d428e:	8818      	ldrh	r0, [r3, #0]
   d4290:	f003 fa77 	bl	d7782 <digitalWrite>
  digitalWrite(relay3,HIGH);
   d4294:	4b32      	ldr	r3, [pc, #200]	; (d4360 <loop+0xe8>)
   d4296:	2101      	movs	r1, #1
   d4298:	8818      	ldrh	r0, [r3, #0]
   d429a:	f003 fa72 	bl	d7782 <digitalWrite>
  climateread();
   d429e:	f7ff ff3b 	bl	d4118 <_Z11climatereadv>
  display.clearDisplay();
   d42a2:	4830      	ldr	r0, [pc, #192]	; (d4364 <loop+0xec>)
   d42a4:	f000 feca 	bl	d503c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.println(totalstate);
   d42a8:	682c      	ldr	r4, [r5, #0]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d42aa:	2c00      	cmp	r4, #0
   d42ac:	da05      	bge.n	d42ba <loop+0x42>
            t = print('-');
   d42ae:	212d      	movs	r1, #45	; 0x2d
   d42b0:	482c      	ldr	r0, [pc, #176]	; (d4364 <loop+0xec>)
   d42b2:	f002 fa7d 	bl	d67b0 <_ZN5Print5printEc>
            val = -n;
   d42b6:	4261      	negs	r1, r4
   d42b8:	e000      	b.n	d42bc <loop+0x44>
        } else {
            val = n;
   d42ba:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d42bc:	220a      	movs	r2, #10
   d42be:	4829      	ldr	r0, [pc, #164]	; (d4364 <loop+0xec>)
  display.display();
  

   Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription(4000))) {
    if (subscription == &turnon) {
   d42c0:	4f29      	ldr	r7, [pc, #164]	; (d4368 <loop+0xf0>)
   d42c2:	f002 fa8e 	bl	d67e2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d42c6:	4827      	ldr	r0, [pc, #156]	; (d4364 <loop+0xec>)
   d42c8:	f002 fa75 	bl	d67b6 <_ZN5Print7printlnEv>
  digitalWrite(relay2,HIGH);
  digitalWrite(relay3,HIGH);
  climateread();
  display.clearDisplay();
  display.println(totalstate);
  display.setCursor(0,0);
   d42cc:	2200      	movs	r2, #0
   d42ce:	4611      	mov	r1, r2
   d42d0:	4824      	ldr	r0, [pc, #144]	; (d4364 <loop+0xec>)
   d42d2:	f001 fa0a 	bl	d56ea <_ZN12Adafruit_GFX9setCursorEss>
  display.display();
   d42d6:	4823      	ldr	r0, [pc, #140]	; (d4364 <loop+0xec>)
   d42d8:	f000 ffd2 	bl	d5280 <_ZN16Adafruit_SSD13067displayEv>
  

   Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription(4000))) {
   d42dc:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   d42e0:	4822      	ldr	r0, [pc, #136]	; (d436c <loop+0xf4>)
   d42e2:	f001 fb89 	bl	d59f8 <_ZN13Adafruit_MQTT16readSubscriptionEs>
   d42e6:	b1e8      	cbz	r0, d4324 <loop+0xac>
    if (subscription == &turnon) {
   d42e8:	42b8      	cmp	r0, r7
   d42ea:	d1f7      	bne.n	d42dc <loop+0x64>
     totalstate = atof((char *)turnon.lastread);
   d42ec:	1d78      	adds	r0, r7, #5
   d42ee:	f004 f92b 	bl	d8548 <atof>
   d42f2:	ec51 0b10 	vmov	r0, r1, d0
   d42f6:	f004 f88f 	bl	d8418 <__aeabi_d2iz>
   d42fa:	6028      	str	r0, [r5, #0]
     Serial.println(totalstate);
   d42fc:	f002 fc64 	bl	d6bc8 <_Z16_fetch_usbserialv>
   d4300:	682c      	ldr	r4, [r5, #0]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4302:	2c00      	cmp	r4, #0
   d4304:	4606      	mov	r6, r0
   d4306:	da04      	bge.n	d4312 <loop+0x9a>
            t = print('-');
   d4308:	212d      	movs	r1, #45	; 0x2d
   d430a:	f002 fa51 	bl	d67b0 <_ZN5Print5printEc>
            val = -n;
   d430e:	4261      	negs	r1, r4
   d4310:	e000      	b.n	d4314 <loop+0x9c>
        } else {
            val = n;
   d4312:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d4314:	220a      	movs	r2, #10
   d4316:	4630      	mov	r0, r6
   d4318:	f002 fa63 	bl	d67e2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d431c:	4630      	mov	r0, r6
   d431e:	f002 fa4a 	bl	d67b6 <_ZN5Print7printlnEv>
   d4322:	e7db      	b.n	d42dc <loop+0x64>
   d4324:	f001 fe38 	bl	d5f98 <HAL_Timer_Get_Milli_Seconds>
//     digitalWrite(relay3,LOW);
//   }

 

   if((millis()-lastTime > 10000)) {
   d4328:	4b11      	ldr	r3, [pc, #68]	; (d4370 <loop+0xf8>)
   d432a:	681a      	ldr	r2, [r3, #0]
   d432c:	1a80      	subs	r0, r0, r2
   d432e:	f242 7210 	movw	r2, #10000	; 0x2710
   d4332:	4290      	cmp	r0, r2
   d4334:	461c      	mov	r4, r3
   d4336:	d90b      	bls.n	d4350 <loop+0xd8>
      if(mqtt.Update()) {
   d4338:	480c      	ldr	r0, [pc, #48]	; (d436c <loop+0xf4>)
   d433a:	f001 fa64 	bl	d5806 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d433e:	b120      	cbz	r0, d434a <loop+0xd2>

        insidetemp.publish(intemp);
   d4340:	4b0c      	ldr	r3, [pc, #48]	; (d4374 <loop+0xfc>)
   d4342:	480d      	ldr	r0, [pc, #52]	; (d4378 <loop+0x100>)
   d4344:	6819      	ldr	r1, [r3, #0]
   d4346:	f001 fd6b 	bl	d5e20 <_ZN21Adafruit_MQTT_Publish7publishEi>
   d434a:	f001 fe25 	bl	d5f98 <HAL_Timer_Get_Milli_Seconds>
        } 
      lastTime = millis();
   d434e:	6020      	str	r0, [r4, #0]
   d4350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4352:	bf00      	nop
   d4354:	2003dd08 	.word	0x2003dd08
   d4358:	2003e2dc 	.word	0x2003e2dc
   d435c:	2003dd0c 	.word	0x2003dd0c
   d4360:	2003dd10 	.word	0x2003dd10
   d4364:	2003e2e4 	.word	0x2003e2e4
   d4368:	2003e1cc 	.word	0x2003e1cc
   d436c:	2003e208 	.word	0x2003e208
   d4370:	2003e2e0 	.word	0x2003e2e0
   d4374:	2003e308 	.word	0x2003e308
   d4378:	2003e3a4 	.word	0x2003e3a4

000d437c <_ZN16Adafruit_SSD1306D0Ev>:
   d437c:	b510      	push	{r4, lr}
   d437e:	2124      	movs	r1, #36	; 0x24
   d4380:	4604      	mov	r4, r0
   d4382:	f003 fa9b 	bl	d78bc <_ZdlPvj>
   d4386:	4620      	mov	r0, r4
   d4388:	bd10      	pop	{r4, pc}

000d438a <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d438a:	b510      	push	{r4, lr}
   d438c:	21d4      	movs	r1, #212	; 0xd4
   d438e:	4604      	mov	r4, r0
   d4390:	f003 fa94 	bl	d78bc <_ZdlPvj>
   d4394:	4620      	mov	r0, r4
   d4396:	bd10      	pop	{r4, pc}

000d4398 <_GLOBAL__sub_I_display>:
        Serial.printf("Disconnecting \n");
        mqtt.disconnect();
      }
      last = millis();
  }
   d4398:	b573      	push	{r0, r1, r4, r5, r6, lr}
#include "Apikey.h"


#define BME280_ADDRESS  (0x77)
#define OLED_RESET D4
Adafruit_SSD1306 display(OLED_RESET);
   d439a:	4c20      	ldr	r4, [pc, #128]	; (d441c <_GLOBAL__sub_I_display+0x84>)
   d439c:	4d20      	ldr	r5, [pc, #128]	; (d4420 <_GLOBAL__sub_I_display+0x88>)
#define AIO_SERVER      "io.adafruit.com" 
#define AIO_SERVERPORT  1883 
//this is a github test  


TCPClient TheClient; 
   d439e:	4e21      	ldr	r6, [pc, #132]	; (d4424 <_GLOBAL__sub_I_display+0x8c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d43a0:	f001 fd62 	bl	d5e68 <HAL_Pin_Map>
#include "Apikey.h"


#define BME280_ADDRESS  (0x77)
#define OLED_RESET D4
Adafruit_SSD1306 display(OLED_RESET);
   d43a4:	2104      	movs	r1, #4
   d43a6:	4620      	mov	r0, r4
   d43a8:	f000 fe32 	bl	d5010 <_ZN16Adafruit_SSD1306C1Ea>
   d43ac:	462a      	mov	r2, r5
   d43ae:	491e      	ldr	r1, [pc, #120]	; (d4428 <_GLOBAL__sub_I_display+0x90>)
   d43b0:	4620      	mov	r0, r4
   d43b2:	f003 fa75 	bl	d78a0 <__aeabi_atexit>
Adafruit_BME280 bme;
   d43b6:	481d      	ldr	r0, [pc, #116]	; (d442c <_GLOBAL__sub_I_display+0x94>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d43b8:	4c1d      	ldr	r4, [pc, #116]	; (d4430 <_GLOBAL__sub_I_display+0x98>)
   d43ba:	f000 f87f 	bl	d44bc <_ZN15Adafruit_BME280C1Ev>
#define AIO_SERVER      "io.adafruit.com" 
#define AIO_SERVERPORT  1883 
//this is a github test  


TCPClient TheClient; 
   d43be:	4630      	mov	r0, r6
   d43c0:	f003 f898 	bl	d74f4 <_ZN9TCPClientC1Ev>
   d43c4:	462a      	mov	r2, r5
   d43c6:	491b      	ldr	r1, [pc, #108]	; (d4434 <_GLOBAL__sub_I_display+0x9c>)
   d43c8:	4630      	mov	r0, r6
   d43ca:	f003 fa69 	bl	d78a0 <__aeabi_atexit>
   d43ce:	4b1a      	ldr	r3, [pc, #104]	; (d4438 <_GLOBAL__sub_I_display+0xa0>)
   d43d0:	9300      	str	r3, [sp, #0]
   d43d2:	f240 725b 	movw	r2, #1883	; 0x75b
   d43d6:	4b19      	ldr	r3, [pc, #100]	; (d443c <_GLOBAL__sub_I_display+0xa4>)
   d43d8:	4919      	ldr	r1, [pc, #100]	; (d4440 <_GLOBAL__sub_I_display+0xa8>)
   d43da:	4620      	mov	r0, r4
   d43dc:	f001 fa48 	bl	d5870 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d43e0:	4b18      	ldr	r3, [pc, #96]	; (d4444 <_GLOBAL__sub_I_display+0xac>)
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);
   d43e2:	4919      	ldr	r1, [pc, #100]	; (d4448 <_GLOBAL__sub_I_display+0xb0>)
   d43e4:	6023      	str	r3, [r4, #0]
   d43e6:	462a      	mov	r2, r5
   d43e8:	4620      	mov	r0, r4
   d43ea:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d43ee:	f003 fa57 	bl	d78a0 <__aeabi_atexit>

Adafruit_MQTT_Subscribe activate = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/activate"); 
   d43f2:	4621      	mov	r1, r4
   d43f4:	2300      	movs	r3, #0
   d43f6:	4a15      	ldr	r2, [pc, #84]	; (d444c <_GLOBAL__sub_I_display+0xb4>)
   d43f8:	4815      	ldr	r0, [pc, #84]	; (d4450 <_GLOBAL__sub_I_display+0xb8>)
   d43fa:	f001 fd13 	bl	d5e24 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Subscribe turnon = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/turnon");
   d43fe:	4621      	mov	r1, r4
   d4400:	2300      	movs	r3, #0
   d4402:	4a14      	ldr	r2, [pc, #80]	; (d4454 <_GLOBAL__sub_I_display+0xbc>)
   d4404:	4814      	ldr	r0, [pc, #80]	; (d4458 <_GLOBAL__sub_I_display+0xc0>)
   d4406:	f001 fd0d 	bl	d5e24 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish insidetemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/insidetemp");
   d440a:	4a14      	ldr	r2, [pc, #80]	; (d445c <_GLOBAL__sub_I_display+0xc4>)
   d440c:	4814      	ldr	r0, [pc, #80]	; (d4460 <_GLOBAL__sub_I_display+0xc8>)
   d440e:	2300      	movs	r3, #0
   d4410:	4621      	mov	r1, r4
        Serial.printf("Disconnecting \n");
        mqtt.disconnect();
      }
      last = millis();
  }
   d4412:	b002      	add	sp, #8
   d4414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
TCPClient TheClient; 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);

Adafruit_MQTT_Subscribe activate = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/activate"); 
Adafruit_MQTT_Subscribe turnon = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/turnon");
Adafruit_MQTT_Publish insidetemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/insidetemp");
   d4418:	f001 bcee 	b.w	d5df8 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
   d441c:	2003e2e4 	.word	0x2003e2e4
   d4420:	2003e1c8 	.word	0x2003e1c8
   d4424:	2003e30c 	.word	0x2003e30c
   d4428:	000d40cd 	.word	0x000d40cd
   d442c:	2003e328 	.word	0x2003e328
   d4430:	2003e208 	.word	0x2003e208
   d4434:	000d40d1 	.word	0x000d40d1
   d4438:	000da21f 	.word	0x000da21f
   d443c:	000da203 	.word	0x000da203
   d4440:	000da20f 	.word	0x000da20f
   d4444:	000da8f4 	.word	0x000da8f4
   d4448:	000d40cf 	.word	0x000d40cf
   d444c:	000da240 	.word	0x000da240
   d4450:	2003e36c 	.word	0x2003e36c
   d4454:	000da25b 	.word	0x000da25b
   d4458:	2003e1cc 	.word	0x2003e1cc
   d445c:	000da274 	.word	0x000da274
   d4460:	2003e3a4 	.word	0x2003e3a4

000d4464 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4464:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4466:	4602      	mov	r2, r0
   d4468:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d446a:	7913      	ldrb	r3, [r2, #4]
   d446c:	6895      	ldr	r5, [r2, #8]
   d446e:	b133      	cbz	r3, d447e <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4470:	b93d      	cbnz	r5, d4482 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4472:	490c      	ldr	r1, [pc, #48]	; (d44a4 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4474:	b004      	add	sp, #16
   d4476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d447a:	f002 b995 	b.w	d67a8 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d447e:	4b0a      	ldr	r3, [pc, #40]	; (d44a8 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4480:	e000      	b.n	d4484 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4482:	4b0a      	ldr	r3, [pc, #40]	; (d44ac <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4484:	7b16      	ldrb	r6, [r2, #12]
   d4486:	4c0a      	ldr	r4, [pc, #40]	; (d44b0 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4488:	490a      	ldr	r1, [pc, #40]	; (d44b4 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d448a:	7b52      	ldrb	r2, [r2, #13]
   d448c:	9202      	str	r2, [sp, #8]
   d448e:	2e01      	cmp	r6, #1
   d4490:	bf08      	it	eq
   d4492:	4621      	moveq	r1, r4
   d4494:	9101      	str	r1, [sp, #4]
   d4496:	9500      	str	r5, [sp, #0]
   d4498:	4a07      	ldr	r2, [pc, #28]	; (d44b8 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d449a:	2100      	movs	r1, #0
   d449c:	f002 f9c1 	bl	d6822 <_ZN5Print11printf_implEbPKcz>
  }
   d44a0:	b004      	add	sp, #16
   d44a2:	bd70      	pop	{r4, r5, r6, pc}
   d44a4:	000da2b1 	.word	0x000da2b1
   d44a8:	000da967 	.word	0x000da967
   d44ac:	000da2a0 	.word	0x000da2a0
   d44b0:	000da2a9 	.word	0x000da2a9
   d44b4:	000da2ad 	.word	0x000da2ad
   d44b8:	000da2c7 	.word	0x000da2c7

000d44bc <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d44bc:	22ff      	movs	r2, #255	; 0xff
   d44be:	7402      	strb	r2, [r0, #16]
   d44c0:	7442      	strb	r2, [r0, #17]
   d44c2:	7482      	strb	r2, [r0, #18]
   d44c4:	74c2      	strb	r2, [r0, #19]
{ }
   d44c6:	4770      	bx	lr

000d44c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d44c8:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d44ca:	4d09      	ldr	r5, [pc, #36]	; (d44f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d44cc:	6829      	ldr	r1, [r5, #0]
   d44ce:	f011 0401 	ands.w	r4, r1, #1
   d44d2:	d10a      	bne.n	d44ea <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d44d4:	4628      	mov	r0, r5
   d44d6:	f7ff fdf1 	bl	d40bc <__cxa_guard_acquire>
   d44da:	b130      	cbz	r0, d44ea <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d44dc:	4621      	mov	r1, r4
   d44de:	4805      	ldr	r0, [pc, #20]	; (d44f4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d44e0:	f001 ff92 	bl	d6408 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d44e4:	4628      	mov	r0, r5
   d44e6:	f7ff fdee 	bl	d40c6 <__cxa_guard_release>
        return instance;
    }
   d44ea:	4802      	ldr	r0, [pc, #8]	; (d44f4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d44ec:	bd38      	pop	{r3, r4, r5, pc}
   d44ee:	bf00      	nop
   d44f0:	2003e3b0 	.word	0x2003e3b0
   d44f4:	2003e3b4 	.word	0x2003e3b4

000d44f8 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d44f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d44fc:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4500:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4502:	4605      	mov	r5, r0
   d4504:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d4506:	d106      	bne.n	d4516 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4508:	f7ff ffde 	bl	d44c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d450c:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d450e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4512:	f002 b895 	b.w	d6640 <_ZN8SPIClass8transferEh>
   d4516:	2607      	movs	r6, #7
   d4518:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d451a:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d451e:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4522:	2100      	movs	r1, #0
   d4524:	b280      	uxth	r0, r0
   d4526:	f003 f92c 	bl	d7782 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d452a:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d452e:	fa08 f106 	lsl.w	r1, r8, r6
   d4532:	4039      	ands	r1, r7
   d4534:	b280      	uxth	r0, r0
   d4536:	f003 f924 	bl	d7782 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d453a:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d453e:	2101      	movs	r1, #1
   d4540:	b280      	uxth	r0, r0
   d4542:	f003 f91e 	bl	d7782 <digitalWrite>
        if (digitalRead(_miso))
   d4546:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d454a:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d454c:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d454e:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4550:	f003 f930 	bl	d77b4 <digitalRead>
   d4554:	b108      	cbz	r0, d455a <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4556:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d455a:	f116 36ff 	adds.w	r6, r6, #4294967295
   d455e:	d2de      	bcs.n	d451e <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4560:	4620      	mov	r0, r4
   d4562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4566 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d4566:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4568:	f7ff ffae 	bl	d44c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d456c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d4570:	f001 bf87 	b.w	d6482 <_ZN8SPIClass14endTransactionEv>

000d4574 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d4574:	b510      	push	{r4, lr}
   d4576:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d4578:	f7ff ffa6 	bl	d44c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d457c:	4621      	mov	r1, r4
    }
   d457e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d4582:	f001 bf97 	b.w	d64b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d4588 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4588:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d458a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d458e:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4590:	b085      	sub	sp, #20
   d4592:	4604      	mov	r4, r0
   d4594:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d4596:	d121      	bne.n	d45dc <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4598:	7901      	ldrb	r1, [r0, #4]
   d459a:	6800      	ldr	r0, [r0, #0]
   d459c:	f002 fc31 	bl	d6e02 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d45a0:	6820      	ldr	r0, [r4, #0]
   d45a2:	6803      	ldr	r3, [r0, #0]
   d45a4:	4629      	mov	r1, r5
   d45a6:	689b      	ldr	r3, [r3, #8]
   d45a8:	4798      	blx	r3
        _wire -> endTransmission();
   d45aa:	6820      	ldr	r0, [r4, #0]
   d45ac:	f002 fc34 	bl	d6e18 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d45b0:	2203      	movs	r2, #3
   d45b2:	7921      	ldrb	r1, [r4, #4]
   d45b4:	6820      	ldr	r0, [r4, #0]
   d45b6:	f002 fc21 	bl	d6dfc <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d45ba:	6820      	ldr	r0, [r4, #0]
   d45bc:	6803      	ldr	r3, [r0, #0]
   d45be:	695b      	ldr	r3, [r3, #20]
   d45c0:	4798      	blx	r3
        value <<= 8;
   d45c2:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d45c4:	6820      	ldr	r0, [r4, #0]
   d45c6:	6803      	ldr	r3, [r0, #0]
   d45c8:	695b      	ldr	r3, [r3, #20]
   d45ca:	4798      	blx	r3
   d45cc:	4328      	orrs	r0, r5
        value <<= 8;
   d45ce:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d45d0:	6820      	ldr	r0, [r4, #0]
   d45d2:	6803      	ldr	r3, [r0, #0]
   d45d4:	695b      	ldr	r3, [r3, #20]
   d45d6:	4798      	blx	r3
   d45d8:	4305      	orrs	r5, r0
   d45da:	e039      	b.n	d4650 <_ZN15Adafruit_BME2806read24Eh+0xc8>
    } else {
        if (_sck == -1)
   d45dc:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d45e0:	3301      	adds	r3, #1
   d45e2:	d10e      	bne.n	d4602 <_ZN15Adafruit_BME2806read24Eh+0x7a>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d45e4:	4b1c      	ldr	r3, [pc, #112]	; (d4658 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d45e6:	4a1d      	ldr	r2, [pc, #116]	; (d465c <_ZN15Adafruit_BME2806read24Eh+0xd4>)
   d45e8:	9300      	str	r3, [sp, #0]
   d45ea:	9202      	str	r2, [sp, #8]
   d45ec:	2300      	movs	r3, #0
   d45ee:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d45f0:	4668      	mov	r0, sp
   d45f2:	f88d 3004 	strb.w	r3, [sp, #4]
   d45f6:	f88d 200c 	strb.w	r2, [sp, #12]
   d45fa:	f88d 300d 	strb.w	r3, [sp, #13]
   d45fe:	f7ff ffb9 	bl	d4574 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4602:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4606:	2100      	movs	r1, #0
   d4608:	b280      	uxth	r0, r0
   d460a:	f003 f8ba 	bl	d7782 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d460e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4612:	4620      	mov	r0, r4
   d4614:	f7ff ff70 	bl	d44f8 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d4618:	2100      	movs	r1, #0
   d461a:	4620      	mov	r0, r4
   d461c:	f7ff ff6c 	bl	d44f8 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d4620:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d4622:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4624:	4620      	mov	r0, r4
   d4626:	f7ff ff67 	bl	d44f8 <_ZN15Adafruit_BME2807spixferEh>
   d462a:	4328      	orrs	r0, r5
        value <<= 8;
   d462c:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d462e:	2100      	movs	r1, #0
   d4630:	4620      	mov	r0, r4
   d4632:	f7ff ff61 	bl	d44f8 <_ZN15Adafruit_BME2807spixferEh>
   d4636:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d4638:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d463c:	2101      	movs	r1, #1
   d463e:	b280      	uxth	r0, r0
   d4640:	f003 f89f 	bl	d7782 <digitalWrite>
        if (_sck == -1)
   d4644:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4648:	3301      	adds	r3, #1
   d464a:	d101      	bne.n	d4650 <_ZN15Adafruit_BME2806read24Eh+0xc8>
            SPI.endTransaction(); // release the SPI bus
   d464c:	f7ff ff8b 	bl	d4566 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4650:	4628      	mov	r0, r5
   d4652:	b005      	add	sp, #20
   d4654:	bd30      	pop	{r4, r5, pc}
   d4656:	bf00      	nop
   d4658:	000da29c 	.word	0x000da29c
   d465c:	0007a120 	.word	0x0007a120

000d4660 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4660:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4662:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4664:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4666:	f7ff ff8f 	bl	d4588 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d466a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d466e:	d01e      	beq.n	d46ae <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4670:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4672:	ed9f 7a10 	vldr	s14, [pc, #64]	; d46b4 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d4676:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d467a:	0052      	lsls	r2, r2, #1
   d467c:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d4680:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d4684:	435b      	muls	r3, r3
   d4686:	4350      	muls	r0, r2
   d4688:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d468c:	131b      	asrs	r3, r3, #12
   d468e:	4353      	muls	r3, r2
   d4690:	139b      	asrs	r3, r3, #14
   d4692:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d4696:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4698:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d469c:	3080      	adds	r0, #128	; 0x80
   d469e:	1200      	asrs	r0, r0, #8
   d46a0:	ee07 0a90 	vmov	s15, r0
   d46a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d46a8:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d46ac:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d46ae:	ed9f 0a02 	vldr	s0, [pc, #8]	; d46b8 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d46b2:	bd10      	pop	{r4, pc}
   d46b4:	42c80000 	.word	0x42c80000
   d46b8:	7fc00000 	.word	0x7fc00000

000d46bc <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d46bc:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d46be:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d46c2:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d46c4:	b085      	sub	sp, #20
   d46c6:	4604      	mov	r4, r0
   d46c8:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d46ca:	d11d      	bne.n	d4708 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d46cc:	7901      	ldrb	r1, [r0, #4]
   d46ce:	6800      	ldr	r0, [r0, #0]
   d46d0:	f002 fb97 	bl	d6e02 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d46d4:	6820      	ldr	r0, [r4, #0]
   d46d6:	6803      	ldr	r3, [r0, #0]
   d46d8:	4629      	mov	r1, r5
   d46da:	689b      	ldr	r3, [r3, #8]
   d46dc:	4798      	blx	r3
        _wire -> endTransmission();
   d46de:	6820      	ldr	r0, [r4, #0]
   d46e0:	f002 fb9a 	bl	d6e18 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d46e4:	2202      	movs	r2, #2
   d46e6:	7921      	ldrb	r1, [r4, #4]
   d46e8:	6820      	ldr	r0, [r4, #0]
   d46ea:	f002 fb87 	bl	d6dfc <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d46ee:	6820      	ldr	r0, [r4, #0]
   d46f0:	6803      	ldr	r3, [r0, #0]
   d46f2:	695b      	ldr	r3, [r3, #20]
   d46f4:	4798      	blx	r3
   d46f6:	4605      	mov	r5, r0
   d46f8:	6820      	ldr	r0, [r4, #0]
   d46fa:	6803      	ldr	r3, [r0, #0]
   d46fc:	695b      	ldr	r3, [r3, #20]
   d46fe:	4798      	blx	r3
   d4700:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4704:	b285      	uxth	r5, r0
   d4706:	e035      	b.n	d4774 <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d4708:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d470c:	3301      	adds	r3, #1
   d470e:	d10e      	bne.n	d472e <_ZN15Adafruit_BME2806read16Eh+0x72>
   d4710:	4b1a      	ldr	r3, [pc, #104]	; (d477c <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d4712:	4a1b      	ldr	r2, [pc, #108]	; (d4780 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d4714:	9300      	str	r3, [sp, #0]
   d4716:	9202      	str	r2, [sp, #8]
   d4718:	2300      	movs	r3, #0
   d471a:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d471c:	4668      	mov	r0, sp
   d471e:	f88d 3004 	strb.w	r3, [sp, #4]
   d4722:	f88d 200c 	strb.w	r2, [sp, #12]
   d4726:	f88d 300d 	strb.w	r3, [sp, #13]
   d472a:	f7ff ff23 	bl	d4574 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d472e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4732:	2100      	movs	r1, #0
   d4734:	b280      	uxth	r0, r0
   d4736:	f003 f824 	bl	d7782 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d473a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d473e:	4620      	mov	r0, r4
   d4740:	f7ff feda 	bl	d44f8 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4744:	2100      	movs	r1, #0
   d4746:	4620      	mov	r0, r4
   d4748:	f7ff fed6 	bl	d44f8 <_ZN15Adafruit_BME2807spixferEh>
   d474c:	2100      	movs	r1, #0
   d474e:	4605      	mov	r5, r0
   d4750:	4620      	mov	r0, r4
   d4752:	f7ff fed1 	bl	d44f8 <_ZN15Adafruit_BME2807spixferEh>
   d4756:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d475a:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d475c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4760:	2101      	movs	r1, #1
   d4762:	b280      	uxth	r0, r0
   d4764:	f003 f80d 	bl	d7782 <digitalWrite>
        if (_sck == -1)
   d4768:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d476c:	3301      	adds	r3, #1
   d476e:	d101      	bne.n	d4774 <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d4770:	f7ff fef9 	bl	d4566 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4774:	4628      	mov	r0, r5
   d4776:	b005      	add	sp, #20
   d4778:	bd30      	pop	{r4, r5, pc}
   d477a:	bf00      	nop
   d477c:	000da29c 	.word	0x000da29c
   d4780:	0007a120 	.word	0x0007a120

000d4784 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4784:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d4786:	f7ff ff99 	bl	d46bc <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d478a:	ba40      	rev16	r0, r0
}
   d478c:	b280      	uxth	r0, r0
   d478e:	bd08      	pop	{r3, pc}

000d4790 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4790:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d4792:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4796:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4798:	b085      	sub	sp, #20
   d479a:	4604      	mov	r4, r0
   d479c:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d479e:	d116      	bne.n	d47ce <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d47a0:	7901      	ldrb	r1, [r0, #4]
   d47a2:	6800      	ldr	r0, [r0, #0]
   d47a4:	f002 fb2d 	bl	d6e02 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d47a8:	6820      	ldr	r0, [r4, #0]
   d47aa:	6803      	ldr	r3, [r0, #0]
   d47ac:	4629      	mov	r1, r5
   d47ae:	689b      	ldr	r3, [r3, #8]
   d47b0:	4798      	blx	r3
        _wire -> endTransmission();
   d47b2:	6820      	ldr	r0, [r4, #0]
   d47b4:	f002 fb30 	bl	d6e18 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d47b8:	2201      	movs	r2, #1
   d47ba:	7921      	ldrb	r1, [r4, #4]
   d47bc:	6820      	ldr	r0, [r4, #0]
   d47be:	f002 fb1d 	bl	d6dfc <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d47c2:	6820      	ldr	r0, [r4, #0]
   d47c4:	6803      	ldr	r3, [r0, #0]
   d47c6:	695b      	ldr	r3, [r3, #20]
   d47c8:	4798      	blx	r3
   d47ca:	b2c5      	uxtb	r5, r0
   d47cc:	e02e      	b.n	d482c <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d47ce:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d47d2:	3301      	adds	r3, #1
   d47d4:	d10e      	bne.n	d47f4 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d47d6:	4b17      	ldr	r3, [pc, #92]	; (d4834 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d47d8:	4a17      	ldr	r2, [pc, #92]	; (d4838 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d47da:	9300      	str	r3, [sp, #0]
   d47dc:	9202      	str	r2, [sp, #8]
   d47de:	2300      	movs	r3, #0
   d47e0:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d47e2:	4668      	mov	r0, sp
   d47e4:	f88d 3004 	strb.w	r3, [sp, #4]
   d47e8:	f88d 200c 	strb.w	r2, [sp, #12]
   d47ec:	f88d 300d 	strb.w	r3, [sp, #13]
   d47f0:	f7ff fec0 	bl	d4574 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d47f4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d47f8:	2100      	movs	r1, #0
   d47fa:	b280      	uxth	r0, r0
   d47fc:	f002 ffc1 	bl	d7782 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4800:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4804:	4620      	mov	r0, r4
   d4806:	f7ff fe77 	bl	d44f8 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d480a:	2100      	movs	r1, #0
   d480c:	4620      	mov	r0, r4
   d480e:	f7ff fe73 	bl	d44f8 <_ZN15Adafruit_BME2807spixferEh>
   d4812:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4814:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4818:	2101      	movs	r1, #1
   d481a:	b280      	uxth	r0, r0
   d481c:	f002 ffb1 	bl	d7782 <digitalWrite>
        if (_sck == -1)
   d4820:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4824:	3301      	adds	r3, #1
   d4826:	d101      	bne.n	d482c <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d4828:	f7ff fe9d 	bl	d4566 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d482c:	4628      	mov	r0, r5
   d482e:	b005      	add	sp, #20
   d4830:	bd30      	pop	{r4, r5, pc}
   d4832:	bf00      	nop
   d4834:	000da29c 	.word	0x000da29c
   d4838:	0007a120 	.word	0x0007a120

000d483c <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d483c:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d483e:	21f3      	movs	r1, #243	; 0xf3
   d4840:	f7ff ffa6 	bl	d4790 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4844:	f000 0001 	and.w	r0, r0, #1
   d4848:	bd08      	pop	{r3, pc}

000d484a <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d484a:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d484c:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d484e:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4850:	f7ff ff98 	bl	d4784 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4854:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4856:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4858:	4620      	mov	r0, r4
   d485a:	f7ff ff93 	bl	d4784 <_ZN15Adafruit_BME2809read16_LEEh>
   d485e:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4860:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4862:	4620      	mov	r0, r4
   d4864:	f7ff ff8e 	bl	d4784 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4868:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d486a:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d486c:	4620      	mov	r0, r4
   d486e:	f7ff ff89 	bl	d4784 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4872:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4874:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4876:	4620      	mov	r0, r4
   d4878:	f7ff ff84 	bl	d4784 <_ZN15Adafruit_BME2809read16_LEEh>
   d487c:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d487e:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4880:	4620      	mov	r0, r4
   d4882:	f7ff ff7f 	bl	d4784 <_ZN15Adafruit_BME2809read16_LEEh>
   d4886:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4888:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d488a:	4620      	mov	r0, r4
   d488c:	f7ff ff7a 	bl	d4784 <_ZN15Adafruit_BME2809read16_LEEh>
   d4890:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4892:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4894:	4620      	mov	r0, r4
   d4896:	f7ff ff75 	bl	d4784 <_ZN15Adafruit_BME2809read16_LEEh>
   d489a:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d489c:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d489e:	4620      	mov	r0, r4
   d48a0:	f7ff ff70 	bl	d4784 <_ZN15Adafruit_BME2809read16_LEEh>
   d48a4:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d48a6:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d48a8:	4620      	mov	r0, r4
   d48aa:	f7ff ff6b 	bl	d4784 <_ZN15Adafruit_BME2809read16_LEEh>
   d48ae:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d48b0:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d48b2:	4620      	mov	r0, r4
   d48b4:	f7ff ff66 	bl	d4784 <_ZN15Adafruit_BME2809read16_LEEh>
   d48b8:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d48ba:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d48bc:	4620      	mov	r0, r4
   d48be:	f7ff ff61 	bl	d4784 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d48c2:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d48c4:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d48c6:	4620      	mov	r0, r4
   d48c8:	f7ff ff62 	bl	d4790 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d48cc:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d48ce:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d48d2:	4620      	mov	r0, r4
   d48d4:	f7ff ff56 	bl	d4784 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d48d8:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d48da:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d48dc:	4620      	mov	r0, r4
   d48de:	f7ff ff57 	bl	d4790 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d48e2:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d48e4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d48e8:	4620      	mov	r0, r4
   d48ea:	f7ff ff51 	bl	d4790 <_ZN15Adafruit_BME2805read8Eh>
   d48ee:	21e5      	movs	r1, #229	; 0xe5
   d48f0:	4605      	mov	r5, r0
   d48f2:	4620      	mov	r0, r4
   d48f4:	f7ff ff4c 	bl	d4790 <_ZN15Adafruit_BME2805read8Eh>
   d48f8:	f000 000f 	and.w	r0, r0, #15
   d48fc:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4900:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d4902:	21e6      	movs	r1, #230	; 0xe6
   d4904:	4620      	mov	r0, r4
   d4906:	f7ff ff43 	bl	d4790 <_ZN15Adafruit_BME2805read8Eh>
   d490a:	21e5      	movs	r1, #229	; 0xe5
   d490c:	4605      	mov	r5, r0
   d490e:	4620      	mov	r0, r4
   d4910:	f7ff ff3e 	bl	d4790 <_ZN15Adafruit_BME2805read8Eh>
   d4914:	1100      	asrs	r0, r0, #4
   d4916:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d491a:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d491c:	21e7      	movs	r1, #231	; 0xe7
   d491e:	4620      	mov	r0, r4
   d4920:	f7ff ff36 	bl	d4790 <_ZN15Adafruit_BME2805read8Eh>
   d4924:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d4928:	bd38      	pop	{r3, r4, r5, pc}
	...

000d492c <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d492c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d492e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4932:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4934:	4604      	mov	r4, r0
   d4936:	460e      	mov	r6, r1
   d4938:	4615      	mov	r5, r2
    if (_cs == -1) {
   d493a:	d111      	bne.n	d4960 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d493c:	7901      	ldrb	r1, [r0, #4]
   d493e:	6800      	ldr	r0, [r0, #0]
   d4940:	f002 fa5f 	bl	d6e02 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4944:	6820      	ldr	r0, [r4, #0]
   d4946:	6803      	ldr	r3, [r0, #0]
   d4948:	4631      	mov	r1, r6
   d494a:	689b      	ldr	r3, [r3, #8]
   d494c:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d494e:	6820      	ldr	r0, [r4, #0]
   d4950:	6803      	ldr	r3, [r0, #0]
   d4952:	4629      	mov	r1, r5
   d4954:	689b      	ldr	r3, [r3, #8]
   d4956:	4798      	blx	r3
        _wire -> endTransmission();
   d4958:	6820      	ldr	r0, [r4, #0]
   d495a:	f002 fa5d 	bl	d6e18 <_ZN7TwoWire15endTransmissionEv>
   d495e:	e02d      	b.n	d49bc <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d4960:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4964:	3301      	adds	r3, #1
   d4966:	d10e      	bne.n	d4986 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d4968:	4b15      	ldr	r3, [pc, #84]	; (d49c0 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d496a:	4a16      	ldr	r2, [pc, #88]	; (d49c4 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d496c:	9300      	str	r3, [sp, #0]
   d496e:	9202      	str	r2, [sp, #8]
   d4970:	2300      	movs	r3, #0
   d4972:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4974:	4668      	mov	r0, sp
   d4976:	f88d 3004 	strb.w	r3, [sp, #4]
   d497a:	f88d 200c 	strb.w	r2, [sp, #12]
   d497e:	f88d 300d 	strb.w	r3, [sp, #13]
   d4982:	f7ff fdf7 	bl	d4574 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4986:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d498a:	2100      	movs	r1, #0
   d498c:	b280      	uxth	r0, r0
   d498e:	f002 fef8 	bl	d7782 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4992:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4996:	4620      	mov	r0, r4
   d4998:	f7ff fdae 	bl	d44f8 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d499c:	4629      	mov	r1, r5
   d499e:	4620      	mov	r0, r4
   d49a0:	f7ff fdaa 	bl	d44f8 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d49a4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d49a8:	2101      	movs	r1, #1
   d49aa:	b280      	uxth	r0, r0
   d49ac:	f002 fee9 	bl	d7782 <digitalWrite>
    if (_sck == -1)
   d49b0:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d49b4:	3301      	adds	r3, #1
   d49b6:	d101      	bne.n	d49bc <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d49b8:	f7ff fdd5 	bl	d4566 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d49bc:	b004      	add	sp, #16
   d49be:	bd70      	pop	{r4, r5, r6, pc}
   d49c0:	000da29c 	.word	0x000da29c
   d49c4:	0007a120 	.word	0x0007a120

000d49c8 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d49c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d49ca:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d49ce:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d49d2:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d49d6:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d49da:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d49de:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d49e2:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d49e6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d49ea:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d49ee:	f366 1347 	bfi	r3, r6, #5, #3
   d49f2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d49f6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d49fa:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d49fe:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d4a00:	f367 0302 	bfi	r3, r7, #0, #3
   d4a04:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4a08:	f006 0207 	and.w	r2, r6, #7
   d4a0c:	21f2      	movs	r1, #242	; 0xf2
   d4a0e:	f7ff ff8d 	bl	d492c <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4a12:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d4a16:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4a1a:	f002 0107 	and.w	r1, r2, #7
   d4a1e:	009b      	lsls	r3, r3, #2
   d4a20:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4a24:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4a28:	4620      	mov	r0, r4
   d4a2a:	21f5      	movs	r1, #245	; 0xf5
   d4a2c:	f7ff ff7e 	bl	d492c <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4a30:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4a34:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4a38:	f002 0107 	and.w	r1, r2, #7
   d4a3c:	009b      	lsls	r3, r3, #2
   d4a3e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4a42:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4a46:	4620      	mov	r0, r4
   d4a48:	21f4      	movs	r1, #244	; 0xf4
}
   d4a4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4a4e:	f7ff bf6d 	b.w	d492c <_ZN15Adafruit_BME2806write8Ehh>

000d4a52 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4a52:	b530      	push	{r4, r5, lr}
   d4a54:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4a56:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4a5a:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4a5c:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4a5e:	d103      	bne.n	d4a68 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4a60:	6820      	ldr	r0, [r4, #0]
   d4a62:	f002 f997 	bl	d6d94 <_ZN7TwoWire5beginEv>
   d4a66:	e022      	b.n	d4aae <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d4a68:	2101      	movs	r1, #1
   d4a6a:	b280      	uxth	r0, r0
   d4a6c:	f002 fe89 	bl	d7782 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4a70:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4a74:	2101      	movs	r1, #1
   d4a76:	b280      	uxth	r0, r0
   d4a78:	f002 fe72 	bl	d7760 <pinMode>
        if (_sck == -1) {
   d4a7c:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4a80:	1c43      	adds	r3, r0, #1
   d4a82:	d104      	bne.n	d4a8e <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4a84:	f7ff fd20 	bl	d44c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4a88:	f001 fcc8 	bl	d641c <_ZN8SPIClass5beginEv>
   d4a8c:	e00f      	b.n	d4aae <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d4a8e:	2101      	movs	r1, #1
   d4a90:	b280      	uxth	r0, r0
   d4a92:	f002 fe65 	bl	d7760 <pinMode>
            pinMode(_mosi, OUTPUT);
   d4a96:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d4a9a:	2101      	movs	r1, #1
   d4a9c:	b280      	uxth	r0, r0
   d4a9e:	f002 fe5f 	bl	d7760 <pinMode>
            pinMode(_miso, INPUT);
   d4aa2:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d4aa6:	2100      	movs	r1, #0
   d4aa8:	b280      	uxth	r0, r0
   d4aaa:	f002 fe59 	bl	d7760 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4aae:	21d0      	movs	r1, #208	; 0xd0
   d4ab0:	4620      	mov	r0, r4
   d4ab2:	f7ff fe6d 	bl	d4790 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d4ab6:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4ab8:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d4aba:	d120      	bne.n	d4afe <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d4abc:	4620      	mov	r0, r4
   d4abe:	22b6      	movs	r2, #182	; 0xb6
   d4ac0:	21e0      	movs	r1, #224	; 0xe0
   d4ac2:	f7ff ff33 	bl	d492c <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d4ac6:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4aca:	f001 fef7 	bl	d68bc <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d4ace:	4620      	mov	r0, r4
   d4ad0:	f7ff feb4 	bl	d483c <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4ad4:	4605      	mov	r5, r0
   d4ad6:	b108      	cbz	r0, d4adc <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d4ad8:	2064      	movs	r0, #100	; 0x64
   d4ada:	e7f6      	b.n	d4aca <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d4adc:	4620      	mov	r0, r4
   d4ade:	f7ff feb4 	bl	d484a <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d4ae2:	2305      	movs	r3, #5
   d4ae4:	9300      	str	r3, [sp, #0]
   d4ae6:	461a      	mov	r2, r3
   d4ae8:	2103      	movs	r1, #3
   d4aea:	4620      	mov	r0, r4
   d4aec:	9502      	str	r5, [sp, #8]
   d4aee:	9501      	str	r5, [sp, #4]
   d4af0:	f7ff ff6a 	bl	d49c8 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d4af4:	2064      	movs	r0, #100	; 0x64
   d4af6:	f001 fee1 	bl	d68bc <delay>
   d4afa:	2001      	movs	r0, #1
   d4afc:	e000      	b.n	d4b00 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d4afe:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d4b00:	b005      	add	sp, #20
   d4b02:	bd30      	pop	{r4, r5, pc}

000d4b04 <_ZN15Adafruit_BME2805beginEv>:
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d4b04:	2377      	movs	r3, #119	; 0x77
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d4b06:	b510      	push	{r4, lr}
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d4b08:	7103      	strb	r3, [r0, #4]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d4b0a:	4604      	mov	r4, r0
    bool status = false;
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
   d4b0c:	f002 fea2 	bl	d7854 <_Z19__fetch_global_Wirev>
   d4b10:	6020      	str	r0, [r4, #0]
	status = init();
   d4b12:	4620      	mov	r0, r4
   d4b14:	f7ff ff9d 	bl	d4a52 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d4b18:	b930      	cbnz	r0, d4b28 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d4b1a:	2376      	movs	r3, #118	; 0x76
   d4b1c:	7123      	strb	r3, [r4, #4]
 		status = init();
   d4b1e:	4620      	mov	r0, r4
 		}
	return status;
}
   d4b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
	status = init();
 	if(!status){
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 		status = init();
   d4b24:	f7ff bf95 	b.w	d4a52 <_ZN15Adafruit_BME2804initEv>
 		}
	return status;
}
   d4b28:	bd10      	pop	{r4, pc}

000d4b2a <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4b2a:	f001 b99d 	b.w	d5e68 <HAL_Pin_Map>

000d4b2e <_ZNK18DHTSensorTypeDHT118getTempCERK9DHTSample>:
DHTSensorTypeDHT11::DHTSensorTypeDHT11() : DHTSensorType("DHT11", 1000, 25) {

};

float DHTSensorTypeDHT11::getTempC(const DHTSample &sample) const {
	return (float) ((int8_t) sample[2]);
   d4b2e:	f991 300e 	ldrsb.w	r3, [r1, #14]
   d4b32:	ee00 3a10 	vmov	s0, r3
}
   d4b36:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d4b3a:	4770      	bx	lr

000d4b3c <_ZNK18DHTSensorTypeDHT1111getHumidityERK9DHTSample>:

float DHTSensorTypeDHT11::getHumidity(const DHTSample &sample) const {
	return (float) ((int8_t) sample[0]);
   d4b3c:	f991 300c 	ldrsb.w	r3, [r1, #12]
   d4b40:	ee00 3a10 	vmov	s0, r3
}
   d4b44:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d4b48:	4770      	bx	lr
   d4b4a:	0000      	movs	r0, r0
   d4b4c:	0000      	movs	r0, r0
	...

000d4b50 <_ZNK18DHTSensorTypeDHT228getTempCERK9DHTSample>:

DHTSensorTypeDHT22::DHTSensorTypeDHT22() : DHTSensorType("DHT22", 2000, 25) {

};

float DHTSensorTypeDHT22::getTempC(const DHTSample &sample) const {
   d4b50:	b508      	push	{r3, lr}
	DHTSample &withSensorType(DHTSensorType *sensorType) { this->sensorType = sensorType; return *this; };

	/**
	 * @brief Get a byte from the bytes array
	 */
	uint8_t operator[](size_t index) const { return bytes[index]; };
   d4b52:	7b8a      	ldrb	r2, [r1, #14]
   d4b54:	89cb      	ldrh	r3, [r1, #14]
	return (sample[2] & 0x80 ? -combineBytes(sample[2] & 0x7F, sample[3]) : combineBytes(sample[2], sample[3])) * 0.1;
   d4b56:	0610      	lsls	r0, r2, #24
   d4b58:	ba5b      	rev16	r3, r3
   d4b5a:	b29b      	uxth	r3, r3
   d4b5c:	bf41      	itttt	mi
   d4b5e:	7bcb      	ldrbmi	r3, [r1, #15]
   d4b60:	f002 027f 	andmi.w	r2, r2, #127	; 0x7f
   d4b64:	ea43 2302 	orrmi.w	r3, r3, r2, lsl #8
   d4b68:	ee07 3a90 	vmovmi	s15, r3
DHTSensorTypeDHT11 DHT22Gen3::sensorTypeDHT11;
DHTSensorTypeDHT22 DHT22Gen3::sensorTypeDHT22;


static float combineBytes(uint8_t highByte, uint8_t lowByte) {
	return (float) ((((uint16_t)highByte) << 8) | lowByte);
   d4b6c:	bf55      	itete	pl
   d4b6e:	ee07 3a90 	vmovpl	s15, r3
DHTSensorTypeDHT22::DHTSensorTypeDHT22() : DHTSensorType("DHT22", 2000, 25) {

};

float DHTSensorTypeDHT22::getTempC(const DHTSample &sample) const {
	return (sample[2] & 0x80 ? -combineBytes(sample[2] & 0x7F, sample[3]) : combineBytes(sample[2], sample[3])) * 0.1;
   d4b72:	eef8 7ae7 	vcvtmi.f32.s32	s15, s15
DHTSensorTypeDHT11 DHT22Gen3::sensorTypeDHT11;
DHTSensorTypeDHT22 DHT22Gen3::sensorTypeDHT22;


static float combineBytes(uint8_t highByte, uint8_t lowByte) {
	return (float) ((((uint16_t)highByte) << 8) | lowByte);
   d4b76:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
DHTSensorTypeDHT22::DHTSensorTypeDHT22() : DHTSensorType("DHT22", 2000, 25) {

};

float DHTSensorTypeDHT22::getTempC(const DHTSample &sample) const {
	return (sample[2] & 0x80 ? -combineBytes(sample[2] & 0x7F, sample[3]) : combineBytes(sample[2], sample[3])) * 0.1;
   d4b7a:	eef1 7a67 	vnegmi.f32	s15, s15
   d4b7e:	ee17 0a90 	vmov	r0, s15
   d4b82:	f003 f95b 	bl	d7e3c <__aeabi_f2d>
   d4b86:	a306      	add	r3, pc, #24	; (adr r3, d4ba0 <_ZNK18DHTSensorTypeDHT228getTempCERK9DHTSample+0x50>)
   d4b88:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b8c:	f003 f9aa 	bl	d7ee4 <__aeabi_dmul>
   d4b90:	f003 fc8a 	bl	d84a8 <__aeabi_d2f>

}
   d4b94:	ee00 0a10 	vmov	s0, r0
   d4b98:	bd08      	pop	{r3, pc}
   d4b9a:	bf00      	nop
   d4b9c:	f3af 8000 	nop.w
   d4ba0:	9999999a 	.word	0x9999999a
   d4ba4:	3fb99999 	.word	0x3fb99999

000d4ba8 <_ZNK18DHTSensorTypeDHT2211getHumidityERK9DHTSample>:

float DHTSensorTypeDHT22::getHumidity(const DHTSample &sample) const {
   d4ba8:	b508      	push	{r3, lr}
	return combineBytes(sample[0], sample[1]) * 0.1;
   d4baa:	8988      	ldrh	r0, [r1, #12]
   d4bac:	ba40      	rev16	r0, r0
   d4bae:	b280      	uxth	r0, r0
   d4bb0:	ee07 0a90 	vmov	s15, r0
   d4bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4bb8:	ee17 0a90 	vmov	r0, s15
   d4bbc:	f003 f93e 	bl	d7e3c <__aeabi_f2d>
   d4bc0:	a305      	add	r3, pc, #20	; (adr r3, d4bd8 <_ZNK18DHTSensorTypeDHT2211getHumidityERK9DHTSample+0x30>)
   d4bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4bc6:	f003 f98d 	bl	d7ee4 <__aeabi_dmul>
   d4bca:	f003 fc6d 	bl	d84a8 <__aeabi_d2f>
}
   d4bce:	ee00 0a10 	vmov	s0, r0
   d4bd2:	bd08      	pop	{r3, pc}
   d4bd4:	f3af 8000 	nop.w
   d4bd8:	9999999a 	.word	0x9999999a
   d4bdc:	3fb99999 	.word	0x3fb99999

000d4be0 <_ZN18DHTSensorTypeDHT22D1Ev>:


/**
 * @brief DHTSensorType object to decode DHT22 sensor data
 */
class DHTSensorTypeDHT22 : public DHTSensorType {
   d4be0:	4770      	bx	lr

000d4be2 <_ZN18DHTSensorTypeDHT11D1Ev>:
};

/**
 * @brief DHTSensorType object to decode DHT11 sensor data
 */
class DHTSensorTypeDHT11 : public DHTSensorType {
   d4be2:	4770      	bx	lr

000d4be4 <_ZN18DHTSensorTypeDHT22D0Ev>:


/**
 * @brief DHTSensorType object to decode DHT22 sensor data
 */
class DHTSensorTypeDHT22 : public DHTSensorType {
   d4be4:	b510      	push	{r4, lr}
   d4be6:	2110      	movs	r1, #16
   d4be8:	4604      	mov	r4, r0
   d4bea:	f002 fe67 	bl	d78bc <_ZdlPvj>
   d4bee:	4620      	mov	r0, r4
   d4bf0:	bd10      	pop	{r4, pc}

000d4bf2 <_ZN18DHTSensorTypeDHT11D0Ev>:
};

/**
 * @brief DHTSensorType object to decode DHT11 sensor data
 */
class DHTSensorTypeDHT11 : public DHTSensorType {
   d4bf2:	b510      	push	{r4, lr}
   d4bf4:	2110      	movs	r1, #16
   d4bf6:	4604      	mov	r4, r0
   d4bf8:	f002 fe60 	bl	d78bc <_ZdlPvj>
   d4bfc:	4620      	mov	r0, r4
   d4bfe:	bd10      	pop	{r4, pc}

000d4c00 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4c00:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4c02:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4c04:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4c06:	b113      	cbz	r3, d4c0e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c08:	2203      	movs	r2, #3
   d4c0a:	4601      	mov	r1, r0
   d4c0c:	4798      	blx	r3
    }
   d4c0e:	4620      	mov	r0, r4
   d4c10:	bd10      	pop	{r4, pc}
	...

000d4c14 <_ZN18DHTSensorTypeDHT11C1Ev>:
	 * @param minSamplePeriodMs Minimum number of milliseconds between queries to the sensor
	 *
	 * @param oneBitThreshold Number of counts for the bit in the I2S buffer to be considered a 1 bit
	 */
	DHTSensorType(const char *name, unsigned long minSamplePeriodMs, unsigned long oneBitThreshold) :
			name(name), minSamplePeriodMs(minSamplePeriodMs), oneBitThreshold(oneBitThreshold) {};
   d4c14:	4a04      	ldr	r2, [pc, #16]	; (d4c28 <_ZN18DHTSensorTypeDHT11C1Ev+0x14>)
   d4c16:	6042      	str	r2, [r0, #4]
   d4c18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4c1c:	6082      	str	r2, [r0, #8]
   d4c1e:	2219      	movs	r2, #25
   d4c20:	60c2      	str	r2, [r0, #12]
}

//
// Sensor type decoders
//
DHTSensorTypeDHT11::DHTSensorTypeDHT11() : DHTSensorType("DHT11", 1000, 25) {
   d4c22:	4a02      	ldr	r2, [pc, #8]	; (d4c2c <_ZN18DHTSensorTypeDHT11C1Ev+0x18>)
   d4c24:	6002      	str	r2, [r0, #0]

};
   d4c26:	4770      	bx	lr
   d4c28:	000da300 	.word	0x000da300
   d4c2c:	000da370 	.word	0x000da370

000d4c30 <_ZN18DHTSensorTypeDHT22C1Ev>:
   d4c30:	4a04      	ldr	r2, [pc, #16]	; (d4c44 <_ZN18DHTSensorTypeDHT22C1Ev+0x14>)
   d4c32:	6042      	str	r2, [r0, #4]
   d4c34:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d4c38:	6082      	str	r2, [r0, #8]
   d4c3a:	2219      	movs	r2, #25
   d4c3c:	60c2      	str	r2, [r0, #12]
float DHTSensorTypeDHT11::getHumidity(const DHTSample &sample) const {
	return (float) ((int8_t) sample[0]);
}


DHTSensorTypeDHT22::DHTSensorTypeDHT22() : DHTSensorType("DHT22", 2000, 25) {
   d4c3e:	4a02      	ldr	r2, [pc, #8]	; (d4c48 <_ZN18DHTSensorTypeDHT22C1Ev+0x18>)
   d4c40:	6002      	str	r2, [r0, #0]

};
   d4c42:	4770      	bx	lr
   d4c44:	000da306 	.word	0x000da306
   d4c48:	000da2f0 	.word	0x000da2f0

000d4c4c <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E>:
	result.sampleResult = sampleResult;
	state = State::IDLE_STATE;
	if (completion) {
		completion(result);
	}
}
   d4c4c:	b510      	push	{r4, lr}
   d4c4e:	f001 f90b 	bl	d5e68 <HAL_Pin_Map>
static nrfx_i2s_buffers_t i2sBuffer = {
		.p_rx_buffer = (uint32_t *)sampleBuffer,
		.p_tx_buffer = 0
};

DHTSensorTypeDHT11 DHT22Gen3::sensorTypeDHT11;
   d4c52:	4b0a      	ldr	r3, [pc, #40]	; (d4c7c <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x30>)
   d4c54:	4c0a      	ldr	r4, [pc, #40]	; (d4c80 <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x34>)
   d4c56:	4618      	mov	r0, r3
   d4c58:	f7ff ffdc 	bl	d4c14 <_ZN18DHTSensorTypeDHT11C1Ev>
   d4c5c:	4622      	mov	r2, r4
   d4c5e:	4909      	ldr	r1, [pc, #36]	; (d4c84 <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x38>)
   d4c60:	4618      	mov	r0, r3
   d4c62:	f002 fe1d 	bl	d78a0 <__aeabi_atexit>
DHTSensorTypeDHT22 DHT22Gen3::sensorTypeDHT22;
   d4c66:	4b08      	ldr	r3, [pc, #32]	; (d4c88 <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x3c>)
   d4c68:	4618      	mov	r0, r3
   d4c6a:	f7ff ffe1 	bl	d4c30 <_ZN18DHTSensorTypeDHT22C1Ev>
   d4c6e:	4622      	mov	r2, r4
   d4c70:	4906      	ldr	r1, [pc, #24]	; (d4c8c <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x40>)
   d4c72:	4618      	mov	r0, r3
	result.sampleResult = sampleResult;
	state = State::IDLE_STATE;
	if (completion) {
		completion(result);
	}
}
   d4c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		.p_rx_buffer = (uint32_t *)sampleBuffer,
		.p_tx_buffer = 0
};

DHTSensorTypeDHT11 DHT22Gen3::sensorTypeDHT11;
DHTSensorTypeDHT22 DHT22Gen3::sensorTypeDHT22;
   d4c78:	f002 be12 	b.w	d78a0 <__aeabi_atexit>
   d4c7c:	2003e3cc 	.word	0x2003e3cc
   d4c80:	2003e1c8 	.word	0x2003e1c8
   d4c84:	000d4be3 	.word	0x000d4be3
   d4c88:	2003e3bc 	.word	0x2003e3bc
   d4c8c:	000d4be1 	.word	0x000d4be1

000d4c90 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4c90:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4c92:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4c94:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4c98:	2c02      	cmp	r4, #2
   d4c9a:	d008      	beq.n	d4cae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d4c9c:	2c03      	cmp	r4, #3
   d4c9e:	d00f      	beq.n	d4cc0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4ca0:	2c01      	cmp	r4, #1
   d4ca2:	d170      	bne.n	d4d86 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4ca4:	8904      	ldrh	r4, [r0, #8]
   d4ca6:	3c01      	subs	r4, #1
   d4ca8:	1aa2      	subs	r2, r4, r2
   d4caa:	b212      	sxth	r2, r2
      break;
   d4cac:	e00c      	b.n	d4cc8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4cae:	8944      	ldrh	r4, [r0, #10]
   d4cb0:	3c01      	subs	r4, #1
   d4cb2:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4cb4:	8904      	ldrh	r4, [r0, #8]
   d4cb6:	1ae4      	subs	r4, r4, r3
   d4cb8:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4cba:	b212      	sxth	r2, r2
      x -= (w-1);
   d4cbc:	b209      	sxth	r1, r1
      break;
   d4cbe:	e062      	b.n	d4d86 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d4cc0:	8944      	ldrh	r4, [r0, #10]
   d4cc2:	1ae4      	subs	r4, r4, r3
   d4cc4:	1a61      	subs	r1, r4, r1
   d4cc6:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4cc8:	2a00      	cmp	r2, #0
   d4cca:	db5b      	blt.n	d4d84 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d4ccc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4cd0:	4294      	cmp	r4, r2
   d4cd2:	f340 8090 	ble.w	d4df6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4cd6:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4cd8:	bfbe      	ittt	lt
   d4cda:	185b      	addlt	r3, r3, r1
   d4cdc:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4cde:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4ce0:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4ce4:	18cc      	adds	r4, r1, r3
   d4ce6:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4ce8:	bfc4      	itt	gt
   d4cea:	1a43      	subgt	r3, r0, r1
   d4cec:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4cee:	2b00      	cmp	r3, #0
   d4cf0:	f340 8081 	ble.w	d4df6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4cf4:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4cf6:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4cf8:	4f3f      	ldr	r7, [pc, #252]	; (d4df8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4cfa:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4cfe:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4d02:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4d04:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4d08:	d017      	beq.n	d4d3a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4d0a:	f1c1 0108 	rsb	r1, r1, #8
   d4d0e:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4d10:	493a      	ldr	r1, [pc, #232]	; (d4dfc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4d12:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4d14:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4d16:	bf3f      	itttt	cc
   d4d18:	ebc3 0e00 	rsbcc	lr, r3, r0
   d4d1c:	21ff      	movcc	r1, #255	; 0xff
   d4d1e:	fa41 f10e 	asrcc.w	r1, r1, lr
   d4d22:	400e      	andcc	r6, r1
   d4d24:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d4d26:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4d28:	bf0c      	ite	eq
   d4d2a:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d4d2c:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4d2e:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4d30:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4d32:	d360      	bcc.n	d4df6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d4d34:	1a18      	subs	r0, r3, r0
   d4d36:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d4d38:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4d3a:	2b07      	cmp	r3, #7
   d4d3c:	d917      	bls.n	d4d6e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4d3e:	2d01      	cmp	r5, #1
   d4d40:	bf0c      	ite	eq
   d4d42:	20ff      	moveq	r0, #255	; 0xff
   d4d44:	2000      	movne	r0, #0
   d4d46:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d4d4a:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4d4c:	3a08      	subs	r2, #8
   d4d4e:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4d50:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4d52:	f801 0c80 	strb.w	r0, [r1, #-128]
   d4d56:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4d5a:	d8f7      	bhi.n	d4d4c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d4d5c:	f1a3 0208 	sub.w	r2, r3, #8
   d4d60:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4d64:	3201      	adds	r2, #1
   d4d66:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d4d6a:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4d6e:	2b00      	cmp	r3, #0
   d4d70:	d041      	beq.n	d4df6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4d72:	4a23      	ldr	r2, [pc, #140]	; (d4e00 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d4d74:	5cd2      	ldrb	r2, [r2, r3]
   d4d76:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d4d78:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4d7a:	bf0c      	ite	eq
   d4d7c:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d4d7e:	4393      	bicne	r3, r2
   d4d80:	7023      	strb	r3, [r4, #0]
   d4d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4d86:	2a00      	cmp	r2, #0
   d4d88:	db35      	blt.n	d4df6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4d8a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4d8e:	4294      	cmp	r4, r2
   d4d90:	dd31      	ble.n	d4df6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4d92:	2900      	cmp	r1, #0
    w += x;
   d4d94:	bfbc      	itt	lt
   d4d96:	18c9      	addlt	r1, r1, r3
   d4d98:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4d9a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4d9e:	bfb8      	it	lt
   d4da0:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4da2:	18ce      	adds	r6, r1, r3
   d4da4:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4da6:	bfc4      	itt	gt
   d4da8:	1a63      	subgt	r3, r4, r1
   d4daa:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4dac:	2b00      	cmp	r3, #0
   d4dae:	dd22      	ble.n	d4df6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4db0:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d4db2:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d4db6:	4810      	ldr	r0, [pc, #64]	; (d4df8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d4db8:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4dbc:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d4dbe:	2001      	movs	r0, #1
   d4dc0:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d4dc4:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4dc6:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d4dc8:	d109      	bne.n	d4dde <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d4dca:	3b01      	subs	r3, #1
   d4dcc:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d4dce:	1c5c      	adds	r4, r3, #1
   d4dd0:	d011      	beq.n	d4df6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4dd2:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4dd6:	4310      	orrs	r0, r2
   d4dd8:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4ddc:	e7f5      	b.n	d4dca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d4dde:	43d2      	mvns	r2, r2
   d4de0:	b2d2      	uxtb	r2, r2
   d4de2:	3b01      	subs	r3, #1
   d4de4:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d4de6:	1c58      	adds	r0, r3, #1
   d4de8:	d005      	beq.n	d4df6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4dea:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4dee:	4010      	ands	r0, r2
   d4df0:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4df4:	e7f5      	b.n	d4de2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d4df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4df8:	2003dd24 	.word	0x2003dd24
   d4dfc:	2003dd1c 	.word	0x2003dd1c
   d4e00:	2003dd14 	.word	0x2003dd14

000d4e04 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4e04:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d4e06:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4e08:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d4e0c:	2c02      	cmp	r4, #2
   d4e0e:	d008      	beq.n	d4e22 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d4e10:	2c03      	cmp	r4, #3
   d4e12:	d00f      	beq.n	d4e34 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d4e14:	2c01      	cmp	r4, #1
   d4e16:	d112      	bne.n	d4e3e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d4e18:	8904      	ldrh	r4, [r0, #8]
   d4e1a:	1ae4      	subs	r4, r4, r3
   d4e1c:	1aa2      	subs	r2, r4, r2
   d4e1e:	b212      	sxth	r2, r2
      break;
   d4e20:	e06d      	b.n	d4efe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4e22:	8904      	ldrh	r4, [r0, #8]
   d4e24:	3c01      	subs	r4, #1
   d4e26:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4e28:	8944      	ldrh	r4, [r0, #10]
   d4e2a:	1ae4      	subs	r4, r4, r3
   d4e2c:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4e2e:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4e30:	b212      	sxth	r2, r2
      break;
   d4e32:	e004      	b.n	d4e3e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d4e34:	8944      	ldrh	r4, [r0, #10]
   d4e36:	3c01      	subs	r4, #1
   d4e38:	1a61      	subs	r1, r4, r1
   d4e3a:	b209      	sxth	r1, r1
      break;
   d4e3c:	e05f      	b.n	d4efe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4e3e:	2900      	cmp	r1, #0
   d4e40:	db5c      	blt.n	d4efc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d4e42:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4e46:	428c      	cmp	r4, r1
   d4e48:	f340 8091 	ble.w	d4f6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4e4c:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4e4e:	bfbc      	itt	lt
   d4e50:	18d2      	addlt	r2, r2, r3
   d4e52:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4e54:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d4e58:	bfb8      	it	lt
   d4e5a:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4e5c:	18d4      	adds	r4, r2, r3
   d4e5e:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4e60:	bfc4      	itt	gt
   d4e62:	1a83      	subgt	r3, r0, r2
   d4e64:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4e66:	2b00      	cmp	r3, #0
   d4e68:	f340 8081 	ble.w	d4f6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4e6c:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4e6e:	4e40      	ldr	r6, [pc, #256]	; (d4f70 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4e70:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4e72:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d4e74:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4e78:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4e7c:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4e80:	d017      	beq.n	d4eb2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4e82:	f1c4 0408 	rsb	r4, r4, #8
   d4e86:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4e88:	4c3a      	ldr	r4, [pc, #232]	; (d4f74 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4e8a:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4e8c:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4e8e:	bf3f      	itttt	cc
   d4e90:	ebc2 0e00 	rsbcc	lr, r2, r0
   d4e94:	24ff      	movcc	r4, #255	; 0xff
   d4e96:	fa44 f40e 	asrcc.w	r4, r4, lr
   d4e9a:	4027      	andcc	r7, r4
   d4e9c:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d4e9e:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4ea0:	bf0c      	ite	eq
   d4ea2:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d4ea4:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4ea6:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4ea8:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4eaa:	d360      	bcc.n	d4f6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d4eac:	1a10      	subs	r0, r2, r0
   d4eae:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d4eb0:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4eb2:	2a07      	cmp	r2, #7
   d4eb4:	d917      	bls.n	d4ee6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4eb6:	2d01      	cmp	r5, #1
   d4eb8:	bf0c      	ite	eq
   d4eba:	24ff      	moveq	r4, #255	; 0xff
   d4ebc:	2400      	movne	r4, #0
   d4ebe:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d4ec2:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4ec4:	3908      	subs	r1, #8
   d4ec6:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d4ec8:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4eca:	f800 4c80 	strb.w	r4, [r0, #-128]
   d4ece:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4ed2:	d8f7      	bhi.n	d4ec4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d4ed4:	f1a2 0108 	sub.w	r1, r2, #8
   d4ed8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d4edc:	3101      	adds	r1, #1
   d4ede:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d4ee2:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4ee6:	2a00      	cmp	r2, #0
   d4ee8:	d041      	beq.n	d4f6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4eea:	4923      	ldr	r1, [pc, #140]	; (d4f78 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d4eec:	5c89      	ldrb	r1, [r1, r2]
   d4eee:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d4ef0:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4ef2:	bf0c      	ite	eq
   d4ef4:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d4ef6:	438a      	bicne	r2, r1
   d4ef8:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d4efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4efe:	2900      	cmp	r1, #0
   d4f00:	db35      	blt.n	d4f6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4f02:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4f06:	428c      	cmp	r4, r1
   d4f08:	dd31      	ble.n	d4f6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4f0a:	2a00      	cmp	r2, #0
    w += x;
   d4f0c:	bfbc      	itt	lt
   d4f0e:	18d2      	addlt	r2, r2, r3
   d4f10:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4f12:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4f16:	bfb8      	it	lt
   d4f18:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4f1a:	18d6      	adds	r6, r2, r3
   d4f1c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4f1e:	bfc4      	itt	gt
   d4f20:	1aa3      	subgt	r3, r4, r2
   d4f22:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4f24:	2b00      	cmp	r3, #0
   d4f26:	dd22      	ble.n	d4f6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4f28:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4f2a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d4f2e:	4810      	ldr	r0, [pc, #64]	; (d4f70 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d4f30:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4f34:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d4f36:	2201      	movs	r2, #1
   d4f38:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d4f3c:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4f3e:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d4f40:	d109      	bne.n	d4f56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d4f42:	1e5a      	subs	r2, r3, #1
   d4f44:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d4f46:	1c5c      	adds	r4, r3, #1
   d4f48:	d011      	beq.n	d4f6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4f4e:	430a      	orrs	r2, r1
   d4f50:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4f54:	e7f5      	b.n	d4f42 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d4f56:	43c9      	mvns	r1, r1
   d4f58:	b2c9      	uxtb	r1, r1
   d4f5a:	1e5a      	subs	r2, r3, #1
   d4f5c:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d4f5e:	1c5a      	adds	r2, r3, #1
   d4f60:	d005      	beq.n	d4f6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4f62:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4f66:	400a      	ands	r2, r1
   d4f68:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4f6c:	e7f5      	b.n	d4f5a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d4f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4f70:	2003dd24 	.word	0x2003dd24
   d4f74:	2003dd1c 	.word	0x2003dd1c
   d4f78:	2003dd14 	.word	0x2003dd14

000d4f7c <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4f7e:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4f80:	4606      	mov	r6, r0
   d4f82:	4614      	mov	r4, r2
   d4f84:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4f86:	db3f      	blt.n	d5008 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4f88:	f000 fbb7 	bl	d56fa <_ZN12Adafruit_GFX5widthEv>
   d4f8c:	4285      	cmp	r5, r0
   d4f8e:	da3b      	bge.n	d5008 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4f90:	2c00      	cmp	r4, #0
   d4f92:	db39      	blt.n	d5008 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4f94:	4630      	mov	r0, r6
   d4f96:	f000 fbb3 	bl	d5700 <_ZN12Adafruit_GFX6heightEv>
   d4f9a:	4284      	cmp	r4, r0
   d4f9c:	da34      	bge.n	d5008 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4f9e:	4630      	mov	r0, r6
   d4fa0:	f000 fba9 	bl	d56f6 <_ZN12Adafruit_GFX11getRotationEv>
   d4fa4:	2802      	cmp	r0, #2
   d4fa6:	d127      	bne.n	d4ff8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4fa8:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d4faa:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4fac:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d4fae:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4fb0:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d4fb2:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4fb4:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d4fb6:	b204      	sxth	r4, r0
   d4fb8:	e006      	b.n	d4fc8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4fba:	2801      	cmp	r0, #1
   d4fbc:	d104      	bne.n	d4fc8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d4fbe:	8933      	ldrh	r3, [r6, #8]
   d4fc0:	3b01      	subs	r3, #1
   d4fc2:	1b1b      	subs	r3, r3, r4
   d4fc4:	462c      	mov	r4, r5
   d4fc6:	b21d      	sxth	r5, r3
   d4fc8:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4fca:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4fcc:	fb94 f0f0 	sdiv	r0, r4, r0
   d4fd0:	b200      	sxth	r0, r0
   d4fd2:	4b0e      	ldr	r3, [pc, #56]	; (d500c <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d4fd4:	f004 0207 	and.w	r2, r4, #7
   d4fd8:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4fdc:	d104      	bne.n	d4fe8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4fde:	4097      	lsls	r7, r2
   d4fe0:	5c5a      	ldrb	r2, [r3, r1]
   d4fe2:	4317      	orrs	r7, r2
   d4fe4:	545f      	strb	r7, [r3, r1]
   d4fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d4fe8:	5c58      	ldrb	r0, [r3, r1]
   d4fea:	2701      	movs	r7, #1
   d4fec:	fa07 f202 	lsl.w	r2, r7, r2
   d4ff0:	ea20 0202 	bic.w	r2, r0, r2
   d4ff4:	545a      	strb	r2, [r3, r1]
   d4ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4ff8:	2803      	cmp	r0, #3
   d4ffa:	d1de      	bne.n	d4fba <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d4ffc:	8973      	ldrh	r3, [r6, #10]
   d4ffe:	3b01      	subs	r3, #1
   d5000:	1b5b      	subs	r3, r3, r5
   d5002:	4625      	mov	r5, r4
   d5004:	b21c      	sxth	r4, r3
   d5006:	e7df      	b.n	d4fc8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d5008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d500a:	bf00      	nop
   d500c:	2003dd24 	.word	0x2003dd24

000d5010 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d5010:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d5012:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d5014:	4604      	mov	r4, r0
   d5016:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d5018:	2180      	movs	r1, #128	; 0x80
   d501a:	f000 fa87 	bl	d552c <_ZN12Adafruit_GFXC1Ess>
   d501e:	4b06      	ldr	r3, [pc, #24]	; (d5038 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d5020:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d5022:	23ff      	movs	r3, #255	; 0xff
   d5024:	7763      	strb	r3, [r4, #29]
   d5026:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d502a:	77e3      	strb	r3, [r4, #31]
   d502c:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d502e:	f884 5020 	strb.w	r5, [r4, #32]
}
   d5032:	4620      	mov	r0, r4
   d5034:	bd38      	pop	{r3, r4, r5, pc}
   d5036:	bf00      	nop
   d5038:	000da388 	.word	0x000da388

000d503c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d503c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d5040:	2100      	movs	r1, #0
   d5042:	4801      	ldr	r0, [pc, #4]	; (d5048 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d5044:	f003 bad0 	b.w	d85e8 <memset>
   d5048:	2003dd24 	.word	0x2003dd24

000d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d504c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d504e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d5052:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d5054:	4604      	mov	r4, r0
   d5056:	460d      	mov	r5, r1
  if (sid != -1)
   d5058:	d028      	beq.n	d50ac <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d505a:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d505e:	2101      	movs	r1, #1
   d5060:	b280      	uxth	r0, r0
   d5062:	f002 fb8e 	bl	d7782 <digitalWrite>
    digitalWrite(dc, LOW);
   d5066:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d506a:	2100      	movs	r1, #0
   d506c:	b280      	uxth	r0, r0
   d506e:	f002 fb88 	bl	d7782 <digitalWrite>
    digitalWrite(cs, LOW);
   d5072:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5076:	2100      	movs	r1, #0
   d5078:	b280      	uxth	r0, r0
   d507a:	f002 fb82 	bl	d7782 <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d507e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5082:	b12b      	cbz	r3, d5090 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5084:	f7ff fa20 	bl	d44c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5088:	4629      	mov	r1, r5
   d508a:	f001 fad9 	bl	d6640 <_ZN8SPIClass8transferEh>
   d508e:	e005      	b.n	d509c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d5090:	462b      	mov	r3, r5
   d5092:	2201      	movs	r2, #1
   d5094:	7fa1      	ldrb	r1, [r4, #30]
   d5096:	7f60      	ldrb	r0, [r4, #29]
   d5098:	f002 fb9f 	bl	d77da <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d509c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d50a0:	2101      	movs	r1, #1
   d50a2:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d50a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d50a8:	f002 bb6b 	b.w	d7782 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d50ac:	f002 fbd2 	bl	d7854 <_Z19__fetch_global_Wirev>
   d50b0:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d50b4:	f001 fea9 	bl	d6e0a <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d50b8:	f002 fbcc 	bl	d7854 <_Z19__fetch_global_Wirev>
   d50bc:	6803      	ldr	r3, [r0, #0]
   d50be:	2100      	movs	r1, #0
   d50c0:	689b      	ldr	r3, [r3, #8]
   d50c2:	4798      	blx	r3
    Wire.write(c);
   d50c4:	f002 fbc6 	bl	d7854 <_Z19__fetch_global_Wirev>
   d50c8:	6803      	ldr	r3, [r0, #0]
   d50ca:	4629      	mov	r1, r5
   d50cc:	689b      	ldr	r3, [r3, #8]
   d50ce:	4798      	blx	r3
    Wire.endTransmission();
   d50d0:	f002 fbc0 	bl	d7854 <_Z19__fetch_global_Wirev>
  }
}
   d50d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d50d8:	f001 be9e 	b.w	d6e18 <_ZN7TwoWire15endTransmissionEv>

000d50dc <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d50dc:	b538      	push	{r3, r4, r5, lr}
   d50de:	4604      	mov	r4, r0
   d50e0:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d50e2:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d50e4:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d50e8:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d50ea:	3301      	adds	r3, #1
   d50ec:	d037      	beq.n	d515e <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d50ee:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d50f2:	2101      	movs	r1, #1
   d50f4:	b280      	uxth	r0, r0
   d50f6:	f002 fb33 	bl	d7760 <pinMode>
    pinMode(cs, OUTPUT);
   d50fa:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d50fe:	2101      	movs	r1, #1
   d5100:	b280      	uxth	r0, r0
   d5102:	f002 fb2d 	bl	d7760 <pinMode>
    if (!hwSPI){
   d5106:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d510a:	b95b      	cbnz	r3, d5124 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d510c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5110:	2101      	movs	r1, #1
   d5112:	b280      	uxth	r0, r0
   d5114:	f002 fb24 	bl	d7760 <pinMode>
    	pinMode(sclk, OUTPUT);
   d5118:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d511c:	2101      	movs	r1, #1
   d511e:	b280      	uxth	r0, r0
   d5120:	f002 fb1e 	bl	d7760 <pinMode>
    	}
    if (hwSPI){
   d5124:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5128:	b1eb      	cbz	r3, d5166 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d512a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d512e:	2101      	movs	r1, #1
   d5130:	b280      	uxth	r0, r0
   d5132:	f002 fb26 	bl	d7782 <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d5136:	f7ff f9c7 	bl	d44c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d513a:	2101      	movs	r1, #1
   d513c:	f001 f97f 	bl	d643e <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d5140:	f7ff f9c2 	bl	d44c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5144:	2110      	movs	r1, #16
   d5146:	f001 fa57 	bl	d65f8 <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d514a:	f7ff f9bd 	bl	d44c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d514e:	2100      	movs	r1, #0
   d5150:	f001 f986 	bl	d6460 <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d5154:	f7ff f9b8 	bl	d44c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5158:	f001 f960 	bl	d641c <_ZN8SPIClass5beginEv>
   d515c:	e003      	b.n	d5166 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d515e:	f002 fb79 	bl	d7854 <_Z19__fetch_global_Wirev>
   d5162:	f001 fe17 	bl	d6d94 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d5166:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d516a:	2101      	movs	r1, #1
   d516c:	b280      	uxth	r0, r0
   d516e:	f002 faf7 	bl	d7760 <pinMode>
  digitalWrite(rst, HIGH);
   d5172:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5176:	2101      	movs	r1, #1
   d5178:	b280      	uxth	r0, r0
   d517a:	f002 fb02 	bl	d7782 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d517e:	2001      	movs	r0, #1
   d5180:	f001 fb9c 	bl	d68bc <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d5184:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5188:	2100      	movs	r1, #0
   d518a:	b280      	uxth	r0, r0
   d518c:	f002 faf9 	bl	d7782 <digitalWrite>
  // wait 10ms
  delay(10);
   d5190:	200a      	movs	r0, #10
   d5192:	f001 fb93 	bl	d68bc <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d5196:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d519a:	2101      	movs	r1, #1
   d519c:	b280      	uxth	r0, r0
   d519e:	f002 faf0 	bl	d7782 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d51a2:	4620      	mov	r0, r4
   d51a4:	21ae      	movs	r1, #174	; 0xae
   d51a6:	f7ff ff51 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d51aa:	4620      	mov	r0, r4
   d51ac:	21d5      	movs	r1, #213	; 0xd5
   d51ae:	f7ff ff4d 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d51b2:	4620      	mov	r0, r4
   d51b4:	2180      	movs	r1, #128	; 0x80
   d51b6:	f7ff ff49 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d51ba:	4620      	mov	r0, r4
   d51bc:	21a8      	movs	r1, #168	; 0xa8
   d51be:	f7ff ff45 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d51c2:	4620      	mov	r0, r4
   d51c4:	213f      	movs	r1, #63	; 0x3f
   d51c6:	f7ff ff41 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d51ca:	4620      	mov	r0, r4
   d51cc:	21d3      	movs	r1, #211	; 0xd3
   d51ce:	f7ff ff3d 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d51d2:	4620      	mov	r0, r4
   d51d4:	2100      	movs	r1, #0
   d51d6:	f7ff ff39 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d51da:	4620      	mov	r0, r4
   d51dc:	2140      	movs	r1, #64	; 0x40
   d51de:	f7ff ff35 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d51e2:	218d      	movs	r1, #141	; 0x8d
   d51e4:	4620      	mov	r0, r4
   d51e6:	f7ff ff31 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d51ea:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d51ec:	bf0c      	ite	eq
   d51ee:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d51f0:	2114      	movne	r1, #20
   d51f2:	4620      	mov	r0, r4
   d51f4:	f7ff ff2a 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d51f8:	4620      	mov	r0, r4
   d51fa:	2120      	movs	r1, #32
   d51fc:	f7ff ff26 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d5200:	4620      	mov	r0, r4
   d5202:	2100      	movs	r1, #0
   d5204:	f7ff ff22 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d5208:	4620      	mov	r0, r4
   d520a:	21a1      	movs	r1, #161	; 0xa1
   d520c:	f7ff ff1e 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d5210:	4620      	mov	r0, r4
   d5212:	21c8      	movs	r1, #200	; 0xc8
   d5214:	f7ff ff1a 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d5218:	4620      	mov	r0, r4
   d521a:	21da      	movs	r1, #218	; 0xda
   d521c:	f7ff ff16 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d5220:	4620      	mov	r0, r4
   d5222:	2112      	movs	r1, #18
   d5224:	f7ff ff12 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d5228:	2181      	movs	r1, #129	; 0x81
   d522a:	4620      	mov	r0, r4
   d522c:	f7ff ff0e 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5230:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d5232:	bf0c      	ite	eq
   d5234:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d5236:	21cf      	movne	r1, #207	; 0xcf
   d5238:	4620      	mov	r0, r4
   d523a:	f7ff ff07 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d523e:	21d9      	movs	r1, #217	; 0xd9
   d5240:	4620      	mov	r0, r4
   d5242:	f7ff ff03 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5246:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d5248:	bf0c      	ite	eq
   d524a:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d524c:	21f1      	movne	r1, #241	; 0xf1
   d524e:	4620      	mov	r0, r4
   d5250:	f7ff fefc 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d5254:	4620      	mov	r0, r4
   d5256:	21db      	movs	r1, #219	; 0xdb
   d5258:	f7ff fef8 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d525c:	4620      	mov	r0, r4
   d525e:	2140      	movs	r1, #64	; 0x40
   d5260:	f7ff fef4 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d5264:	4620      	mov	r0, r4
   d5266:	21a4      	movs	r1, #164	; 0xa4
   d5268:	f7ff fef0 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d526c:	4620      	mov	r0, r4
   d526e:	21a6      	movs	r1, #166	; 0xa6
   d5270:	f7ff feec 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5274:	4620      	mov	r0, r4
   d5276:	21af      	movs	r1, #175	; 0xaf
}
   d5278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d527c:	f7ff bee6 	b.w	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d5280 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d5280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d5284:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d5286:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d5288:	f7ff fee0 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d528c:	2100      	movs	r1, #0
   d528e:	4620      	mov	r0, r4
   d5290:	f7ff fedc 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d5294:	217f      	movs	r1, #127	; 0x7f
   d5296:	4620      	mov	r0, r4
   d5298:	f7ff fed8 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d529c:	2122      	movs	r1, #34	; 0x22
   d529e:	4620      	mov	r0, r4
   d52a0:	f7ff fed4 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d52a4:	2100      	movs	r1, #0
   d52a6:	4620      	mov	r0, r4
   d52a8:	f7ff fed0 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d52ac:	2107      	movs	r1, #7
   d52ae:	4620      	mov	r0, r4
   d52b0:	f7ff fecc 	bl	d504c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d52b4:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d52b8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d5378 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d52bc:	3301      	adds	r3, #1
   d52be:	d035      	beq.n	d532c <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d52c0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d52c4:	2101      	movs	r1, #1
   d52c6:	b280      	uxth	r0, r0
   d52c8:	f002 fa5b 	bl	d7782 <digitalWrite>
    digitalWrite(dc, HIGH);
   d52cc:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d52d0:	2101      	movs	r1, #1
   d52d2:	b280      	uxth	r0, r0
   d52d4:	f002 fa55 	bl	d7782 <digitalWrite>
    digitalWrite(cs, LOW);
   d52d8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d52dc:	2100      	movs	r1, #0
   d52de:	b280      	uxth	r0, r0
   d52e0:	f002 fa4f 	bl	d7782 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d52e4:	2001      	movs	r0, #1
   d52e6:	f000 fe4f 	bl	d5f88 <HAL_Delay_Microseconds>
   d52ea:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d52ec:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d52f0:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d52f4:	b12b      	cbz	r3, d5302 <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d52f6:	f7ff f8e7 	bl	d44c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d52fa:	4631      	mov	r1, r6
   d52fc:	f001 f9a0 	bl	d6640 <_ZN8SPIClass8transferEh>
   d5300:	e005      	b.n	d530e <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d5302:	4633      	mov	r3, r6
   d5304:	2201      	movs	r2, #1
   d5306:	7fa1      	ldrb	r1, [r4, #30]
   d5308:	7f60      	ldrb	r0, [r4, #29]
   d530a:	f002 fa66 	bl	d77da <shiftOut>
   d530e:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d5310:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d5314:	d1ea      	bne.n	d52ec <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d5316:	2001      	movs	r0, #1
   d5318:	f000 fe36 	bl	d5f88 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d531c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5320:	2101      	movs	r1, #1
   d5322:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d5324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d5328:	f002 ba2b 	b.w	d7782 <digitalWrite>
   d532c:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d532e:	f002 fa91 	bl	d7854 <_Z19__fetch_global_Wirev>
   d5332:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d5336:	f001 fd68 	bl	d6e0a <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d533a:	f002 fa8b 	bl	d7854 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d533e:	6803      	ldr	r3, [r0, #0]
   d5340:	2140      	movs	r1, #64	; 0x40
   d5342:	689b      	ldr	r3, [r3, #8]
   d5344:	4798      	blx	r3
   d5346:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d5348:	f002 fa84 	bl	d7854 <_Z19__fetch_global_Wirev>
   d534c:	19af      	adds	r7, r5, r6
   d534e:	6803      	ldr	r3, [r0, #0]
   d5350:	b2bf      	uxth	r7, r7
   d5352:	689b      	ldr	r3, [r3, #8]
   d5354:	f818 1007 	ldrb.w	r1, [r8, r7]
   d5358:	3601      	adds	r6, #1
   d535a:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d535c:	2e10      	cmp	r6, #16
   d535e:	d1f3      	bne.n	d5348 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d5360:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d5362:	f002 fa77 	bl	d7854 <_Z19__fetch_global_Wirev>
   d5366:	b2ad      	uxth	r5, r5
   d5368:	f001 fd56 	bl	d6e18 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d536c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d5370:	d1dd      	bne.n	d532e <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d5372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5376:	bf00      	nop
   d5378:	2003dd24 	.word	0x2003dd24

000d537c <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d537c:	f000 bd74 	b.w	d5e68 <HAL_Pin_Map>

000d5380 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5384:	b085      	sub	sp, #20
   d5386:	461e      	mov	r6, r3
   d5388:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d538c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d5390:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d5392:	1a9a      	subs	r2, r3, r2
   d5394:	2a00      	cmp	r2, #0
   d5396:	bfb8      	it	lt
   d5398:	4252      	neglt	r2, r2
   d539a:	9200      	str	r2, [sp, #0]
   d539c:	1a72      	subs	r2, r6, r1
   d539e:	2a00      	cmp	r2, #0
   d53a0:	bfb8      	it	lt
   d53a2:	4252      	neglt	r2, r2
   d53a4:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d53a6:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d53a8:	9a00      	ldr	r2, [sp, #0]
   d53aa:	9901      	ldr	r1, [sp, #4]
   d53ac:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d53ae:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d53b0:	dd05      	ble.n	d53be <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d53b2:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d53b4:	461e      	mov	r6, r3
   d53b6:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d53b8:	4622      	mov	r2, r4
    swap(x0, y0);
   d53ba:	462c      	mov	r4, r5
   d53bc:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d53be:	42b4      	cmp	r4, r6
   d53c0:	dd05      	ble.n	d53ce <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d53c2:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d53c4:	461d      	mov	r5, r3
   d53c6:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d53c8:	4622      	mov	r2, r4
   d53ca:	4634      	mov	r4, r6
   d53cc:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d53ce:	1b5a      	subs	r2, r3, r5
   d53d0:	2a00      	cmp	r2, #0
   d53d2:	bfb8      	it	lt
   d53d4:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d53d6:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d53da:	429d      	cmp	r5, r3
   d53dc:	bfb4      	ite	lt
   d53de:	2301      	movlt	r3, #1
   d53e0:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d53e4:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d53e8:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d53ea:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d53ec:	fa0f f788 	sxth.w	r7, r8
   d53f0:	2202      	movs	r2, #2
   d53f2:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d53f6:	42b4      	cmp	r4, r6
   d53f8:	dc1f      	bgt.n	d543a <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d53fa:	9a01      	ldr	r2, [sp, #4]
   d53fc:	9b00      	ldr	r3, [sp, #0]
   d53fe:	4293      	cmp	r3, r2
   d5400:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d5404:	bfc8      	it	gt
   d5406:	4622      	movgt	r2, r4
   d5408:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d540c:	bfc8      	it	gt
   d540e:	4629      	movgt	r1, r5
   d5410:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d5412:	bfdc      	itt	le
   d5414:	462a      	movle	r2, r5
   d5416:	4621      	movle	r1, r4
   d5418:	4648      	mov	r0, r9
   d541a:	47d8      	blx	fp
    }
    err -= dy;
   d541c:	9b03      	ldr	r3, [sp, #12]
   d541e:	1aff      	subs	r7, r7, r3
   d5420:	b2bb      	uxth	r3, r7
   d5422:	b21f      	sxth	r7, r3
    if (err < 0) {
   d5424:	2f00      	cmp	r7, #0
   d5426:	da05      	bge.n	d5434 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d5428:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d542a:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d542e:	4415      	add	r5, r2
   d5430:	b22d      	sxth	r5, r5
      err += dx;
   d5432:	b23f      	sxth	r7, r7
   d5434:	3401      	adds	r4, #1
   d5436:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d5438:	e7dd      	b.n	d53f6 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d543a:	b005      	add	sp, #20
   d543c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5440 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5440:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5444:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d5448:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d544a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d544e:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5450:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d5452:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5454:	4691      	mov	r9, r2
   d5456:	460d      	mov	r5, r1
   d5458:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d545a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d545c:	6823      	ldr	r3, [r4, #0]
   d545e:	9600      	str	r6, [sp, #0]
   d5460:	f10a 32ff 	add.w	r2, sl, #4294967295
   d5464:	444a      	add	r2, r9
   d5466:	69df      	ldr	r7, [r3, #28]
   d5468:	4629      	mov	r1, r5
   d546a:	4643      	mov	r3, r8
   d546c:	4620      	mov	r0, r4
   d546e:	b212      	sxth	r2, r2
   d5470:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d5472:	6823      	ldr	r3, [r4, #0]
   d5474:	9600      	str	r6, [sp, #0]
   d5476:	699f      	ldr	r7, [r3, #24]
   d5478:	464a      	mov	r2, r9
   d547a:	4653      	mov	r3, sl
   d547c:	4629      	mov	r1, r5
   d547e:	4620      	mov	r0, r4
   d5480:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d5482:	6823      	ldr	r3, [r4, #0]
   d5484:	960a      	str	r6, [sp, #40]	; 0x28
   d5486:	f108 31ff 	add.w	r1, r8, #4294967295
   d548a:	4429      	add	r1, r5
   d548c:	699d      	ldr	r5, [r3, #24]
   d548e:	464a      	mov	r2, r9
   d5490:	4653      	mov	r3, sl
   d5492:	b209      	sxth	r1, r1
   d5494:	4620      	mov	r0, r4
   d5496:	46ac      	mov	ip, r5
}
   d5498:	b002      	add	sp, #8
   d549a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d549e:	4760      	bx	ip

000d54a0 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d54a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d54a2:	3b01      	subs	r3, #1
   d54a4:	4413      	add	r3, r2
   d54a6:	6804      	ldr	r4, [r0, #0]
   d54a8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d54ac:	9501      	str	r5, [sp, #4]
   d54ae:	b21b      	sxth	r3, r3
   d54b0:	9300      	str	r3, [sp, #0]
   d54b2:	6964      	ldr	r4, [r4, #20]
   d54b4:	460b      	mov	r3, r1
   d54b6:	47a0      	blx	r4
}
   d54b8:	b003      	add	sp, #12
   d54ba:	bd30      	pop	{r4, r5, pc}

000d54bc <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d54bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d54be:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d54c2:	6804      	ldr	r4, [r0, #0]
   d54c4:	e88d 0024 	stmia.w	sp, {r2, r5}
   d54c8:	3b01      	subs	r3, #1
   d54ca:	440b      	add	r3, r1
   d54cc:	6964      	ldr	r4, [r4, #20]
   d54ce:	b21b      	sxth	r3, r3
   d54d0:	47a0      	blx	r4
}
   d54d2:	b003      	add	sp, #12
   d54d4:	bd30      	pop	{r4, r5, pc}

000d54d6 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d54d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d54da:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d54de:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d54e2:	4605      	mov	r5, r0
   d54e4:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d54e6:	460c      	mov	r4, r1
   d54e8:	eb01 0a03 	add.w	sl, r1, r3
   d54ec:	4554      	cmp	r4, sl
   d54ee:	da0b      	bge.n	d5508 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d54f0:	682b      	ldr	r3, [r5, #0]
   d54f2:	f8cd 9000 	str.w	r9, [sp]
   d54f6:	699e      	ldr	r6, [r3, #24]
   d54f8:	4621      	mov	r1, r4
   d54fa:	4643      	mov	r3, r8
   d54fc:	463a      	mov	r2, r7
   d54fe:	4628      	mov	r0, r5
   d5500:	3401      	adds	r4, #1
   d5502:	47b0      	blx	r6
   d5504:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d5506:	e7f1      	b.n	d54ec <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d5508:	b002      	add	sp, #8
   d550a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d550e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d550e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d5510:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d5514:	6804      	ldr	r4, [r0, #0]
   d5516:	9101      	str	r1, [sp, #4]
   d5518:	9200      	str	r2, [sp, #0]
   d551a:	2200      	movs	r2, #0
   d551c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5520:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d5522:	4611      	mov	r1, r2
   d5524:	47a0      	blx	r4
}
   d5526:	b002      	add	sp, #8
   d5528:	bd10      	pop	{r4, pc}

000d552a <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d552a:	4770      	bx	lr

000d552c <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d552c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d552e:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5530:	2400      	movs	r4, #0
   d5532:	4d08      	ldr	r5, [pc, #32]	; (d5554 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d5534:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d5536:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d5538:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d553a:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d553e:	2201      	movs	r2, #1
   d5540:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d5542:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d5544:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d5546:	8204      	strh	r4, [r0, #16]
   d5548:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d554a:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d554c:	82c1      	strh	r1, [r0, #22]
   d554e:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d5550:	7682      	strb	r2, [r0, #26]
}
   d5552:	bd30      	pop	{r4, r5, pc}
   d5554:	000da3c0 	.word	0x000da3c0

000d5558 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d555c:	b08f      	sub	sp, #60	; 0x3c
   d555e:	4605      	mov	r5, r0
   d5560:	9106      	str	r1, [sp, #24]
   d5562:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d5566:	9107      	str	r1, [sp, #28]
   d5568:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d556c:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d556e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d5572:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5574:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d5578:	4281      	cmp	r1, r0
   d557a:	dd7c      	ble.n	d5676 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d557c:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d5580:	4291      	cmp	r1, r2
   d5582:	dd78      	ble.n	d5676 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d5584:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d5586:	fb11 0008 	smlabb	r0, r1, r8, r0
   d558a:	2800      	cmp	r0, #0
   d558c:	dd73      	ble.n	d5676 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d558e:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d5592:	2800      	cmp	r0, #0
   d5594:	dd6f      	ble.n	d5676 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d5596:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d559a:	b296      	uxth	r6, r2
   d559c:	930c      	str	r3, [sp, #48]	; 0x30
   d559e:	f106 0308 	add.w	r3, r6, #8
   d55a2:	b29b      	uxth	r3, r3
   d55a4:	9109      	str	r1, [sp, #36]	; 0x24
   d55a6:	2400      	movs	r4, #0
   d55a8:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d55aa:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d55ac:	bf1c      	itt	ne
   d55ae:	4b33      	ldrne	r3, [pc, #204]	; (d567c <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d55b0:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d55b2:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d55b4:	bf16      	itet	ne
   d55b6:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d55b8:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d55bc:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d55c0:	9604      	str	r6, [sp, #16]
   d55c2:	fa1f f388 	uxth.w	r3, r8
   d55c6:	9303      	str	r3, [sp, #12]
   d55c8:	9a03      	ldr	r2, [sp, #12]
   d55ca:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d55ce:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d55d2:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d55d6:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d55d8:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d55da:	920a      	str	r2, [sp, #40]	; 0x28
   d55dc:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d55de:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d55e2:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d55e4:	f019 0f01 	tst.w	r9, #1
   d55e8:	d011      	beq.n	d560e <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d55ea:	f1b8 0f01 	cmp.w	r8, #1
   d55ee:	682b      	ldr	r3, [r5, #0]
   d55f0:	d103      	bne.n	d55fa <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d55f2:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d55f6:	9b07      	ldr	r3, [sp, #28]
   d55f8:	e014      	b.n	d5624 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d55fa:	9a07      	ldr	r2, [sp, #28]
   d55fc:	9201      	str	r2, [sp, #4]
   d55fe:	f8cd a000 	str.w	sl, [sp]
   d5602:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d5606:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d560a:	4653      	mov	r3, sl
   d560c:	e018      	b.n	d5640 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d560e:	9b07      	ldr	r3, [sp, #28]
   d5610:	9a08      	ldr	r2, [sp, #32]
   d5612:	4293      	cmp	r3, r2
   d5614:	d017      	beq.n	d5646 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d5616:	f1b8 0f01 	cmp.w	r8, #1
   d561a:	682b      	ldr	r3, [r5, #0]
   d561c:	d107      	bne.n	d562e <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d561e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5622:	4613      	mov	r3, r2
   d5624:	b23a      	sxth	r2, r7
   d5626:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d5628:	4628      	mov	r0, r5
   d562a:	47d8      	blx	fp
   d562c:	e00b      	b.n	d5646 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d562e:	9a08      	ldr	r2, [sp, #32]
   d5630:	9201      	str	r2, [sp, #4]
   d5632:	f8cd a000 	str.w	sl, [sp]
   d5636:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d563a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d563e:	4653      	mov	r3, sl
   d5640:	990a      	ldr	r1, [sp, #40]	; 0x28
   d5642:	4628      	mov	r0, r5
   d5644:	47d8      	blx	fp
   d5646:	9b04      	ldr	r3, [sp, #16]
   d5648:	9a03      	ldr	r2, [sp, #12]
   d564a:	4413      	add	r3, r2
   d564c:	b29b      	uxth	r3, r3
   d564e:	9304      	str	r3, [sp, #16]
   d5650:	9b05      	ldr	r3, [sp, #20]
   d5652:	4413      	add	r3, r2
   d5654:	b29b      	uxth	r3, r3
   d5656:	3701      	adds	r7, #1
   d5658:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d565a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d565c:	b2bf      	uxth	r7, r7
   d565e:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d5660:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d5664:	d1be      	bne.n	d55e4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d5666:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5668:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d566a:	3401      	adds	r4, #1
   d566c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5670:	b264      	sxtb	r4, r4
   d5672:	9309      	str	r3, [sp, #36]	; 0x24
   d5674:	d199      	bne.n	d55aa <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d5676:	b00f      	add	sp, #60	; 0x3c
   d5678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d567c:	000da3f0 	.word	0x000da3f0

000d5680 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d5680:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d5682:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d5684:	b085      	sub	sp, #20
   d5686:	4604      	mov	r4, r0
   d5688:	460b      	mov	r3, r1

  if (c == '\n') {
   d568a:	d104      	bne.n	d5696 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d568c:	7e02      	ldrb	r2, [r0, #24]
   d568e:	8a43      	ldrh	r3, [r0, #18]
   d5690:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d5694:	e023      	b.n	d56de <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d5696:	290d      	cmp	r1, #13
   d5698:	d024      	beq.n	d56e4 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d569a:	7e05      	ldrb	r5, [r0, #24]
   d569c:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d56a0:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d56a4:	9502      	str	r5, [sp, #8]
   d56a6:	8ac5      	ldrh	r5, [r0, #22]
   d56a8:	9501      	str	r5, [sp, #4]
   d56aa:	8a85      	ldrh	r5, [r0, #20]
   d56ac:	9500      	str	r5, [sp, #0]
   d56ae:	f7ff ff53 	bl	d5558 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d56b2:	7e22      	ldrb	r2, [r4, #24]
   d56b4:	8a23      	ldrh	r3, [r4, #16]
   d56b6:	b291      	uxth	r1, r2
   d56b8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d56bc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d56c0:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d56c2:	b21b      	sxth	r3, r3
   d56c4:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d56c6:	b168      	cbz	r0, d56e4 <_ZN12Adafruit_GFX5writeEh+0x64>
   d56c8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d56cc:	f06f 0505 	mvn.w	r5, #5
   d56d0:	fb05 0202 	mla	r2, r5, r2, r0
   d56d4:	4293      	cmp	r3, r2
   d56d6:	dd05      	ble.n	d56e4 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d56d8:	8a63      	ldrh	r3, [r4, #18]
   d56da:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d56de:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d56e0:	2300      	movs	r3, #0
   d56e2:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d56e4:	2001      	movs	r0, #1
   d56e6:	b005      	add	sp, #20
   d56e8:	bd30      	pop	{r4, r5, pc}

000d56ea <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d56ea:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d56ec:	8242      	strh	r2, [r0, #18]
   d56ee:	4770      	bx	lr

000d56f0 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d56f0:	82c1      	strh	r1, [r0, #22]
   d56f2:	8281      	strh	r1, [r0, #20]
   d56f4:	4770      	bx	lr

000d56f6 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d56f6:	7e40      	ldrb	r0, [r0, #25]
   d56f8:	4770      	bx	lr

000d56fa <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d56fa:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d56fe:	4770      	bx	lr

000d5700 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d5700:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d5704:	4770      	bx	lr

000d5706 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d5706:	f000 bbaf 	b.w	d5e68 <HAL_Pin_Map>

000d570a <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d570a:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d570c:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d5710:	6803      	ldr	r3, [r0, #0]
   d5712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5714:	4798      	blx	r3
}
   d5716:	3000      	adds	r0, #0
   d5718:	bf18      	it	ne
   d571a:	2001      	movne	r0, #1
   d571c:	bd08      	pop	{r3, pc}

000d571e <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d571e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5720:	4606      	mov	r6, r0
   d5722:	460f      	mov	r7, r1
   d5724:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d5726:	b1c4      	cbz	r4, d575a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d5728:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d572c:	6803      	ldr	r3, [r0, #0]
   d572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5730:	4798      	blx	r3
   d5732:	b908      	cbnz	r0, d5738 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d5734:	2000      	movs	r0, #0
   d5736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d5738:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d573c:	2cfa      	cmp	r4, #250	; 0xfa
   d573e:	6803      	ldr	r3, [r0, #0]
   d5740:	4625      	mov	r5, r4
   d5742:	bfa8      	it	ge
   d5744:	25fa      	movge	r5, #250	; 0xfa
   d5746:	68db      	ldr	r3, [r3, #12]
   d5748:	462a      	mov	r2, r5
   d574a:	4639      	mov	r1, r7
   d574c:	4798      	blx	r3
   d574e:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d5750:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d5752:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d5754:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d5756:	d0e6      	beq.n	d5726 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d5758:	e7ec      	b.n	d5734 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d575a:	2001      	movs	r0, #1
}
   d575c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d575e <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d575e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5762:	4606      	mov	r6, r0
   d5764:	4688      	mov	r8, r1
   d5766:	4691      	mov	r9, r2
   d5768:	461f      	mov	r7, r3
   d576a:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d576c:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d576e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5772:	6803      	ldr	r3, [r0, #0]
   d5774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5776:	4798      	blx	r3
   d5778:	b1d0      	cbz	r0, d57b0 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d577a:	2d00      	cmp	r5, #0
   d577c:	db18      	blt.n	d57b0 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d577e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5782:	6803      	ldr	r3, [r0, #0]
   d5784:	691b      	ldr	r3, [r3, #16]
   d5786:	4798      	blx	r3
   d5788:	b160      	cbz	r0, d57a4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d578a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d578e:	6803      	ldr	r3, [r0, #0]
   d5790:	695b      	ldr	r3, [r3, #20]
   d5792:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d5794:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d5798:	3401      	adds	r4, #1
   d579a:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d579c:	454c      	cmp	r4, r9
   d579e:	d007      	beq.n	d57b0 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d57a0:	463d      	mov	r5, r7
   d57a2:	e7ec      	b.n	d577e <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d57a4:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d57a6:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d57a8:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d57aa:	f001 f887 	bl	d68bc <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d57ae:	e7de      	b.n	d576e <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d57b0:	4620      	mov	r0, r4
   d57b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d57b6 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d57b6:	b570      	push	{r4, r5, r6, lr}
   d57b8:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d57ba:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d57be:	2296      	movs	r2, #150	; 0x96
   d57c0:	2100      	movs	r1, #0
   d57c2:	4628      	mov	r0, r5
   d57c4:	f002 ff10 	bl	d85e8 <memset>
  strcpy((char *)buffer, servername);
   d57c8:	6861      	ldr	r1, [r4, #4]
   d57ca:	4628      	mov	r0, r5
   d57cc:	f002 ff3c 	bl	d8648 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d57d0:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d57d4:	8922      	ldrh	r2, [r4, #8]
   d57d6:	6803      	ldr	r3, [r0, #0]
   d57d8:	4629      	mov	r1, r5
   d57da:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d57dc:	2300      	movs	r3, #0
   d57de:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d57e0:	3000      	adds	r0, #0
   d57e2:	bf18      	it	ne
   d57e4:	2001      	movne	r0, #1
   d57e6:	bd70      	pop	{r4, r5, r6, pc}

000d57e8 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d57e8:	b510      	push	{r4, lr}
   d57ea:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d57ec:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d57f0:	6803      	ldr	r3, [r0, #0]
   d57f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d57f4:	4798      	blx	r3
   d57f6:	b120      	cbz	r0, d5802 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d57f8:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d57fc:	6803      	ldr	r3, [r0, #0]
   d57fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5800:	4798      	blx	r3
  }
  return true;
}
   d5802:	2001      	movs	r0, #1
   d5804:	bd10      	pop	{r4, pc}

000d5806 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d5806:	b570      	push	{r4, r5, r6, lr}
    // Stop if already connected.
    if (!connected())
   d5808:	6803      	ldr	r3, [r0, #0]
   d580a:	689b      	ldr	r3, [r3, #8]
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d580c:	4604      	mov	r4, r0
    // Stop if already connected.
    if (!connected())
   d580e:	4798      	blx	r3
   d5810:	b9c8      	cbnz	r0, d5846 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d5812:	4620      	mov	r0, r4
   d5814:	f000 fa97 	bl	d5d46 <_ZN13Adafruit_MQTT7connectEv>
   d5818:	2504      	movs	r5, #4
   d581a:	b170      	cbz	r0, d583a <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d581c:	3d01      	subs	r5, #1
   d581e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5822:	d00a      	beq.n	d583a <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
        { // connect will return 0 for connected
            DEBUG_PRINT(connectErrorString(ret));
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
   d5824:	4620      	mov	r0, r4
   d5826:	f000 f8b7 	bl	d5998 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d582a:	f241 3088 	movw	r0, #5000	; 0x1388
   d582e:	f001 f845 	bl	d68bc <delay>
    if (!connected())
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d5832:	4620      	mov	r0, r4
   d5834:	f000 fa87 	bl	d5d46 <_ZN13Adafruit_MQTT7connectEv>
   d5838:	e7ef      	b.n	d581a <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d583a:	6823      	ldr	r3, [r4, #0]
   d583c:	4620      	mov	r0, r4
   d583e:	689b      	ldr	r3, [r3, #8]
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d5840:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d5844:	4718      	bx	r3
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d5846:	bd70      	pop	{r4, r5, r6, pc}

000d5848 <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d5848:	f000 bb0e 	b.w	d5e68 <HAL_Pin_Map>

000d584c <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d584c:	b570      	push	{r4, r5, r6, lr}
   d584e:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d5850:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d5852:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d5854:	f002 ff00 	bl	d8658 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d5858:	1203      	asrs	r3, r0, #8
   d585a:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d585c:	7060      	strb	r0, [r4, #1]
   d585e:	b285      	uxth	r5, r0
   d5860:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d5862:	462a      	mov	r2, r5
   d5864:	4631      	mov	r1, r6
   d5866:	4620      	mov	r0, r4
   d5868:	f002 ff37 	bl	d86da <strncpy>
  return p+len;
}
   d586c:	1960      	adds	r0, r4, r5
   d586e:	bd70      	pop	{r4, r5, r6, pc}

000d5870 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d5870:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d5872:	6103      	str	r3, [r0, #16]
  password = pass;
   d5874:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d5876:	4d0d      	ldr	r5, [pc, #52]	; (d58ac <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d5878:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d587a:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d587c:	4a0c      	ldr	r2, [pc, #48]	; (d58b0 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d587e:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5880:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d5882:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d5884:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5886:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d588a:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d588e:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d5892:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d5896:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d589a:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d589c:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d589e:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d58a2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d58a6:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d58aa:	bd30      	pop	{r4, r5, pc}
   d58ac:	000da918 	.word	0x000da918
   d58b0:	000da967 	.word	0x000da967

000d58b4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d58b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d58b8:	fa0f fa83 	sxth.w	sl, r3
   d58bc:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d58be:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d58c0:	699d      	ldr	r5, [r3, #24]
   d58c2:	2201      	movs	r2, #1
   d58c4:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d58c6:	4606      	mov	r6, r0
   d58c8:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d58ca:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d58cc:	b2c0      	uxtb	r0, r0
   d58ce:	2801      	cmp	r0, #1
   d58d0:	d001      	beq.n	d58d6 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d58d2:	2000      	movs	r0, #0
   d58d4:	e034      	b.n	d5940 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d58d6:	1c65      	adds	r5, r4, #1
   d58d8:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d58dc:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d58de:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d58e2:	6833      	ldr	r3, [r6, #0]
   d58e4:	699b      	ldr	r3, [r3, #24]
   d58e6:	2201      	movs	r2, #1
   d58e8:	461f      	mov	r7, r3
   d58ea:	4629      	mov	r1, r5
   d58ec:	4653      	mov	r3, sl
   d58ee:	4630      	mov	r0, r6
   d58f0:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d58f2:	b2c0      	uxtb	r0, r0
   d58f4:	2801      	cmp	r0, #1
   d58f6:	d1ec      	bne.n	d58d2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d58f8:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d58fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d5900:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d5902:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d5906:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d590a:	d0e2      	beq.n	d58d2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d590c:	061b      	lsls	r3, r3, #24
   d590e:	d4e8      	bmi.n	d58e2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d5910:	9b01      	ldr	r3, [sp, #4]
   d5912:	1b2c      	subs	r4, r5, r4
   d5914:	1b1b      	subs	r3, r3, r4
   d5916:	3b01      	subs	r3, #1
   d5918:	4599      	cmp	r9, r3
   d591a:	6833      	ldr	r3, [r6, #0]
   d591c:	d906      	bls.n	d592c <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d591e:	9a01      	ldr	r2, [sp, #4]
   d5920:	699f      	ldr	r7, [r3, #24]
   d5922:	3a01      	subs	r2, #1
   d5924:	1b12      	subs	r2, r2, r4
   d5926:	4653      	mov	r3, sl
   d5928:	b292      	uxth	r2, r2
   d592a:	e003      	b.n	d5934 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d592c:	699f      	ldr	r7, [r3, #24]
   d592e:	fa1f f289 	uxth.w	r2, r9
   d5932:	4653      	mov	r3, sl
   d5934:	4629      	mov	r1, r5
   d5936:	4630      	mov	r0, r6
   d5938:	47b8      	blx	r7
   d593a:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d593c:	4420      	add	r0, r4
   d593e:	b280      	uxth	r0, r0
}
   d5940:	b003      	add	sp, #12
   d5942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d5948 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d5948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d594a:	4605      	mov	r5, r0
   d594c:	460c      	mov	r4, r1
   d594e:	4616      	mov	r6, r2
   d5950:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d5952:	463b      	mov	r3, r7
   d5954:	2296      	movs	r2, #150	; 0x96
   d5956:	4621      	mov	r1, r4
   d5958:	4628      	mov	r0, r5
   d595a:	f7ff ffab 	bl	d58b4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d595e:	b148      	cbz	r0, d5974 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d5960:	7823      	ldrb	r3, [r4, #0]
   d5962:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d5966:	d005      	beq.n	d5974 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d5968:	f001 f92e 	bl	d6bc8 <_Z16_fetch_usbserialv>
   d596c:	4902      	ldr	r1, [pc, #8]	; (d5978 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d596e:	f000 ff2e 	bl	d67ce <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d5972:	e7ee      	b.n	d5952 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d5974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5976:	bf00      	nop
   d5978:	000da968 	.word	0x000da968

000d597c <_ZN13Adafruit_MQTT18connectErrorStringEa>:

  return ((pbuff - buffer)+rlen);
}

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   d597c:	3102      	adds	r1, #2
   d597e:	b2c9      	uxtb	r1, r1
   d5980:	2909      	cmp	r1, #9
   d5982:	bf9a      	itte	ls
   d5984:	4b02      	ldrls	r3, [pc, #8]	; (d5990 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   d5986:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   switch (code) {
   d598a:	4802      	ldrhi	r0, [pc, #8]	; (d5994 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   d598c:	4770      	bx	lr
   d598e:	bf00      	nop
   d5990:	000da934 	.word	0x000da934
   d5994:	000da979 	.word	0x000da979

000d5998 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   d5998:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d599a:	23e0      	movs	r3, #224	; 0xe0
   d599c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d59a0:	2300      	movs	r3, #0
   d59a2:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d59a6:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d59a8:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d59aa:	695b      	ldr	r3, [r3, #20]
   d59ac:	2202      	movs	r2, #2
   d59ae:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d59b2:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d59b4:	6823      	ldr	r3, [r4, #0]
   d59b6:	4620      	mov	r0, r4
   d59b8:	691b      	ldr	r3, [r3, #16]

}
   d59ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d59be:	4718      	bx	r3

000d59c0 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:

  return true;

}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   d59c0:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   d59c4:	b530      	push	{r4, r5, lr}
   d59c6:	4613      	mov	r3, r2
   d59c8:	f100 04cc 	add.w	r4, r0, #204	; 0xcc
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
   d59cc:	f853 5f04 	ldr.w	r5, [r3, #4]!
   d59d0:	428d      	cmp	r5, r1
   d59d2:	d00f      	beq.n	d59f4 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d59d4:	42a3      	cmp	r3, r4
   d59d6:	d1f9      	bne.n	d59cc <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   d59d8:	2300      	movs	r3, #0
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
      if (subscriptions[i] == 0) {
   d59da:	f852 4f04 	ldr.w	r4, [r2, #4]!
   d59de:	b924      	cbnz	r4, d59ea <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2a>
        DEBUG_PRINT(F("Added sub ")); DEBUG_PRINTLN(i);
        subscriptions[i] = sub;
   d59e0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   d59e4:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
   d59e8:	e004      	b.n	d59f4 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
   d59ea:	3301      	adds	r3, #1
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d59ec:	2b05      	cmp	r3, #5
   d59ee:	d1f4      	bne.n	d59da <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
      }
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
   d59f0:	2000      	movs	r0, #0
   d59f2:	bd30      	pop	{r4, r5, pc}
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
   d59f4:	2001      	movs	r0, #1
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
}
   d59f6:	bd30      	pop	{r4, r5, pc}

000d59f8 <_ZN13Adafruit_MQTT16readSubscriptionEs>:
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d59f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d59fc:	f100 0922 	add.w	r9, r0, #34	; 0x22
   d5a00:	b28b      	uxth	r3, r1
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d5a02:	b087      	sub	sp, #28
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d5a04:	2296      	movs	r2, #150	; 0x96
   d5a06:	4649      	mov	r1, r9
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d5a08:	4604      	mov	r4, r0
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d5a0a:	f7ff ff53 	bl	d58b4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   d5a0e:	4606      	mov	r6, r0
   d5a10:	b310      	cbz	r0, d5a58 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x60>
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d5a12:	f894 7025 	ldrb.w	r7, [r4, #37]	; 0x25
   d5a16:	b2bb      	uxth	r3, r7
   d5a18:	9301      	str	r3, [sp, #4]
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5a1a:	f104 0326 	add.w	r3, r4, #38	; 0x26
   d5a1e:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d5a22:	2500      	movs	r5, #0
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5a24:	9302      	str	r3, [sp, #8]
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i]) {
   d5a26:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d5a2a:	f1bb 0f00 	cmp.w	fp, #0
   d5a2e:	d00e      	beq.n	d5a4e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
      // Skip this subscription if its name length isn't the same as the
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
   d5a30:	f8db 1000 	ldr.w	r1, [fp]
   d5a34:	9103      	str	r1, [sp, #12]
   d5a36:	4608      	mov	r0, r1
   d5a38:	f002 fe0e 	bl	d8658 <strlen>
   d5a3c:	42b8      	cmp	r0, r7
   d5a3e:	4680      	mov	r8, r0
   d5a40:	9903      	ldr	r1, [sp, #12]
   d5a42:	d104      	bne.n	d5a4e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5a44:	463a      	mov	r2, r7
   d5a46:	9802      	ldr	r0, [sp, #8]
   d5a48:	f002 fe0e 	bl	d8668 <strncasecmp>
   d5a4c:	b128      	cbz	r0, d5a5a <_ZN13Adafruit_MQTT16readSubscriptionEs+0x62>
   d5a4e:	3501      	adds	r5, #1
  // Parse out length of packet.
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5a50:	2d05      	cmp	r5, #5
   d5a52:	d1e8      	bne.n	d5a26 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2e>
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
  if (!len)
    return NULL;  // No data available, just quit.
   d5a54:	2000      	movs	r0, #0
   d5a56:	e04a      	b.n	d5aee <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
   d5a58:	e049      	b.n	d5aee <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
  // Check if it is QoS 1, TODO: we dont support QoS 2
  if ((buffer[0] & 0x6) == 0x2) {
   d5a5a:	f894 a022 	ldrb.w	sl, [r4, #34]	; 0x22
   d5a5e:	f00a 0a06 	and.w	sl, sl, #6
   d5a62:	f1ba 0f02 	cmp.w	sl, #2
   d5a66:	d13f      	bne.n	d5ae8 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf0>
    packet_id_len = 2;
    packetid = buffer[topiclen+4];
   d5a68:	19e2      	adds	r2, r4, r7
   d5a6a:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
    packetid <<= 8;
    packetid |= buffer[topiclen+5];
   d5a6e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   d5a72:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
  }

  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   d5a76:	2214      	movs	r2, #20
   d5a78:	2100      	movs	r1, #0
   d5a7a:	f10b 0005 	add.w	r0, fp, #5
   d5a7e:	f002 fdb3 	bl	d85e8 <memset>

  datalen = len - topiclen - packet_id_len - 4;
   d5a82:	9b01      	ldr	r3, [sp, #4]
   d5a84:	f5c3 407f 	rsb	r0, r3, #65280	; 0xff00
   d5a88:	30fc      	adds	r0, #252	; 0xfc
   d5a8a:	4406      	add	r6, r0
   d5a8c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   d5a90:	ebca 0606 	rsb	r6, sl, r6
   d5a94:	b2b6      	uxth	r6, r6
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d5a96:	2e15      	cmp	r6, #21
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d5a98:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d5a9c:	f108 0104 	add.w	r1, r8, #4
  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);

  datalen = len - topiclen - packet_id_len - 4;
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d5aa0:	bf28      	it	cs
   d5aa2:	2613      	movcs	r6, #19
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d5aa4:	4451      	add	r1, sl
   d5aa6:	4632      	mov	r2, r6
   d5aa8:	4449      	add	r1, r9
   d5aaa:	3005      	adds	r0, #5
   d5aac:	f002 fd81 	bl	d85b2 <memmove>
  subscriptions[i]->datalen = datalen;
   d5ab0:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   d5ab4:	835e      	strh	r6, [r3, #26]
  DEBUG_PRINT(F("Data len: ")); DEBUG_PRINTLN(datalen);
  DEBUG_PRINT(F("Data: ")); DEBUG_PRINTLN((char *)subscriptions[i]->lastread);

  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   d5ab6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5aba:	f003 0306 	and.w	r3, r3, #6
   d5abe:	2b02      	cmp	r3, #2
   d5ac0:	d10f      	bne.n	d5ae2 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xea>
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
   d5ac2:	f88d 3015 	strb.w	r3, [sp, #21]
  packet[2] = packetid >> 8;
   d5ac6:	123b      	asrs	r3, r7, #8
   d5ac8:	f88d 3016 	strb.w	r3, [sp, #22]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d5acc:	6823      	ldr	r3, [r4, #0]

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
  packet[2] = packetid >> 8;
  packet[3] = packetid;
   d5ace:	f88d 7017 	strb.w	r7, [sp, #23]
  DEBUG_PRINTBUFFER(buffer, 2);
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
   d5ad2:	2240      	movs	r2, #64	; 0x40
   d5ad4:	f88d 2014 	strb.w	r2, [sp, #20]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d5ad8:	695b      	ldr	r3, [r3, #20]
   d5ada:	2204      	movs	r2, #4
   d5adc:	a905      	add	r1, sp, #20
   d5ade:	4620      	mov	r0, r4
   d5ae0:	4798      	blx	r3
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
   d5ae2:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d5ae6:	e002      	b.n	d5aee <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
   d5ae8:	4607      	mov	r7, r0
      }
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
   d5aea:	4682      	mov	sl, r0
   d5aec:	e7c3      	b.n	d5a76 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x7e>
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
}
   d5aee:	b007      	add	sp, #28
   d5af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5af4 <_ZN13Adafruit_MQTT4pingEh>:
  // flush input!
  DEBUG_PRINTLN(F("Flushing input buffer"));
  while (readPacket(buffer, MAXBUFFERSIZE, timeout));
}

bool Adafruit_MQTT::ping(uint8_t num) {
   d5af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5af8:	4604      	mov	r4, r0
   d5afa:	460d      	mov	r5, r1
   d5afc:	f04f 0800 	mov.w	r8, #0
  return len;

}

uint8_t Adafruit_MQTT::pingPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d5b00:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  //flushIncoming(100);

  while (num--) {
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d5b04:	f100 0722 	add.w	r7, r0, #34	; 0x22
}

bool Adafruit_MQTT::ping(uint8_t num) {
  //flushIncoming(100);

  while (num--) {
   d5b08:	b1d5      	cbz	r5, d5b40 <_ZN13Adafruit_MQTT4pingEh+0x4c>
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d5b0a:	6823      	ldr	r3, [r4, #0]
  return len;

}

uint8_t Adafruit_MQTT::pingPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d5b0c:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
  packet[1] = 0;
   d5b10:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
  //flushIncoming(100);

  while (num--) {
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d5b14:	695b      	ldr	r3, [r3, #20]
   d5b16:	2202      	movs	r2, #2
   d5b18:	4639      	mov	r1, r7
   d5b1a:	4620      	mov	r0, r4
   d5b1c:	4798      	blx	r3
   d5b1e:	4606      	mov	r6, r0
   d5b20:	b910      	cbnz	r0, d5b28 <_ZN13Adafruit_MQTT4pingEh+0x34>
   d5b22:	3d01      	subs	r5, #1
   d5b24:	b2ed      	uxtb	r5, r5
   d5b26:	e7ef      	b.n	d5b08 <_ZN13Adafruit_MQTT4pingEh+0x14>
      continue;

    // Process ping reply.
    len = processPacketsUntil(buffer, MQTT_CTRL_PINGRESP, PING_TIMEOUT_MS);
   d5b28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5b2c:	220d      	movs	r2, #13
   d5b2e:	4639      	mov	r1, r7
   d5b30:	4620      	mov	r0, r4
   d5b32:	f7ff ff09 	bl	d5948 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
    if (buffer[0] == (MQTT_CTRL_PINGRESP << 4))
   d5b36:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5b3a:	2bd0      	cmp	r3, #208	; 0xd0
   d5b3c:	d1f1      	bne.n	d5b22 <_ZN13Adafruit_MQTT4pingEh+0x2e>
   d5b3e:	e000      	b.n	d5b42 <_ZN13Adafruit_MQTT4pingEh+0x4e>
      return true;
  }

  return false;
   d5b40:	462e      	mov	r6, r5
}
   d5b42:	4630      	mov	r0, r6
   d5b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5b48 <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5b48:	b538      	push	{r3, r4, r5, lr}
   d5b4a:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d5b4c:	4608      	mov	r0, r1
   d5b4e:	2310      	movs	r3, #16
   d5b50:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5b54:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d5b56:	4929      	ldr	r1, [pc, #164]	; (d5bfc <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d5b58:	f7ff fe78 	bl	d584c <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d5b5c:	2304      	movs	r3, #4
   d5b5e:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d5b60:	2302      	movs	r3, #2
   d5b62:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5b64:	69a3      	ldr	r3, [r4, #24]
   d5b66:	b1ab      	cbz	r3, d5b94 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d5b68:	781b      	ldrb	r3, [r3, #0]
   d5b6a:	b19b      	cbz	r3, d5b94 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d5b6c:	2306      	movs	r3, #6
   d5b6e:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d5b70:	f894 3020 	ldrb.w	r3, [r4, #32]
   d5b74:	2b01      	cmp	r3, #1
   d5b76:	d101      	bne.n	d5b7c <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d5b78:	230e      	movs	r3, #14
   d5b7a:	e002      	b.n	d5b82 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d5b7c:	2b02      	cmp	r3, #2
   d5b7e:	d101      	bne.n	d5b84 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d5b80:	231e      	movs	r3, #30
   d5b82:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d5b84:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d5b88:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d5b8a:	bf02      	ittt	eq
   d5b8c:	7843      	ldrbeq	r3, [r0, #1]
   d5b8e:	f043 0320 	orreq.w	r3, r3, #32
   d5b92:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d5b94:	6923      	ldr	r3, [r4, #16]
   d5b96:	781b      	ldrb	r3, [r3, #0]
   d5b98:	b11b      	cbz	r3, d5ba2 <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d5b9a:	7843      	ldrb	r3, [r0, #1]
   d5b9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d5ba0:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d5ba2:	6963      	ldr	r3, [r4, #20]
   d5ba4:	781b      	ldrb	r3, [r3, #0]
   d5ba6:	b11b      	cbz	r3, d5bb0 <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d5ba8:	7843      	ldrb	r3, [r0, #1]
   d5baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d5bae:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d5bb0:	2301      	movs	r3, #1
   d5bb2:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d5bb4:	232c      	movs	r3, #44	; 0x2c
   d5bb6:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d5bb8:	68e1      	ldr	r1, [r4, #12]
   d5bba:	780b      	ldrb	r3, [r1, #0]
   d5bbc:	b11b      	cbz	r3, d5bc6 <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d5bbe:	3004      	adds	r0, #4
   d5bc0:	f7ff fe44 	bl	d584c <_ZL11stringprintPhPKct.constprop.3>
   d5bc4:	e002      	b.n	d5bcc <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d5bc6:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d5bc8:	7143      	strb	r3, [r0, #5]
      p++;
   d5bca:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5bcc:	69a1      	ldr	r1, [r4, #24]
   d5bce:	b131      	cbz	r1, d5bde <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d5bd0:	780b      	ldrb	r3, [r1, #0]
   d5bd2:	b123      	cbz	r3, d5bde <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d5bd4:	f7ff fe3a 	bl	d584c <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d5bd8:	69e1      	ldr	r1, [r4, #28]
   d5bda:	f7ff fe37 	bl	d584c <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d5bde:	6921      	ldr	r1, [r4, #16]
   d5be0:	780b      	ldrb	r3, [r1, #0]
   d5be2:	b10b      	cbz	r3, d5be8 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d5be4:	f7ff fe32 	bl	d584c <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d5be8:	6961      	ldr	r1, [r4, #20]
   d5bea:	780b      	ldrb	r3, [r1, #0]
   d5bec:	b10b      	cbz	r3, d5bf2 <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d5bee:	f7ff fe2d 	bl	d584c <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d5bf2:	1b40      	subs	r0, r0, r5
   d5bf4:	b2c0      	uxtb	r0, r0
   d5bf6:	1e83      	subs	r3, r0, #2
   d5bf8:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5bfa:	bd38      	pop	{r3, r4, r5, pc}
   d5bfc:	000da987 	.word	0x000da987

000d5c00 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5c04:	4605      	mov	r5, r0
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5c06:	4610      	mov	r0, r2
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5c08:	460e      	mov	r6, r1
   d5c0a:	4691      	mov	r9, r2
   d5c0c:	461f      	mov	r7, r3
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5c0e:	f002 fd23 	bl	d8658 <strlen>
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5c12:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   d5c16:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5c1a:	b280      	uxth	r0, r0
  if(qos > 0) { 
   d5c1c:	f1b8 0f00 	cmp.w	r8, #0
   d5c20:	d101      	bne.n	d5c26 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5c22:	1c83      	adds	r3, r0, #2
   d5c24:	e000      	b.n	d5c28 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x28>
  if(qos > 0) { 
    len += 2; // qos packet id
   d5c26:	1d03      	adds	r3, r0, #4
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5c28:	ea4f 0248 	mov.w	r2, r8, lsl #1
   d5c2c:	4630      	mov	r0, r6

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
   d5c2e:	b29b      	uxth	r3, r3
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5c30:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d5c34:	4423      	add	r3, r4

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5c36:	f800 2b01 	strb.w	r2, [r0], #1
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d5c3a:	b29b      	uxth	r3, r3
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
  p++;

  // fill in packet[1] last
  do {
    uint8_t encodedByte = len % 128;
   d5c3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    len /= 128;
    // if there are more data to encode, set the top bit of this byte
    if ( len > 0 ) {
   d5c40:	09db      	lsrs	r3, r3, #7
      encodedByte |= 0x80;
   d5c42:	bf18      	it	ne
   d5c44:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    }
    p[0] = encodedByte;
   d5c48:	f800 2b01 	strb.w	r2, [r0], #1
    p++;
  } while ( len > 0 );
   d5c4c:	2b00      	cmp	r3, #0
   d5c4e:	d1f5      	bne.n	d5c3c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3c>

  // topic comes before packet identifier
  p = stringprint(p, topic);
   d5c50:	4649      	mov	r1, r9
   d5c52:	f7ff fdfb 	bl	d584c <_ZL11stringprintPhPKct.constprop.3>
   d5c56:	4603      	mov	r3, r0

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
   d5c58:	f1b8 0f00 	cmp.w	r8, #0
   d5c5c:	d00c      	beq.n	d5c78 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x78>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d5c5e:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5c62:	0a12      	lsrs	r2, r2, #8
   d5c64:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d5c66:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5c6a:	7042      	strb	r2, [r0, #1]
    p+=2;

    // increment the packet id
    packet_id_counter++;
   d5c6c:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5c70:	3201      	adds	r2, #1

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
    p[0] = (packet_id_counter >> 8) & 0xFF;
    p[1] = packet_id_counter & 0xFF;
    p+=2;
   d5c72:	3302      	adds	r3, #2

    // increment the packet id
    packet_id_counter++;
   d5c74:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  }

  memmove(p, data, bLen);
   d5c78:	4622      	mov	r2, r4
   d5c7a:	4639      	mov	r1, r7
   d5c7c:	4618      	mov	r0, r3
   d5c7e:	f002 fc98 	bl	d85b2 <memmove>
  p+= bLen;
  len = p - packet;
  DEBUG_PRINTLN(F("MQTT publish packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
   d5c82:	4420      	add	r0, r4
   d5c84:	1b80      	subs	r0, r0, r6
}
   d5c86:	b280      	uxth	r0, r0
   d5c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5c8c <_ZN13Adafruit_MQTT7publishEPKcPhth>:

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5c8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5c8e:	f89d 6018 	ldrb.w	r6, [sp, #24]
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5c92:	f100 0522 	add.w	r5, r0, #34	; 0x22

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5c96:	4604      	mov	r4, r0
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5c98:	e88d 0048 	stmia.w	sp, {r3, r6}
   d5c9c:	4613      	mov	r3, r2
   d5c9e:	460a      	mov	r2, r1
   d5ca0:	4629      	mov	r1, r5
   d5ca2:	f7ff ffad 	bl	d5c00 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d5ca6:	6823      	ldr	r3, [r4, #0]
   d5ca8:	4602      	mov	r2, r0
   d5caa:	695b      	ldr	r3, [r3, #20]
   d5cac:	4629      	mov	r1, r5
   d5cae:	4620      	mov	r0, r4
   d5cb0:	4798      	blx	r3
   d5cb2:	b908      	cbnz	r0, d5cb8 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2c>
    return false;
   d5cb4:	2000      	movs	r0, #0
   d5cb6:	e017      	b.n	d5ce8 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>

  // If QOS level is high enough verify the response packet.
  if (qos > 0) {
   d5cb8:	b1b6      	cbz	r6, d5ce8 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d5cba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5cbe:	2296      	movs	r2, #150	; 0x96
   d5cc0:	4629      	mov	r1, r5
   d5cc2:	4620      	mov	r0, r4
   d5cc4:	f7ff fdf6 	bl	d58b4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    DEBUG_PRINT(F("Publish QOS1+ reply:\t"));
    DEBUG_PRINTBUFFER(buffer, len);
    if (len != 4)
   d5cc8:	2804      	cmp	r0, #4
   d5cca:	d1f3      	bne.n	d5cb4 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
      return false;
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d5ccc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5cd0:	111b      	asrs	r3, r3, #4
   d5cd2:	2b04      	cmp	r3, #4
   d5cd4:	d1ee      	bne.n	d5cb4 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
   d5cd6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    packnum <<= 8;
    packnum |= buffer[3];

    // we increment the packet_id_counter right after publishing so inc here too to match
    packnum++;
    if (packnum != packet_id_counter)
   d5cd8:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d5cdc:	ba5b      	rev16	r3, r3
   d5cde:	3301      	adds	r3, #1
   d5ce0:	b29b      	uxth	r3, r3
   d5ce2:	1ac3      	subs	r3, r0, r3
   d5ce4:	4258      	negs	r0, r3
   d5ce6:	4158      	adcs	r0, r3
      return false;
  }

  return true;
}
   d5ce8:	b002      	add	sp, #8
   d5cea:	bd70      	pop	{r4, r5, r6, pc}

000d5cec <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5cee:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5cf0:	4610      	mov	r0, r2
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5cf2:	461f      	mov	r7, r3
   d5cf4:	460e      	mov	r6, r1
   d5cf6:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5cf8:	f002 fcae 	bl	d8658 <strlen>
   d5cfc:	9700      	str	r7, [sp, #0]
   d5cfe:	b283      	uxth	r3, r0
   d5d00:	4622      	mov	r2, r4
   d5d02:	4631      	mov	r1, r6
   d5d04:	4628      	mov	r0, r5
   d5d06:	f7ff ffc1 	bl	d5c8c <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d5d0a:	b003      	add	sp, #12
   d5d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5d0e <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5d0e:	b538      	push	{r3, r4, r5, lr}
   d5d10:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d5d12:	2382      	movs	r3, #130	; 0x82
   d5d14:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5d16:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d5d18:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5d1c:	0a09      	lsrs	r1, r1, #8
   d5d1e:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d5d20:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d5d24:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d5d26:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5d2a:	3101      	adds	r1, #1
   d5d2c:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d5d30:	4611      	mov	r1, r2
   d5d32:	1d20      	adds	r0, r4, #4
   d5d34:	f7ff fd8a 	bl	d584c <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d5d38:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d5d3c:	1b00      	subs	r0, r0, r4
   d5d3e:	b2c0      	uxtb	r0, r0
   d5d40:	1e83      	subs	r3, r0, #2
   d5d42:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5d44:	bd38      	pop	{r3, r4, r5, pc}

000d5d46 <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d5d4a:	6803      	ldr	r3, [r0, #0]
   d5d4c:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5d4e:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d5d50:	4798      	blx	r3
   d5d52:	b918      	cbnz	r0, d5d5c <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d5d54:	f04f 30ff 	mov.w	r0, #4294967295
   d5d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d5d5c:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d5d60:	4629      	mov	r1, r5
   d5d62:	4620      	mov	r0, r4
   d5d64:	f7ff fef0 	bl	d5b48 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d5d68:	6823      	ldr	r3, [r4, #0]
   d5d6a:	b282      	uxth	r2, r0
   d5d6c:	695b      	ldr	r3, [r3, #20]
   d5d6e:	4629      	mov	r1, r5
   d5d70:	4620      	mov	r0, r4
   d5d72:	4798      	blx	r3
   d5d74:	2800      	cmp	r0, #0
   d5d76:	d0ed      	beq.n	d5d54 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d5d78:	f241 7370 	movw	r3, #6000	; 0x1770
   d5d7c:	2296      	movs	r2, #150	; 0x96
   d5d7e:	4629      	mov	r1, r5
   d5d80:	4620      	mov	r0, r4
   d5d82:	f7ff fd97 	bl	d58b4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d5d86:	b2c0      	uxtb	r0, r0
   d5d88:	2804      	cmp	r0, #4
   d5d8a:	d1e3      	bne.n	d5d54 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d5d8c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5d8e:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d5d92:	d1df      	bne.n	d5d54 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d5d94:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d5d98:	b110      	cbz	r0, d5da0 <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d5d9a:	b240      	sxtb	r0, r0
   d5d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5da0:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d5da4:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d5da8:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d5dac:	b1fb      	cbz	r3, d5dee <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5dae:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d5db0:	683a      	ldr	r2, [r7, #0]
   d5db2:	4629      	mov	r1, r5
   d5db4:	7913      	ldrb	r3, [r2, #4]
   d5db6:	6812      	ldr	r2, [r2, #0]
   d5db8:	4620      	mov	r0, r4
   d5dba:	f7ff ffa8 	bl	d5d0e <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d5dbe:	6823      	ldr	r3, [r4, #0]
   d5dc0:	b282      	uxth	r2, r0
   d5dc2:	695b      	ldr	r3, [r3, #20]
   d5dc4:	4629      	mov	r1, r5
   d5dc6:	4620      	mov	r0, r4
   d5dc8:	4798      	blx	r3
   d5dca:	2800      	cmp	r0, #0
   d5dcc:	d0c2      	beq.n	d5d54 <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d5dce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5dd2:	2209      	movs	r2, #9
   d5dd4:	4629      	mov	r1, r5
   d5dd6:	4620      	mov	r0, r4
   d5dd8:	f7ff fdb6 	bl	d5948 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d5ddc:	b938      	cbnz	r0, d5dee <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5dde:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d5de0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d5de4:	d1e4      	bne.n	d5db0 <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d5de6:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d5dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5dee:	4547      	cmp	r7, r8
   d5df0:	d1da      	bne.n	d5da8 <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d5df2:	2000      	movs	r0, #0
   d5df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5df8 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d5df8:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d5dfa:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d5dfe:	7203      	strb	r3, [r0, #8]
}
   d5e00:	bd10      	pop	{r4, pc}

000d5e02 <_ZN21Adafruit_MQTT_Publish7publishEl>:
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d5e02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5e04:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   d5e06:	220a      	movs	r2, #10
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d5e08:	4608      	mov	r0, r1
  char payload[12];
  ltoa(i, payload, 10);
   d5e0a:	a901      	add	r1, sp, #4
   d5e0c:	f000 fc4a 	bl	d66a4 <ltoa>
  return mqtt->publish(topic, payload, qos);
   d5e10:	7a23      	ldrb	r3, [r4, #8]
   d5e12:	aa01      	add	r2, sp, #4
   d5e14:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5e18:	f7ff ff68 	bl	d5cec <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d5e1c:	b004      	add	sp, #16
   d5e1e:	bd10      	pop	{r4, pc}

000d5e20 <_ZN21Adafruit_MQTT_Publish7publishEi>:
   d5e20:	f7ff bfef 	b.w	d5e02 <_ZN21Adafruit_MQTT_Publish7publishEl>

000d5e24 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d5e24:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d5e26:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d5e28:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d5e2a:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d5e2c:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d5e2e:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d5e30:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d5e32:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d5e34:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d5e36:	6283      	str	r3, [r0, #40]	; 0x28
   d5e38:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d5e3a:	6303      	str	r3, [r0, #48]	; 0x30
}
   d5e3c:	bd10      	pop	{r4, pc}

000d5e3e <_GLOBAL__sub_I__Z11printBufferPht>:
   d5e3e:	f000 b813 	b.w	d5e68 <HAL_Pin_Map>

000d5e42 <_GLOBAL__sub_I__ZN5TWISTC2Ev>:
   d5e42:	f000 b811 	b.w	d5e68 <HAL_Pin_Map>
	...

000d5e48 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5e48:	b508      	push	{r3, lr}
   d5e4a:	4b02      	ldr	r3, [pc, #8]	; (d5e54 <netdb_freeaddrinfo+0xc>)
   d5e4c:	681b      	ldr	r3, [r3, #0]
   d5e4e:	689b      	ldr	r3, [r3, #8]
   d5e50:	9301      	str	r3, [sp, #4]
   d5e52:	bd08      	pop	{r3, pc}
   d5e54:	00030268 	.word	0x00030268

000d5e58 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5e58:	b508      	push	{r3, lr}
   d5e5a:	4b02      	ldr	r3, [pc, #8]	; (d5e64 <netdb_getaddrinfo+0xc>)
   d5e5c:	681b      	ldr	r3, [r3, #0]
   d5e5e:	68db      	ldr	r3, [r3, #12]
   d5e60:	9301      	str	r3, [sp, #4]
   d5e62:	bd08      	pop	{r3, pc}
   d5e64:	00030268 	.word	0x00030268

000d5e68 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5e68:	b508      	push	{r3, lr}
   d5e6a:	4b02      	ldr	r3, [pc, #8]	; (d5e74 <HAL_Pin_Map+0xc>)
   d5e6c:	681b      	ldr	r3, [r3, #0]
   d5e6e:	681b      	ldr	r3, [r3, #0]
   d5e70:	9301      	str	r3, [sp, #4]
   d5e72:	bd08      	pop	{r3, pc}
   d5e74:	0003022c 	.word	0x0003022c

000d5e78 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5e78:	b508      	push	{r3, lr}
   d5e7a:	4b02      	ldr	r3, [pc, #8]	; (d5e84 <HAL_Pin_Mode+0xc>)
   d5e7c:	681b      	ldr	r3, [r3, #0]
   d5e7e:	689b      	ldr	r3, [r3, #8]
   d5e80:	9301      	str	r3, [sp, #4]
   d5e82:	bd08      	pop	{r3, pc}
   d5e84:	0003022c 	.word	0x0003022c

000d5e88 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5e88:	b508      	push	{r3, lr}
   d5e8a:	4b02      	ldr	r3, [pc, #8]	; (d5e94 <HAL_Get_Pin_Mode+0xc>)
   d5e8c:	681b      	ldr	r3, [r3, #0]
   d5e8e:	68db      	ldr	r3, [r3, #12]
   d5e90:	9301      	str	r3, [sp, #4]
   d5e92:	bd08      	pop	{r3, pc}
   d5e94:	0003022c 	.word	0x0003022c

000d5e98 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5e98:	b508      	push	{r3, lr}
   d5e9a:	4b02      	ldr	r3, [pc, #8]	; (d5ea4 <HAL_GPIO_Write+0xc>)
   d5e9c:	681b      	ldr	r3, [r3, #0]
   d5e9e:	691b      	ldr	r3, [r3, #16]
   d5ea0:	9301      	str	r3, [sp, #4]
   d5ea2:	bd08      	pop	{r3, pc}
   d5ea4:	0003022c 	.word	0x0003022c

000d5ea8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5ea8:	b508      	push	{r3, lr}
   d5eaa:	4b02      	ldr	r3, [pc, #8]	; (d5eb4 <HAL_GPIO_Read+0xc>)
   d5eac:	681b      	ldr	r3, [r3, #0]
   d5eae:	695b      	ldr	r3, [r3, #20]
   d5eb0:	9301      	str	r3, [sp, #4]
   d5eb2:	bd08      	pop	{r3, pc}
   d5eb4:	0003022c 	.word	0x0003022c

000d5eb8 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5eb8:	b508      	push	{r3, lr}
   d5eba:	4b02      	ldr	r3, [pc, #8]	; (d5ec4 <HAL_SPI_Begin+0xc>)
   d5ebc:	681b      	ldr	r3, [r3, #0]
   d5ebe:	681b      	ldr	r3, [r3, #0]
   d5ec0:	9301      	str	r3, [sp, #4]
   d5ec2:	bd08      	pop	{r3, pc}
   d5ec4:	00030230 	.word	0x00030230

000d5ec8 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d5ec8:	b508      	push	{r3, lr}
   d5eca:	4b02      	ldr	r3, [pc, #8]	; (d5ed4 <HAL_SPI_Set_Bit_Order+0xc>)
   d5ecc:	681b      	ldr	r3, [r3, #0]
   d5ece:	689b      	ldr	r3, [r3, #8]
   d5ed0:	9301      	str	r3, [sp, #4]
   d5ed2:	bd08      	pop	{r3, pc}
   d5ed4:	00030230 	.word	0x00030230

000d5ed8 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d5ed8:	b508      	push	{r3, lr}
   d5eda:	4b02      	ldr	r3, [pc, #8]	; (d5ee4 <HAL_SPI_Set_Data_Mode+0xc>)
   d5edc:	681b      	ldr	r3, [r3, #0]
   d5ede:	68db      	ldr	r3, [r3, #12]
   d5ee0:	9301      	str	r3, [sp, #4]
   d5ee2:	bd08      	pop	{r3, pc}
   d5ee4:	00030230 	.word	0x00030230

000d5ee8 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d5ee8:	b508      	push	{r3, lr}
   d5eea:	4b02      	ldr	r3, [pc, #8]	; (d5ef4 <HAL_SPI_Set_Clock_Divider+0xc>)
   d5eec:	681b      	ldr	r3, [r3, #0]
   d5eee:	691b      	ldr	r3, [r3, #16]
   d5ef0:	9301      	str	r3, [sp, #4]
   d5ef2:	bd08      	pop	{r3, pc}
   d5ef4:	00030230 	.word	0x00030230

000d5ef8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5ef8:	b508      	push	{r3, lr}
   d5efa:	4b02      	ldr	r3, [pc, #8]	; (d5f04 <HAL_SPI_Send_Receive_Data+0xc>)
   d5efc:	681b      	ldr	r3, [r3, #0]
   d5efe:	695b      	ldr	r3, [r3, #20]
   d5f00:	9301      	str	r3, [sp, #4]
   d5f02:	bd08      	pop	{r3, pc}
   d5f04:	00030230 	.word	0x00030230

000d5f08 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5f08:	b508      	push	{r3, lr}
   d5f0a:	4b02      	ldr	r3, [pc, #8]	; (d5f14 <HAL_SPI_Init+0xc>)
   d5f0c:	681b      	ldr	r3, [r3, #0]
   d5f0e:	69db      	ldr	r3, [r3, #28]
   d5f10:	9301      	str	r3, [sp, #4]
   d5f12:	bd08      	pop	{r3, pc}
   d5f14:	00030230 	.word	0x00030230

000d5f18 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5f18:	b508      	push	{r3, lr}
   d5f1a:	4b02      	ldr	r3, [pc, #8]	; (d5f24 <HAL_SPI_Is_Enabled+0xc>)
   d5f1c:	681b      	ldr	r3, [r3, #0]
   d5f1e:	6a1b      	ldr	r3, [r3, #32]
   d5f20:	9301      	str	r3, [sp, #4]
   d5f22:	bd08      	pop	{r3, pc}
   d5f24:	00030230 	.word	0x00030230

000d5f28 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5f28:	b508      	push	{r3, lr}
   d5f2a:	4b02      	ldr	r3, [pc, #8]	; (d5f34 <HAL_SPI_Info+0xc>)
   d5f2c:	681b      	ldr	r3, [r3, #0]
   d5f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5f30:	9301      	str	r3, [sp, #4]
   d5f32:	bd08      	pop	{r3, pc}
   d5f34:	00030230 	.word	0x00030230

000d5f38 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5f38:	b508      	push	{r3, lr}
   d5f3a:	4b02      	ldr	r3, [pc, #8]	; (d5f44 <HAL_SPI_Set_Settings+0xc>)
   d5f3c:	681b      	ldr	r3, [r3, #0]
   d5f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5f40:	9301      	str	r3, [sp, #4]
   d5f42:	bd08      	pop	{r3, pc}
   d5f44:	00030230 	.word	0x00030230

000d5f48 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5f48:	b508      	push	{r3, lr}
   d5f4a:	4b02      	ldr	r3, [pc, #8]	; (d5f54 <HAL_SPI_Acquire+0xc>)
   d5f4c:	681b      	ldr	r3, [r3, #0]
   d5f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5f50:	9301      	str	r3, [sp, #4]
   d5f52:	bd08      	pop	{r3, pc}
   d5f54:	00030230 	.word	0x00030230

000d5f58 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5f58:	b508      	push	{r3, lr}
   d5f5a:	4b02      	ldr	r3, [pc, #8]	; (d5f64 <HAL_SPI_Release+0xc>)
   d5f5c:	681b      	ldr	r3, [r3, #0]
   d5f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5f60:	9301      	str	r3, [sp, #4]
   d5f62:	bd08      	pop	{r3, pc}
   d5f64:	00030230 	.word	0x00030230

000d5f68 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5f68:	b508      	push	{r3, lr}
   d5f6a:	4b02      	ldr	r3, [pc, #8]	; (d5f74 <if_index_to_name+0xc>)
   d5f6c:	681b      	ldr	r3, [r3, #0]
   d5f6e:	695b      	ldr	r3, [r3, #20]
   d5f70:	9301      	str	r3, [sp, #4]
   d5f72:	bd08      	pop	{r3, pc}
   d5f74:	0003026c 	.word	0x0003026c

000d5f78 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5f78:	b508      	push	{r3, lr}
   d5f7a:	4b02      	ldr	r3, [pc, #8]	; (d5f84 <HAL_RNG_GetRandomNumber+0xc>)
   d5f7c:	681b      	ldr	r3, [r3, #0]
   d5f7e:	685b      	ldr	r3, [r3, #4]
   d5f80:	9301      	str	r3, [sp, #4]
   d5f82:	bd08      	pop	{r3, pc}
   d5f84:	00030218 	.word	0x00030218

000d5f88 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5f88:	b508      	push	{r3, lr}
   d5f8a:	4b02      	ldr	r3, [pc, #8]	; (d5f94 <HAL_Delay_Microseconds+0xc>)
   d5f8c:	681b      	ldr	r3, [r3, #0]
   d5f8e:	68db      	ldr	r3, [r3, #12]
   d5f90:	9301      	str	r3, [sp, #4]
   d5f92:	bd08      	pop	{r3, pc}
   d5f94:	00030218 	.word	0x00030218

000d5f98 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5f98:	b508      	push	{r3, lr}
   d5f9a:	4b02      	ldr	r3, [pc, #8]	; (d5fa4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5f9c:	681b      	ldr	r3, [r3, #0]
   d5f9e:	695b      	ldr	r3, [r3, #20]
   d5fa0:	9301      	str	r3, [sp, #4]
   d5fa2:	bd08      	pop	{r3, pc}
   d5fa4:	00030218 	.word	0x00030218

000d5fa8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5fa8:	b508      	push	{r3, lr}
   d5faa:	4b02      	ldr	r3, [pc, #8]	; (d5fb4 <os_thread_is_current+0xc>)
   d5fac:	681b      	ldr	r3, [r3, #0]
   d5fae:	689b      	ldr	r3, [r3, #8]
   d5fb0:	9301      	str	r3, [sp, #4]
   d5fb2:	bd08      	pop	{r3, pc}
   d5fb4:	00030248 	.word	0x00030248

000d5fb8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5fb8:	b508      	push	{r3, lr}
   d5fba:	4b02      	ldr	r3, [pc, #8]	; (d5fc4 <os_thread_join+0xc>)
   d5fbc:	681b      	ldr	r3, [r3, #0]
   d5fbe:	691b      	ldr	r3, [r3, #16]
   d5fc0:	9301      	str	r3, [sp, #4]
   d5fc2:	bd08      	pop	{r3, pc}
   d5fc4:	00030248 	.word	0x00030248

000d5fc8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5fc8:	b508      	push	{r3, lr}
   d5fca:	4b02      	ldr	r3, [pc, #8]	; (d5fd4 <os_thread_cleanup+0xc>)
   d5fcc:	681b      	ldr	r3, [r3, #0]
   d5fce:	695b      	ldr	r3, [r3, #20]
   d5fd0:	9301      	str	r3, [sp, #4]
   d5fd2:	bd08      	pop	{r3, pc}
   d5fd4:	00030248 	.word	0x00030248

000d5fd8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5fd8:	b508      	push	{r3, lr}
   d5fda:	4b02      	ldr	r3, [pc, #8]	; (d5fe4 <os_mutex_recursive_create+0xc>)
   d5fdc:	681b      	ldr	r3, [r3, #0]
   d5fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5fe0:	9301      	str	r3, [sp, #4]
   d5fe2:	bd08      	pop	{r3, pc}
   d5fe4:	00030248 	.word	0x00030248

000d5fe8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5fe8:	b508      	push	{r3, lr}
   d5fea:	4b02      	ldr	r3, [pc, #8]	; (d5ff4 <os_mutex_recursive_destroy+0xc>)
   d5fec:	681b      	ldr	r3, [r3, #0]
   d5fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5ff0:	9301      	str	r3, [sp, #4]
   d5ff2:	bd08      	pop	{r3, pc}
   d5ff4:	00030248 	.word	0x00030248

000d5ff8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5ff8:	b508      	push	{r3, lr}
   d5ffa:	4b02      	ldr	r3, [pc, #8]	; (d6004 <inet_inet_ntop+0xc>)
   d5ffc:	681b      	ldr	r3, [r3, #0]
   d5ffe:	695b      	ldr	r3, [r3, #20]
   d6000:	9301      	str	r3, [sp, #4]
   d6002:	bd08      	pop	{r3, pc}
   d6004:	00030264 	.word	0x00030264

000d6008 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6008:	b508      	push	{r3, lr}
   d600a:	4b02      	ldr	r3, [pc, #8]	; (d6014 <inet_htonl+0xc>)
   d600c:	681b      	ldr	r3, [r3, #0]
   d600e:	6a1b      	ldr	r3, [r3, #32]
   d6010:	9301      	str	r3, [sp, #4]
   d6012:	bd08      	pop	{r3, pc}
   d6014:	00030264 	.word	0x00030264

000d6018 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6018:	b508      	push	{r3, lr}
   d601a:	4b02      	ldr	r3, [pc, #8]	; (d6024 <inet_htons+0xc>)
   d601c:	681b      	ldr	r3, [r3, #0]
   d601e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6020:	9301      	str	r3, [sp, #4]
   d6022:	bd08      	pop	{r3, pc}
   d6024:	00030264 	.word	0x00030264

000d6028 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6028:	b508      	push	{r3, lr}
   d602a:	4b02      	ldr	r3, [pc, #8]	; (d6034 <HAL_USART_Init+0xc>)
   d602c:	681b      	ldr	r3, [r3, #0]
   d602e:	681b      	ldr	r3, [r3, #0]
   d6030:	9301      	str	r3, [sp, #4]
   d6032:	bd08      	pop	{r3, pc}
   d6034:	0003023c 	.word	0x0003023c

000d6038 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6038:	b508      	push	{r3, lr}
   d603a:	4b02      	ldr	r3, [pc, #8]	; (d6044 <HAL_USART_Write_Data+0xc>)
   d603c:	681b      	ldr	r3, [r3, #0]
   d603e:	68db      	ldr	r3, [r3, #12]
   d6040:	9301      	str	r3, [sp, #4]
   d6042:	bd08      	pop	{r3, pc}
   d6044:	0003023c 	.word	0x0003023c

000d6048 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6048:	b508      	push	{r3, lr}
   d604a:	4b02      	ldr	r3, [pc, #8]	; (d6054 <HAL_USART_Available_Data+0xc>)
   d604c:	681b      	ldr	r3, [r3, #0]
   d604e:	691b      	ldr	r3, [r3, #16]
   d6050:	9301      	str	r3, [sp, #4]
   d6052:	bd08      	pop	{r3, pc}
   d6054:	0003023c 	.word	0x0003023c

000d6058 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6058:	b508      	push	{r3, lr}
   d605a:	4b02      	ldr	r3, [pc, #8]	; (d6064 <HAL_USART_Read_Data+0xc>)
   d605c:	681b      	ldr	r3, [r3, #0]
   d605e:	695b      	ldr	r3, [r3, #20]
   d6060:	9301      	str	r3, [sp, #4]
   d6062:	bd08      	pop	{r3, pc}
   d6064:	0003023c 	.word	0x0003023c

000d6068 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6068:	b508      	push	{r3, lr}
   d606a:	4b02      	ldr	r3, [pc, #8]	; (d6074 <HAL_USART_Peek_Data+0xc>)
   d606c:	681b      	ldr	r3, [r3, #0]
   d606e:	699b      	ldr	r3, [r3, #24]
   d6070:	9301      	str	r3, [sp, #4]
   d6072:	bd08      	pop	{r3, pc}
   d6074:	0003023c 	.word	0x0003023c

000d6078 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6078:	b508      	push	{r3, lr}
   d607a:	4b02      	ldr	r3, [pc, #8]	; (d6084 <HAL_USART_Flush_Data+0xc>)
   d607c:	681b      	ldr	r3, [r3, #0]
   d607e:	69db      	ldr	r3, [r3, #28]
   d6080:	9301      	str	r3, [sp, #4]
   d6082:	bd08      	pop	{r3, pc}
   d6084:	0003023c 	.word	0x0003023c

000d6088 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6088:	b508      	push	{r3, lr}
   d608a:	4b02      	ldr	r3, [pc, #8]	; (d6094 <HAL_USART_Is_Enabled+0xc>)
   d608c:	681b      	ldr	r3, [r3, #0]
   d608e:	6a1b      	ldr	r3, [r3, #32]
   d6090:	9301      	str	r3, [sp, #4]
   d6092:	bd08      	pop	{r3, pc}
   d6094:	0003023c 	.word	0x0003023c

000d6098 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6098:	b508      	push	{r3, lr}
   d609a:	4b02      	ldr	r3, [pc, #8]	; (d60a4 <HAL_USART_Available_Data_For_Write+0xc>)
   d609c:	681b      	ldr	r3, [r3, #0]
   d609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d60a0:	9301      	str	r3, [sp, #4]
   d60a2:	bd08      	pop	{r3, pc}
   d60a4:	0003023c 	.word	0x0003023c

000d60a8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d60a8:	b508      	push	{r3, lr}
   d60aa:	4b02      	ldr	r3, [pc, #8]	; (d60b4 <HAL_I2C_Begin+0xc>)
   d60ac:	681b      	ldr	r3, [r3, #0]
   d60ae:	68db      	ldr	r3, [r3, #12]
   d60b0:	9301      	str	r3, [sp, #4]
   d60b2:	bd08      	pop	{r3, pc}
   d60b4:	00030228 	.word	0x00030228

000d60b8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d60b8:	b508      	push	{r3, lr}
   d60ba:	4b02      	ldr	r3, [pc, #8]	; (d60c4 <HAL_I2C_Begin_Transmission+0xc>)
   d60bc:	681b      	ldr	r3, [r3, #0]
   d60be:	699b      	ldr	r3, [r3, #24]
   d60c0:	9301      	str	r3, [sp, #4]
   d60c2:	bd08      	pop	{r3, pc}
   d60c4:	00030228 	.word	0x00030228

000d60c8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d60c8:	b508      	push	{r3, lr}
   d60ca:	4b02      	ldr	r3, [pc, #8]	; (d60d4 <HAL_I2C_End_Transmission+0xc>)
   d60cc:	681b      	ldr	r3, [r3, #0]
   d60ce:	69db      	ldr	r3, [r3, #28]
   d60d0:	9301      	str	r3, [sp, #4]
   d60d2:	bd08      	pop	{r3, pc}
   d60d4:	00030228 	.word	0x00030228

000d60d8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d60d8:	b508      	push	{r3, lr}
   d60da:	4b02      	ldr	r3, [pc, #8]	; (d60e4 <HAL_I2C_Write_Data+0xc>)
   d60dc:	681b      	ldr	r3, [r3, #0]
   d60de:	6a1b      	ldr	r3, [r3, #32]
   d60e0:	9301      	str	r3, [sp, #4]
   d60e2:	bd08      	pop	{r3, pc}
   d60e4:	00030228 	.word	0x00030228

000d60e8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d60e8:	b508      	push	{r3, lr}
   d60ea:	4b02      	ldr	r3, [pc, #8]	; (d60f4 <HAL_I2C_Available_Data+0xc>)
   d60ec:	681b      	ldr	r3, [r3, #0]
   d60ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d60f0:	9301      	str	r3, [sp, #4]
   d60f2:	bd08      	pop	{r3, pc}
   d60f4:	00030228 	.word	0x00030228

000d60f8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d60f8:	b508      	push	{r3, lr}
   d60fa:	4b02      	ldr	r3, [pc, #8]	; (d6104 <HAL_I2C_Read_Data+0xc>)
   d60fc:	681b      	ldr	r3, [r3, #0]
   d60fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6100:	9301      	str	r3, [sp, #4]
   d6102:	bd08      	pop	{r3, pc}
   d6104:	00030228 	.word	0x00030228

000d6108 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6108:	b508      	push	{r3, lr}
   d610a:	4b02      	ldr	r3, [pc, #8]	; (d6114 <HAL_I2C_Peek_Data+0xc>)
   d610c:	681b      	ldr	r3, [r3, #0]
   d610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6110:	9301      	str	r3, [sp, #4]
   d6112:	bd08      	pop	{r3, pc}
   d6114:	00030228 	.word	0x00030228

000d6118 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6118:	b508      	push	{r3, lr}
   d611a:	4b02      	ldr	r3, [pc, #8]	; (d6124 <HAL_I2C_Flush_Data+0xc>)
   d611c:	681b      	ldr	r3, [r3, #0]
   d611e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6120:	9301      	str	r3, [sp, #4]
   d6122:	bd08      	pop	{r3, pc}
   d6124:	00030228 	.word	0x00030228

000d6128 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6128:	b508      	push	{r3, lr}
   d612a:	4b02      	ldr	r3, [pc, #8]	; (d6134 <HAL_I2C_Is_Enabled+0xc>)
   d612c:	681b      	ldr	r3, [r3, #0]
   d612e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6130:	9301      	str	r3, [sp, #4]
   d6132:	bd08      	pop	{r3, pc}
   d6134:	00030228 	.word	0x00030228

000d6138 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6138:	b508      	push	{r3, lr}
   d613a:	4b02      	ldr	r3, [pc, #8]	; (d6144 <HAL_I2C_Init+0xc>)
   d613c:	681b      	ldr	r3, [r3, #0]
   d613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6140:	9301      	str	r3, [sp, #4]
   d6142:	bd08      	pop	{r3, pc}
   d6144:	00030228 	.word	0x00030228

000d6148 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d6148:	b508      	push	{r3, lr}
   d614a:	4b02      	ldr	r3, [pc, #8]	; (d6154 <HAL_I2C_Request_Data_Ex+0xc>)
   d614c:	681b      	ldr	r3, [r3, #0]
   d614e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6150:	9301      	str	r3, [sp, #4]
   d6152:	bd08      	pop	{r3, pc}
   d6154:	00030228 	.word	0x00030228

000d6158 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6158:	b508      	push	{r3, lr}
   d615a:	4b02      	ldr	r3, [pc, #8]	; (d6164 <sock_setsockopt+0xc>)
   d615c:	681b      	ldr	r3, [r3, #0]
   d615e:	699b      	ldr	r3, [r3, #24]
   d6160:	9301      	str	r3, [sp, #4]
   d6162:	bd08      	pop	{r3, pc}
   d6164:	00030238 	.word	0x00030238

000d6168 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6168:	b508      	push	{r3, lr}
   d616a:	4b02      	ldr	r3, [pc, #8]	; (d6174 <sock_close+0xc>)
   d616c:	681b      	ldr	r3, [r3, #0]
   d616e:	69db      	ldr	r3, [r3, #28]
   d6170:	9301      	str	r3, [sp, #4]
   d6172:	bd08      	pop	{r3, pc}
   d6174:	00030238 	.word	0x00030238

000d6178 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6178:	b508      	push	{r3, lr}
   d617a:	4b02      	ldr	r3, [pc, #8]	; (d6184 <sock_connect+0xc>)
   d617c:	681b      	ldr	r3, [r3, #0]
   d617e:	6a1b      	ldr	r3, [r3, #32]
   d6180:	9301      	str	r3, [sp, #4]
   d6182:	bd08      	pop	{r3, pc}
   d6184:	00030238 	.word	0x00030238

000d6188 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6188:	b508      	push	{r3, lr}
   d618a:	4b02      	ldr	r3, [pc, #8]	; (d6194 <sock_recv+0xc>)
   d618c:	681b      	ldr	r3, [r3, #0]
   d618e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6190:	9301      	str	r3, [sp, #4]
   d6192:	bd08      	pop	{r3, pc}
   d6194:	00030238 	.word	0x00030238

000d6198 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6198:	b508      	push	{r3, lr}
   d619a:	4b02      	ldr	r3, [pc, #8]	; (d61a4 <sock_send+0xc>)
   d619c:	681b      	ldr	r3, [r3, #0]
   d619e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61a0:	9301      	str	r3, [sp, #4]
   d61a2:	bd08      	pop	{r3, pc}
   d61a4:	00030238 	.word	0x00030238

000d61a8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d61a8:	b508      	push	{r3, lr}
   d61aa:	4b02      	ldr	r3, [pc, #8]	; (d61b4 <sock_socket+0xc>)
   d61ac:	681b      	ldr	r3, [r3, #0]
   d61ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d61b0:	9301      	str	r3, [sp, #4]
   d61b2:	bd08      	pop	{r3, pc}
   d61b4:	00030238 	.word	0x00030238

000d61b8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d61b8:	b508      	push	{r3, lr}
   d61ba:	4b02      	ldr	r3, [pc, #8]	; (d61c4 <HAL_USB_USART_Init+0xc>)
   d61bc:	681b      	ldr	r3, [r3, #0]
   d61be:	681b      	ldr	r3, [r3, #0]
   d61c0:	9301      	str	r3, [sp, #4]
   d61c2:	bd08      	pop	{r3, pc}
   d61c4:	0003024c 	.word	0x0003024c

000d61c8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d61c8:	b508      	push	{r3, lr}
   d61ca:	4b02      	ldr	r3, [pc, #8]	; (d61d4 <HAL_USB_USART_Available_Data+0xc>)
   d61cc:	681b      	ldr	r3, [r3, #0]
   d61ce:	691b      	ldr	r3, [r3, #16]
   d61d0:	9301      	str	r3, [sp, #4]
   d61d2:	bd08      	pop	{r3, pc}
   d61d4:	0003024c 	.word	0x0003024c

000d61d8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d61d8:	b508      	push	{r3, lr}
   d61da:	4b02      	ldr	r3, [pc, #8]	; (d61e4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d61dc:	681b      	ldr	r3, [r3, #0]
   d61de:	695b      	ldr	r3, [r3, #20]
   d61e0:	9301      	str	r3, [sp, #4]
   d61e2:	bd08      	pop	{r3, pc}
   d61e4:	0003024c 	.word	0x0003024c

000d61e8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d61e8:	b508      	push	{r3, lr}
   d61ea:	4b02      	ldr	r3, [pc, #8]	; (d61f4 <HAL_USB_USART_Receive_Data+0xc>)
   d61ec:	681b      	ldr	r3, [r3, #0]
   d61ee:	699b      	ldr	r3, [r3, #24]
   d61f0:	9301      	str	r3, [sp, #4]
   d61f2:	bd08      	pop	{r3, pc}
   d61f4:	0003024c 	.word	0x0003024c

000d61f8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d61f8:	b508      	push	{r3, lr}
   d61fa:	4b02      	ldr	r3, [pc, #8]	; (d6204 <HAL_USB_USART_Send_Data+0xc>)
   d61fc:	681b      	ldr	r3, [r3, #0]
   d61fe:	69db      	ldr	r3, [r3, #28]
   d6200:	9301      	str	r3, [sp, #4]
   d6202:	bd08      	pop	{r3, pc}
   d6204:	0003024c 	.word	0x0003024c

000d6208 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6208:	b508      	push	{r3, lr}
   d620a:	4b02      	ldr	r3, [pc, #8]	; (d6214 <HAL_USB_USART_Flush_Data+0xc>)
   d620c:	681b      	ldr	r3, [r3, #0]
   d620e:	6a1b      	ldr	r3, [r3, #32]
   d6210:	9301      	str	r3, [sp, #4]
   d6212:	bd08      	pop	{r3, pc}
   d6214:	0003024c 	.word	0x0003024c

000d6218 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6218:	b508      	push	{r3, lr}
   d621a:	4b02      	ldr	r3, [pc, #8]	; (d6224 <panic_+0xc>)
   d621c:	681b      	ldr	r3, [r3, #0]
   d621e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6220:	9301      	str	r3, [sp, #4]
   d6222:	bd08      	pop	{r3, pc}
   d6224:	00030260 	.word	0x00030260

000d6228 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6228:	b508      	push	{r3, lr}
   d622a:	4b02      	ldr	r3, [pc, #8]	; (d6234 <log_message+0xc>)
   d622c:	681b      	ldr	r3, [r3, #0]
   d622e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6230:	9301      	str	r3, [sp, #4]
   d6232:	bd08      	pop	{r3, pc}
   d6234:	00030260 	.word	0x00030260

000d6238 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6238:	b508      	push	{r3, lr}
   d623a:	4b02      	ldr	r3, [pc, #8]	; (d6244 <set_system_mode+0xc>)
   d623c:	681b      	ldr	r3, [r3, #0]
   d623e:	685b      	ldr	r3, [r3, #4]
   d6240:	9301      	str	r3, [sp, #4]
   d6242:	bd08      	pop	{r3, pc}
   d6244:	00030220 	.word	0x00030220

000d6248 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6248:	b508      	push	{r3, lr}
   d624a:	4b02      	ldr	r3, [pc, #8]	; (d6254 <system_delay_ms+0xc>)
   d624c:	681b      	ldr	r3, [r3, #0]
   d624e:	695b      	ldr	r3, [r3, #20]
   d6250:	9301      	str	r3, [sp, #4]
   d6252:	bd08      	pop	{r3, pc}
   d6254:	00030220 	.word	0x00030220

000d6258 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6258:	b508      	push	{r3, lr}
   d625a:	4b03      	ldr	r3, [pc, #12]	; (d6268 <system_ctrl_set_app_request_handler+0x10>)
   d625c:	681b      	ldr	r3, [r3, #0]
   d625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6262:	9301      	str	r3, [sp, #4]
   d6264:	bd08      	pop	{r3, pc}
   d6266:	0000      	.short	0x0000
   d6268:	00030220 	.word	0x00030220

000d626c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d626c:	b508      	push	{r3, lr}
   d626e:	4b03      	ldr	r3, [pc, #12]	; (d627c <system_ctrl_set_result+0x10>)
   d6270:	681b      	ldr	r3, [r3, #0]
   d6272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6276:	9301      	str	r3, [sp, #4]
   d6278:	bd08      	pop	{r3, pc}
   d627a:	0000      	.short	0x0000
   d627c:	00030220 	.word	0x00030220

000d6280 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6280:	b508      	push	{r3, lr}
   d6282:	4b02      	ldr	r3, [pc, #8]	; (d628c <network_connect+0xc>)
   d6284:	681b      	ldr	r3, [r3, #0]
   d6286:	685b      	ldr	r3, [r3, #4]
   d6288:	9301      	str	r3, [sp, #4]
   d628a:	bd08      	pop	{r3, pc}
   d628c:	00030240 	.word	0x00030240

000d6290 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6290:	b508      	push	{r3, lr}
   d6292:	4b02      	ldr	r3, [pc, #8]	; (d629c <network_connecting+0xc>)
   d6294:	681b      	ldr	r3, [r3, #0]
   d6296:	689b      	ldr	r3, [r3, #8]
   d6298:	9301      	str	r3, [sp, #4]
   d629a:	bd08      	pop	{r3, pc}
   d629c:	00030240 	.word	0x00030240

000d62a0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d62a0:	b508      	push	{r3, lr}
   d62a2:	4b02      	ldr	r3, [pc, #8]	; (d62ac <network_disconnect+0xc>)
   d62a4:	681b      	ldr	r3, [r3, #0]
   d62a6:	68db      	ldr	r3, [r3, #12]
   d62a8:	9301      	str	r3, [sp, #4]
   d62aa:	bd08      	pop	{r3, pc}
   d62ac:	00030240 	.word	0x00030240

000d62b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d62b0:	b508      	push	{r3, lr}
   d62b2:	4b02      	ldr	r3, [pc, #8]	; (d62bc <network_ready+0xc>)
   d62b4:	681b      	ldr	r3, [r3, #0]
   d62b6:	691b      	ldr	r3, [r3, #16]
   d62b8:	9301      	str	r3, [sp, #4]
   d62ba:	bd08      	pop	{r3, pc}
   d62bc:	00030240 	.word	0x00030240

000d62c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d62c0:	b508      	push	{r3, lr}
   d62c2:	4b02      	ldr	r3, [pc, #8]	; (d62cc <network_on+0xc>)
   d62c4:	681b      	ldr	r3, [r3, #0]
   d62c6:	695b      	ldr	r3, [r3, #20]
   d62c8:	9301      	str	r3, [sp, #4]
   d62ca:	bd08      	pop	{r3, pc}
   d62cc:	00030240 	.word	0x00030240

000d62d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d62d0:	b508      	push	{r3, lr}
   d62d2:	4b02      	ldr	r3, [pc, #8]	; (d62dc <network_off+0xc>)
   d62d4:	681b      	ldr	r3, [r3, #0]
   d62d6:	699b      	ldr	r3, [r3, #24]
   d62d8:	9301      	str	r3, [sp, #4]
   d62da:	bd08      	pop	{r3, pc}
   d62dc:	00030240 	.word	0x00030240

000d62e0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d62e0:	b508      	push	{r3, lr}
   d62e2:	4b02      	ldr	r3, [pc, #8]	; (d62ec <network_listen+0xc>)
   d62e4:	681b      	ldr	r3, [r3, #0]
   d62e6:	69db      	ldr	r3, [r3, #28]
   d62e8:	9301      	str	r3, [sp, #4]
   d62ea:	bd08      	pop	{r3, pc}
   d62ec:	00030240 	.word	0x00030240

000d62f0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d62f0:	b508      	push	{r3, lr}
   d62f2:	4b02      	ldr	r3, [pc, #8]	; (d62fc <network_listening+0xc>)
   d62f4:	681b      	ldr	r3, [r3, #0]
   d62f6:	6a1b      	ldr	r3, [r3, #32]
   d62f8:	9301      	str	r3, [sp, #4]
   d62fa:	bd08      	pop	{r3, pc}
   d62fc:	00030240 	.word	0x00030240

000d6300 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6300:	b508      	push	{r3, lr}
   d6302:	4b02      	ldr	r3, [pc, #8]	; (d630c <network_set_listen_timeout+0xc>)
   d6304:	681b      	ldr	r3, [r3, #0]
   d6306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6308:	9301      	str	r3, [sp, #4]
   d630a:	bd08      	pop	{r3, pc}
   d630c:	00030240 	.word	0x00030240

000d6310 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6310:	b508      	push	{r3, lr}
   d6312:	4b02      	ldr	r3, [pc, #8]	; (d631c <network_get_listen_timeout+0xc>)
   d6314:	681b      	ldr	r3, [r3, #0]
   d6316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6318:	9301      	str	r3, [sp, #4]
   d631a:	bd08      	pop	{r3, pc}
   d631c:	00030240 	.word	0x00030240

000d6320 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6320:	b508      	push	{r3, lr}
   d6322:	4b02      	ldr	r3, [pc, #8]	; (d632c <spark_set_random_seed_from_cloud_handler+0xc>)
   d6324:	681b      	ldr	r3, [r3, #0]
   d6326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6328:	9301      	str	r3, [sp, #4]
   d632a:	bd08      	pop	{r3, pc}
   d632c:	00030244 	.word	0x00030244

000d6330 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6330:	b508      	push	{r3, lr}
   d6332:	4b02      	ldr	r3, [pc, #8]	; (d633c <malloc+0xc>)
   d6334:	681b      	ldr	r3, [r3, #0]
   d6336:	681b      	ldr	r3, [r3, #0]
   d6338:	9301      	str	r3, [sp, #4]
   d633a:	bd08      	pop	{r3, pc}
   d633c:	0003021c 	.word	0x0003021c

000d6340 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6340:	b508      	push	{r3, lr}
   d6342:	4b02      	ldr	r3, [pc, #8]	; (d634c <free+0xc>)
   d6344:	681b      	ldr	r3, [r3, #0]
   d6346:	685b      	ldr	r3, [r3, #4]
   d6348:	9301      	str	r3, [sp, #4]
   d634a:	bd08      	pop	{r3, pc}
   d634c:	0003021c 	.word	0x0003021c

000d6350 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6350:	b508      	push	{r3, lr}
   d6352:	4b02      	ldr	r3, [pc, #8]	; (d635c <vsnprintf+0xc>)
   d6354:	681b      	ldr	r3, [r3, #0]
   d6356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6358:	9301      	str	r3, [sp, #4]
   d635a:	bd08      	pop	{r3, pc}
   d635c:	0003021c 	.word	0x0003021c

000d6360 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6360:	b508      	push	{r3, lr}
   d6362:	4b02      	ldr	r3, [pc, #8]	; (d636c <_malloc_r+0xc>)
   d6364:	681b      	ldr	r3, [r3, #0]
   d6366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6368:	9301      	str	r3, [sp, #4]
   d636a:	bd08      	pop	{r3, pc}
   d636c:	0003021c 	.word	0x0003021c

000d6370 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6370:	b508      	push	{r3, lr}
   d6372:	4b02      	ldr	r3, [pc, #8]	; (d637c <__errno+0xc>)
   d6374:	681b      	ldr	r3, [r3, #0]
   d6376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6378:	9301      	str	r3, [sp, #4]
   d637a:	bd08      	pop	{r3, pc}
   d637c:	0003021c 	.word	0x0003021c

000d6380 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6380:	2200      	movs	r2, #0
   d6382:	4611      	mov	r1, r2
   d6384:	6840      	ldr	r0, [r0, #4]
   d6386:	f7ff bfb3 	b.w	d62f0 <network_listening>

000d638a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d638a:	2200      	movs	r2, #0
   d638c:	4611      	mov	r1, r2
   d638e:	6840      	ldr	r0, [r0, #4]
   d6390:	f7ff bfbe 	b.w	d6310 <network_get_listen_timeout>

000d6394 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6394:	2200      	movs	r2, #0
   d6396:	6840      	ldr	r0, [r0, #4]
   d6398:	f7ff bfb2 	b.w	d6300 <network_set_listen_timeout>

000d639c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d639c:	2200      	movs	r2, #0
   d639e:	f081 0101 	eor.w	r1, r1, #1
   d63a2:	6840      	ldr	r0, [r0, #4]
   d63a4:	f7ff bf9c 	b.w	d62e0 <network_listen>

000d63a8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d63a8:	2300      	movs	r3, #0
   d63aa:	461a      	mov	r2, r3
   d63ac:	4619      	mov	r1, r3
   d63ae:	6840      	ldr	r0, [r0, #4]
   d63b0:	f7ff bf8e 	b.w	d62d0 <network_off>

000d63b4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d63b4:	2300      	movs	r3, #0
   d63b6:	461a      	mov	r2, r3
   d63b8:	4619      	mov	r1, r3
   d63ba:	6840      	ldr	r0, [r0, #4]
   d63bc:	f7ff bf80 	b.w	d62c0 <network_on>

000d63c0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d63c0:	2200      	movs	r2, #0
   d63c2:	4611      	mov	r1, r2
   d63c4:	6840      	ldr	r0, [r0, #4]
   d63c6:	f7ff bf73 	b.w	d62b0 <network_ready>

000d63ca <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d63ca:	2200      	movs	r2, #0
   d63cc:	4611      	mov	r1, r2
   d63ce:	6840      	ldr	r0, [r0, #4]
   d63d0:	f7ff bf5e 	b.w	d6290 <network_connecting>

000d63d4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d63d4:	2200      	movs	r2, #0
   d63d6:	2102      	movs	r1, #2
   d63d8:	6840      	ldr	r0, [r0, #4]
   d63da:	f7ff bf61 	b.w	d62a0 <network_disconnect>

000d63de <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d63de:	2300      	movs	r3, #0
   d63e0:	461a      	mov	r2, r3
   d63e2:	6840      	ldr	r0, [r0, #4]
   d63e4:	f7ff bf4c 	b.w	d6280 <network_connect>

000d63e8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d63e8:	4b02      	ldr	r3, [pc, #8]	; (d63f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d63ea:	2203      	movs	r2, #3
   d63ec:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d63ee:	4a02      	ldr	r2, [pc, #8]	; (d63f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d63f0:	601a      	str	r2, [r3, #0]
   d63f2:	4770      	bx	lr
   d63f4:	2003e3dc 	.word	0x2003e3dc
   d63f8:	000dab58 	.word	0x000dab58

000d63fc <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d63fc:	2100      	movs	r1, #0
   d63fe:	f7ff bda3 	b.w	d5f48 <HAL_SPI_Acquire>

000d6402 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6402:	2100      	movs	r1, #0
   d6404:	f7ff bda8 	b.w	d5f58 <HAL_SPI_Release>

000d6408 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6408:	b510      	push	{r4, lr}
   d640a:	4604      	mov	r4, r0
{
    _spi = spi;
   d640c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d640e:	4608      	mov	r0, r1
   d6410:	f7ff fd7a 	bl	d5f08 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6414:	2300      	movs	r3, #0
   d6416:	6063      	str	r3, [r4, #4]
}
   d6418:	4620      	mov	r0, r4
   d641a:	bd10      	pop	{r4, pc}

000d641c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d641c:	b510      	push	{r4, lr}
   d641e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6420:	7800      	ldrb	r0, [r0, #0]
   d6422:	f7ff ffeb 	bl	d63fc <_ZN8SPIClass4lockEv.isra.0>
   d6426:	b948      	cbnz	r0, d643c <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d6428:	7820      	ldrb	r0, [r4, #0]
   d642a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d642e:	f7ff fd43 	bl	d5eb8 <HAL_SPI_Begin>
        unlock();
   d6432:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d6438:	f7ff bfe3 	b.w	d6402 <_ZN8SPIClass6unlockEv.isra.1>
   d643c:	bd10      	pop	{r4, pc}

000d643e <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d643e:	b538      	push	{r3, r4, r5, lr}
   d6440:	4604      	mov	r4, r0
    if (!lock())
   d6442:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d6444:	460d      	mov	r5, r1
    if (!lock())
   d6446:	f7ff ffd9 	bl	d63fc <_ZN8SPIClass4lockEv.isra.0>
   d644a:	b940      	cbnz	r0, d645e <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d644c:	7820      	ldrb	r0, [r4, #0]
   d644e:	4629      	mov	r1, r5
   d6450:	f7ff fd3a 	bl	d5ec8 <HAL_SPI_Set_Bit_Order>
        unlock();
   d6454:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d645a:	f7ff bfd2 	b.w	d6402 <_ZN8SPIClass6unlockEv.isra.1>
   d645e:	bd38      	pop	{r3, r4, r5, pc}

000d6460 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d6460:	b538      	push	{r3, r4, r5, lr}
   d6462:	4604      	mov	r4, r0
    if (!lock())
   d6464:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d6466:	460d      	mov	r5, r1
    if (!lock())
   d6468:	f7ff ffc8 	bl	d63fc <_ZN8SPIClass4lockEv.isra.0>
   d646c:	b940      	cbnz	r0, d6480 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d646e:	7820      	ldrb	r0, [r4, #0]
   d6470:	4629      	mov	r1, r5
   d6472:	f7ff fd31 	bl	d5ed8 <HAL_SPI_Set_Data_Mode>
        unlock();
   d6476:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d647c:	f7ff bfc1 	b.w	d6402 <_ZN8SPIClass6unlockEv.isra.1>
   d6480:	bd38      	pop	{r3, r4, r5, pc}

000d6482 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6482:	7800      	ldrb	r0, [r0, #0]
   d6484:	f7ff bfbd 	b.w	d6402 <_ZN8SPIClass6unlockEv.isra.1>

000d6488 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6488:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d648a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d648c:	6018      	str	r0, [r3, #0]
   d648e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6490:	6818      	ldr	r0, [r3, #0]
   d6492:	4288      	cmp	r0, r1
   d6494:	b2e5      	uxtb	r5, r4
   d6496:	d906      	bls.n	d64a6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6498:	3401      	adds	r4, #1
   d649a:	2c08      	cmp	r4, #8
   d649c:	d002      	beq.n	d64a4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d649e:	0840      	lsrs	r0, r0, #1
   d64a0:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d64a2:	e7f5      	b.n	d6490 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d64a4:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d64a6:	4b02      	ldr	r3, [pc, #8]	; (d64b0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d64a8:	5d5b      	ldrb	r3, [r3, r5]
   d64aa:	7013      	strb	r3, [r2, #0]
   d64ac:	bd30      	pop	{r4, r5, pc}
   d64ae:	bf00      	nop
   d64b0:	000dab84 	.word	0x000dab84

000d64b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d64b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d64b8:	4607      	mov	r7, r0
   d64ba:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d64bc:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d64be:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d64c0:	f7ff ff9c 	bl	d63fc <_ZN8SPIClass4lockEv.isra.0>
   d64c4:	2800      	cmp	r0, #0
   d64c6:	db62      	blt.n	d658e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d64c8:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d64ca:	2214      	movs	r2, #20
   d64cc:	2100      	movs	r1, #0
   d64ce:	a809      	add	r0, sp, #36	; 0x24
   d64d0:	f002 f88a 	bl	d85e8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d64d4:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d64d6:	4620      	mov	r0, r4
   d64d8:	2200      	movs	r2, #0
   d64da:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d64dc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d64e0:	f7ff fd22 	bl	d5f28 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d64e4:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d64e8:	b154      	cbz	r4, d6500 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d64ea:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d64ee:	b935      	cbnz	r5, d64fe <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d64f0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d64f4:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d64f8:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d64fc:	e003      	b.n	d6506 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d64fe:	2400      	movs	r4, #0
   d6500:	46a1      	mov	r9, r4
   d6502:	46a0      	mov	r8, r4
   d6504:	2501      	movs	r5, #1
   d6506:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6508:	b105      	cbz	r5, d650c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d650a:	b9bb      	cbnz	r3, d653c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d650c:	429d      	cmp	r5, r3
   d650e:	d10b      	bne.n	d6528 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d6510:	68b2      	ldr	r2, [r6, #8]
   d6512:	4542      	cmp	r2, r8
   d6514:	d108      	bne.n	d6528 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6516:	f88d 9020 	strb.w	r9, [sp, #32]
   d651a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d651e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d6522:	89b2      	ldrh	r2, [r6, #12]
   d6524:	4291      	cmp	r1, r2
   d6526:	d009      	beq.n	d653c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d6528:	b153      	cbz	r3, d6540 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d652a:	2400      	movs	r4, #0
   d652c:	7838      	ldrb	r0, [r7, #0]
   d652e:	9401      	str	r4, [sp, #4]
   d6530:	9400      	str	r4, [sp, #0]
   d6532:	4623      	mov	r3, r4
   d6534:	4622      	mov	r2, r4
   d6536:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6538:	f7ff fcfe 	bl	d5f38 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d653c:	2000      	movs	r0, #0
   d653e:	e026      	b.n	d658e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d6540:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d6544:	68b1      	ldr	r1, [r6, #8]
   d6546:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6548:	ab04      	add	r3, sp, #16
   d654a:	f10d 020f 	add.w	r2, sp, #15
   d654e:	f7ff ff9b 	bl	d6488 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d6552:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6554:	b105      	cbz	r5, d6558 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d6556:	b9b1      	cbnz	r1, d6586 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d6558:	42a9      	cmp	r1, r5
   d655a:	d008      	beq.n	d656e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d655c:	2400      	movs	r4, #0
   d655e:	7838      	ldrb	r0, [r7, #0]
   d6560:	9401      	str	r4, [sp, #4]
   d6562:	7b74      	ldrb	r4, [r6, #13]
   d6564:	7b33      	ldrb	r3, [r6, #12]
   d6566:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d656a:	9400      	str	r4, [sp, #0]
   d656c:	e7e4      	b.n	d6538 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d656e:	68b3      	ldr	r3, [r6, #8]
   d6570:	4543      	cmp	r3, r8
   d6572:	d3f3      	bcc.n	d655c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6574:	f88d 9020 	strb.w	r9, [sp, #32]
   d6578:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d657c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6580:	89b3      	ldrh	r3, [r6, #12]
   d6582:	429a      	cmp	r2, r3
   d6584:	d1ea      	bne.n	d655c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6586:	9b04      	ldr	r3, [sp, #16]
   d6588:	4543      	cmp	r3, r8
   d658a:	d1e7      	bne.n	d655c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d658c:	e7d6      	b.n	d653c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d658e:	b00f      	add	sp, #60	; 0x3c
   d6590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6594 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6598:	b088      	sub	sp, #32
    unsigned clock = 0;
   d659a:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d659c:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d659e:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d65a0:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d65a2:	460e      	mov	r6, r1
   d65a4:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d65a6:	f7ff ff29 	bl	d63fc <_ZN8SPIClass4lockEv.isra.0>
   d65aa:	4605      	mov	r5, r0
   d65ac:	bb00      	cbnz	r0, d65f0 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d65ae:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d65b2:	4601      	mov	r1, r0
   d65b4:	2214      	movs	r2, #20
   d65b6:	a803      	add	r0, sp, #12
   d65b8:	f002 f816 	bl	d85e8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d65bc:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d65be:	462a      	mov	r2, r5
   d65c0:	a903      	add	r1, sp, #12
   d65c2:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d65c4:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d65c8:	f7ff fcae 	bl	d5f28 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d65cc:	ab02      	add	r3, sp, #8
   d65ce:	f10d 0207 	add.w	r2, sp, #7
   d65d2:	fb07 f106 	mul.w	r1, r7, r6
   d65d6:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d65d8:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d65dc:	f7ff ff54 	bl	d6488 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d65e0:	7820      	ldrb	r0, [r4, #0]
   d65e2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d65e6:	f7ff fc7f 	bl	d5ee8 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d65ea:	7820      	ldrb	r0, [r4, #0]
   d65ec:	f7ff ff09 	bl	d6402 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d65f0:	9802      	ldr	r0, [sp, #8]
   d65f2:	b008      	add	sp, #32
   d65f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d65f8 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d65f8:	b538      	push	{r3, r4, r5, lr}
   d65fa:	4604      	mov	r4, r0
    if (!lock())
   d65fc:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d65fe:	460d      	mov	r5, r1
    if (!lock())
   d6600:	f7ff fefc 	bl	d63fc <_ZN8SPIClass4lockEv.isra.0>
   d6604:	b9c8      	cbnz	r0, d663a <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d6606:	6861      	ldr	r1, [r4, #4]
   d6608:	b171      	cbz	r1, d6628 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d660a:	4b0c      	ldr	r3, [pc, #48]	; (d663c <_ZN8SPIClass15setClockDividerEh+0x44>)
   d660c:	5cc2      	ldrb	r2, [r0, r3]
   d660e:	42aa      	cmp	r2, r5
   d6610:	d002      	beq.n	d6618 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d6612:	3001      	adds	r0, #1
   d6614:	2808      	cmp	r0, #8
   d6616:	d1f9      	bne.n	d660c <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d6618:	3001      	adds	r0, #1
   d661a:	b2c0      	uxtb	r0, r0
   d661c:	40c1      	lsrs	r1, r0
   d661e:	2201      	movs	r2, #1
   d6620:	4620      	mov	r0, r4
   d6622:	f7ff ffb7 	bl	d6594 <_ZN8SPIClass13setClockSpeedEjj>
   d6626:	e003      	b.n	d6630 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6628:	4629      	mov	r1, r5
   d662a:	7820      	ldrb	r0, [r4, #0]
   d662c:	f7ff fc5c 	bl	d5ee8 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d6630:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d6636:	f7ff bee4 	b.w	d6402 <_ZN8SPIClass6unlockEv.isra.1>
   d663a:	bd38      	pop	{r3, r4, r5, pc}
   d663c:	000dab84 	.word	0x000dab84

000d6640 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6640:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d6642:	7800      	ldrb	r0, [r0, #0]
   d6644:	f7ff fc58 	bl	d5ef8 <HAL_SPI_Send_Receive_Data>
}
   d6648:	b2c0      	uxtb	r0, r0
   d664a:	bd08      	pop	{r3, pc}

000d664c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d664c:	7800      	ldrb	r0, [r0, #0]
   d664e:	f7ff bc63 	b.w	d5f18 <HAL_SPI_Is_Enabled>

000d6652 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6652:	b510      	push	{r4, lr}
   d6654:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6656:	6800      	ldr	r0, [r0, #0]
   d6658:	b118      	cbz	r0, d6662 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d665a:	f7ff fe71 	bl	d6340 <free>
            wakeupSource_ = nullptr;
   d665e:	2300      	movs	r3, #0
   d6660:	6023      	str	r3, [r4, #0]
   d6662:	bd10      	pop	{r4, pc}

000d6664 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6664:	b510      	push	{r4, lr}
   d6666:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6668:	f7ff fff3 	bl	d6652 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d666c:	4620      	mov	r0, r4
   d666e:	bd10      	pop	{r4, pc}

000d6670 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6670:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6672:	4c09      	ldr	r4, [pc, #36]	; (d6698 <_GLOBAL__sub_I_System+0x28>)
   d6674:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6676:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d667a:	6020      	str	r0, [r4, #0]
   d667c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d667e:	71a0      	strb	r0, [r4, #6]
   d6680:	8120      	strh	r0, [r4, #8]
   d6682:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6684:	f7ff fdd8 	bl	d6238 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6688:	4620      	mov	r0, r4
   d668a:	4a04      	ldr	r2, [pc, #16]	; (d669c <_GLOBAL__sub_I_System+0x2c>)
   d668c:	4904      	ldr	r1, [pc, #16]	; (d66a0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d668e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6692:	f001 b905 	b.w	d78a0 <__aeabi_atexit>
   d6696:	bf00      	nop
   d6698:	2003e3e4 	.word	0x2003e3e4
   d669c:	2003e1c8 	.word	0x2003e1c8
   d66a0:	000d6665 	.word	0x000d6665

000d66a4 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d66a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d66a8:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d66aa:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d66ac:	4615      	mov	r5, r2
   d66ae:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d66b0:	bf34      	ite	cc
   d66b2:	4615      	movcc	r5, r2
   d66b4:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d66b6:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d66b8:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d66ba:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d66bc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d66c0:	d107      	bne.n	d66d2 <ltoa+0x2e>
   d66c2:	4298      	cmp	r0, r3
   d66c4:	da05      	bge.n	d66d2 <ltoa+0x2e>
      {
            *head++ = '-';
   d66c6:	232d      	movs	r3, #45	; 0x2d
   d66c8:	f101 0801 	add.w	r8, r1, #1
   d66cc:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d66ce:	4240      	negs	r0, r0
   d66d0:	e001      	b.n	d66d6 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d66d2:	b1b0      	cbz	r0, d6702 <ltoa+0x5e>
   d66d4:	46a0      	mov	r8, r4
   d66d6:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d66da:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d66dc:	462a      	mov	r2, r5
   d66de:	4601      	mov	r1, r0
   d66e0:	a801      	add	r0, sp, #4
   d66e2:	f001 ff43 	bl	d856c <ldiv>
   d66e6:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d66e8:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d66ea:	2b09      	cmp	r3, #9
   d66ec:	bfcc      	ite	gt
   d66ee:	2237      	movgt	r2, #55	; 0x37
   d66f0:	2230      	movle	r2, #48	; 0x30
   d66f2:	fa52 f383 	uxtab	r3, r2, r3
   d66f6:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d66fa:	3701      	adds	r7, #1
   d66fc:	2800      	cmp	r0, #0
   d66fe:	d1ed      	bne.n	d66dc <ltoa+0x38>
   d6700:	e006      	b.n	d6710 <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d6702:	2330      	movs	r3, #48	; 0x30
   d6704:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d6708:	46a0      	mov	r8, r4
   d670a:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d670e:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d6710:	463a      	mov	r2, r7
   d6712:	1c71      	adds	r1, r6, #1
   d6714:	4640      	mov	r0, r8
   d6716:	f001 ff41 	bl	d859c <memcpy>
      return str;
}
   d671a:	4620      	mov	r0, r4
   d671c:	b00c      	add	sp, #48	; 0x30
   d671e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6722 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6722:	b510      	push	{r4, lr}
   d6724:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6726:	6800      	ldr	r0, [r0, #0]
   d6728:	b108      	cbz	r0, d672e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d672a:	f7ff fc5d 	bl	d5fe8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d672e:	4620      	mov	r0, r4
   d6730:	bd10      	pop	{r4, pc}
	...

000d6734 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6734:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6736:	4c06      	ldr	r4, [pc, #24]	; (d6750 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6738:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d673a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d673c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d673e:	f7ff fc4b 	bl	d5fd8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6742:	4620      	mov	r0, r4
   d6744:	4a03      	ldr	r2, [pc, #12]	; (d6754 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6746:	4904      	ldr	r1, [pc, #16]	; (d6758 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d674c:	f001 b8a8 	b.w	d78a0 <__aeabi_atexit>
   d6750:	2003e3f0 	.word	0x2003e3f0
   d6754:	2003e1c8 	.word	0x2003e1c8
   d6758:	000d6723 	.word	0x000d6723

000d675c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d675e:	4606      	mov	r6, r0
   d6760:	460d      	mov	r5, r1
   d6762:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6764:	2400      	movs	r4, #0
  while (size--) {
   d6766:	42bd      	cmp	r5, r7
   d6768:	d00c      	beq.n	d6784 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d676a:	6833      	ldr	r3, [r6, #0]
   d676c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6770:	689b      	ldr	r3, [r3, #8]
   d6772:	4630      	mov	r0, r6
   d6774:	4798      	blx	r3
     if (chunk>=0)
   d6776:	2800      	cmp	r0, #0
   d6778:	db01      	blt.n	d677e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d677a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d677c:	e7f3      	b.n	d6766 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d677e:	2c00      	cmp	r4, #0
   d6780:	bf08      	it	eq
   d6782:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6784:	4620      	mov	r0, r4
   d6786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6788 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6788:	b570      	push	{r4, r5, r6, lr}
   d678a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d678c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d678e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6790:	b149      	cbz	r1, d67a6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6792:	f001 ff61 	bl	d8658 <strlen>
   d6796:	682b      	ldr	r3, [r5, #0]
   d6798:	4602      	mov	r2, r0
   d679a:	4621      	mov	r1, r4
   d679c:	4628      	mov	r0, r5
   d679e:	68db      	ldr	r3, [r3, #12]
    }
   d67a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d67a4:	4718      	bx	r3
    }
   d67a6:	bd70      	pop	{r4, r5, r6, pc}

000d67a8 <_ZN5Print5printEPKc>:
   d67a8:	b508      	push	{r3, lr}
   d67aa:	f7ff ffed 	bl	d6788 <_ZN5Print5writeEPKc>
   d67ae:	bd08      	pop	{r3, pc}

000d67b0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d67b0:	6803      	ldr	r3, [r0, #0]
   d67b2:	689b      	ldr	r3, [r3, #8]
   d67b4:	4718      	bx	r3

000d67b6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d67b6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d67b8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d67ba:	4605      	mov	r5, r0
  size_t n = print('\r');
   d67bc:	f7ff fff8 	bl	d67b0 <_ZN5Print5printEc>
  n += print('\n');
   d67c0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d67c2:	4604      	mov	r4, r0
  n += print('\n');
   d67c4:	4628      	mov	r0, r5
   d67c6:	f7ff fff3 	bl	d67b0 <_ZN5Print5printEc>
  return n;
}
   d67ca:	4420      	add	r0, r4
   d67cc:	bd38      	pop	{r3, r4, r5, pc}

000d67ce <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d67ce:	b538      	push	{r3, r4, r5, lr}
   d67d0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d67d2:	f7ff ffd9 	bl	d6788 <_ZN5Print5writeEPKc>
   d67d6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d67d8:	4628      	mov	r0, r5
   d67da:	f7ff ffec 	bl	d67b6 <_ZN5Print7printlnEv>
  return n;
}
   d67de:	4420      	add	r0, r4
   d67e0:	bd38      	pop	{r3, r4, r5, pc}

000d67e2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d67e2:	b530      	push	{r4, r5, lr}
   d67e4:	b08b      	sub	sp, #44	; 0x2c
   d67e6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d67e8:	2100      	movs	r1, #0
   d67ea:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d67ee:	2a01      	cmp	r2, #1
   d67f0:	bf98      	it	ls
   d67f2:	220a      	movls	r2, #10
   d67f4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d67f8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d67fc:	fb05 3312 	mls	r3, r5, r2, r3
   d6800:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6804:	2b09      	cmp	r3, #9
   d6806:	bf94      	ite	ls
   d6808:	3330      	addls	r3, #48	; 0x30
   d680a:	3337      	addhi	r3, #55	; 0x37
   d680c:	b2db      	uxtb	r3, r3
   d680e:	4621      	mov	r1, r4
   d6810:	f804 3901 	strb.w	r3, [r4], #-1
   d6814:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6816:	2d00      	cmp	r5, #0
   d6818:	d1ee      	bne.n	d67f8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d681a:	f7ff ffb5 	bl	d6788 <_ZN5Print5writeEPKc>
}
   d681e:	b00b      	add	sp, #44	; 0x2c
   d6820:	bd30      	pop	{r4, r5, pc}

000d6822 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6822:	b40c      	push	{r2, r3}
   d6824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6828:	b087      	sub	sp, #28
   d682a:	af00      	add	r7, sp, #0
   d682c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6830:	4605      	mov	r5, r0
   d6832:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6836:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6838:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d683a:	4623      	mov	r3, r4
   d683c:	464a      	mov	r2, r9
   d683e:	2114      	movs	r1, #20
   d6840:	1d38      	adds	r0, r7, #4
   d6842:	f7ff fd85 	bl	d6350 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6846:	2813      	cmp	r0, #19
   d6848:	d805      	bhi.n	d6856 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d684a:	1d39      	adds	r1, r7, #4
   d684c:	4628      	mov	r0, r5
   d684e:	f7ff ff9b 	bl	d6788 <_ZN5Print5writeEPKc>
   d6852:	4604      	mov	r4, r0
   d6854:	e013      	b.n	d687e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6856:	f100 0308 	add.w	r3, r0, #8
   d685a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d685e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6860:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6864:	1c41      	adds	r1, r0, #1
   d6866:	4623      	mov	r3, r4
   d6868:	464a      	mov	r2, r9
   d686a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d686c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d686e:	f7ff fd6f 	bl	d6350 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6872:	4669      	mov	r1, sp
   d6874:	4628      	mov	r0, r5
   d6876:	f7ff ff87 	bl	d6788 <_ZN5Print5writeEPKc>
   d687a:	4604      	mov	r4, r0
   d687c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d687e:	b11e      	cbz	r6, d6888 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6880:	4628      	mov	r0, r5
   d6882:	f7ff ff98 	bl	d67b6 <_ZN5Print7printlnEv>
   d6886:	4404      	add	r4, r0
    return n;
}
   d6888:	4620      	mov	r0, r4
   d688a:	371c      	adds	r7, #28
   d688c:	46bd      	mov	sp, r7
   d688e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6892:	b002      	add	sp, #8
   d6894:	4770      	bx	lr
	...

000d6898 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6898:	4b01      	ldr	r3, [pc, #4]	; (d68a0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d689a:	4a02      	ldr	r2, [pc, #8]	; (d68a4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d689c:	601a      	str	r2, [r3, #0]
   d689e:	4770      	bx	lr
   d68a0:	2003e3f4 	.word	0x2003e3f4
   d68a4:	000dabff 	.word	0x000dabff

000d68a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d68a8:	4b02      	ldr	r3, [pc, #8]	; (d68b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d68aa:	681a      	ldr	r2, [r3, #0]
   d68ac:	4b02      	ldr	r3, [pc, #8]	; (d68b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d68ae:	601a      	str	r2, [r3, #0]
   d68b0:	4770      	bx	lr
   d68b2:	bf00      	nop
   d68b4:	2003e124 	.word	0x2003e124
   d68b8:	2003e3f8 	.word	0x2003e3f8

000d68bc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d68bc:	2100      	movs	r1, #0
   d68be:	f7ff bcc3 	b.w	d6248 <system_delay_ms>

000d68c2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d68c2:	b510      	push	{r4, lr}
   d68c4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d68c6:	f7fe f99b 	bl	d4c00 <_ZNSt14_Function_baseD1Ev>
   d68ca:	4620      	mov	r0, r4
   d68cc:	bd10      	pop	{r4, pc}
	...

000d68d0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d68d0:	4803      	ldr	r0, [pc, #12]	; (d68e0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d68d2:	4a04      	ldr	r2, [pc, #16]	; (d68e4 <_GLOBAL__sub_I_RGB+0x14>)
   d68d4:	4904      	ldr	r1, [pc, #16]	; (d68e8 <_GLOBAL__sub_I_RGB+0x18>)
   d68d6:	2300      	movs	r3, #0
   d68d8:	6083      	str	r3, [r0, #8]
   d68da:	f000 bfe1 	b.w	d78a0 <__aeabi_atexit>
   d68de:	bf00      	nop
   d68e0:	2003e3fc 	.word	0x2003e3fc
   d68e4:	2003e1c8 	.word	0x2003e1c8
   d68e8:	000d68c3 	.word	0x000d68c3

000d68ec <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d68ec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d68ee:	4b0c      	ldr	r3, [pc, #48]	; (d6920 <serialEventRun+0x34>)
   d68f0:	b133      	cbz	r3, d6900 <serialEventRun+0x14>
   d68f2:	f000 f969 	bl	d6bc8 <_Z16_fetch_usbserialv>
   d68f6:	6803      	ldr	r3, [r0, #0]
   d68f8:	691b      	ldr	r3, [r3, #16]
   d68fa:	4798      	blx	r3
   d68fc:	2800      	cmp	r0, #0
   d68fe:	dc09      	bgt.n	d6914 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6900:	4b08      	ldr	r3, [pc, #32]	; (d6924 <serialEventRun+0x38>)
   d6902:	b163      	cbz	r3, d691e <serialEventRun+0x32>
   d6904:	f000 f9e2 	bl	d6ccc <_Z22__fetch_global_Serial1v>
   d6908:	6803      	ldr	r3, [r0, #0]
   d690a:	691b      	ldr	r3, [r3, #16]
   d690c:	4798      	blx	r3
   d690e:	2800      	cmp	r0, #0
   d6910:	dc03      	bgt.n	d691a <serialEventRun+0x2e>
   d6912:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6914:	f3af 8000 	nop.w
   d6918:	e7f2      	b.n	d6900 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d691a:	f3af 8000 	nop.w
   d691e:	bd08      	pop	{r3, pc}
	...

000d6928 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6928:	b508      	push	{r3, lr}
	serialEventRun();
   d692a:	f7ff ffdf 	bl	d68ec <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d692e:	f7ff fb33 	bl	d5f98 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6932:	4b01      	ldr	r3, [pc, #4]	; (d6938 <_post_loop+0x10>)
   d6934:	6018      	str	r0, [r3, #0]
   d6936:	bd08      	pop	{r3, pc}
   d6938:	2003e730 	.word	0x2003e730

000d693c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d693c:	4802      	ldr	r0, [pc, #8]	; (d6948 <_Z33system_initialize_user_backup_ramv+0xc>)
   d693e:	4a03      	ldr	r2, [pc, #12]	; (d694c <_Z33system_initialize_user_backup_ramv+0x10>)
   d6940:	4903      	ldr	r1, [pc, #12]	; (d6950 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6942:	1a12      	subs	r2, r2, r0
   d6944:	f001 be2a 	b.w	d859c <memcpy>
   d6948:	2003f400 	.word	0x2003f400
   d694c:	2003f404 	.word	0x2003f404
   d6950:	000db160 	.word	0x000db160

000d6954 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6954:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6956:	2300      	movs	r3, #0
   d6958:	9300      	str	r3, [sp, #0]
   d695a:	461a      	mov	r2, r3
   d695c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6960:	f7ff fc84 	bl	d626c <system_ctrl_set_result>
}
   d6964:	b003      	add	sp, #12
   d6966:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d696c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d696c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d696e:	8843      	ldrh	r3, [r0, #2]
   d6970:	2b0a      	cmp	r3, #10
   d6972:	d008      	beq.n	d6986 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6974:	2b50      	cmp	r3, #80	; 0x50
   d6976:	d109      	bne.n	d698c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6978:	4b09      	ldr	r3, [pc, #36]	; (d69a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d697a:	681b      	ldr	r3, [r3, #0]
   d697c:	b13b      	cbz	r3, d698e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d697e:	b003      	add	sp, #12
   d6980:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6984:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6986:	f7ff ffe5 	bl	d6954 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d698a:	e006      	b.n	d699a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d698c:	2300      	movs	r3, #0
   d698e:	9300      	str	r3, [sp, #0]
   d6990:	461a      	mov	r2, r3
   d6992:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6996:	f7ff fc69 	bl	d626c <system_ctrl_set_result>
        break;
    }
}
   d699a:	b003      	add	sp, #12
   d699c:	f85d fb04 	ldr.w	pc, [sp], #4
   d69a0:	2003e40c 	.word	0x2003e40c

000d69a4 <module_user_init_hook>:

void module_user_init_hook()
{
   d69a4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d69a6:	4c10      	ldr	r4, [pc, #64]	; (d69e8 <module_user_init_hook+0x44>)
   d69a8:	4d10      	ldr	r5, [pc, #64]	; (d69ec <module_user_init_hook+0x48>)
   d69aa:	6823      	ldr	r3, [r4, #0]
   d69ac:	42ab      	cmp	r3, r5
   d69ae:	4b10      	ldr	r3, [pc, #64]	; (d69f0 <module_user_init_hook+0x4c>)
   d69b0:	bf0c      	ite	eq
   d69b2:	2201      	moveq	r2, #1
   d69b4:	2200      	movne	r2, #0
   d69b6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d69b8:	d002      	beq.n	d69c0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d69ba:	f7ff ffbf 	bl	d693c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d69be:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d69c0:	f7ff fada 	bl	d5f78 <HAL_RNG_GetRandomNumber>
   d69c4:	4604      	mov	r4, r0
    srand(seed);
   d69c6:	f001 fe17 	bl	d85f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d69ca:	4b0a      	ldr	r3, [pc, #40]	; (d69f4 <module_user_init_hook+0x50>)
   d69cc:	b113      	cbz	r3, d69d4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d69ce:	4620      	mov	r0, r4
   d69d0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d69d4:	2100      	movs	r1, #0
   d69d6:	4807      	ldr	r0, [pc, #28]	; (d69f4 <module_user_init_hook+0x50>)
   d69d8:	f7ff fca2 	bl	d6320 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d69dc:	2100      	movs	r1, #0
   d69de:	4806      	ldr	r0, [pc, #24]	; (d69f8 <module_user_init_hook+0x54>)
}
   d69e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d69e4:	f7ff bc38 	b.w	d6258 <system_ctrl_set_app_request_handler>
   d69e8:	2003f400 	.word	0x2003f400
   d69ec:	9a271c1e 	.word	0x9a271c1e
   d69f0:	2003e410 	.word	0x2003e410
   d69f4:	00000000 	.word	0x00000000
   d69f8:	000d696d 	.word	0x000d696d

000d69fc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d69fc:	4770      	bx	lr

000d69fe <_ZN9IPAddressD0Ev>:
   d69fe:	b510      	push	{r4, lr}
   d6a00:	2118      	movs	r1, #24
   d6a02:	4604      	mov	r4, r0
   d6a04:	f000 ff5a 	bl	d78bc <_ZdlPvj>
   d6a08:	4620      	mov	r0, r4
   d6a0a:	bd10      	pop	{r4, pc}

000d6a0c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6a0e:	7d03      	ldrb	r3, [r0, #20]
   d6a10:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6a12:	b08d      	sub	sp, #52	; 0x34
   d6a14:	460e      	mov	r6, r1
   d6a16:	f100 0704 	add.w	r7, r0, #4
   d6a1a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6a1e:	d002      	beq.n	d6a26 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6a20:	f100 0508 	add.w	r5, r0, #8
   d6a24:	e018      	b.n	d6a58 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6a26:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6a28:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6a2a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6a2e:	232f      	movs	r3, #47	; 0x2f
   d6a30:	462a      	mov	r2, r5
   d6a32:	200a      	movs	r0, #10
   d6a34:	f7ff fae0 	bl	d5ff8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6a38:	4628      	mov	r0, r5
   d6a3a:	f001 fe0d 	bl	d8658 <strlen>
   d6a3e:	6833      	ldr	r3, [r6, #0]
   d6a40:	4602      	mov	r2, r0
   d6a42:	68db      	ldr	r3, [r3, #12]
   d6a44:	4629      	mov	r1, r5
   d6a46:	4630      	mov	r0, r6
   d6a48:	4798      	blx	r3
   d6a4a:	e00f      	b.n	d6a6c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6a4c:	b124      	cbz	r4, d6a58 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6a4e:	212e      	movs	r1, #46	; 0x2e
   d6a50:	4630      	mov	r0, r6
   d6a52:	f7ff fead 	bl	d67b0 <_ZN5Print5printEc>
   d6a56:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6a58:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6a5c:	220a      	movs	r2, #10
   d6a5e:	4630      	mov	r0, r6
   d6a60:	f7ff febf 	bl	d67e2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6a64:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6a66:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6a68:	d1f0      	bne.n	d6a4c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6a6a:	4620      	mov	r0, r4
    }
    return n;
}
   d6a6c:	b00d      	add	sp, #52	; 0x34
   d6a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6a70 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6a70:	b510      	push	{r4, lr}
   d6a72:	4b05      	ldr	r3, [pc, #20]	; (d6a88 <_ZN9IPAddressC1Ev+0x18>)
   d6a74:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6a76:	2211      	movs	r2, #17
   d6a78:	f840 3b04 	str.w	r3, [r0], #4
   d6a7c:	2100      	movs	r1, #0
   d6a7e:	f001 fdb3 	bl	d85e8 <memset>
{
    clear();
}
   d6a82:	4620      	mov	r0, r4
   d6a84:	bd10      	pop	{r4, pc}
   d6a86:	bf00      	nop
   d6a88:	000dac90 	.word	0x000dac90

000d6a8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6a8c:	4603      	mov	r3, r0
   d6a8e:	4a07      	ldr	r2, [pc, #28]	; (d6aac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6a90:	b510      	push	{r4, lr}
   d6a92:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6a96:	f101 0210 	add.w	r2, r1, #16
   d6a9a:	f851 4b04 	ldr.w	r4, [r1], #4
   d6a9e:	f843 4b04 	str.w	r4, [r3], #4
   d6aa2:	4291      	cmp	r1, r2
   d6aa4:	d1f9      	bne.n	d6a9a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6aa6:	780a      	ldrb	r2, [r1, #0]
   d6aa8:	701a      	strb	r2, [r3, #0]
}
   d6aaa:	bd10      	pop	{r4, pc}
   d6aac:	000dac90 	.word	0x000dac90

000d6ab0 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d6ab0:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d6ab2:	2b04      	cmp	r3, #4
   d6ab4:	d101      	bne.n	d6aba <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d6ab6:	6840      	ldr	r0, [r0, #4]
   d6ab8:	e008      	b.n	d6acc <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d6aba:	2b06      	cmp	r3, #6
   d6abc:	d10a      	bne.n	d6ad4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6abe:	6843      	ldr	r3, [r0, #4]
   d6ac0:	b953      	cbnz	r3, d6ad8 <_ZNK9IPAddresscvbEv+0x28>
   d6ac2:	6883      	ldr	r3, [r0, #8]
   d6ac4:	b943      	cbnz	r3, d6ad8 <_ZNK9IPAddresscvbEv+0x28>
   d6ac6:	68c3      	ldr	r3, [r0, #12]
   d6ac8:	b933      	cbnz	r3, d6ad8 <_ZNK9IPAddresscvbEv+0x28>
   d6aca:	6900      	ldr	r0, [r0, #16]
   d6acc:	3000      	adds	r0, #0
   d6ace:	bf18      	it	ne
   d6ad0:	2001      	movne	r0, #1
   d6ad2:	4770      	bx	lr
    } else {
        return false;
   d6ad4:	2000      	movs	r0, #0
   d6ad6:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6ad8:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d6ada:	4770      	bx	lr

000d6adc <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6adc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6ade:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6ae2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6ae6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6aea:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6aee:	2304      	movs	r3, #4
   d6af0:	6041      	str	r1, [r0, #4]
   d6af2:	7503      	strb	r3, [r0, #20]
   d6af4:	bd10      	pop	{r4, pc}

000d6af6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6af6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6af8:	780d      	ldrb	r5, [r1, #0]
   d6afa:	788b      	ldrb	r3, [r1, #2]
   d6afc:	784a      	ldrb	r2, [r1, #1]
   d6afe:	78c9      	ldrb	r1, [r1, #3]
   d6b00:	9100      	str	r1, [sp, #0]
   d6b02:	4629      	mov	r1, r5
   d6b04:	f7ff ffea 	bl	d6adc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6b08:	b003      	add	sp, #12
   d6b0a:	bd30      	pop	{r4, r5, pc}

000d6b0c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6b0c:	7441      	strb	r1, [r0, #17]
   d6b0e:	4770      	bx	lr

000d6b10 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6b10:	4770      	bx	lr

000d6b12 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6b12:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6b14:	2100      	movs	r1, #0
   d6b16:	7c00      	ldrb	r0, [r0, #16]
   d6b18:	f7ff fb66 	bl	d61e8 <HAL_USB_USART_Receive_Data>
}
   d6b1c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b20:	bf28      	it	cs
   d6b22:	f04f 30ff 	movcs.w	r0, #4294967295
   d6b26:	bd08      	pop	{r3, pc}

000d6b28 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6b28:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6b2a:	2101      	movs	r1, #1
   d6b2c:	7c00      	ldrb	r0, [r0, #16]
   d6b2e:	f7ff fb5b 	bl	d61e8 <HAL_USB_USART_Receive_Data>
}
   d6b32:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b36:	bf28      	it	cs
   d6b38:	f04f 30ff 	movcs.w	r0, #4294967295
   d6b3c:	bd08      	pop	{r3, pc}

000d6b3e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6b3e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6b40:	7c00      	ldrb	r0, [r0, #16]
   d6b42:	f7ff fb49 	bl	d61d8 <HAL_USB_USART_Available_Data_For_Write>
}
   d6b46:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b4a:	bd08      	pop	{r3, pc}

000d6b4c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6b4c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6b4e:	7c00      	ldrb	r0, [r0, #16]
   d6b50:	f7ff fb3a 	bl	d61c8 <HAL_USB_USART_Available_Data>
}
   d6b54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b58:	bd08      	pop	{r3, pc}

000d6b5a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6b5a:	7c00      	ldrb	r0, [r0, #16]
   d6b5c:	f7ff bb54 	b.w	d6208 <HAL_USB_USART_Flush_Data>

000d6b60 <_ZN9USBSerialD0Ev>:
   d6b60:	b510      	push	{r4, lr}
   d6b62:	2114      	movs	r1, #20
   d6b64:	4604      	mov	r4, r0
   d6b66:	f000 fea9 	bl	d78bc <_ZdlPvj>
   d6b6a:	4620      	mov	r0, r4
   d6b6c:	bd10      	pop	{r4, pc}

000d6b6e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6b6e:	b538      	push	{r3, r4, r5, lr}
   d6b70:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6b72:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6b74:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6b76:	f7ff fb2f 	bl	d61d8 <HAL_USB_USART_Available_Data_For_Write>
   d6b7a:	2800      	cmp	r0, #0
   d6b7c:	dc01      	bgt.n	d6b82 <_ZN9USBSerial5writeEh+0x14>
   d6b7e:	7c60      	ldrb	r0, [r4, #17]
   d6b80:	b128      	cbz	r0, d6b8e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6b82:	4629      	mov	r1, r5
   d6b84:	7c20      	ldrb	r0, [r4, #16]
   d6b86:	f7ff fb37 	bl	d61f8 <HAL_USB_USART_Send_Data>
   d6b8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6b8e:	bd38      	pop	{r3, r4, r5, pc}

000d6b90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6b90:	b510      	push	{r4, lr}
   d6b92:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6b94:	2300      	movs	r3, #0
   d6b96:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6b98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6b9c:	60a3      	str	r3, [r4, #8]
   d6b9e:	4b05      	ldr	r3, [pc, #20]	; (d6bb4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6ba0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6ba2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6ba4:	4608      	mov	r0, r1
{
  _serial = serial;
   d6ba6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6ba8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6baa:	4611      	mov	r1, r2
   d6bac:	f7ff fb04 	bl	d61b8 <HAL_USB_USART_Init>
}
   d6bb0:	4620      	mov	r0, r4
   d6bb2:	bd10      	pop	{r4, pc}
   d6bb4:	000daca4 	.word	0x000daca4

000d6bb8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6bb8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6bba:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6bbc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6bbe:	2100      	movs	r1, #0
   d6bc0:	f001 fd12 	bl	d85e8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6bc4:	4620      	mov	r0, r4
   d6bc6:	bd10      	pop	{r4, pc}

000d6bc8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6bc8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6bca:	4d0e      	ldr	r5, [pc, #56]	; (d6c04 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6bcc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6bce:	a801      	add	r0, sp, #4
   d6bd0:	f7ff fff2 	bl	d6bb8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6bd4:	6829      	ldr	r1, [r5, #0]
   d6bd6:	f011 0401 	ands.w	r4, r1, #1
   d6bda:	d110      	bne.n	d6bfe <_Z16_fetch_usbserialv+0x36>
   d6bdc:	4628      	mov	r0, r5
   d6bde:	f7fd fa6d 	bl	d40bc <__cxa_guard_acquire>
   d6be2:	b160      	cbz	r0, d6bfe <_Z16_fetch_usbserialv+0x36>
   d6be4:	aa01      	add	r2, sp, #4
   d6be6:	4621      	mov	r1, r4
   d6be8:	4807      	ldr	r0, [pc, #28]	; (d6c08 <_Z16_fetch_usbserialv+0x40>)
   d6bea:	f7ff ffd1 	bl	d6b90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6bee:	4628      	mov	r0, r5
   d6bf0:	f7fd fa69 	bl	d40c6 <__cxa_guard_release>
   d6bf4:	4a05      	ldr	r2, [pc, #20]	; (d6c0c <_Z16_fetch_usbserialv+0x44>)
   d6bf6:	4906      	ldr	r1, [pc, #24]	; (d6c10 <_Z16_fetch_usbserialv+0x48>)
   d6bf8:	4803      	ldr	r0, [pc, #12]	; (d6c08 <_Z16_fetch_usbserialv+0x40>)
   d6bfa:	f000 fe51 	bl	d78a0 <__aeabi_atexit>
	return _usbserial;
}
   d6bfe:	4802      	ldr	r0, [pc, #8]	; (d6c08 <_Z16_fetch_usbserialv+0x40>)
   d6c00:	b007      	add	sp, #28
   d6c02:	bd30      	pop	{r4, r5, pc}
   d6c04:	2003e414 	.word	0x2003e414
   d6c08:	2003e418 	.word	0x2003e418
   d6c0c:	2003e1c8 	.word	0x2003e1c8
   d6c10:	000d6b11 	.word	0x000d6b11

000d6c14 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6c14:	4770      	bx	lr

000d6c16 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6c16:	7441      	strb	r1, [r0, #17]
   d6c18:	4770      	bx	lr

000d6c1a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6c1a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6c1c:	7c00      	ldrb	r0, [r0, #16]
   d6c1e:	f7ff fa3b 	bl	d6098 <HAL_USART_Available_Data_For_Write>
}
   d6c22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c26:	bd08      	pop	{r3, pc}

000d6c28 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6c28:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6c2a:	7c00      	ldrb	r0, [r0, #16]
   d6c2c:	f7ff fa0c 	bl	d6048 <HAL_USART_Available_Data>
}
   d6c30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c34:	bd08      	pop	{r3, pc}

000d6c36 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6c36:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6c38:	7c00      	ldrb	r0, [r0, #16]
   d6c3a:	f7ff fa15 	bl	d6068 <HAL_USART_Peek_Data>
}
   d6c3e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c42:	bf28      	it	cs
   d6c44:	f04f 30ff 	movcs.w	r0, #4294967295
   d6c48:	bd08      	pop	{r3, pc}

000d6c4a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6c4a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6c4c:	7c00      	ldrb	r0, [r0, #16]
   d6c4e:	f7ff fa03 	bl	d6058 <HAL_USART_Read_Data>
}
   d6c52:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c56:	bf28      	it	cs
   d6c58:	f04f 30ff 	movcs.w	r0, #4294967295
   d6c5c:	bd08      	pop	{r3, pc}

000d6c5e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6c5e:	7c00      	ldrb	r0, [r0, #16]
   d6c60:	f7ff ba0a 	b.w	d6078 <HAL_USART_Flush_Data>

000d6c64 <_ZN11USARTSerialD0Ev>:
   d6c64:	b510      	push	{r4, lr}
   d6c66:	2114      	movs	r1, #20
   d6c68:	4604      	mov	r4, r0
   d6c6a:	f000 fe27 	bl	d78bc <_ZdlPvj>
   d6c6e:	4620      	mov	r0, r4
   d6c70:	bd10      	pop	{r4, pc}

000d6c72 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6c72:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6c74:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6c76:	4604      	mov	r4, r0
   d6c78:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6c7a:	b925      	cbnz	r5, d6c86 <_ZN11USARTSerial5writeEh+0x14>
   d6c7c:	7c00      	ldrb	r0, [r0, #16]
   d6c7e:	f7ff fa0b 	bl	d6098 <HAL_USART_Available_Data_For_Write>
   d6c82:	2800      	cmp	r0, #0
   d6c84:	dd05      	ble.n	d6c92 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6c86:	4631      	mov	r1, r6
   d6c88:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6c8e:	f7ff b9d3 	b.w	d6038 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6c92:	4628      	mov	r0, r5
   d6c94:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6c98 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6c98:	b510      	push	{r4, lr}
   d6c9a:	4604      	mov	r4, r0
   d6c9c:	4608      	mov	r0, r1
   d6c9e:	4611      	mov	r1, r2
   d6ca0:	2200      	movs	r2, #0
   d6ca2:	6062      	str	r2, [r4, #4]
   d6ca4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6ca8:	60a2      	str	r2, [r4, #8]
   d6caa:	4a05      	ldr	r2, [pc, #20]	; (d6cc0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6cac:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6cae:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6cb0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6cb2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6cb4:	461a      	mov	r2, r3
   d6cb6:	f7ff f9b7 	bl	d6028 <HAL_USART_Init>
}
   d6cba:	4620      	mov	r0, r4
   d6cbc:	bd10      	pop	{r4, pc}
   d6cbe:	bf00      	nop
   d6cc0:	000dacd4 	.word	0x000dacd4

000d6cc4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6cc4:	7c00      	ldrb	r0, [r0, #16]
   d6cc6:	f7ff b9df 	b.w	d6088 <HAL_USART_Is_Enabled>
	...

000d6ccc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6ccc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6cce:	4d0c      	ldr	r5, [pc, #48]	; (d6d00 <_Z22__fetch_global_Serial1v+0x34>)
   d6cd0:	6829      	ldr	r1, [r5, #0]
   d6cd2:	f011 0401 	ands.w	r4, r1, #1
   d6cd6:	d111      	bne.n	d6cfc <_Z22__fetch_global_Serial1v+0x30>
   d6cd8:	4628      	mov	r0, r5
   d6cda:	f7fd f9ef 	bl	d40bc <__cxa_guard_acquire>
   d6cde:	b168      	cbz	r0, d6cfc <_Z22__fetch_global_Serial1v+0x30>
   d6ce0:	4a08      	ldr	r2, [pc, #32]	; (d6d04 <_Z22__fetch_global_Serial1v+0x38>)
   d6ce2:	4b09      	ldr	r3, [pc, #36]	; (d6d08 <_Z22__fetch_global_Serial1v+0x3c>)
   d6ce4:	4809      	ldr	r0, [pc, #36]	; (d6d0c <_Z22__fetch_global_Serial1v+0x40>)
   d6ce6:	4621      	mov	r1, r4
   d6ce8:	f7ff ffd6 	bl	d6c98 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6cec:	4628      	mov	r0, r5
   d6cee:	f7fd f9ea 	bl	d40c6 <__cxa_guard_release>
   d6cf2:	4a07      	ldr	r2, [pc, #28]	; (d6d10 <_Z22__fetch_global_Serial1v+0x44>)
   d6cf4:	4907      	ldr	r1, [pc, #28]	; (d6d14 <_Z22__fetch_global_Serial1v+0x48>)
   d6cf6:	4805      	ldr	r0, [pc, #20]	; (d6d0c <_Z22__fetch_global_Serial1v+0x40>)
   d6cf8:	f000 fdd2 	bl	d78a0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6cfc:	4803      	ldr	r0, [pc, #12]	; (d6d0c <_Z22__fetch_global_Serial1v+0x40>)
   d6cfe:	bd38      	pop	{r3, r4, r5, pc}
   d6d00:	2003e4c4 	.word	0x2003e4c4
   d6d04:	2003e4c8 	.word	0x2003e4c8
   d6d08:	2003e440 	.word	0x2003e440
   d6d0c:	2003e42c 	.word	0x2003e42c
   d6d10:	2003e1c8 	.word	0x2003e1c8
   d6d14:	000d6c15 	.word	0x000d6c15

000d6d18 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6d18:	4770      	bx	lr

000d6d1a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d1c:	4606      	mov	r6, r0
   d6d1e:	4615      	mov	r5, r2
   d6d20:	460c      	mov	r4, r1
   d6d22:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6d24:	42bc      	cmp	r4, r7
   d6d26:	d006      	beq.n	d6d36 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6d28:	6833      	ldr	r3, [r6, #0]
   d6d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6d2e:	689b      	ldr	r3, [r3, #8]
   d6d30:	4630      	mov	r0, r6
   d6d32:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6d34:	e7f6      	b.n	d6d24 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6d36:	4628      	mov	r0, r5
   d6d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d3a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6d3a:	2200      	movs	r2, #0
   d6d3c:	7c00      	ldrb	r0, [r0, #16]
   d6d3e:	f7ff b9cb 	b.w	d60d8 <HAL_I2C_Write_Data>

000d6d42 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6d42:	2100      	movs	r1, #0
   d6d44:	7c00      	ldrb	r0, [r0, #16]
   d6d46:	f7ff b9cf 	b.w	d60e8 <HAL_I2C_Available_Data>

000d6d4a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6d4a:	2100      	movs	r1, #0
   d6d4c:	7c00      	ldrb	r0, [r0, #16]
   d6d4e:	f7ff b9d3 	b.w	d60f8 <HAL_I2C_Read_Data>

000d6d52 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6d52:	2100      	movs	r1, #0
   d6d54:	7c00      	ldrb	r0, [r0, #16]
   d6d56:	f7ff b9d7 	b.w	d6108 <HAL_I2C_Peek_Data>

000d6d5a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6d5a:	2100      	movs	r1, #0
   d6d5c:	7c00      	ldrb	r0, [r0, #16]
   d6d5e:	f7ff b9db 	b.w	d6118 <HAL_I2C_Flush_Data>

000d6d62 <_ZN7TwoWireD0Ev>:
   d6d62:	b510      	push	{r4, lr}
   d6d64:	2114      	movs	r1, #20
   d6d66:	4604      	mov	r4, r0
   d6d68:	f000 fda8 	bl	d78bc <_ZdlPvj>
   d6d6c:	4620      	mov	r0, r4
   d6d6e:	bd10      	pop	{r4, pc}

000d6d70 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6d70:	b510      	push	{r4, lr}
   d6d72:	4604      	mov	r4, r0
   d6d74:	2300      	movs	r3, #0
   d6d76:	6063      	str	r3, [r4, #4]
   d6d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6d7c:	60a3      	str	r3, [r4, #8]
   d6d7e:	4b04      	ldr	r3, [pc, #16]	; (d6d90 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6d80:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6d82:	4608      	mov	r0, r1
   d6d84:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6d86:	4611      	mov	r1, r2
   d6d88:	f7ff f9d6 	bl	d6138 <HAL_I2C_Init>
}
   d6d8c:	4620      	mov	r0, r4
   d6d8e:	bd10      	pop	{r4, pc}
   d6d90:	000dad04 	.word	0x000dad04

000d6d94 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6d94:	2300      	movs	r3, #0
   d6d96:	461a      	mov	r2, r3
   d6d98:	4619      	mov	r1, r3
   d6d9a:	7c00      	ldrb	r0, [r0, #16]
   d6d9c:	f7ff b984 	b.w	d60a8 <HAL_I2C_Begin>

000d6da0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6da0:	b570      	push	{r4, r5, r6, lr}
   d6da2:	460c      	mov	r4, r1
   d6da4:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d6da6:	2514      	movs	r5, #20
   d6da8:	4606      	mov	r6, r0
   d6daa:	462a      	mov	r2, r5
   d6dac:	2100      	movs	r1, #0
   d6dae:	a801      	add	r0, sp, #4
   d6db0:	f001 fc1a 	bl	d85e8 <memset>
   d6db4:	7823      	ldrb	r3, [r4, #0]
   d6db6:	f88d 3008 	strb.w	r3, [sp, #8]
   d6dba:	6863      	ldr	r3, [r4, #4]
   d6dbc:	9303      	str	r3, [sp, #12]
   d6dbe:	68e3      	ldr	r3, [r4, #12]
   d6dc0:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d6dc2:	2200      	movs	r2, #0
   d6dc4:	7a23      	ldrb	r3, [r4, #8]
   d6dc6:	7c30      	ldrb	r0, [r6, #16]
   d6dc8:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6dcc:	a901      	add	r1, sp, #4
   d6dce:	9305      	str	r3, [sp, #20]
   d6dd0:	f7ff f9ba 	bl	d6148 <HAL_I2C_Request_Data_Ex>
}
   d6dd4:	b006      	add	sp, #24
   d6dd6:	bd70      	pop	{r4, r5, r6, pc}

000d6dd8 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d6dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6dda:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6ddc:	f88d 1000 	strb.w	r1, [sp]
   d6de0:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6de4:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6de6:	bf18      	it	ne
   d6de8:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6dea:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d6dec:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6dee:	f88d 3008 	strb.w	r3, [sp, #8]
   d6df2:	f7ff ffd5 	bl	d6da0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6df6:	b005      	add	sp, #20
   d6df8:	f85d fb04 	ldr.w	pc, [sp], #4

000d6dfc <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d6dfc:	2301      	movs	r3, #1
   d6dfe:	f7ff bfeb 	b.w	d6dd8 <_ZN7TwoWire11requestFromEhjh>

000d6e02 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6e02:	2200      	movs	r2, #0
   d6e04:	7c00      	ldrb	r0, [r0, #16]
   d6e06:	f7ff b957 	b.w	d60b8 <HAL_I2C_Begin_Transmission>

000d6e0a <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d6e0a:	b2c9      	uxtb	r1, r1
   d6e0c:	f7ff bff9 	b.w	d6e02 <_ZN7TwoWire17beginTransmissionEh>

000d6e10 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6e10:	2200      	movs	r2, #0
   d6e12:	7c00      	ldrb	r0, [r0, #16]
   d6e14:	f7ff b958 	b.w	d60c8 <HAL_I2C_End_Transmission>

000d6e18 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6e18:	2101      	movs	r1, #1
   d6e1a:	f7ff bff9 	b.w	d6e10 <_ZN7TwoWire15endTransmissionEh>

000d6e1e <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6e1e:	2100      	movs	r1, #0
   d6e20:	7c00      	ldrb	r0, [r0, #16]
   d6e22:	f7ff b981 	b.w	d6128 <HAL_I2C_Is_Enabled>

000d6e26 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6e26:	2200      	movs	r2, #0
   d6e28:	4611      	mov	r1, r2
   d6e2a:	6840      	ldr	r0, [r0, #4]
   d6e2c:	f7ff ba60 	b.w	d62f0 <network_listening>

000d6e30 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6e30:	2200      	movs	r2, #0
   d6e32:	4611      	mov	r1, r2
   d6e34:	6840      	ldr	r0, [r0, #4]
   d6e36:	f7ff ba6b 	b.w	d6310 <network_get_listen_timeout>

000d6e3a <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6e3a:	2200      	movs	r2, #0
   d6e3c:	6840      	ldr	r0, [r0, #4]
   d6e3e:	f7ff ba5f 	b.w	d6300 <network_set_listen_timeout>

000d6e42 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6e42:	2200      	movs	r2, #0
   d6e44:	f081 0101 	eor.w	r1, r1, #1
   d6e48:	6840      	ldr	r0, [r0, #4]
   d6e4a:	f7ff ba49 	b.w	d62e0 <network_listen>

000d6e4e <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6e4e:	2300      	movs	r3, #0
   d6e50:	461a      	mov	r2, r3
   d6e52:	2101      	movs	r1, #1
   d6e54:	6840      	ldr	r0, [r0, #4]
   d6e56:	f7ff ba3b 	b.w	d62d0 <network_off>

000d6e5a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6e5a:	2300      	movs	r3, #0
   d6e5c:	461a      	mov	r2, r3
   d6e5e:	4619      	mov	r1, r3
   d6e60:	6840      	ldr	r0, [r0, #4]
   d6e62:	f7ff ba2d 	b.w	d62c0 <network_on>

000d6e66 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6e66:	2200      	movs	r2, #0
   d6e68:	4611      	mov	r1, r2
   d6e6a:	6840      	ldr	r0, [r0, #4]
   d6e6c:	f7ff ba20 	b.w	d62b0 <network_ready>

000d6e70 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6e70:	2200      	movs	r2, #0
   d6e72:	4611      	mov	r1, r2
   d6e74:	6840      	ldr	r0, [r0, #4]
   d6e76:	f7ff ba0b 	b.w	d6290 <network_connecting>

000d6e7a <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e7a:	2200      	movs	r2, #0
   d6e7c:	2102      	movs	r1, #2
   d6e7e:	6840      	ldr	r0, [r0, #4]
   d6e80:	f7ff ba0e 	b.w	d62a0 <network_disconnect>

000d6e84 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6e84:	2300      	movs	r3, #0
   d6e86:	461a      	mov	r2, r3
   d6e88:	6840      	ldr	r0, [r0, #4]
   d6e8a:	f7ff b9f9 	b.w	d6280 <network_connect>

000d6e8e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6e8e:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6e90:	4605      	mov	r5, r0
   d6e92:	b188      	cbz	r0, d6eb8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6e94:	6804      	ldr	r4, [r0, #0]
   d6e96:	b14c      	cbz	r4, d6eac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d6e98:	68a3      	ldr	r3, [r4, #8]
   d6e9a:	b11b      	cbz	r3, d6ea4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6e9c:	2203      	movs	r2, #3
   d6e9e:	4621      	mov	r1, r4
   d6ea0:	4620      	mov	r0, r4
   d6ea2:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6ea4:	2110      	movs	r1, #16
   d6ea6:	4620      	mov	r0, r4
   d6ea8:	f000 fd08 	bl	d78bc <_ZdlPvj>
   d6eac:	4628      	mov	r0, r5
   d6eae:	2114      	movs	r1, #20
      }
   d6eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6eb4:	f000 bd02 	b.w	d78bc <_ZdlPvj>
   d6eb8:	bd38      	pop	{r3, r4, r5, pc}

000d6eba <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6eba:	b110      	cbz	r0, d6ec2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6ebc:	6803      	ldr	r3, [r0, #0]
   d6ebe:	685b      	ldr	r3, [r3, #4]
   d6ec0:	4718      	bx	r3
   d6ec2:	4770      	bx	lr

000d6ec4 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6ec4:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6ec6:	6803      	ldr	r3, [r0, #0]
   d6ec8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6eca:	b1bb      	cbz	r3, d6efc <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6ecc:	6858      	ldr	r0, [r3, #4]
   d6ece:	f7ff f86b 	bl	d5fa8 <os_thread_is_current>
   d6ed2:	b978      	cbnz	r0, d6ef4 <_ZN6ThreadD1Ev+0x30>
   d6ed4:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6ed6:	7c5a      	ldrb	r2, [r3, #17]
   d6ed8:	b912      	cbnz	r2, d6ee0 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6eda:	6858      	ldr	r0, [r3, #4]
   d6edc:	f7ff f86c 	bl	d5fb8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6ee0:	6823      	ldr	r3, [r4, #0]
   d6ee2:	6858      	ldr	r0, [r3, #4]
   d6ee4:	f7ff f870 	bl	d5fc8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ee8:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6eea:	2300      	movs	r3, #0
   d6eec:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6eee:	b128      	cbz	r0, d6efc <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6ef0:	f7ff ffcd 	bl	d6e8e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6ef4:	6820      	ldr	r0, [r4, #0]
   d6ef6:	b108      	cbz	r0, d6efc <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6ef8:	f7ff ffc9 	bl	d6e8e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6efc:	4620      	mov	r0, r4
   d6efe:	bd10      	pop	{r4, pc}

000d6f00 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6f00:	b538      	push	{r3, r4, r5, lr}
   d6f02:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6f04:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6f08:	b108      	cbz	r0, d6f0e <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6f0a:	f7fd f8ca 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6f0e:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6f12:	b108      	cbz	r0, d6f18 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6f14:	f7ff f868 	bl	d5fe8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6f18:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6f1c:	b135      	cbz	r5, d6f2c <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f1e:	4628      	mov	r0, r5
   d6f20:	f7ff ffd0 	bl	d6ec4 <_ZN6ThreadD1Ev>
   d6f24:	2104      	movs	r1, #4
   d6f26:	4628      	mov	r0, r5
   d6f28:	f000 fcc8 	bl	d78bc <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6f2c:	6820      	ldr	r0, [r4, #0]
   d6f2e:	b108      	cbz	r0, d6f34 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6f30:	f7ff ffc3 	bl	d6eba <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6f34:	4620      	mov	r0, r4
   d6f36:	bd38      	pop	{r3, r4, r5, pc}

000d6f38 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6f38:	b510      	push	{r4, lr}
   d6f3a:	4b04      	ldr	r3, [pc, #16]	; (d6f4c <_ZN5spark9MeshClassD1Ev+0x14>)
   d6f3c:	4604      	mov	r4, r0
   d6f3e:	f840 3b08 	str.w	r3, [r0], #8
   d6f42:	f7ff ffdd 	bl	d6f00 <_ZN5spark11MeshPublishD1Ev>
   d6f46:	4620      	mov	r0, r4
   d6f48:	bd10      	pop	{r4, pc}
   d6f4a:	bf00      	nop
   d6f4c:	000dad2c 	.word	0x000dad2c

000d6f50 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6f50:	b538      	push	{r3, r4, r5, lr}
   d6f52:	4c0e      	ldr	r4, [pc, #56]	; (d6f8c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6f54:	4b0e      	ldr	r3, [pc, #56]	; (d6f90 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6f56:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6f58:	2500      	movs	r5, #0
   d6f5a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6f5c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6f60:	6063      	str	r3, [r4, #4]
   d6f62:	60a5      	str	r5, [r4, #8]
   d6f64:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6f68:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6f6c:	f7ff f834 	bl	d5fd8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6f70:	4b08      	ldr	r3, [pc, #32]	; (d6f94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6f72:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6f76:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6f7a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6f7c:	4620      	mov	r0, r4
   d6f7e:	4a06      	ldr	r2, [pc, #24]	; (d6f98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6f80:	4906      	ldr	r1, [pc, #24]	; (d6f9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6f86:	f000 bc8b 	b.w	d78a0 <__aeabi_atexit>
   d6f8a:	bf00      	nop
   d6f8c:	2003e54c 	.word	0x2003e54c
   d6f90:	000dae14 	.word	0x000dae14
   d6f94:	000dad2c 	.word	0x000dad2c
   d6f98:	2003e1c8 	.word	0x2003e1c8
   d6f9c:	000d6f39 	.word	0x000d6f39

000d6fa0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6fa2:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6fa4:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6fa6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6faa:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6fac:	2201      	movs	r2, #1
   d6fae:	f04f 33ff 	mov.w	r3, #4294967295
   d6fb2:	4621      	mov	r1, r4
   d6fb4:	47a8      	blx	r5
}
   d6fb6:	b003      	add	sp, #12
   d6fb8:	bd30      	pop	{r4, r5, pc}

000d6fba <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6fba:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6fbc:	6803      	ldr	r3, [r0, #0]
   d6fbe:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6fc0:	f04f 33ff 	mov.w	r3, #4294967295
   d6fc4:	46a4      	mov	ip, r4
}
   d6fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6fca:	4760      	bx	ip

000d6fcc <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6fce:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d6fd0:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6fd2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d6fd6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6fd8:	4621      	mov	r1, r4
   d6fda:	4613      	mov	r3, r2
   d6fdc:	2201      	movs	r2, #1
   d6fde:	47a8      	blx	r5
}
   d6fe0:	b003      	add	sp, #12
   d6fe2:	bd30      	pop	{r4, r5, pc}

000d6fe4 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d6fe4:	4770      	bx	lr

000d6fe6 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6fe6:	b538      	push	{r3, r4, r5, lr}
   d6fe8:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6fea:	681a      	ldr	r2, [r3, #0]
   d6fec:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6fee:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d6ff0:	da05      	bge.n	d6ffe <_ZN9TCPClient9connectedEv+0x18>
   d6ff2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6ff6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6ffa:	429a      	cmp	r2, r3
   d6ffc:	d001      	beq.n	d7002 <_ZN9TCPClient9connectedEv+0x1c>
   d6ffe:	2501      	movs	r5, #1
   d7000:	e00b      	b.n	d701a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d7002:	6803      	ldr	r3, [r0, #0]
   d7004:	691b      	ldr	r3, [r3, #16]
   d7006:	4798      	blx	r3
   d7008:	2800      	cmp	r0, #0
   d700a:	bf14      	ite	ne
   d700c:	2501      	movne	r5, #1
   d700e:	2500      	moveq	r5, #0
        if (!rv) {
   d7010:	d103      	bne.n	d701a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d7012:	6823      	ldr	r3, [r4, #0]
   d7014:	4620      	mov	r0, r4
   d7016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7018:	4798      	blx	r3
        }
    }
    return rv;
}
   d701a:	4628      	mov	r0, r5
   d701c:	bd38      	pop	{r3, r4, r5, pc}

000d701e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d701e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d7020:	6818      	ldr	r0, [r3, #0]
}
   d7022:	43c0      	mvns	r0, r0
   d7024:	0fc0      	lsrs	r0, r0, #31
   d7026:	4770      	bx	lr

000d7028 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7028:	4770      	bx	lr

000d702a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d702a:	2000      	movs	r0, #0
   d702c:	4770      	bx	lr

000d702e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d702e:	b510      	push	{r4, lr}
   d7030:	2114      	movs	r1, #20
   d7032:	4604      	mov	r4, r0
   d7034:	f000 fc42 	bl	d78bc <_ZdlPvj>
   d7038:	4620      	mov	r0, r4
   d703a:	bd10      	pop	{r4, pc}

000d703c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d703c:	f7fd b82f 	b.w	d409e <_ZdlPv>

000d7040 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7040:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7042:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d7044:	2200      	movs	r2, #0
   d7046:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d7048:	9202      	str	r2, [sp, #8]
   d704a:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d704c:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d704e:	4604      	mov	r4, r0
   d7050:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7052:	d008      	beq.n	d7066 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d7054:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7058:	fbb3 f1f2 	udiv	r1, r3, r2
   d705c:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d705e:	fb02 3111 	mls	r1, r2, r1, r3
   d7062:	434a      	muls	r2, r1
   d7064:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7066:	6960      	ldr	r0, [r4, #20]
   d7068:	2308      	movs	r3, #8
   d706a:	9300      	str	r3, [sp, #0]
   d706c:	f241 0205 	movw	r2, #4101	; 0x1005
   d7070:	446b      	add	r3, sp
   d7072:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7076:	6800      	ldr	r0, [r0, #0]
   d7078:	f7ff f86e 	bl	d6158 <sock_setsockopt>
    if (ret < 0) {
   d707c:	2800      	cmp	r0, #0
   d707e:	db08      	blt.n	d7092 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d7080:	6960      	ldr	r0, [r4, #20]
   d7082:	2300      	movs	r3, #0
   d7084:	4632      	mov	r2, r6
   d7086:	4629      	mov	r1, r5
   d7088:	6800      	ldr	r0, [r0, #0]
   d708a:	f7ff f885 	bl	d6198 <sock_send>
    if (ret < 0) {
   d708e:	2800      	cmp	r0, #0
   d7090:	da04      	bge.n	d709c <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d7092:	f7ff f96d 	bl	d6370 <__errno>
   d7096:	6803      	ldr	r3, [r0, #0]
   d7098:	6063      	str	r3, [r4, #4]
   d709a:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d709c:	b004      	add	sp, #16
   d709e:	bd70      	pop	{r4, r5, r6, pc}

000d70a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d70a0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d70a2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d70a4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d70a6:	689b      	ldr	r3, [r3, #8]
   d70a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d70aa:	68a3      	ldr	r3, [r4, #8]
   d70ac:	3b01      	subs	r3, #1
   d70ae:	60a3      	str	r3, [r4, #8]
   d70b0:	b92b      	cbnz	r3, d70be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d70b2:	6823      	ldr	r3, [r4, #0]
   d70b4:	4620      	mov	r0, r4
   d70b6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d70b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d70bc:	4718      	bx	r3
   d70be:	bd10      	pop	{r4, pc}

000d70c0 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d70c0:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d70c2:	4604      	mov	r4, r0
   d70c4:	694d      	ldr	r5, [r1, #20]
   d70c6:	4b05      	ldr	r3, [pc, #20]	; (d70dc <_ZN9TCPClient8remoteIPEv+0x1c>)
   d70c8:	f844 3b04 	str.w	r3, [r4], #4
   d70cc:	358c      	adds	r5, #140	; 0x8c
   d70ce:	4606      	mov	r6, r0
   d70d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d70d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d70d4:	682b      	ldr	r3, [r5, #0]
   d70d6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d70d8:	4630      	mov	r0, r6
   d70da:	bd70      	pop	{r4, r5, r6, pc}
   d70dc:	000dac90 	.word	0x000dac90

000d70e0 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d70e0:	b510      	push	{r4, lr}
   d70e2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d70e4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d70e8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d70ec:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d70ee:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d70f0:	d005      	beq.n	d70fe <_ZN9TCPClient4peekEv+0x1e>
   d70f2:	6962      	ldr	r2, [r4, #20]
   d70f4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d70f8:	4413      	add	r3, r2
   d70fa:	7918      	ldrb	r0, [r3, #4]
   d70fc:	bd10      	pop	{r4, pc}
   d70fe:	6803      	ldr	r3, [r0, #0]
   d7100:	691b      	ldr	r3, [r3, #16]
   d7102:	4798      	blx	r3
   d7104:	2800      	cmp	r0, #0
   d7106:	d1f4      	bne.n	d70f2 <_ZN9TCPClient4peekEv+0x12>
   d7108:	f04f 30ff 	mov.w	r0, #4294967295
}
   d710c:	bd10      	pop	{r4, pc}

000d710e <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d710e:	b510      	push	{r4, lr}
   d7110:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7112:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7116:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d711a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d711c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d711e:	d008      	beq.n	d7132 <_ZN9TCPClient4readEv+0x24>
   d7120:	6962      	ldr	r2, [r4, #20]
   d7122:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7126:	1c59      	adds	r1, r3, #1
   d7128:	4413      	add	r3, r2
   d712a:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d712e:	7918      	ldrb	r0, [r3, #4]
   d7130:	bd10      	pop	{r4, pc}
   d7132:	6803      	ldr	r3, [r0, #0]
   d7134:	691b      	ldr	r3, [r3, #16]
   d7136:	4798      	blx	r3
   d7138:	2800      	cmp	r0, #0
   d713a:	d1f1      	bne.n	d7120 <_ZN9TCPClient4readEv+0x12>
   d713c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7140:	bd10      	pop	{r4, pc}

000d7142 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7144:	6943      	ldr	r3, [r0, #20]
   d7146:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d7148:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d714c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7150:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7152:	4605      	mov	r5, r0
   d7154:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d7156:	d106      	bne.n	d7166 <_ZN9TCPClient4readEPhj+0x24>
   d7158:	6803      	ldr	r3, [r0, #0]
   d715a:	691b      	ldr	r3, [r3, #16]
   d715c:	4798      	blx	r3
   d715e:	b910      	cbnz	r0, d7166 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d7160:	f04f 34ff 	mov.w	r4, #4294967295
   d7164:	e014      	b.n	d7190 <_ZN9TCPClient4readEPhj+0x4e>
   d7166:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d7168:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d716c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7170:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7172:	42bc      	cmp	r4, r7
   d7174:	bf28      	it	cs
   d7176:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7178:	4419      	add	r1, r3
   d717a:	4622      	mov	r2, r4
   d717c:	3104      	adds	r1, #4
   d717e:	4630      	mov	r0, r6
   d7180:	f001 fa0c 	bl	d859c <memcpy>
   d7184:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7186:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d718a:	4423      	add	r3, r4
   d718c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d7190:	4620      	mov	r0, r4
   d7192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7194 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7198:	4698      	mov	r8, r3
    stop();
   d719a:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d719c:	b093      	sub	sp, #76	; 0x4c
    stop();
   d719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d71a0:	460d      	mov	r5, r1
   d71a2:	4606      	mov	r6, r0
   d71a4:	4617      	mov	r7, r2
    stop();
   d71a6:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d71a8:	ab12      	add	r3, sp, #72	; 0x48
   d71aa:	2400      	movs	r4, #0
   d71ac:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d71b0:	4622      	mov	r2, r4
   d71b2:	4621      	mov	r1, r4
   d71b4:	4628      	mov	r0, r5
   d71b6:	f7fe fe4f 	bl	d5e58 <netdb_getaddrinfo>
   d71ba:	4681      	mov	r9, r0
   d71bc:	2800      	cmp	r0, #0
   d71be:	d13d      	bne.n	d723c <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d71c0:	9b00      	ldr	r3, [sp, #0]
   d71c2:	2b00      	cmp	r3, #0
   d71c4:	d056      	beq.n	d7274 <_ZN9TCPClient7connectEPKctm+0xe0>
   d71c6:	695b      	ldr	r3, [r3, #20]
   d71c8:	2b00      	cmp	r3, #0
   d71ca:	d053      	beq.n	d7274 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d71cc:	a806      	add	r0, sp, #24
   d71ce:	f7ff fc4f 	bl	d6a70 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d71d2:	9b00      	ldr	r3, [sp, #0]
   d71d4:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d71d6:	7863      	ldrb	r3, [r4, #1]
   d71d8:	2b02      	cmp	r3, #2
   d71da:	d101      	bne.n	d71e0 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d71dc:	1d21      	adds	r1, r4, #4
   d71de:	e013      	b.n	d7208 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d71e0:	2b0a      	cmp	r3, #10
   d71e2:	d114      	bne.n	d720e <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d71e4:	2211      	movs	r2, #17
   d71e6:	4649      	mov	r1, r9
   d71e8:	a801      	add	r0, sp, #4
   d71ea:	f001 f9fd 	bl	d85e8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d71ee:	68a3      	ldr	r3, [r4, #8]
   d71f0:	bb33      	cbnz	r3, d7240 <_ZN9TCPClient7connectEPKctm+0xac>
   d71f2:	68e3      	ldr	r3, [r4, #12]
   d71f4:	bb23      	cbnz	r3, d7240 <_ZN9TCPClient7connectEPKctm+0xac>
   d71f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d71fa:	6925      	ldr	r5, [r4, #16]
   d71fc:	f7fe ff04 	bl	d6008 <inet_htonl>
   d7200:	4285      	cmp	r5, r0
   d7202:	d11d      	bne.n	d7240 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7204:	f104 0114 	add.w	r1, r4, #20
   d7208:	a806      	add	r0, sp, #24
   d720a:	f7ff fc74 	bl	d6af6 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d720e:	a806      	add	r0, sp, #24
   d7210:	f7ff fc4e 	bl	d6ab0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7214:	2800      	cmp	r0, #0
   d7216:	d02d      	beq.n	d7274 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d7218:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d721a:	ad07      	add	r5, sp, #28
   d721c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7220:	4b18      	ldr	r3, [pc, #96]	; (d7284 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d7222:	930c      	str	r3, [sp, #48]	; 0x30
   d7224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7226:	ac0d      	add	r4, sp, #52	; 0x34
   d7228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d722a:	682b      	ldr	r3, [r5, #0]
   d722c:	7023      	strb	r3, [r4, #0]
   d722e:	463a      	mov	r2, r7
   d7230:	4643      	mov	r3, r8
   d7232:	a90c      	add	r1, sp, #48	; 0x30
   d7234:	4630      	mov	r0, r6
   d7236:	47c8      	blx	r9
   d7238:	4681      	mov	r9, r0
   d723a:	e01b      	b.n	d7274 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d723c:	46a1      	mov	r9, r4
   d723e:	e019      	b.n	d7274 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7240:	f104 0308 	add.w	r3, r4, #8
   d7244:	ad01      	add	r5, sp, #4
   d7246:	3418      	adds	r4, #24
   d7248:	6818      	ldr	r0, [r3, #0]
   d724a:	6859      	ldr	r1, [r3, #4]
   d724c:	462a      	mov	r2, r5
   d724e:	c203      	stmia	r2!, {r0, r1}
   d7250:	3308      	adds	r3, #8
   d7252:	42a3      	cmp	r3, r4
   d7254:	4615      	mov	r5, r2
   d7256:	d1f7      	bne.n	d7248 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d7258:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d725a:	a901      	add	r1, sp, #4
   d725c:	a80c      	add	r0, sp, #48	; 0x30
   d725e:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7260:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7264:	f7ff fc12 	bl	d6a8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d726a:	ac07      	add	r4, sp, #28
   d726c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d726e:	682b      	ldr	r3, [r5, #0]
   d7270:	7023      	strb	r3, [r4, #0]
   d7272:	e7cc      	b.n	d720e <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d7274:	9800      	ldr	r0, [sp, #0]
   d7276:	f7fe fde7 	bl	d5e48 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d727a:	4648      	mov	r0, r9
   d727c:	b013      	add	sp, #76	; 0x4c
   d727e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7282:	bf00      	nop
   d7284:	000dac90 	.word	0x000dac90

000d7288 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d7288:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d728a:	2300      	movs	r3, #0
   d728c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7290:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7292:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d7296:	4770      	bx	lr

000d7298 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d729c:	461e      	mov	r6, r3
    stop();
   d729e:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d72a0:	460c      	mov	r4, r1
   d72a2:	b08a      	sub	sp, #40	; 0x28
    stop();
   d72a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d72a6:	4605      	mov	r5, r0
   d72a8:	4617      	mov	r7, r2
    stop();
   d72aa:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d72ac:	7d23      	ldrb	r3, [r4, #20]
   d72ae:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d72b2:	2b04      	cmp	r3, #4
   d72b4:	bf0c      	ite	eq
   d72b6:	2002      	moveq	r0, #2
   d72b8:	200a      	movne	r0, #10
   d72ba:	2206      	movs	r2, #6
   d72bc:	2101      	movs	r1, #1
   d72be:	f7fe ff73 	bl	d61a8 <sock_socket>
   d72c2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d72c6:	696b      	ldr	r3, [r5, #20]
   d72c8:	681b      	ldr	r3, [r3, #0]
   d72ca:	2b00      	cmp	r3, #0
   d72cc:	db18      	blt.n	d7300 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d72ce:	4628      	mov	r0, r5
   d72d0:	f7ff ffda 	bl	d7288 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d72d4:	b1d6      	cbz	r6, d730c <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d72d6:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d72d8:	a903      	add	r1, sp, #12
   d72da:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d72dc:	9303      	str	r3, [sp, #12]
   d72de:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d72e2:	f7fe fe41 	bl	d5f68 <if_index_to_name>
   d72e6:	b958      	cbnz	r0, d7300 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d72e8:	6968      	ldr	r0, [r5, #20]
   d72ea:	2306      	movs	r3, #6
   d72ec:	9300      	str	r3, [sp, #0]
   d72ee:	f241 020b 	movw	r2, #4107	; 0x100b
   d72f2:	ab03      	add	r3, sp, #12
   d72f4:	f640 71ff 	movw	r1, #4095	; 0xfff
   d72f8:	6800      	ldr	r0, [r0, #0]
   d72fa:	f7fe ff2d 	bl	d6158 <sock_setsockopt>
   d72fe:	b128      	cbz	r0, d730c <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7300:	682b      	ldr	r3, [r5, #0]
   d7302:	4628      	mov	r0, r5
   d7304:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7306:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7308:	4798      	blx	r3
   d730a:	e03b      	b.n	d7384 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d730c:	261c      	movs	r6, #28
   d730e:	4632      	mov	r2, r6
   d7310:	2100      	movs	r1, #0
   d7312:	a803      	add	r0, sp, #12
   d7314:	f001 f968 	bl	d85e8 <memset>
    if (ip.version() == 4) {
   d7318:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d731a:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d731e:	2b04      	cmp	r3, #4
   d7320:	d10c      	bne.n	d733c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7322:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d7324:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7326:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d732a:	f7fe fe75 	bl	d6018 <inet_htons>
   d732e:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7332:	6860      	ldr	r0, [r4, #4]
   d7334:	f7fe fe68 	bl	d6008 <inet_htonl>
   d7338:	9004      	str	r0, [sp, #16]
   d733a:	e013      	b.n	d7364 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d733c:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d733e:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7340:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d7344:	f7fe fe68 	bl	d6018 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7348:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d734a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d734e:	1d23      	adds	r3, r4, #4
   d7350:	f104 0714 	add.w	r7, r4, #20
   d7354:	6818      	ldr	r0, [r3, #0]
   d7356:	6859      	ldr	r1, [r3, #4]
   d7358:	4632      	mov	r2, r6
   d735a:	c203      	stmia	r2!, {r0, r1}
   d735c:	3308      	adds	r3, #8
   d735e:	42bb      	cmp	r3, r7
   d7360:	4616      	mov	r6, r2
   d7362:	d1f7      	bne.n	d7354 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7364:	696b      	ldr	r3, [r5, #20]
   d7366:	221c      	movs	r2, #28
   d7368:	a903      	add	r1, sp, #12
   d736a:	6818      	ldr	r0, [r3, #0]
   d736c:	f7fe ff04 	bl	d6178 <sock_connect>
   d7370:	2800      	cmp	r0, #0
   d7372:	d1c5      	bne.n	d7300 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d7374:	3404      	adds	r4, #4
   d7376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7378:	696d      	ldr	r5, [r5, #20]
   d737a:	358c      	adds	r5, #140	; 0x8c
   d737c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d737e:	6823      	ldr	r3, [r4, #0]
   d7380:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d7382:	2401      	movs	r4, #1
}
   d7384:	4620      	mov	r0, r4
   d7386:	b00a      	add	sp, #40	; 0x28
   d7388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d738c <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d738c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d738e:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7390:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7392:	6818      	ldr	r0, [r3, #0]
   d7394:	2800      	cmp	r0, #0
   d7396:	db01      	blt.n	d739c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7398:	f7fe fee6 	bl	d6168 <sock_close>
   d739c:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d739e:	f04f 32ff 	mov.w	r2, #4294967295
   d73a2:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d73a4:	6960      	ldr	r0, [r4, #20]
   d73a6:	2211      	movs	r2, #17
   d73a8:	2100      	movs	r1, #0
   d73aa:	308c      	adds	r0, #140	; 0x8c
   d73ac:	f001 f91c 	bl	d85e8 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d73b0:	4620      	mov	r0, r4
}
   d73b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d73b6:	f7ff bf67 	b.w	d7288 <_ZN9TCPClient12flush_bufferEv>
	...

000d73bc <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d73bc:	b530      	push	{r4, r5, lr}
   d73be:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d73c0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d73c4:	b08b      	sub	sp, #44	; 0x2c
   d73c6:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d73c8:	b11b      	cbz	r3, d73d2 <_ZN9TCPClient9availableEv+0x16>
   d73ca:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d73ce:	429a      	cmp	r2, r3
   d73d0:	d040      	beq.n	d7454 <_ZN9TCPClient9availableEv+0x98>
   d73d2:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d73d4:	6818      	ldr	r0, [r3, #0]
   d73d6:	2800      	cmp	r0, #0
   d73d8:	db3f      	blt.n	d745a <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d73da:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d73de:	2d7f      	cmp	r5, #127	; 0x7f
   d73e0:	d83b      	bhi.n	d745a <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d73e2:	1d19      	adds	r1, r3, #4
   d73e4:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d73e8:	2308      	movs	r3, #8
   d73ea:	4429      	add	r1, r5
   d73ec:	f7fe fecc 	bl	d6188 <sock_recv>
            if (ret > 0) {
   d73f0:	2800      	cmp	r0, #0
   d73f2:	dd0c      	ble.n	d740e <_ZN9TCPClient9availableEv+0x52>
   d73f4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d73f6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d73fa:	b90a      	cbnz	r2, d7400 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d73fc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7400:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d7402:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7406:	4418      	add	r0, r3
   d7408:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d740c:	e025      	b.n	d745a <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d740e:	f7fe ffaf 	bl	d6370 <__errno>
   d7412:	6803      	ldr	r3, [r0, #0]
   d7414:	2b0b      	cmp	r3, #11
   d7416:	d020      	beq.n	d745a <_ZN9TCPClient9availableEv+0x9e>
   d7418:	f7fe ffaa 	bl	d6370 <__errno>
   d741c:	6803      	ldr	r3, [r0, #0]
   d741e:	2b0b      	cmp	r3, #11
   d7420:	d01b      	beq.n	d745a <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d7422:	2320      	movs	r3, #32
   d7424:	2500      	movs	r5, #0
   d7426:	9302      	str	r3, [sp, #8]
   d7428:	9503      	str	r5, [sp, #12]
   d742a:	f7fe ffa1 	bl	d6370 <__errno>
   d742e:	6803      	ldr	r3, [r0, #0]
   d7430:	9301      	str	r3, [sp, #4]
   d7432:	4b0e      	ldr	r3, [pc, #56]	; (d746c <_ZN9TCPClient9availableEv+0xb0>)
   d7434:	9300      	str	r3, [sp, #0]
   d7436:	aa02      	add	r2, sp, #8
   d7438:	462b      	mov	r3, r5
   d743a:	490d      	ldr	r1, [pc, #52]	; (d7470 <_ZN9TCPClient9availableEv+0xb4>)
   d743c:	2032      	movs	r0, #50	; 0x32
   d743e:	f7fe fef3 	bl	d6228 <log_message>
                    sock_close(d_->sock);
   d7442:	6963      	ldr	r3, [r4, #20]
   d7444:	6818      	ldr	r0, [r3, #0]
   d7446:	f7fe fe8f 	bl	d6168 <sock_close>
   d744a:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d744c:	f04f 32ff 	mov.w	r2, #4294967295
   d7450:	601a      	str	r2, [r3, #0]
   d7452:	e002      	b.n	d745a <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d7454:	f7ff ff18 	bl	d7288 <_ZN9TCPClient12flush_bufferEv>
   d7458:	e7bb      	b.n	d73d2 <_ZN9TCPClient9availableEv+0x16>
   d745a:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d745c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7460:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d7464:	1a18      	subs	r0, r3, r0
}
   d7466:	b00b      	add	sp, #44	; 0x2c
   d7468:	bd30      	pop	{r4, r5, pc}
   d746a:	bf00      	nop
   d746c:	000dadc7 	.word	0x000dadc7
   d7470:	000dadc0 	.word	0x000dadc0

000d7474 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7474:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7476:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7478:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d747a:	6001      	str	r1, [r0, #0]
   d747c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d7480:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d7484:	3088      	adds	r0, #136	; 0x88
   d7486:	f7ff faf3 	bl	d6a70 <_ZN9IPAddressC1Ev>
}
   d748a:	4620      	mov	r0, r4
   d748c:	bd10      	pop	{r4, pc}
	...

000d7490 <_ZN9TCPClientC1Ei>:
   d7490:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7494:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7496:	2300      	movs	r3, #0
   d7498:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d749a:	4a14      	ldr	r2, [pc, #80]	; (d74ec <_ZN9TCPClientC1Ei+0x5c>)
   d749c:	6043      	str	r3, [r0, #4]
   d749e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d74a0:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d74a2:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d74a4:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d74a6:	20a0      	movs	r0, #160	; 0xa0
   d74a8:	460e      	mov	r6, r1
   d74aa:	f7fc fdf6 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d74ae:	4605      	mov	r5, r0
   d74b0:	b110      	cbz	r0, d74b8 <_ZN9TCPClientC1Ei+0x28>
   d74b2:	4631      	mov	r1, r6
   d74b4:	f7ff ffde 	bl	d7474 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d74b8:	2014      	movs	r0, #20
   d74ba:	f7fc fdee 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d74be:	4603      	mov	r3, r0
   d74c0:	b128      	cbz	r0, d74ce <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d74c2:	2201      	movs	r2, #1
   d74c4:	6042      	str	r2, [r0, #4]
   d74c6:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d74c8:	4a09      	ldr	r2, [pc, #36]	; (d74f0 <_ZN9TCPClientC1Ei+0x60>)
   d74ca:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d74cc:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d74ce:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d74d0:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d74d2:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d74d4:	b128      	cbz	r0, d74e2 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d74d6:	6843      	ldr	r3, [r0, #4]
   d74d8:	3b01      	subs	r3, #1
   d74da:	6043      	str	r3, [r0, #4]
   d74dc:	b90b      	cbnz	r3, d74e2 <_ZN9TCPClientC1Ei+0x52>
   d74de:	f7ff fddf 	bl	d70a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d74e2:	4620      	mov	r0, r4
   d74e4:	f7ff fed0 	bl	d7288 <_ZN9TCPClient12flush_bufferEv>
}
   d74e8:	4620      	mov	r0, r4
   d74ea:	bd70      	pop	{r4, r5, r6, pc}
   d74ec:	000dad7c 	.word	0x000dad7c
   d74f0:	000dad60 	.word	0x000dad60

000d74f4 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d74f4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d74f6:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d74fa:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d74fc:	f7ff ffc8 	bl	d7490 <_ZN9TCPClientC1Ei>
}
   d7500:	4620      	mov	r0, r4
   d7502:	bd10      	pop	{r4, pc}

000d7504 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d7504:	b510      	push	{r4, lr}
   d7506:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7508:	6800      	ldr	r0, [r0, #0]
   d750a:	2800      	cmp	r0, #0
   d750c:	db01      	blt.n	d7512 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d750e:	f7fe fe2b 	bl	d6168 <sock_close>
    }
}
   d7512:	4620      	mov	r0, r4
   d7514:	bd10      	pop	{r4, pc}

000d7516 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7516:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7518:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d751a:	4620      	mov	r0, r4
   d751c:	f7ff fff2 	bl	d7504 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d7520:	b124      	cbz	r4, d752c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7522:	4620      	mov	r0, r4
   d7524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7528:	f7fc bdb9 	b.w	d409e <_ZdlPv>
   d752c:	bd10      	pop	{r4, pc}

000d752e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d752e:	2200      	movs	r2, #0
   d7530:	4611      	mov	r1, r2
   d7532:	6840      	ldr	r0, [r0, #4]
   d7534:	f7fe bebc 	b.w	d62b0 <network_ready>

000d7538 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7538:	2200      	movs	r2, #0
   d753a:	4611      	mov	r1, r2
   d753c:	6840      	ldr	r0, [r0, #4]
   d753e:	f7fe bed7 	b.w	d62f0 <network_listening>

000d7542 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7542:	2200      	movs	r2, #0
   d7544:	4611      	mov	r1, r2
   d7546:	6840      	ldr	r0, [r0, #4]
   d7548:	f7fe bee2 	b.w	d6310 <network_get_listen_timeout>

000d754c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d754c:	2200      	movs	r2, #0
   d754e:	6840      	ldr	r0, [r0, #4]
   d7550:	f7fe bed6 	b.w	d6300 <network_set_listen_timeout>

000d7554 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7554:	2200      	movs	r2, #0
   d7556:	f081 0101 	eor.w	r1, r1, #1
   d755a:	6840      	ldr	r0, [r0, #4]
   d755c:	f7fe bec0 	b.w	d62e0 <network_listen>

000d7560 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7560:	2300      	movs	r3, #0
   d7562:	461a      	mov	r2, r3
   d7564:	4619      	mov	r1, r3
   d7566:	6840      	ldr	r0, [r0, #4]
   d7568:	f7fe beb2 	b.w	d62d0 <network_off>

000d756c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d756c:	2300      	movs	r3, #0
   d756e:	461a      	mov	r2, r3
   d7570:	4619      	mov	r1, r3
   d7572:	6840      	ldr	r0, [r0, #4]
   d7574:	f7fe bea4 	b.w	d62c0 <network_on>

000d7578 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7578:	2200      	movs	r2, #0
   d757a:	4611      	mov	r1, r2
   d757c:	6840      	ldr	r0, [r0, #4]
   d757e:	f7fe be87 	b.w	d6290 <network_connecting>

000d7582 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7582:	2200      	movs	r2, #0
   d7584:	2102      	movs	r1, #2
   d7586:	6840      	ldr	r0, [r0, #4]
   d7588:	f7fe be8a 	b.w	d62a0 <network_disconnect>

000d758c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d758c:	2300      	movs	r3, #0
   d758e:	461a      	mov	r2, r3
   d7590:	6840      	ldr	r0, [r0, #4]
   d7592:	f7fe be75 	b.w	d6280 <network_connect>
	...

000d7598 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7598:	4b02      	ldr	r3, [pc, #8]	; (d75a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d759a:	2204      	movs	r2, #4
   d759c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d759e:	4a02      	ldr	r2, [pc, #8]	; (d75a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d75a0:	601a      	str	r2, [r3, #0]
   d75a2:	4770      	bx	lr
   d75a4:	2003e720 	.word	0x2003e720
   d75a8:	000dade0 	.word	0x000dade0

000d75ac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d75ac:	2300      	movs	r3, #0
   d75ae:	461a      	mov	r2, r3
   d75b0:	6840      	ldr	r0, [r0, #4]
   d75b2:	f7fe be65 	b.w	d6280 <network_connect>

000d75b6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d75b6:	2200      	movs	r2, #0
   d75b8:	2102      	movs	r1, #2
   d75ba:	6840      	ldr	r0, [r0, #4]
   d75bc:	f7fe be70 	b.w	d62a0 <network_disconnect>

000d75c0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d75c0:	2200      	movs	r2, #0
   d75c2:	4611      	mov	r1, r2
   d75c4:	6840      	ldr	r0, [r0, #4]
   d75c6:	f7fe be63 	b.w	d6290 <network_connecting>

000d75ca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d75ca:	2200      	movs	r2, #0
   d75cc:	4611      	mov	r1, r2
   d75ce:	6840      	ldr	r0, [r0, #4]
   d75d0:	f7fe be6e 	b.w	d62b0 <network_ready>

000d75d4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d75d4:	2300      	movs	r3, #0
   d75d6:	461a      	mov	r2, r3
   d75d8:	4619      	mov	r1, r3
   d75da:	6840      	ldr	r0, [r0, #4]
   d75dc:	f7fe be70 	b.w	d62c0 <network_on>

000d75e0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d75e0:	2300      	movs	r3, #0
   d75e2:	461a      	mov	r2, r3
   d75e4:	4619      	mov	r1, r3
   d75e6:	6840      	ldr	r0, [r0, #4]
   d75e8:	f7fe be72 	b.w	d62d0 <network_off>

000d75ec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d75ec:	2200      	movs	r2, #0
   d75ee:	f081 0101 	eor.w	r1, r1, #1
   d75f2:	6840      	ldr	r0, [r0, #4]
   d75f4:	f7fe be74 	b.w	d62e0 <network_listen>

000d75f8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d75f8:	2200      	movs	r2, #0
   d75fa:	6840      	ldr	r0, [r0, #4]
   d75fc:	f7fe be80 	b.w	d6300 <network_set_listen_timeout>

000d7600 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7600:	2200      	movs	r2, #0
   d7602:	4611      	mov	r1, r2
   d7604:	6840      	ldr	r0, [r0, #4]
   d7606:	f7fe be83 	b.w	d6310 <network_get_listen_timeout>

000d760a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d760a:	2200      	movs	r2, #0
   d760c:	4611      	mov	r1, r2
   d760e:	6840      	ldr	r0, [r0, #4]
   d7610:	f7fe be6e 	b.w	d62f0 <network_listening>

000d7614 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7618:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d761a:	b095      	sub	sp, #84	; 0x54
   d761c:	4616      	mov	r6, r2
   d761e:	460d      	mov	r5, r1
   d7620:	4607      	mov	r7, r0
    IPAddress addr;
   d7622:	f7ff fa25 	bl	d6a70 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7626:	4621      	mov	r1, r4
   d7628:	2220      	movs	r2, #32
   d762a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d762c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d762e:	f000 ffdb 	bl	d85e8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7632:	2340      	movs	r3, #64	; 0x40
   d7634:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7636:	4621      	mov	r1, r4
   d7638:	466b      	mov	r3, sp
   d763a:	aa0c      	add	r2, sp, #48	; 0x30
   d763c:	4630      	mov	r0, r6
   d763e:	f7fe fc0b 	bl	d5e58 <netdb_getaddrinfo>
    if (!r) {
   d7642:	4604      	mov	r4, r0
   d7644:	2800      	cmp	r0, #0
   d7646:	d144      	bne.n	d76d2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7648:	4602      	mov	r2, r0
   d764a:	2101      	movs	r1, #1
   d764c:	6868      	ldr	r0, [r5, #4]
   d764e:	f7fe fe2f 	bl	d62b0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7652:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7654:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7656:	4622      	mov	r2, r4
   d7658:	6868      	ldr	r0, [r5, #4]
   d765a:	f7fe fe29 	bl	d62b0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d765e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7660:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7662:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7664:	2e00      	cmp	r6, #0
   d7666:	d034      	beq.n	d76d2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7668:	2900      	cmp	r1, #0
   d766a:	d132      	bne.n	d76d2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d766c:	6873      	ldr	r3, [r6, #4]
   d766e:	2b02      	cmp	r3, #2
   d7670:	d002      	beq.n	d7678 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7672:	2b0a      	cmp	r3, #10
   d7674:	d009      	beq.n	d768a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7676:	e02a      	b.n	d76ce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7678:	f1b8 0f00 	cmp.w	r8, #0
   d767c:	d027      	beq.n	d76ce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d767e:	6971      	ldr	r1, [r6, #20]
   d7680:	4638      	mov	r0, r7
   d7682:	3104      	adds	r1, #4
   d7684:	f7ff fa37 	bl	d6af6 <_ZN9IPAddressaSEPKh>
   d7688:	e020      	b.n	d76cc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d768a:	f1b9 0f00 	cmp.w	r9, #0
   d768e:	d01e      	beq.n	d76ce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7690:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7692:	2211      	movs	r2, #17
   d7694:	a801      	add	r0, sp, #4
   d7696:	f000 ffa7 	bl	d85e8 <memset>
                    a.v = 6;
   d769a:	2306      	movs	r3, #6
   d769c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d76a0:	ad01      	add	r5, sp, #4
   d76a2:	f104 0308 	add.w	r3, r4, #8
   d76a6:	3418      	adds	r4, #24
   d76a8:	6818      	ldr	r0, [r3, #0]
   d76aa:	6859      	ldr	r1, [r3, #4]
   d76ac:	462a      	mov	r2, r5
   d76ae:	c203      	stmia	r2!, {r0, r1}
   d76b0:	3308      	adds	r3, #8
   d76b2:	42a3      	cmp	r3, r4
   d76b4:	4615      	mov	r5, r2
   d76b6:	d1f7      	bne.n	d76a8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d76b8:	a901      	add	r1, sp, #4
   d76ba:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d76bc:	ad07      	add	r5, sp, #28
   d76be:	f7ff f9e5 	bl	d6a8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d76c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d76c4:	1d3c      	adds	r4, r7, #4
   d76c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d76c8:	682b      	ldr	r3, [r5, #0]
   d76ca:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d76cc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d76ce:	69f6      	ldr	r6, [r6, #28]
   d76d0:	e7c8      	b.n	d7664 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d76d2:	9800      	ldr	r0, [sp, #0]
   d76d4:	f7fe fbb8 	bl	d5e48 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d76d8:	4638      	mov	r0, r7
   d76da:	b015      	add	sp, #84	; 0x54
   d76dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d76e0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d76e0:	4b02      	ldr	r3, [pc, #8]	; (d76ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d76e2:	4a03      	ldr	r2, [pc, #12]	; (d76f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d76e4:	601a      	str	r2, [r3, #0]
   d76e6:	2200      	movs	r2, #0
   d76e8:	605a      	str	r2, [r3, #4]
   d76ea:	4770      	bx	lr
   d76ec:	2003e728 	.word	0x2003e728
   d76f0:	000dae14 	.word	0x000dae14

000d76f4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d76f4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d76f6:	4e18      	ldr	r6, [pc, #96]	; (d7758 <pinAvailable+0x64>)
   d76f8:	6831      	ldr	r1, [r6, #0]
   d76fa:	f011 0501 	ands.w	r5, r1, #1
   d76fe:	4604      	mov	r4, r0
   d7700:	d10a      	bne.n	d7718 <pinAvailable+0x24>
   d7702:	4630      	mov	r0, r6
   d7704:	f7fc fcda 	bl	d40bc <__cxa_guard_acquire>
   d7708:	b130      	cbz	r0, d7718 <pinAvailable+0x24>
   d770a:	4629      	mov	r1, r5
   d770c:	4813      	ldr	r0, [pc, #76]	; (d775c <pinAvailable+0x68>)
   d770e:	f7fe fe7b 	bl	d6408 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7712:	4630      	mov	r0, r6
   d7714:	f7fc fcd7 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d7718:	4810      	ldr	r0, [pc, #64]	; (d775c <pinAvailable+0x68>)
   d771a:	f7fe ff97 	bl	d664c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d771e:	b128      	cbz	r0, d772c <pinAvailable+0x38>
   d7720:	f1a4 030b 	sub.w	r3, r4, #11
   d7724:	2b02      	cmp	r3, #2
   d7726:	d801      	bhi.n	d772c <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d7728:	2000      	movs	r0, #0
   d772a:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d772c:	f000 f892 	bl	d7854 <_Z19__fetch_global_Wirev>
   d7730:	f7ff fb75 	bl	d6e1e <_ZN7TwoWire9isEnabledEv>
   d7734:	b108      	cbz	r0, d773a <pinAvailable+0x46>
   d7736:	2c01      	cmp	r4, #1
   d7738:	d9f6      	bls.n	d7728 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d773a:	f7ff fac7 	bl	d6ccc <_Z22__fetch_global_Serial1v>
   d773e:	f7ff fac1 	bl	d6cc4 <_ZN11USARTSerial9isEnabledEv>
   d7742:	b118      	cbz	r0, d774c <pinAvailable+0x58>
   d7744:	f1a4 0309 	sub.w	r3, r4, #9
   d7748:	2b01      	cmp	r3, #1
   d774a:	d9ed      	bls.n	d7728 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d774c:	2c23      	cmp	r4, #35	; 0x23
   d774e:	bf8c      	ite	hi
   d7750:	2000      	movhi	r0, #0
   d7752:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7754:	bd70      	pop	{r4, r5, r6, pc}
   d7756:	bf00      	nop
   d7758:	2003e3b0 	.word	0x2003e3b0
   d775c:	2003e3b4 	.word	0x2003e3b4

000d7760 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7760:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7762:	b538      	push	{r3, r4, r5, lr}
   d7764:	4604      	mov	r4, r0
   d7766:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7768:	d80a      	bhi.n	d7780 <pinMode+0x20>
   d776a:	29ff      	cmp	r1, #255	; 0xff
   d776c:	d008      	beq.n	d7780 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d776e:	f7ff ffc1 	bl	d76f4 <pinAvailable>
   d7772:	b128      	cbz	r0, d7780 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7774:	4629      	mov	r1, r5
   d7776:	4620      	mov	r0, r4
}
   d7778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d777c:	f7fe bb7c 	b.w	d5e78 <HAL_Pin_Mode>
   d7780:	bd38      	pop	{r3, r4, r5, pc}

000d7782 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7782:	b538      	push	{r3, r4, r5, lr}
   d7784:	4604      	mov	r4, r0
   d7786:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7788:	f7fe fb7e 	bl	d5e88 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d778c:	28ff      	cmp	r0, #255	; 0xff
   d778e:	d010      	beq.n	d77b2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7790:	2806      	cmp	r0, #6
   d7792:	d804      	bhi.n	d779e <digitalWrite+0x1c>
   d7794:	234d      	movs	r3, #77	; 0x4d
   d7796:	fa23 f000 	lsr.w	r0, r3, r0
   d779a:	07c3      	lsls	r3, r0, #31
   d779c:	d409      	bmi.n	d77b2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d779e:	4620      	mov	r0, r4
   d77a0:	f7ff ffa8 	bl	d76f4 <pinAvailable>
   d77a4:	b128      	cbz	r0, d77b2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d77a6:	4629      	mov	r1, r5
   d77a8:	4620      	mov	r0, r4
}
   d77aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d77ae:	f7fe bb73 	b.w	d5e98 <HAL_GPIO_Write>
   d77b2:	bd38      	pop	{r3, r4, r5, pc}

000d77b4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d77b4:	b510      	push	{r4, lr}
   d77b6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d77b8:	f7fe fb66 	bl	d5e88 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d77bc:	3804      	subs	r0, #4
   d77be:	b2c0      	uxtb	r0, r0
   d77c0:	2801      	cmp	r0, #1
   d77c2:	d908      	bls.n	d77d6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d77c4:	4620      	mov	r0, r4
   d77c6:	f7ff ff95 	bl	d76f4 <pinAvailable>
   d77ca:	b120      	cbz	r0, d77d6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d77cc:	4620      	mov	r0, r4
}
   d77ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d77d2:	f7fe bb69 	b.w	d5ea8 <HAL_GPIO_Read>
}
   d77d6:	2000      	movs	r0, #0
   d77d8:	bd10      	pop	{r4, pc}

000d77da <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d77da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d77de:	4690      	mov	r8, r2
   d77e0:	461e      	mov	r6, r3
   d77e2:	2407      	movs	r4, #7
   d77e4:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d77e6:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d77e8:	f1b8 0f00 	cmp.w	r8, #0
   d77ec:	d104      	bne.n	d77f8 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d77ee:	f1c4 0107 	rsb	r1, r4, #7
   d77f2:	fa46 f101 	asr.w	r1, r6, r1
   d77f6:	e001      	b.n	d77fc <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d77f8:	fa46 f104 	asr.w	r1, r6, r4
   d77fc:	f001 0101 	and.w	r1, r1, #1
   d7800:	4638      	mov	r0, r7
   d7802:	f7ff ffbe 	bl	d7782 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d7806:	2101      	movs	r1, #1
   d7808:	4628      	mov	r0, r5
   d780a:	f7ff ffba 	bl	d7782 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d780e:	2100      	movs	r1, #0
   d7810:	4628      	mov	r0, r5
   d7812:	f7ff ffb6 	bl	d7782 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d7816:	f114 34ff 	adds.w	r4, r4, #4294967295
   d781a:	d2e5      	bcs.n	d77e8 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d781c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7820 <_Z17acquireWireBufferv>:
   d7820:	b570      	push	{r4, r5, r6, lr}
   d7822:	4604      	mov	r4, r0
   d7824:	2514      	movs	r5, #20
   d7826:	462a      	mov	r2, r5
   d7828:	4e09      	ldr	r6, [pc, #36]	; (d7850 <_Z17acquireWireBufferv+0x30>)
   d782a:	2100      	movs	r1, #0
   d782c:	f000 fedc 	bl	d85e8 <memset>
   d7830:	8025      	strh	r5, [r4, #0]
   d7832:	2520      	movs	r5, #32
   d7834:	4631      	mov	r1, r6
   d7836:	60a5      	str	r5, [r4, #8]
   d7838:	6125      	str	r5, [r4, #16]
   d783a:	4628      	mov	r0, r5
   d783c:	f000 f840 	bl	d78c0 <_ZnajRKSt9nothrow_t>
   d7840:	4631      	mov	r1, r6
   d7842:	6060      	str	r0, [r4, #4]
   d7844:	4628      	mov	r0, r5
   d7846:	f000 f83b 	bl	d78c0 <_ZnajRKSt9nothrow_t>
   d784a:	60e0      	str	r0, [r4, #12]
   d784c:	4620      	mov	r0, r4
   d784e:	bd70      	pop	{r4, r5, r6, pc}
   d7850:	000dae40 	.word	0x000dae40

000d7854 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7854:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7856:	4d0e      	ldr	r5, [pc, #56]	; (d7890 <_Z19__fetch_global_Wirev+0x3c>)
   d7858:	6829      	ldr	r1, [r5, #0]
   d785a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d785e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7860:	d113      	bne.n	d788a <_Z19__fetch_global_Wirev+0x36>
   d7862:	4628      	mov	r0, r5
   d7864:	f7fc fc2a 	bl	d40bc <__cxa_guard_acquire>
   d7868:	b178      	cbz	r0, d788a <_Z19__fetch_global_Wirev+0x36>
   d786a:	a801      	add	r0, sp, #4
   d786c:	f7ff ffd8 	bl	d7820 <_Z17acquireWireBufferv>
   d7870:	aa01      	add	r2, sp, #4
   d7872:	4621      	mov	r1, r4
   d7874:	4807      	ldr	r0, [pc, #28]	; (d7894 <_Z19__fetch_global_Wirev+0x40>)
   d7876:	f7ff fa7b 	bl	d6d70 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d787a:	4628      	mov	r0, r5
   d787c:	f7fc fc23 	bl	d40c6 <__cxa_guard_release>
   d7880:	4a05      	ldr	r2, [pc, #20]	; (d7898 <_Z19__fetch_global_Wirev+0x44>)
   d7882:	4906      	ldr	r1, [pc, #24]	; (d789c <_Z19__fetch_global_Wirev+0x48>)
   d7884:	4803      	ldr	r0, [pc, #12]	; (d7894 <_Z19__fetch_global_Wirev+0x40>)
   d7886:	f000 f80b 	bl	d78a0 <__aeabi_atexit>
	return wire;
}
   d788a:	4802      	ldr	r0, [pc, #8]	; (d7894 <_Z19__fetch_global_Wirev+0x40>)
   d788c:	b007      	add	sp, #28
   d788e:	bd30      	pop	{r4, r5, pc}
   d7890:	2003e734 	.word	0x2003e734
   d7894:	2003e738 	.word	0x2003e738
   d7898:	2003e1c8 	.word	0x2003e1c8
   d789c:	000d6d19 	.word	0x000d6d19

000d78a0 <__aeabi_atexit>:
   d78a0:	460b      	mov	r3, r1
   d78a2:	4601      	mov	r1, r0
   d78a4:	4618      	mov	r0, r3
   d78a6:	f000 be53 	b.w	d8550 <__cxa_atexit>
	...

000d78ac <_ZSt15get_new_handlerv>:
   d78ac:	4b02      	ldr	r3, [pc, #8]	; (d78b8 <_ZSt15get_new_handlerv+0xc>)
   d78ae:	6818      	ldr	r0, [r3, #0]
   d78b0:	f3bf 8f5f 	dmb	sy
   d78b4:	4770      	bx	lr
   d78b6:	bf00      	nop
   d78b8:	2003e74c 	.word	0x2003e74c

000d78bc <_ZdlPvj>:
   d78bc:	f7fc bbef 	b.w	d409e <_ZdlPv>

000d78c0 <_ZnajRKSt9nothrow_t>:
   d78c0:	f000 b800 	b.w	d78c4 <_ZnwjRKSt9nothrow_t>

000d78c4 <_ZnwjRKSt9nothrow_t>:
   d78c4:	b510      	push	{r4, lr}
   d78c6:	2800      	cmp	r0, #0
   d78c8:	bf14      	ite	ne
   d78ca:	4604      	movne	r4, r0
   d78cc:	2401      	moveq	r4, #1
   d78ce:	4620      	mov	r0, r4
   d78d0:	f7fe fd2e 	bl	d6330 <malloc>
   d78d4:	b920      	cbnz	r0, d78e0 <_ZnwjRKSt9nothrow_t+0x1c>
   d78d6:	f7ff ffe9 	bl	d78ac <_ZSt15get_new_handlerv>
   d78da:	b108      	cbz	r0, d78e0 <_ZnwjRKSt9nothrow_t+0x1c>
   d78dc:	4780      	blx	r0
   d78de:	e7f6      	b.n	d78ce <_ZnwjRKSt9nothrow_t+0xa>
   d78e0:	bd10      	pop	{r4, pc}
	...

000d78e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d78e4:	4b18      	ldr	r3, [pc, #96]	; (d7948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d78e6:	681a      	ldr	r2, [r3, #0]
   d78e8:	07d1      	lsls	r1, r2, #31
   d78ea:	bf5c      	itt	pl
   d78ec:	2201      	movpl	r2, #1
   d78ee:	601a      	strpl	r2, [r3, #0]
   d78f0:	4b16      	ldr	r3, [pc, #88]	; (d794c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d78f2:	681a      	ldr	r2, [r3, #0]
   d78f4:	07d2      	lsls	r2, r2, #31
   d78f6:	bf5c      	itt	pl
   d78f8:	2201      	movpl	r2, #1
   d78fa:	601a      	strpl	r2, [r3, #0]
   d78fc:	4b14      	ldr	r3, [pc, #80]	; (d7950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d78fe:	681a      	ldr	r2, [r3, #0]
   d7900:	07d0      	lsls	r0, r2, #31
   d7902:	bf5c      	itt	pl
   d7904:	2201      	movpl	r2, #1
   d7906:	601a      	strpl	r2, [r3, #0]
   d7908:	4b12      	ldr	r3, [pc, #72]	; (d7954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d790a:	681a      	ldr	r2, [r3, #0]
   d790c:	07d1      	lsls	r1, r2, #31
   d790e:	bf5c      	itt	pl
   d7910:	2201      	movpl	r2, #1
   d7912:	601a      	strpl	r2, [r3, #0]
   d7914:	4b10      	ldr	r3, [pc, #64]	; (d7958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7916:	681a      	ldr	r2, [r3, #0]
   d7918:	07d2      	lsls	r2, r2, #31
   d791a:	bf5c      	itt	pl
   d791c:	2201      	movpl	r2, #1
   d791e:	601a      	strpl	r2, [r3, #0]
   d7920:	4b0e      	ldr	r3, [pc, #56]	; (d795c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7922:	681a      	ldr	r2, [r3, #0]
   d7924:	07d0      	lsls	r0, r2, #31
   d7926:	bf5c      	itt	pl
   d7928:	2201      	movpl	r2, #1
   d792a:	601a      	strpl	r2, [r3, #0]
   d792c:	4b0c      	ldr	r3, [pc, #48]	; (d7960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d792e:	681a      	ldr	r2, [r3, #0]
   d7930:	07d1      	lsls	r1, r2, #31
   d7932:	bf5c      	itt	pl
   d7934:	2201      	movpl	r2, #1
   d7936:	601a      	strpl	r2, [r3, #0]
   d7938:	4b0a      	ldr	r3, [pc, #40]	; (d7964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d793a:	681a      	ldr	r2, [r3, #0]
   d793c:	07d2      	lsls	r2, r2, #31
   d793e:	bf5c      	itt	pl
   d7940:	2201      	movpl	r2, #1
   d7942:	601a      	strpl	r2, [r3, #0]
   d7944:	4770      	bx	lr
   d7946:	bf00      	nop
   d7948:	2003e76c 	.word	0x2003e76c
   d794c:	2003e768 	.word	0x2003e768
   d7950:	2003e764 	.word	0x2003e764
   d7954:	2003e760 	.word	0x2003e760
   d7958:	2003e75c 	.word	0x2003e75c
   d795c:	2003e758 	.word	0x2003e758
   d7960:	2003e754 	.word	0x2003e754
   d7964:	2003e750 	.word	0x2003e750

000d7968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7968:	4b24      	ldr	r3, [pc, #144]	; (d79fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d796a:	681a      	ldr	r2, [r3, #0]
   d796c:	07d0      	lsls	r0, r2, #31
   d796e:	bf5c      	itt	pl
   d7970:	2201      	movpl	r2, #1
   d7972:	601a      	strpl	r2, [r3, #0]
   d7974:	4b22      	ldr	r3, [pc, #136]	; (d7a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7976:	681a      	ldr	r2, [r3, #0]
   d7978:	07d1      	lsls	r1, r2, #31
   d797a:	bf5c      	itt	pl
   d797c:	2201      	movpl	r2, #1
   d797e:	601a      	strpl	r2, [r3, #0]
   d7980:	4b20      	ldr	r3, [pc, #128]	; (d7a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7982:	681a      	ldr	r2, [r3, #0]
   d7984:	07d2      	lsls	r2, r2, #31
   d7986:	bf5c      	itt	pl
   d7988:	2201      	movpl	r2, #1
   d798a:	601a      	strpl	r2, [r3, #0]
   d798c:	4b1e      	ldr	r3, [pc, #120]	; (d7a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d798e:	681a      	ldr	r2, [r3, #0]
   d7990:	07d0      	lsls	r0, r2, #31
   d7992:	bf5c      	itt	pl
   d7994:	2201      	movpl	r2, #1
   d7996:	601a      	strpl	r2, [r3, #0]
   d7998:	4b1c      	ldr	r3, [pc, #112]	; (d7a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d799a:	681a      	ldr	r2, [r3, #0]
   d799c:	07d1      	lsls	r1, r2, #31
   d799e:	bf5c      	itt	pl
   d79a0:	2201      	movpl	r2, #1
   d79a2:	601a      	strpl	r2, [r3, #0]
   d79a4:	4b1a      	ldr	r3, [pc, #104]	; (d7a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d79a6:	681a      	ldr	r2, [r3, #0]
   d79a8:	07d2      	lsls	r2, r2, #31
   d79aa:	bf5c      	itt	pl
   d79ac:	2201      	movpl	r2, #1
   d79ae:	601a      	strpl	r2, [r3, #0]
   d79b0:	4b18      	ldr	r3, [pc, #96]	; (d7a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d79b2:	681a      	ldr	r2, [r3, #0]
   d79b4:	07d0      	lsls	r0, r2, #31
   d79b6:	bf5c      	itt	pl
   d79b8:	2201      	movpl	r2, #1
   d79ba:	601a      	strpl	r2, [r3, #0]
   d79bc:	4b16      	ldr	r3, [pc, #88]	; (d7a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d79be:	681a      	ldr	r2, [r3, #0]
   d79c0:	07d1      	lsls	r1, r2, #31
   d79c2:	bf5c      	itt	pl
   d79c4:	2201      	movpl	r2, #1
   d79c6:	601a      	strpl	r2, [r3, #0]
   d79c8:	4b14      	ldr	r3, [pc, #80]	; (d7a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d79ca:	681a      	ldr	r2, [r3, #0]
   d79cc:	07d2      	lsls	r2, r2, #31
   d79ce:	bf5c      	itt	pl
   d79d0:	2201      	movpl	r2, #1
   d79d2:	601a      	strpl	r2, [r3, #0]
   d79d4:	4b12      	ldr	r3, [pc, #72]	; (d7a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d79d6:	681a      	ldr	r2, [r3, #0]
   d79d8:	07d0      	lsls	r0, r2, #31
   d79da:	bf5c      	itt	pl
   d79dc:	2201      	movpl	r2, #1
   d79de:	601a      	strpl	r2, [r3, #0]
   d79e0:	4b10      	ldr	r3, [pc, #64]	; (d7a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d79e2:	681a      	ldr	r2, [r3, #0]
   d79e4:	07d1      	lsls	r1, r2, #31
   d79e6:	bf5c      	itt	pl
   d79e8:	2201      	movpl	r2, #1
   d79ea:	601a      	strpl	r2, [r3, #0]
   d79ec:	4b0e      	ldr	r3, [pc, #56]	; (d7a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d79ee:	681a      	ldr	r2, [r3, #0]
   d79f0:	07d2      	lsls	r2, r2, #31
   d79f2:	bf5c      	itt	pl
   d79f4:	2201      	movpl	r2, #1
   d79f6:	601a      	strpl	r2, [r3, #0]
   d79f8:	4770      	bx	lr
   d79fa:	bf00      	nop
   d79fc:	2003e79c 	.word	0x2003e79c
   d7a00:	2003e798 	.word	0x2003e798
   d7a04:	2003e794 	.word	0x2003e794
   d7a08:	2003e790 	.word	0x2003e790
   d7a0c:	2003e78c 	.word	0x2003e78c
   d7a10:	2003e788 	.word	0x2003e788
   d7a14:	2003e784 	.word	0x2003e784
   d7a18:	2003e780 	.word	0x2003e780
   d7a1c:	2003e77c 	.word	0x2003e77c
   d7a20:	2003e778 	.word	0x2003e778
   d7a24:	2003e774 	.word	0x2003e774
   d7a28:	2003e770 	.word	0x2003e770

000d7a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7a2c:	4b24      	ldr	r3, [pc, #144]	; (d7ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7a2e:	681a      	ldr	r2, [r3, #0]
   d7a30:	07d0      	lsls	r0, r2, #31
   d7a32:	bf5c      	itt	pl
   d7a34:	2201      	movpl	r2, #1
   d7a36:	601a      	strpl	r2, [r3, #0]
   d7a38:	4b22      	ldr	r3, [pc, #136]	; (d7ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7a3a:	681a      	ldr	r2, [r3, #0]
   d7a3c:	07d1      	lsls	r1, r2, #31
   d7a3e:	bf5c      	itt	pl
   d7a40:	2201      	movpl	r2, #1
   d7a42:	601a      	strpl	r2, [r3, #0]
   d7a44:	4b20      	ldr	r3, [pc, #128]	; (d7ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7a46:	681a      	ldr	r2, [r3, #0]
   d7a48:	07d2      	lsls	r2, r2, #31
   d7a4a:	bf5c      	itt	pl
   d7a4c:	2201      	movpl	r2, #1
   d7a4e:	601a      	strpl	r2, [r3, #0]
   d7a50:	4b1e      	ldr	r3, [pc, #120]	; (d7acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7a52:	681a      	ldr	r2, [r3, #0]
   d7a54:	07d0      	lsls	r0, r2, #31
   d7a56:	bf5c      	itt	pl
   d7a58:	2201      	movpl	r2, #1
   d7a5a:	601a      	strpl	r2, [r3, #0]
   d7a5c:	4b1c      	ldr	r3, [pc, #112]	; (d7ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7a5e:	681a      	ldr	r2, [r3, #0]
   d7a60:	07d1      	lsls	r1, r2, #31
   d7a62:	bf5c      	itt	pl
   d7a64:	2201      	movpl	r2, #1
   d7a66:	601a      	strpl	r2, [r3, #0]
   d7a68:	4b1a      	ldr	r3, [pc, #104]	; (d7ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7a6a:	681a      	ldr	r2, [r3, #0]
   d7a6c:	07d2      	lsls	r2, r2, #31
   d7a6e:	bf5c      	itt	pl
   d7a70:	2201      	movpl	r2, #1
   d7a72:	601a      	strpl	r2, [r3, #0]
   d7a74:	4b18      	ldr	r3, [pc, #96]	; (d7ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7a76:	681a      	ldr	r2, [r3, #0]
   d7a78:	07d0      	lsls	r0, r2, #31
   d7a7a:	bf5c      	itt	pl
   d7a7c:	2201      	movpl	r2, #1
   d7a7e:	601a      	strpl	r2, [r3, #0]
   d7a80:	4b16      	ldr	r3, [pc, #88]	; (d7adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7a82:	681a      	ldr	r2, [r3, #0]
   d7a84:	07d1      	lsls	r1, r2, #31
   d7a86:	bf5c      	itt	pl
   d7a88:	2201      	movpl	r2, #1
   d7a8a:	601a      	strpl	r2, [r3, #0]
   d7a8c:	4b14      	ldr	r3, [pc, #80]	; (d7ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7a8e:	681a      	ldr	r2, [r3, #0]
   d7a90:	07d2      	lsls	r2, r2, #31
   d7a92:	bf5c      	itt	pl
   d7a94:	2201      	movpl	r2, #1
   d7a96:	601a      	strpl	r2, [r3, #0]
   d7a98:	4b12      	ldr	r3, [pc, #72]	; (d7ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7a9a:	681a      	ldr	r2, [r3, #0]
   d7a9c:	07d0      	lsls	r0, r2, #31
   d7a9e:	bf5c      	itt	pl
   d7aa0:	2201      	movpl	r2, #1
   d7aa2:	601a      	strpl	r2, [r3, #0]
   d7aa4:	4b10      	ldr	r3, [pc, #64]	; (d7ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7aa6:	681a      	ldr	r2, [r3, #0]
   d7aa8:	07d1      	lsls	r1, r2, #31
   d7aaa:	bf5c      	itt	pl
   d7aac:	2201      	movpl	r2, #1
   d7aae:	601a      	strpl	r2, [r3, #0]
   d7ab0:	4b0e      	ldr	r3, [pc, #56]	; (d7aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7ab2:	681a      	ldr	r2, [r3, #0]
   d7ab4:	07d2      	lsls	r2, r2, #31
   d7ab6:	bf5c      	itt	pl
   d7ab8:	2201      	movpl	r2, #1
   d7aba:	601a      	strpl	r2, [r3, #0]
   d7abc:	4770      	bx	lr
   d7abe:	bf00      	nop
   d7ac0:	2003e7cc 	.word	0x2003e7cc
   d7ac4:	2003e7c8 	.word	0x2003e7c8
   d7ac8:	2003e7c4 	.word	0x2003e7c4
   d7acc:	2003e7c0 	.word	0x2003e7c0
   d7ad0:	2003e7bc 	.word	0x2003e7bc
   d7ad4:	2003e7b8 	.word	0x2003e7b8
   d7ad8:	2003e7b4 	.word	0x2003e7b4
   d7adc:	2003e7b0 	.word	0x2003e7b0
   d7ae0:	2003e7ac 	.word	0x2003e7ac
   d7ae4:	2003e7a8 	.word	0x2003e7a8
   d7ae8:	2003e7a4 	.word	0x2003e7a4
   d7aec:	2003e7a0 	.word	0x2003e7a0

000d7af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7af0:	4b18      	ldr	r3, [pc, #96]	; (d7b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7af2:	681a      	ldr	r2, [r3, #0]
   d7af4:	07d1      	lsls	r1, r2, #31
   d7af6:	bf5c      	itt	pl
   d7af8:	2201      	movpl	r2, #1
   d7afa:	601a      	strpl	r2, [r3, #0]
   d7afc:	4b16      	ldr	r3, [pc, #88]	; (d7b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7afe:	681a      	ldr	r2, [r3, #0]
   d7b00:	07d2      	lsls	r2, r2, #31
   d7b02:	bf5c      	itt	pl
   d7b04:	2201      	movpl	r2, #1
   d7b06:	601a      	strpl	r2, [r3, #0]
   d7b08:	4b14      	ldr	r3, [pc, #80]	; (d7b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7b0a:	681a      	ldr	r2, [r3, #0]
   d7b0c:	07d0      	lsls	r0, r2, #31
   d7b0e:	bf5c      	itt	pl
   d7b10:	2201      	movpl	r2, #1
   d7b12:	601a      	strpl	r2, [r3, #0]
   d7b14:	4b12      	ldr	r3, [pc, #72]	; (d7b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7b16:	681a      	ldr	r2, [r3, #0]
   d7b18:	07d1      	lsls	r1, r2, #31
   d7b1a:	bf5c      	itt	pl
   d7b1c:	2201      	movpl	r2, #1
   d7b1e:	601a      	strpl	r2, [r3, #0]
   d7b20:	4b10      	ldr	r3, [pc, #64]	; (d7b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7b22:	681a      	ldr	r2, [r3, #0]
   d7b24:	07d2      	lsls	r2, r2, #31
   d7b26:	bf5c      	itt	pl
   d7b28:	2201      	movpl	r2, #1
   d7b2a:	601a      	strpl	r2, [r3, #0]
   d7b2c:	4b0e      	ldr	r3, [pc, #56]	; (d7b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7b2e:	681a      	ldr	r2, [r3, #0]
   d7b30:	07d0      	lsls	r0, r2, #31
   d7b32:	bf5c      	itt	pl
   d7b34:	2201      	movpl	r2, #1
   d7b36:	601a      	strpl	r2, [r3, #0]
   d7b38:	4b0c      	ldr	r3, [pc, #48]	; (d7b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7b3a:	681a      	ldr	r2, [r3, #0]
   d7b3c:	07d1      	lsls	r1, r2, #31
   d7b3e:	bf5c      	itt	pl
   d7b40:	2201      	movpl	r2, #1
   d7b42:	601a      	strpl	r2, [r3, #0]
   d7b44:	4b0a      	ldr	r3, [pc, #40]	; (d7b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7b46:	681a      	ldr	r2, [r3, #0]
   d7b48:	07d2      	lsls	r2, r2, #31
   d7b4a:	bf5c      	itt	pl
   d7b4c:	2201      	movpl	r2, #1
   d7b4e:	601a      	strpl	r2, [r3, #0]
   d7b50:	4770      	bx	lr
   d7b52:	bf00      	nop
   d7b54:	2003e7ec 	.word	0x2003e7ec
   d7b58:	2003e7e8 	.word	0x2003e7e8
   d7b5c:	2003e7e4 	.word	0x2003e7e4
   d7b60:	2003e7e0 	.word	0x2003e7e0
   d7b64:	2003e7dc 	.word	0x2003e7dc
   d7b68:	2003e7d8 	.word	0x2003e7d8
   d7b6c:	2003e7d4 	.word	0x2003e7d4
   d7b70:	2003e7d0 	.word	0x2003e7d0

000d7b74 <__aeabi_drsub>:
   d7b74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7b78:	e002      	b.n	d7b80 <__adddf3>
   d7b7a:	bf00      	nop

000d7b7c <__aeabi_dsub>:
   d7b7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7b80 <__adddf3>:
   d7b80:	b530      	push	{r4, r5, lr}
   d7b82:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7b86:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7b8a:	ea94 0f05 	teq	r4, r5
   d7b8e:	bf08      	it	eq
   d7b90:	ea90 0f02 	teqeq	r0, r2
   d7b94:	bf1f      	itttt	ne
   d7b96:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7b9a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7b9e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7ba2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7ba6:	f000 80e2 	beq.w	d7d6e <__adddf3+0x1ee>
   d7baa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7bae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7bb2:	bfb8      	it	lt
   d7bb4:	426d      	neglt	r5, r5
   d7bb6:	dd0c      	ble.n	d7bd2 <__adddf3+0x52>
   d7bb8:	442c      	add	r4, r5
   d7bba:	ea80 0202 	eor.w	r2, r0, r2
   d7bbe:	ea81 0303 	eor.w	r3, r1, r3
   d7bc2:	ea82 0000 	eor.w	r0, r2, r0
   d7bc6:	ea83 0101 	eor.w	r1, r3, r1
   d7bca:	ea80 0202 	eor.w	r2, r0, r2
   d7bce:	ea81 0303 	eor.w	r3, r1, r3
   d7bd2:	2d36      	cmp	r5, #54	; 0x36
   d7bd4:	bf88      	it	hi
   d7bd6:	bd30      	pophi	{r4, r5, pc}
   d7bd8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7bdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7be0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7be4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7be8:	d002      	beq.n	d7bf0 <__adddf3+0x70>
   d7bea:	4240      	negs	r0, r0
   d7bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7bf0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7bf4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7bf8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7bfc:	d002      	beq.n	d7c04 <__adddf3+0x84>
   d7bfe:	4252      	negs	r2, r2
   d7c00:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7c04:	ea94 0f05 	teq	r4, r5
   d7c08:	f000 80a7 	beq.w	d7d5a <__adddf3+0x1da>
   d7c0c:	f1a4 0401 	sub.w	r4, r4, #1
   d7c10:	f1d5 0e20 	rsbs	lr, r5, #32
   d7c14:	db0d      	blt.n	d7c32 <__adddf3+0xb2>
   d7c16:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7c1a:	fa22 f205 	lsr.w	r2, r2, r5
   d7c1e:	1880      	adds	r0, r0, r2
   d7c20:	f141 0100 	adc.w	r1, r1, #0
   d7c24:	fa03 f20e 	lsl.w	r2, r3, lr
   d7c28:	1880      	adds	r0, r0, r2
   d7c2a:	fa43 f305 	asr.w	r3, r3, r5
   d7c2e:	4159      	adcs	r1, r3
   d7c30:	e00e      	b.n	d7c50 <__adddf3+0xd0>
   d7c32:	f1a5 0520 	sub.w	r5, r5, #32
   d7c36:	f10e 0e20 	add.w	lr, lr, #32
   d7c3a:	2a01      	cmp	r2, #1
   d7c3c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7c40:	bf28      	it	cs
   d7c42:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7c46:	fa43 f305 	asr.w	r3, r3, r5
   d7c4a:	18c0      	adds	r0, r0, r3
   d7c4c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7c50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7c54:	d507      	bpl.n	d7c66 <__adddf3+0xe6>
   d7c56:	f04f 0e00 	mov.w	lr, #0
   d7c5a:	f1dc 0c00 	rsbs	ip, ip, #0
   d7c5e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7c62:	eb6e 0101 	sbc.w	r1, lr, r1
   d7c66:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7c6a:	d31b      	bcc.n	d7ca4 <__adddf3+0x124>
   d7c6c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7c70:	d30c      	bcc.n	d7c8c <__adddf3+0x10c>
   d7c72:	0849      	lsrs	r1, r1, #1
   d7c74:	ea5f 0030 	movs.w	r0, r0, rrx
   d7c78:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7c7c:	f104 0401 	add.w	r4, r4, #1
   d7c80:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7c84:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7c88:	f080 809a 	bcs.w	d7dc0 <__adddf3+0x240>
   d7c8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7c90:	bf08      	it	eq
   d7c92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7c96:	f150 0000 	adcs.w	r0, r0, #0
   d7c9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7c9e:	ea41 0105 	orr.w	r1, r1, r5
   d7ca2:	bd30      	pop	{r4, r5, pc}
   d7ca4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7ca8:	4140      	adcs	r0, r0
   d7caa:	eb41 0101 	adc.w	r1, r1, r1
   d7cae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7cb2:	f1a4 0401 	sub.w	r4, r4, #1
   d7cb6:	d1e9      	bne.n	d7c8c <__adddf3+0x10c>
   d7cb8:	f091 0f00 	teq	r1, #0
   d7cbc:	bf04      	itt	eq
   d7cbe:	4601      	moveq	r1, r0
   d7cc0:	2000      	moveq	r0, #0
   d7cc2:	fab1 f381 	clz	r3, r1
   d7cc6:	bf08      	it	eq
   d7cc8:	3320      	addeq	r3, #32
   d7cca:	f1a3 030b 	sub.w	r3, r3, #11
   d7cce:	f1b3 0220 	subs.w	r2, r3, #32
   d7cd2:	da0c      	bge.n	d7cee <__adddf3+0x16e>
   d7cd4:	320c      	adds	r2, #12
   d7cd6:	dd08      	ble.n	d7cea <__adddf3+0x16a>
   d7cd8:	f102 0c14 	add.w	ip, r2, #20
   d7cdc:	f1c2 020c 	rsb	r2, r2, #12
   d7ce0:	fa01 f00c 	lsl.w	r0, r1, ip
   d7ce4:	fa21 f102 	lsr.w	r1, r1, r2
   d7ce8:	e00c      	b.n	d7d04 <__adddf3+0x184>
   d7cea:	f102 0214 	add.w	r2, r2, #20
   d7cee:	bfd8      	it	le
   d7cf0:	f1c2 0c20 	rsble	ip, r2, #32
   d7cf4:	fa01 f102 	lsl.w	r1, r1, r2
   d7cf8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7cfc:	bfdc      	itt	le
   d7cfe:	ea41 010c 	orrle.w	r1, r1, ip
   d7d02:	4090      	lslle	r0, r2
   d7d04:	1ae4      	subs	r4, r4, r3
   d7d06:	bfa2      	ittt	ge
   d7d08:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7d0c:	4329      	orrge	r1, r5
   d7d0e:	bd30      	popge	{r4, r5, pc}
   d7d10:	ea6f 0404 	mvn.w	r4, r4
   d7d14:	3c1f      	subs	r4, #31
   d7d16:	da1c      	bge.n	d7d52 <__adddf3+0x1d2>
   d7d18:	340c      	adds	r4, #12
   d7d1a:	dc0e      	bgt.n	d7d3a <__adddf3+0x1ba>
   d7d1c:	f104 0414 	add.w	r4, r4, #20
   d7d20:	f1c4 0220 	rsb	r2, r4, #32
   d7d24:	fa20 f004 	lsr.w	r0, r0, r4
   d7d28:	fa01 f302 	lsl.w	r3, r1, r2
   d7d2c:	ea40 0003 	orr.w	r0, r0, r3
   d7d30:	fa21 f304 	lsr.w	r3, r1, r4
   d7d34:	ea45 0103 	orr.w	r1, r5, r3
   d7d38:	bd30      	pop	{r4, r5, pc}
   d7d3a:	f1c4 040c 	rsb	r4, r4, #12
   d7d3e:	f1c4 0220 	rsb	r2, r4, #32
   d7d42:	fa20 f002 	lsr.w	r0, r0, r2
   d7d46:	fa01 f304 	lsl.w	r3, r1, r4
   d7d4a:	ea40 0003 	orr.w	r0, r0, r3
   d7d4e:	4629      	mov	r1, r5
   d7d50:	bd30      	pop	{r4, r5, pc}
   d7d52:	fa21 f004 	lsr.w	r0, r1, r4
   d7d56:	4629      	mov	r1, r5
   d7d58:	bd30      	pop	{r4, r5, pc}
   d7d5a:	f094 0f00 	teq	r4, #0
   d7d5e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7d62:	bf06      	itte	eq
   d7d64:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7d68:	3401      	addeq	r4, #1
   d7d6a:	3d01      	subne	r5, #1
   d7d6c:	e74e      	b.n	d7c0c <__adddf3+0x8c>
   d7d6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7d72:	bf18      	it	ne
   d7d74:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7d78:	d029      	beq.n	d7dce <__adddf3+0x24e>
   d7d7a:	ea94 0f05 	teq	r4, r5
   d7d7e:	bf08      	it	eq
   d7d80:	ea90 0f02 	teqeq	r0, r2
   d7d84:	d005      	beq.n	d7d92 <__adddf3+0x212>
   d7d86:	ea54 0c00 	orrs.w	ip, r4, r0
   d7d8a:	bf04      	itt	eq
   d7d8c:	4619      	moveq	r1, r3
   d7d8e:	4610      	moveq	r0, r2
   d7d90:	bd30      	pop	{r4, r5, pc}
   d7d92:	ea91 0f03 	teq	r1, r3
   d7d96:	bf1e      	ittt	ne
   d7d98:	2100      	movne	r1, #0
   d7d9a:	2000      	movne	r0, #0
   d7d9c:	bd30      	popne	{r4, r5, pc}
   d7d9e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7da2:	d105      	bne.n	d7db0 <__adddf3+0x230>
   d7da4:	0040      	lsls	r0, r0, #1
   d7da6:	4149      	adcs	r1, r1
   d7da8:	bf28      	it	cs
   d7daa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7dae:	bd30      	pop	{r4, r5, pc}
   d7db0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7db4:	bf3c      	itt	cc
   d7db6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7dba:	bd30      	popcc	{r4, r5, pc}
   d7dbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7dc0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7dc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7dc8:	f04f 0000 	mov.w	r0, #0
   d7dcc:	bd30      	pop	{r4, r5, pc}
   d7dce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7dd2:	bf1a      	itte	ne
   d7dd4:	4619      	movne	r1, r3
   d7dd6:	4610      	movne	r0, r2
   d7dd8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7ddc:	bf1c      	itt	ne
   d7dde:	460b      	movne	r3, r1
   d7de0:	4602      	movne	r2, r0
   d7de2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7de6:	bf06      	itte	eq
   d7de8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7dec:	ea91 0f03 	teqeq	r1, r3
   d7df0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7df4:	bd30      	pop	{r4, r5, pc}
   d7df6:	bf00      	nop

000d7df8 <__aeabi_ui2d>:
   d7df8:	f090 0f00 	teq	r0, #0
   d7dfc:	bf04      	itt	eq
   d7dfe:	2100      	moveq	r1, #0
   d7e00:	4770      	bxeq	lr
   d7e02:	b530      	push	{r4, r5, lr}
   d7e04:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7e08:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7e0c:	f04f 0500 	mov.w	r5, #0
   d7e10:	f04f 0100 	mov.w	r1, #0
   d7e14:	e750      	b.n	d7cb8 <__adddf3+0x138>
   d7e16:	bf00      	nop

000d7e18 <__aeabi_i2d>:
   d7e18:	f090 0f00 	teq	r0, #0
   d7e1c:	bf04      	itt	eq
   d7e1e:	2100      	moveq	r1, #0
   d7e20:	4770      	bxeq	lr
   d7e22:	b530      	push	{r4, r5, lr}
   d7e24:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7e28:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7e2c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7e30:	bf48      	it	mi
   d7e32:	4240      	negmi	r0, r0
   d7e34:	f04f 0100 	mov.w	r1, #0
   d7e38:	e73e      	b.n	d7cb8 <__adddf3+0x138>
   d7e3a:	bf00      	nop

000d7e3c <__aeabi_f2d>:
   d7e3c:	0042      	lsls	r2, r0, #1
   d7e3e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7e42:	ea4f 0131 	mov.w	r1, r1, rrx
   d7e46:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7e4a:	bf1f      	itttt	ne
   d7e4c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7e50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7e54:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7e58:	4770      	bxne	lr
   d7e5a:	f092 0f00 	teq	r2, #0
   d7e5e:	bf14      	ite	ne
   d7e60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7e64:	4770      	bxeq	lr
   d7e66:	b530      	push	{r4, r5, lr}
   d7e68:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7e6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7e70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7e74:	e720      	b.n	d7cb8 <__adddf3+0x138>
   d7e76:	bf00      	nop

000d7e78 <__aeabi_ul2d>:
   d7e78:	ea50 0201 	orrs.w	r2, r0, r1
   d7e7c:	bf08      	it	eq
   d7e7e:	4770      	bxeq	lr
   d7e80:	b530      	push	{r4, r5, lr}
   d7e82:	f04f 0500 	mov.w	r5, #0
   d7e86:	e00a      	b.n	d7e9e <__aeabi_l2d+0x16>

000d7e88 <__aeabi_l2d>:
   d7e88:	ea50 0201 	orrs.w	r2, r0, r1
   d7e8c:	bf08      	it	eq
   d7e8e:	4770      	bxeq	lr
   d7e90:	b530      	push	{r4, r5, lr}
   d7e92:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7e96:	d502      	bpl.n	d7e9e <__aeabi_l2d+0x16>
   d7e98:	4240      	negs	r0, r0
   d7e9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7e9e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7ea2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7ea6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7eaa:	f43f aedc 	beq.w	d7c66 <__adddf3+0xe6>
   d7eae:	f04f 0203 	mov.w	r2, #3
   d7eb2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7eb6:	bf18      	it	ne
   d7eb8:	3203      	addne	r2, #3
   d7eba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7ebe:	bf18      	it	ne
   d7ec0:	3203      	addne	r2, #3
   d7ec2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7ec6:	f1c2 0320 	rsb	r3, r2, #32
   d7eca:	fa00 fc03 	lsl.w	ip, r0, r3
   d7ece:	fa20 f002 	lsr.w	r0, r0, r2
   d7ed2:	fa01 fe03 	lsl.w	lr, r1, r3
   d7ed6:	ea40 000e 	orr.w	r0, r0, lr
   d7eda:	fa21 f102 	lsr.w	r1, r1, r2
   d7ede:	4414      	add	r4, r2
   d7ee0:	e6c1      	b.n	d7c66 <__adddf3+0xe6>
   d7ee2:	bf00      	nop

000d7ee4 <__aeabi_dmul>:
   d7ee4:	b570      	push	{r4, r5, r6, lr}
   d7ee6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7eea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7eee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7ef2:	bf1d      	ittte	ne
   d7ef4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7ef8:	ea94 0f0c 	teqne	r4, ip
   d7efc:	ea95 0f0c 	teqne	r5, ip
   d7f00:	f000 f8de 	bleq	d80c0 <__aeabi_dmul+0x1dc>
   d7f04:	442c      	add	r4, r5
   d7f06:	ea81 0603 	eor.w	r6, r1, r3
   d7f0a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7f0e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7f12:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7f16:	bf18      	it	ne
   d7f18:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7f1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7f20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7f24:	d038      	beq.n	d7f98 <__aeabi_dmul+0xb4>
   d7f26:	fba0 ce02 	umull	ip, lr, r0, r2
   d7f2a:	f04f 0500 	mov.w	r5, #0
   d7f2e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7f32:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7f36:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7f3a:	f04f 0600 	mov.w	r6, #0
   d7f3e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7f42:	f09c 0f00 	teq	ip, #0
   d7f46:	bf18      	it	ne
   d7f48:	f04e 0e01 	orrne.w	lr, lr, #1
   d7f4c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7f50:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7f54:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7f58:	d204      	bcs.n	d7f64 <__aeabi_dmul+0x80>
   d7f5a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7f5e:	416d      	adcs	r5, r5
   d7f60:	eb46 0606 	adc.w	r6, r6, r6
   d7f64:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7f68:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7f6c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7f70:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7f74:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7f78:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7f7c:	bf88      	it	hi
   d7f7e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7f82:	d81e      	bhi.n	d7fc2 <__aeabi_dmul+0xde>
   d7f84:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7f88:	bf08      	it	eq
   d7f8a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7f8e:	f150 0000 	adcs.w	r0, r0, #0
   d7f92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7f96:	bd70      	pop	{r4, r5, r6, pc}
   d7f98:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7f9c:	ea46 0101 	orr.w	r1, r6, r1
   d7fa0:	ea40 0002 	orr.w	r0, r0, r2
   d7fa4:	ea81 0103 	eor.w	r1, r1, r3
   d7fa8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7fac:	bfc2      	ittt	gt
   d7fae:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7fb2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7fb6:	bd70      	popgt	{r4, r5, r6, pc}
   d7fb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7fbc:	f04f 0e00 	mov.w	lr, #0
   d7fc0:	3c01      	subs	r4, #1
   d7fc2:	f300 80ab 	bgt.w	d811c <__aeabi_dmul+0x238>
   d7fc6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7fca:	bfde      	ittt	le
   d7fcc:	2000      	movle	r0, #0
   d7fce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7fd2:	bd70      	pople	{r4, r5, r6, pc}
   d7fd4:	f1c4 0400 	rsb	r4, r4, #0
   d7fd8:	3c20      	subs	r4, #32
   d7fda:	da35      	bge.n	d8048 <__aeabi_dmul+0x164>
   d7fdc:	340c      	adds	r4, #12
   d7fde:	dc1b      	bgt.n	d8018 <__aeabi_dmul+0x134>
   d7fe0:	f104 0414 	add.w	r4, r4, #20
   d7fe4:	f1c4 0520 	rsb	r5, r4, #32
   d7fe8:	fa00 f305 	lsl.w	r3, r0, r5
   d7fec:	fa20 f004 	lsr.w	r0, r0, r4
   d7ff0:	fa01 f205 	lsl.w	r2, r1, r5
   d7ff4:	ea40 0002 	orr.w	r0, r0, r2
   d7ff8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7ffc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8000:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8004:	fa21 f604 	lsr.w	r6, r1, r4
   d8008:	eb42 0106 	adc.w	r1, r2, r6
   d800c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8010:	bf08      	it	eq
   d8012:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8016:	bd70      	pop	{r4, r5, r6, pc}
   d8018:	f1c4 040c 	rsb	r4, r4, #12
   d801c:	f1c4 0520 	rsb	r5, r4, #32
   d8020:	fa00 f304 	lsl.w	r3, r0, r4
   d8024:	fa20 f005 	lsr.w	r0, r0, r5
   d8028:	fa01 f204 	lsl.w	r2, r1, r4
   d802c:	ea40 0002 	orr.w	r0, r0, r2
   d8030:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8034:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8038:	f141 0100 	adc.w	r1, r1, #0
   d803c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8040:	bf08      	it	eq
   d8042:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8046:	bd70      	pop	{r4, r5, r6, pc}
   d8048:	f1c4 0520 	rsb	r5, r4, #32
   d804c:	fa00 f205 	lsl.w	r2, r0, r5
   d8050:	ea4e 0e02 	orr.w	lr, lr, r2
   d8054:	fa20 f304 	lsr.w	r3, r0, r4
   d8058:	fa01 f205 	lsl.w	r2, r1, r5
   d805c:	ea43 0302 	orr.w	r3, r3, r2
   d8060:	fa21 f004 	lsr.w	r0, r1, r4
   d8064:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8068:	fa21 f204 	lsr.w	r2, r1, r4
   d806c:	ea20 0002 	bic.w	r0, r0, r2
   d8070:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8074:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8078:	bf08      	it	eq
   d807a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d807e:	bd70      	pop	{r4, r5, r6, pc}
   d8080:	f094 0f00 	teq	r4, #0
   d8084:	d10f      	bne.n	d80a6 <__aeabi_dmul+0x1c2>
   d8086:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d808a:	0040      	lsls	r0, r0, #1
   d808c:	eb41 0101 	adc.w	r1, r1, r1
   d8090:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8094:	bf08      	it	eq
   d8096:	3c01      	subeq	r4, #1
   d8098:	d0f7      	beq.n	d808a <__aeabi_dmul+0x1a6>
   d809a:	ea41 0106 	orr.w	r1, r1, r6
   d809e:	f095 0f00 	teq	r5, #0
   d80a2:	bf18      	it	ne
   d80a4:	4770      	bxne	lr
   d80a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d80aa:	0052      	lsls	r2, r2, #1
   d80ac:	eb43 0303 	adc.w	r3, r3, r3
   d80b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d80b4:	bf08      	it	eq
   d80b6:	3d01      	subeq	r5, #1
   d80b8:	d0f7      	beq.n	d80aa <__aeabi_dmul+0x1c6>
   d80ba:	ea43 0306 	orr.w	r3, r3, r6
   d80be:	4770      	bx	lr
   d80c0:	ea94 0f0c 	teq	r4, ip
   d80c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d80c8:	bf18      	it	ne
   d80ca:	ea95 0f0c 	teqne	r5, ip
   d80ce:	d00c      	beq.n	d80ea <__aeabi_dmul+0x206>
   d80d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d80d4:	bf18      	it	ne
   d80d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d80da:	d1d1      	bne.n	d8080 <__aeabi_dmul+0x19c>
   d80dc:	ea81 0103 	eor.w	r1, r1, r3
   d80e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d80e4:	f04f 0000 	mov.w	r0, #0
   d80e8:	bd70      	pop	{r4, r5, r6, pc}
   d80ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d80ee:	bf06      	itte	eq
   d80f0:	4610      	moveq	r0, r2
   d80f2:	4619      	moveq	r1, r3
   d80f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d80f8:	d019      	beq.n	d812e <__aeabi_dmul+0x24a>
   d80fa:	ea94 0f0c 	teq	r4, ip
   d80fe:	d102      	bne.n	d8106 <__aeabi_dmul+0x222>
   d8100:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8104:	d113      	bne.n	d812e <__aeabi_dmul+0x24a>
   d8106:	ea95 0f0c 	teq	r5, ip
   d810a:	d105      	bne.n	d8118 <__aeabi_dmul+0x234>
   d810c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8110:	bf1c      	itt	ne
   d8112:	4610      	movne	r0, r2
   d8114:	4619      	movne	r1, r3
   d8116:	d10a      	bne.n	d812e <__aeabi_dmul+0x24a>
   d8118:	ea81 0103 	eor.w	r1, r1, r3
   d811c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8120:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8124:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8128:	f04f 0000 	mov.w	r0, #0
   d812c:	bd70      	pop	{r4, r5, r6, pc}
   d812e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8132:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8136:	bd70      	pop	{r4, r5, r6, pc}

000d8138 <__aeabi_ddiv>:
   d8138:	b570      	push	{r4, r5, r6, lr}
   d813a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d813e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8142:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8146:	bf1d      	ittte	ne
   d8148:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d814c:	ea94 0f0c 	teqne	r4, ip
   d8150:	ea95 0f0c 	teqne	r5, ip
   d8154:	f000 f8a7 	bleq	d82a6 <__aeabi_ddiv+0x16e>
   d8158:	eba4 0405 	sub.w	r4, r4, r5
   d815c:	ea81 0e03 	eor.w	lr, r1, r3
   d8160:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8164:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8168:	f000 8088 	beq.w	d827c <__aeabi_ddiv+0x144>
   d816c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8170:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8174:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8178:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d817c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8180:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8184:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8188:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d818c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8190:	429d      	cmp	r5, r3
   d8192:	bf08      	it	eq
   d8194:	4296      	cmpeq	r6, r2
   d8196:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d819a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d819e:	d202      	bcs.n	d81a6 <__aeabi_ddiv+0x6e>
   d81a0:	085b      	lsrs	r3, r3, #1
   d81a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d81a6:	1ab6      	subs	r6, r6, r2
   d81a8:	eb65 0503 	sbc.w	r5, r5, r3
   d81ac:	085b      	lsrs	r3, r3, #1
   d81ae:	ea4f 0232 	mov.w	r2, r2, rrx
   d81b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d81b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d81ba:	ebb6 0e02 	subs.w	lr, r6, r2
   d81be:	eb75 0e03 	sbcs.w	lr, r5, r3
   d81c2:	bf22      	ittt	cs
   d81c4:	1ab6      	subcs	r6, r6, r2
   d81c6:	4675      	movcs	r5, lr
   d81c8:	ea40 000c 	orrcs.w	r0, r0, ip
   d81cc:	085b      	lsrs	r3, r3, #1
   d81ce:	ea4f 0232 	mov.w	r2, r2, rrx
   d81d2:	ebb6 0e02 	subs.w	lr, r6, r2
   d81d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d81da:	bf22      	ittt	cs
   d81dc:	1ab6      	subcs	r6, r6, r2
   d81de:	4675      	movcs	r5, lr
   d81e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d81e4:	085b      	lsrs	r3, r3, #1
   d81e6:	ea4f 0232 	mov.w	r2, r2, rrx
   d81ea:	ebb6 0e02 	subs.w	lr, r6, r2
   d81ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d81f2:	bf22      	ittt	cs
   d81f4:	1ab6      	subcs	r6, r6, r2
   d81f6:	4675      	movcs	r5, lr
   d81f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d81fc:	085b      	lsrs	r3, r3, #1
   d81fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d8202:	ebb6 0e02 	subs.w	lr, r6, r2
   d8206:	eb75 0e03 	sbcs.w	lr, r5, r3
   d820a:	bf22      	ittt	cs
   d820c:	1ab6      	subcs	r6, r6, r2
   d820e:	4675      	movcs	r5, lr
   d8210:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8214:	ea55 0e06 	orrs.w	lr, r5, r6
   d8218:	d018      	beq.n	d824c <__aeabi_ddiv+0x114>
   d821a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d821e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8222:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8226:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d822a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d822e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8232:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8236:	d1c0      	bne.n	d81ba <__aeabi_ddiv+0x82>
   d8238:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d823c:	d10b      	bne.n	d8256 <__aeabi_ddiv+0x11e>
   d823e:	ea41 0100 	orr.w	r1, r1, r0
   d8242:	f04f 0000 	mov.w	r0, #0
   d8246:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d824a:	e7b6      	b.n	d81ba <__aeabi_ddiv+0x82>
   d824c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8250:	bf04      	itt	eq
   d8252:	4301      	orreq	r1, r0
   d8254:	2000      	moveq	r0, #0
   d8256:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d825a:	bf88      	it	hi
   d825c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8260:	f63f aeaf 	bhi.w	d7fc2 <__aeabi_dmul+0xde>
   d8264:	ebb5 0c03 	subs.w	ip, r5, r3
   d8268:	bf04      	itt	eq
   d826a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d826e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8272:	f150 0000 	adcs.w	r0, r0, #0
   d8276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d827a:	bd70      	pop	{r4, r5, r6, pc}
   d827c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8280:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8284:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8288:	bfc2      	ittt	gt
   d828a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d828e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8292:	bd70      	popgt	{r4, r5, r6, pc}
   d8294:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8298:	f04f 0e00 	mov.w	lr, #0
   d829c:	3c01      	subs	r4, #1
   d829e:	e690      	b.n	d7fc2 <__aeabi_dmul+0xde>
   d82a0:	ea45 0e06 	orr.w	lr, r5, r6
   d82a4:	e68d      	b.n	d7fc2 <__aeabi_dmul+0xde>
   d82a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d82aa:	ea94 0f0c 	teq	r4, ip
   d82ae:	bf08      	it	eq
   d82b0:	ea95 0f0c 	teqeq	r5, ip
   d82b4:	f43f af3b 	beq.w	d812e <__aeabi_dmul+0x24a>
   d82b8:	ea94 0f0c 	teq	r4, ip
   d82bc:	d10a      	bne.n	d82d4 <__aeabi_ddiv+0x19c>
   d82be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d82c2:	f47f af34 	bne.w	d812e <__aeabi_dmul+0x24a>
   d82c6:	ea95 0f0c 	teq	r5, ip
   d82ca:	f47f af25 	bne.w	d8118 <__aeabi_dmul+0x234>
   d82ce:	4610      	mov	r0, r2
   d82d0:	4619      	mov	r1, r3
   d82d2:	e72c      	b.n	d812e <__aeabi_dmul+0x24a>
   d82d4:	ea95 0f0c 	teq	r5, ip
   d82d8:	d106      	bne.n	d82e8 <__aeabi_ddiv+0x1b0>
   d82da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d82de:	f43f aefd 	beq.w	d80dc <__aeabi_dmul+0x1f8>
   d82e2:	4610      	mov	r0, r2
   d82e4:	4619      	mov	r1, r3
   d82e6:	e722      	b.n	d812e <__aeabi_dmul+0x24a>
   d82e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d82ec:	bf18      	it	ne
   d82ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d82f2:	f47f aec5 	bne.w	d8080 <__aeabi_dmul+0x19c>
   d82f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d82fa:	f47f af0d 	bne.w	d8118 <__aeabi_dmul+0x234>
   d82fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8302:	f47f aeeb 	bne.w	d80dc <__aeabi_dmul+0x1f8>
   d8306:	e712      	b.n	d812e <__aeabi_dmul+0x24a>

000d8308 <__gedf2>:
   d8308:	f04f 3cff 	mov.w	ip, #4294967295
   d830c:	e006      	b.n	d831c <__cmpdf2+0x4>
   d830e:	bf00      	nop

000d8310 <__ledf2>:
   d8310:	f04f 0c01 	mov.w	ip, #1
   d8314:	e002      	b.n	d831c <__cmpdf2+0x4>
   d8316:	bf00      	nop

000d8318 <__cmpdf2>:
   d8318:	f04f 0c01 	mov.w	ip, #1
   d831c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8320:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8324:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8328:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d832c:	bf18      	it	ne
   d832e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8332:	d01b      	beq.n	d836c <__cmpdf2+0x54>
   d8334:	b001      	add	sp, #4
   d8336:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d833a:	bf0c      	ite	eq
   d833c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8340:	ea91 0f03 	teqne	r1, r3
   d8344:	bf02      	ittt	eq
   d8346:	ea90 0f02 	teqeq	r0, r2
   d834a:	2000      	moveq	r0, #0
   d834c:	4770      	bxeq	lr
   d834e:	f110 0f00 	cmn.w	r0, #0
   d8352:	ea91 0f03 	teq	r1, r3
   d8356:	bf58      	it	pl
   d8358:	4299      	cmppl	r1, r3
   d835a:	bf08      	it	eq
   d835c:	4290      	cmpeq	r0, r2
   d835e:	bf2c      	ite	cs
   d8360:	17d8      	asrcs	r0, r3, #31
   d8362:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8366:	f040 0001 	orr.w	r0, r0, #1
   d836a:	4770      	bx	lr
   d836c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8370:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8374:	d102      	bne.n	d837c <__cmpdf2+0x64>
   d8376:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d837a:	d107      	bne.n	d838c <__cmpdf2+0x74>
   d837c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8380:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8384:	d1d6      	bne.n	d8334 <__cmpdf2+0x1c>
   d8386:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d838a:	d0d3      	beq.n	d8334 <__cmpdf2+0x1c>
   d838c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8390:	4770      	bx	lr
   d8392:	bf00      	nop

000d8394 <__aeabi_cdrcmple>:
   d8394:	4684      	mov	ip, r0
   d8396:	4610      	mov	r0, r2
   d8398:	4662      	mov	r2, ip
   d839a:	468c      	mov	ip, r1
   d839c:	4619      	mov	r1, r3
   d839e:	4663      	mov	r3, ip
   d83a0:	e000      	b.n	d83a4 <__aeabi_cdcmpeq>
   d83a2:	bf00      	nop

000d83a4 <__aeabi_cdcmpeq>:
   d83a4:	b501      	push	{r0, lr}
   d83a6:	f7ff ffb7 	bl	d8318 <__cmpdf2>
   d83aa:	2800      	cmp	r0, #0
   d83ac:	bf48      	it	mi
   d83ae:	f110 0f00 	cmnmi.w	r0, #0
   d83b2:	bd01      	pop	{r0, pc}

000d83b4 <__aeabi_dcmpeq>:
   d83b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d83b8:	f7ff fff4 	bl	d83a4 <__aeabi_cdcmpeq>
   d83bc:	bf0c      	ite	eq
   d83be:	2001      	moveq	r0, #1
   d83c0:	2000      	movne	r0, #0
   d83c2:	f85d fb08 	ldr.w	pc, [sp], #8
   d83c6:	bf00      	nop

000d83c8 <__aeabi_dcmplt>:
   d83c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d83cc:	f7ff ffea 	bl	d83a4 <__aeabi_cdcmpeq>
   d83d0:	bf34      	ite	cc
   d83d2:	2001      	movcc	r0, #1
   d83d4:	2000      	movcs	r0, #0
   d83d6:	f85d fb08 	ldr.w	pc, [sp], #8
   d83da:	bf00      	nop

000d83dc <__aeabi_dcmple>:
   d83dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d83e0:	f7ff ffe0 	bl	d83a4 <__aeabi_cdcmpeq>
   d83e4:	bf94      	ite	ls
   d83e6:	2001      	movls	r0, #1
   d83e8:	2000      	movhi	r0, #0
   d83ea:	f85d fb08 	ldr.w	pc, [sp], #8
   d83ee:	bf00      	nop

000d83f0 <__aeabi_dcmpge>:
   d83f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d83f4:	f7ff ffce 	bl	d8394 <__aeabi_cdrcmple>
   d83f8:	bf94      	ite	ls
   d83fa:	2001      	movls	r0, #1
   d83fc:	2000      	movhi	r0, #0
   d83fe:	f85d fb08 	ldr.w	pc, [sp], #8
   d8402:	bf00      	nop

000d8404 <__aeabi_dcmpgt>:
   d8404:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8408:	f7ff ffc4 	bl	d8394 <__aeabi_cdrcmple>
   d840c:	bf34      	ite	cc
   d840e:	2001      	movcc	r0, #1
   d8410:	2000      	movcs	r0, #0
   d8412:	f85d fb08 	ldr.w	pc, [sp], #8
   d8416:	bf00      	nop

000d8418 <__aeabi_d2iz>:
   d8418:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d841c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8420:	d215      	bcs.n	d844e <__aeabi_d2iz+0x36>
   d8422:	d511      	bpl.n	d8448 <__aeabi_d2iz+0x30>
   d8424:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8428:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d842c:	d912      	bls.n	d8454 <__aeabi_d2iz+0x3c>
   d842e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8432:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8436:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d843a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d843e:	fa23 f002 	lsr.w	r0, r3, r2
   d8442:	bf18      	it	ne
   d8444:	4240      	negne	r0, r0
   d8446:	4770      	bx	lr
   d8448:	f04f 0000 	mov.w	r0, #0
   d844c:	4770      	bx	lr
   d844e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8452:	d105      	bne.n	d8460 <__aeabi_d2iz+0x48>
   d8454:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8458:	bf08      	it	eq
   d845a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d845e:	4770      	bx	lr
   d8460:	f04f 0000 	mov.w	r0, #0
   d8464:	4770      	bx	lr
   d8466:	bf00      	nop

000d8468 <__aeabi_d2uiz>:
   d8468:	004a      	lsls	r2, r1, #1
   d846a:	d211      	bcs.n	d8490 <__aeabi_d2uiz+0x28>
   d846c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8470:	d211      	bcs.n	d8496 <__aeabi_d2uiz+0x2e>
   d8472:	d50d      	bpl.n	d8490 <__aeabi_d2uiz+0x28>
   d8474:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8478:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d847c:	d40e      	bmi.n	d849c <__aeabi_d2uiz+0x34>
   d847e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8482:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8486:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d848a:	fa23 f002 	lsr.w	r0, r3, r2
   d848e:	4770      	bx	lr
   d8490:	f04f 0000 	mov.w	r0, #0
   d8494:	4770      	bx	lr
   d8496:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d849a:	d102      	bne.n	d84a2 <__aeabi_d2uiz+0x3a>
   d849c:	f04f 30ff 	mov.w	r0, #4294967295
   d84a0:	4770      	bx	lr
   d84a2:	f04f 0000 	mov.w	r0, #0
   d84a6:	4770      	bx	lr

000d84a8 <__aeabi_d2f>:
   d84a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d84ac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d84b0:	bf24      	itt	cs
   d84b2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d84b6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d84ba:	d90d      	bls.n	d84d8 <__aeabi_d2f+0x30>
   d84bc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d84c0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d84c4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d84c8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d84cc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d84d0:	bf08      	it	eq
   d84d2:	f020 0001 	biceq.w	r0, r0, #1
   d84d6:	4770      	bx	lr
   d84d8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d84dc:	d121      	bne.n	d8522 <__aeabi_d2f+0x7a>
   d84de:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d84e2:	bfbc      	itt	lt
   d84e4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d84e8:	4770      	bxlt	lr
   d84ea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d84ee:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d84f2:	f1c2 0218 	rsb	r2, r2, #24
   d84f6:	f1c2 0c20 	rsb	ip, r2, #32
   d84fa:	fa10 f30c 	lsls.w	r3, r0, ip
   d84fe:	fa20 f002 	lsr.w	r0, r0, r2
   d8502:	bf18      	it	ne
   d8504:	f040 0001 	orrne.w	r0, r0, #1
   d8508:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d850c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8510:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8514:	ea40 000c 	orr.w	r0, r0, ip
   d8518:	fa23 f302 	lsr.w	r3, r3, r2
   d851c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8520:	e7cc      	b.n	d84bc <__aeabi_d2f+0x14>
   d8522:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8526:	d107      	bne.n	d8538 <__aeabi_d2f+0x90>
   d8528:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d852c:	bf1e      	ittt	ne
   d852e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8532:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8536:	4770      	bxne	lr
   d8538:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d853c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8540:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8544:	4770      	bx	lr
   d8546:	bf00      	nop

000d8548 <atof>:
   d8548:	2100      	movs	r1, #0
   d854a:	f000 bef5 	b.w	d9338 <strtod>
	...

000d8550 <__cxa_atexit>:
   d8550:	b510      	push	{r4, lr}
   d8552:	4c05      	ldr	r4, [pc, #20]	; (d8568 <__cxa_atexit+0x18>)
   d8554:	4613      	mov	r3, r2
   d8556:	b12c      	cbz	r4, d8564 <__cxa_atexit+0x14>
   d8558:	460a      	mov	r2, r1
   d855a:	4601      	mov	r1, r0
   d855c:	2002      	movs	r0, #2
   d855e:	f3af 8000 	nop.w
   d8562:	bd10      	pop	{r4, pc}
   d8564:	4620      	mov	r0, r4
   d8566:	bd10      	pop	{r4, pc}
   d8568:	00000000 	.word	0x00000000

000d856c <ldiv>:
   d856c:	2900      	cmp	r1, #0
   d856e:	b510      	push	{r4, lr}
   d8570:	fb91 f4f2 	sdiv	r4, r1, r2
   d8574:	fb02 1314 	mls	r3, r2, r4, r1
   d8578:	db04      	blt.n	d8584 <ldiv+0x18>
   d857a:	2b00      	cmp	r3, #0
   d857c:	da07      	bge.n	d858e <ldiv+0x22>
   d857e:	3401      	adds	r4, #1
   d8580:	1a9b      	subs	r3, r3, r2
   d8582:	e004      	b.n	d858e <ldiv+0x22>
   d8584:	2b00      	cmp	r3, #0
   d8586:	bfc4      	itt	gt
   d8588:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d858c:	189b      	addgt	r3, r3, r2
   d858e:	6004      	str	r4, [r0, #0]
   d8590:	6043      	str	r3, [r0, #4]
   d8592:	bd10      	pop	{r4, pc}

000d8594 <_localeconv_r>:
   d8594:	4800      	ldr	r0, [pc, #0]	; (d8598 <_localeconv_r+0x4>)
   d8596:	4770      	bx	lr
   d8598:	2003e190 	.word	0x2003e190

000d859c <memcpy>:
   d859c:	b510      	push	{r4, lr}
   d859e:	1e43      	subs	r3, r0, #1
   d85a0:	440a      	add	r2, r1
   d85a2:	4291      	cmp	r1, r2
   d85a4:	d004      	beq.n	d85b0 <memcpy+0x14>
   d85a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d85aa:	f803 4f01 	strb.w	r4, [r3, #1]!
   d85ae:	e7f8      	b.n	d85a2 <memcpy+0x6>
   d85b0:	bd10      	pop	{r4, pc}

000d85b2 <memmove>:
   d85b2:	4288      	cmp	r0, r1
   d85b4:	b510      	push	{r4, lr}
   d85b6:	eb01 0302 	add.w	r3, r1, r2
   d85ba:	d801      	bhi.n	d85c0 <memmove+0xe>
   d85bc:	1e42      	subs	r2, r0, #1
   d85be:	e00b      	b.n	d85d8 <memmove+0x26>
   d85c0:	4298      	cmp	r0, r3
   d85c2:	d2fb      	bcs.n	d85bc <memmove+0xa>
   d85c4:	1881      	adds	r1, r0, r2
   d85c6:	1ad2      	subs	r2, r2, r3
   d85c8:	42d3      	cmn	r3, r2
   d85ca:	d004      	beq.n	d85d6 <memmove+0x24>
   d85cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d85d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d85d4:	e7f8      	b.n	d85c8 <memmove+0x16>
   d85d6:	bd10      	pop	{r4, pc}
   d85d8:	4299      	cmp	r1, r3
   d85da:	d004      	beq.n	d85e6 <memmove+0x34>
   d85dc:	f811 4b01 	ldrb.w	r4, [r1], #1
   d85e0:	f802 4f01 	strb.w	r4, [r2, #1]!
   d85e4:	e7f8      	b.n	d85d8 <memmove+0x26>
   d85e6:	bd10      	pop	{r4, pc}

000d85e8 <memset>:
   d85e8:	4402      	add	r2, r0
   d85ea:	4603      	mov	r3, r0
   d85ec:	4293      	cmp	r3, r2
   d85ee:	d002      	beq.n	d85f6 <memset+0xe>
   d85f0:	f803 1b01 	strb.w	r1, [r3], #1
   d85f4:	e7fa      	b.n	d85ec <memset+0x4>
   d85f6:	4770      	bx	lr

000d85f8 <srand>:
   d85f8:	b538      	push	{r3, r4, r5, lr}
   d85fa:	4b12      	ldr	r3, [pc, #72]	; (d8644 <srand+0x4c>)
   d85fc:	681c      	ldr	r4, [r3, #0]
   d85fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8600:	4605      	mov	r5, r0
   d8602:	b9d3      	cbnz	r3, d863a <srand+0x42>
   d8604:	2018      	movs	r0, #24
   d8606:	f7fd fe93 	bl	d6330 <malloc>
   d860a:	f243 330e 	movw	r3, #13070	; 0x330e
   d860e:	63a0      	str	r0, [r4, #56]	; 0x38
   d8610:	8003      	strh	r3, [r0, #0]
   d8612:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8616:	8043      	strh	r3, [r0, #2]
   d8618:	f241 2334 	movw	r3, #4660	; 0x1234
   d861c:	8083      	strh	r3, [r0, #4]
   d861e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8622:	80c3      	strh	r3, [r0, #6]
   d8624:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8628:	8103      	strh	r3, [r0, #8]
   d862a:	2305      	movs	r3, #5
   d862c:	8143      	strh	r3, [r0, #10]
   d862e:	230b      	movs	r3, #11
   d8630:	8183      	strh	r3, [r0, #12]
   d8632:	2201      	movs	r2, #1
   d8634:	2300      	movs	r3, #0
   d8636:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d863a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d863c:	2200      	movs	r2, #0
   d863e:	611d      	str	r5, [r3, #16]
   d8640:	615a      	str	r2, [r3, #20]
   d8642:	bd38      	pop	{r3, r4, r5, pc}
   d8644:	2003e18c 	.word	0x2003e18c

000d8648 <strcpy>:
   d8648:	4603      	mov	r3, r0
   d864a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d864e:	f803 2b01 	strb.w	r2, [r3], #1
   d8652:	2a00      	cmp	r2, #0
   d8654:	d1f9      	bne.n	d864a <strcpy+0x2>
   d8656:	4770      	bx	lr

000d8658 <strlen>:
   d8658:	4603      	mov	r3, r0
   d865a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d865e:	2a00      	cmp	r2, #0
   d8660:	d1fb      	bne.n	d865a <strlen+0x2>
   d8662:	1a18      	subs	r0, r3, r0
   d8664:	3801      	subs	r0, #1
   d8666:	4770      	bx	lr

000d8668 <strncasecmp>:
   d8668:	4b10      	ldr	r3, [pc, #64]	; (d86ac <strncasecmp+0x44>)
   d866a:	b570      	push	{r4, r5, r6, lr}
   d866c:	681e      	ldr	r6, [r3, #0]
   d866e:	440a      	add	r2, r1
   d8670:	4291      	cmp	r1, r2
   d8672:	d017      	beq.n	d86a4 <strncasecmp+0x3c>
   d8674:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8678:	18f4      	adds	r4, r6, r3
   d867a:	7864      	ldrb	r4, [r4, #1]
   d867c:	f004 0403 	and.w	r4, r4, #3
   d8680:	2c01      	cmp	r4, #1
   d8682:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8686:	eb06 0504 	add.w	r5, r6, r4
   d868a:	bf08      	it	eq
   d868c:	3320      	addeq	r3, #32
   d868e:	786d      	ldrb	r5, [r5, #1]
   d8690:	f005 0503 	and.w	r5, r5, #3
   d8694:	2d01      	cmp	r5, #1
   d8696:	bf08      	it	eq
   d8698:	3420      	addeq	r4, #32
   d869a:	1b1b      	subs	r3, r3, r4
   d869c:	d103      	bne.n	d86a6 <strncasecmp+0x3e>
   d869e:	2c00      	cmp	r4, #0
   d86a0:	d1e6      	bne.n	d8670 <strncasecmp+0x8>
   d86a2:	e000      	b.n	d86a6 <strncasecmp+0x3e>
   d86a4:	2300      	movs	r3, #0
   d86a6:	4618      	mov	r0, r3
   d86a8:	bd70      	pop	{r4, r5, r6, pc}
   d86aa:	bf00      	nop
   d86ac:	2003e128 	.word	0x2003e128

000d86b0 <strncmp>:
   d86b0:	b530      	push	{r4, r5, lr}
   d86b2:	b182      	cbz	r2, d86d6 <strncmp+0x26>
   d86b4:	1e45      	subs	r5, r0, #1
   d86b6:	3901      	subs	r1, #1
   d86b8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d86bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d86c0:	42a3      	cmp	r3, r4
   d86c2:	d106      	bne.n	d86d2 <strncmp+0x22>
   d86c4:	43ec      	mvns	r4, r5
   d86c6:	4414      	add	r4, r2
   d86c8:	42e0      	cmn	r0, r4
   d86ca:	d001      	beq.n	d86d0 <strncmp+0x20>
   d86cc:	2b00      	cmp	r3, #0
   d86ce:	d1f3      	bne.n	d86b8 <strncmp+0x8>
   d86d0:	461c      	mov	r4, r3
   d86d2:	1b18      	subs	r0, r3, r4
   d86d4:	bd30      	pop	{r4, r5, pc}
   d86d6:	4610      	mov	r0, r2
   d86d8:	bd30      	pop	{r4, r5, pc}

000d86da <strncpy>:
   d86da:	b510      	push	{r4, lr}
   d86dc:	4603      	mov	r3, r0
   d86de:	b142      	cbz	r2, d86f2 <strncpy+0x18>
   d86e0:	f811 4b01 	ldrb.w	r4, [r1], #1
   d86e4:	f803 4b01 	strb.w	r4, [r3], #1
   d86e8:	3a01      	subs	r2, #1
   d86ea:	2c00      	cmp	r4, #0
   d86ec:	d1f7      	bne.n	d86de <strncpy+0x4>
   d86ee:	441a      	add	r2, r3
   d86f0:	e000      	b.n	d86f4 <strncpy+0x1a>
   d86f2:	bd10      	pop	{r4, pc}
   d86f4:	4293      	cmp	r3, r2
   d86f6:	d002      	beq.n	d86fe <strncpy+0x24>
   d86f8:	f803 4b01 	strb.w	r4, [r3], #1
   d86fc:	e7fa      	b.n	d86f4 <strncpy+0x1a>
   d86fe:	bd10      	pop	{r4, pc}

000d8700 <sulp>:
   d8700:	b570      	push	{r4, r5, r6, lr}
   d8702:	4604      	mov	r4, r0
   d8704:	460d      	mov	r5, r1
   d8706:	ec45 4b10 	vmov	d0, r4, r5
   d870a:	4616      	mov	r6, r2
   d870c:	f001 fc00 	bl	d9f10 <__ulp>
   d8710:	ec51 0b10 	vmov	r0, r1, d0
   d8714:	b17e      	cbz	r6, d8736 <sulp+0x36>
   d8716:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d871a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d871e:	2b00      	cmp	r3, #0
   d8720:	dd09      	ble.n	d8736 <sulp+0x36>
   d8722:	051b      	lsls	r3, r3, #20
   d8724:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d8728:	2400      	movs	r4, #0
   d872a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d872e:	4622      	mov	r2, r4
   d8730:	462b      	mov	r3, r5
   d8732:	f7ff fbd7 	bl	d7ee4 <__aeabi_dmul>
   d8736:	bd70      	pop	{r4, r5, r6, pc}

000d8738 <_strtod_r>:
   d8738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d873c:	b09d      	sub	sp, #116	; 0x74
   d873e:	2300      	movs	r3, #0
   d8740:	9002      	str	r0, [sp, #8]
   d8742:	460c      	mov	r4, r1
   d8744:	9213      	str	r2, [sp, #76]	; 0x4c
   d8746:	9318      	str	r3, [sp, #96]	; 0x60
   d8748:	f04f 0a00 	mov.w	sl, #0
   d874c:	f04f 0b00 	mov.w	fp, #0
   d8750:	9117      	str	r1, [sp, #92]	; 0x5c
   d8752:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8754:	781a      	ldrb	r2, [r3, #0]
   d8756:	2a0d      	cmp	r2, #13
   d8758:	d805      	bhi.n	d8766 <_strtod_r+0x2e>
   d875a:	2a09      	cmp	r2, #9
   d875c:	d213      	bcs.n	d8786 <_strtod_r+0x4e>
   d875e:	2a00      	cmp	r2, #0
   d8760:	f000 81ac 	beq.w	d8abc <_strtod_r+0x384>
   d8764:	e012      	b.n	d878c <_strtod_r+0x54>
   d8766:	2a2b      	cmp	r2, #43	; 0x2b
   d8768:	d004      	beq.n	d8774 <_strtod_r+0x3c>
   d876a:	2a2d      	cmp	r2, #45	; 0x2d
   d876c:	d004      	beq.n	d8778 <_strtod_r+0x40>
   d876e:	2a20      	cmp	r2, #32
   d8770:	d10c      	bne.n	d878c <_strtod_r+0x54>
   d8772:	e008      	b.n	d8786 <_strtod_r+0x4e>
   d8774:	2200      	movs	r2, #0
   d8776:	e000      	b.n	d877a <_strtod_r+0x42>
   d8778:	2201      	movs	r2, #1
   d877a:	920c      	str	r2, [sp, #48]	; 0x30
   d877c:	1c5a      	adds	r2, r3, #1
   d877e:	9217      	str	r2, [sp, #92]	; 0x5c
   d8780:	785b      	ldrb	r3, [r3, #1]
   d8782:	b92b      	cbnz	r3, d8790 <_strtod_r+0x58>
   d8784:	e19a      	b.n	d8abc <_strtod_r+0x384>
   d8786:	3301      	adds	r3, #1
   d8788:	9317      	str	r3, [sp, #92]	; 0x5c
   d878a:	e7e2      	b.n	d8752 <_strtod_r+0x1a>
   d878c:	2300      	movs	r3, #0
   d878e:	930c      	str	r3, [sp, #48]	; 0x30
   d8790:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d8792:	782b      	ldrb	r3, [r5, #0]
   d8794:	2b30      	cmp	r3, #48	; 0x30
   d8796:	d15c      	bne.n	d8852 <_strtod_r+0x11a>
   d8798:	786b      	ldrb	r3, [r5, #1]
   d879a:	2b58      	cmp	r3, #88	; 0x58
   d879c:	d001      	beq.n	d87a2 <_strtod_r+0x6a>
   d879e:	2b78      	cmp	r3, #120	; 0x78
   d87a0:	d14c      	bne.n	d883c <_strtod_r+0x104>
   d87a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d87a4:	9301      	str	r3, [sp, #4]
   d87a6:	ab18      	add	r3, sp, #96	; 0x60
   d87a8:	9300      	str	r3, [sp, #0]
   d87aa:	4aa9      	ldr	r2, [pc, #676]	; (d8a50 <_strtod_r+0x318>)
   d87ac:	9802      	ldr	r0, [sp, #8]
   d87ae:	ab19      	add	r3, sp, #100	; 0x64
   d87b0:	a917      	add	r1, sp, #92	; 0x5c
   d87b2:	f000 fe14 	bl	d93de <__gethex>
   d87b6:	f010 0607 	ands.w	r6, r0, #7
   d87ba:	4604      	mov	r4, r0
   d87bc:	f000 8587 	beq.w	d92ce <_strtod_r+0xb96>
   d87c0:	2e06      	cmp	r6, #6
   d87c2:	d105      	bne.n	d87d0 <_strtod_r+0x98>
   d87c4:	3501      	adds	r5, #1
   d87c6:	2300      	movs	r3, #0
   d87c8:	9517      	str	r5, [sp, #92]	; 0x5c
   d87ca:	930c      	str	r3, [sp, #48]	; 0x30
   d87cc:	f000 bd7f 	b.w	d92ce <_strtod_r+0xb96>
   d87d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d87d2:	b13a      	cbz	r2, d87e4 <_strtod_r+0xac>
   d87d4:	2135      	movs	r1, #53	; 0x35
   d87d6:	a81a      	add	r0, sp, #104	; 0x68
   d87d8:	f001 fc87 	bl	da0ea <__copybits>
   d87dc:	9918      	ldr	r1, [sp, #96]	; 0x60
   d87de:	9802      	ldr	r0, [sp, #8]
   d87e0:	f001 f904 	bl	d99ec <_Bfree>
   d87e4:	2e06      	cmp	r6, #6
   d87e6:	d822      	bhi.n	d882e <_strtod_r+0xf6>
   d87e8:	e8df f006 	tbb	[pc, r6]
   d87ec:	18080d04 	.word	0x18080d04
   d87f0:	0d1d      	.short	0x0d1d
   d87f2:	04          	.byte	0x04
   d87f3:	00          	.byte	0x00
   d87f4:	f04f 0b00 	mov.w	fp, #0
   d87f8:	46da      	mov	sl, fp
   d87fa:	e018      	b.n	d882e <_strtod_r+0xf6>
   d87fc:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d8800:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d8804:	e013      	b.n	d882e <_strtod_r+0xf6>
   d8806:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d8808:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d880a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d880e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d8812:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d8816:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d881a:	e008      	b.n	d882e <_strtod_r+0xf6>
   d881c:	f8df b234 	ldr.w	fp, [pc, #564]	; d8a54 <_strtod_r+0x31c>
   d8820:	f04f 0a00 	mov.w	sl, #0
   d8824:	e003      	b.n	d882e <_strtod_r+0xf6>
   d8826:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d882a:	f04f 3aff 	mov.w	sl, #4294967295
   d882e:	0721      	lsls	r1, r4, #28
   d8830:	f140 854d 	bpl.w	d92ce <_strtod_r+0xb96>
   d8834:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d8838:	f000 bd49 	b.w	d92ce <_strtod_r+0xb96>
   d883c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d883e:	1c5a      	adds	r2, r3, #1
   d8840:	9217      	str	r2, [sp, #92]	; 0x5c
   d8842:	785b      	ldrb	r3, [r3, #1]
   d8844:	2b30      	cmp	r3, #48	; 0x30
   d8846:	d0f9      	beq.n	d883c <_strtod_r+0x104>
   d8848:	2b00      	cmp	r3, #0
   d884a:	f000 8540 	beq.w	d92ce <_strtod_r+0xb96>
   d884e:	2301      	movs	r3, #1
   d8850:	e000      	b.n	d8854 <_strtod_r+0x11c>
   d8852:	2300      	movs	r3, #0
   d8854:	f04f 0800 	mov.w	r8, #0
   d8858:	9306      	str	r3, [sp, #24]
   d885a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d885c:	9307      	str	r3, [sp, #28]
   d885e:	f8cd 8014 	str.w	r8, [sp, #20]
   d8862:	f8cd 8010 	str.w	r8, [sp, #16]
   d8866:	220a      	movs	r2, #10
   d8868:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d886a:	782e      	ldrb	r6, [r5, #0]
   d886c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d8870:	b2d9      	uxtb	r1, r3
   d8872:	2909      	cmp	r1, #9
   d8874:	d80e      	bhi.n	d8894 <_strtod_r+0x15c>
   d8876:	9904      	ldr	r1, [sp, #16]
   d8878:	2908      	cmp	r1, #8
   d887a:	bfdd      	ittte	le
   d887c:	9905      	ldrle	r1, [sp, #20]
   d887e:	fb02 3301 	mlale	r3, r2, r1, r3
   d8882:	9305      	strle	r3, [sp, #20]
   d8884:	fb02 3808 	mlagt	r8, r2, r8, r3
   d8888:	9b04      	ldr	r3, [sp, #16]
   d888a:	3501      	adds	r5, #1
   d888c:	3301      	adds	r3, #1
   d888e:	9304      	str	r3, [sp, #16]
   d8890:	9517      	str	r5, [sp, #92]	; 0x5c
   d8892:	e7e9      	b.n	d8868 <_strtod_r+0x130>
   d8894:	9802      	ldr	r0, [sp, #8]
   d8896:	f7ff fe7d 	bl	d8594 <_localeconv_r>
   d889a:	6807      	ldr	r7, [r0, #0]
   d889c:	9802      	ldr	r0, [sp, #8]
   d889e:	f7ff fe79 	bl	d8594 <_localeconv_r>
   d88a2:	6800      	ldr	r0, [r0, #0]
   d88a4:	f7ff fed8 	bl	d8658 <strlen>
   d88a8:	4639      	mov	r1, r7
   d88aa:	4602      	mov	r2, r0
   d88ac:	4628      	mov	r0, r5
   d88ae:	f7ff feff 	bl	d86b0 <strncmp>
   d88b2:	4607      	mov	r7, r0
   d88b4:	b128      	cbz	r0, d88c2 <_strtod_r+0x18a>
   d88b6:	2000      	movs	r0, #0
   d88b8:	4633      	mov	r3, r6
   d88ba:	9d04      	ldr	r5, [sp, #16]
   d88bc:	4602      	mov	r2, r0
   d88be:	4601      	mov	r1, r0
   d88c0:	e057      	b.n	d8972 <_strtod_r+0x23a>
   d88c2:	9802      	ldr	r0, [sp, #8]
   d88c4:	f7ff fe66 	bl	d8594 <_localeconv_r>
   d88c8:	6800      	ldr	r0, [r0, #0]
   d88ca:	f7ff fec5 	bl	d8658 <strlen>
   d88ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d88d0:	181a      	adds	r2, r3, r0
   d88d2:	9217      	str	r2, [sp, #92]	; 0x5c
   d88d4:	9a04      	ldr	r2, [sp, #16]
   d88d6:	5c1b      	ldrb	r3, [r3, r0]
   d88d8:	2a00      	cmp	r2, #0
   d88da:	d142      	bne.n	d8962 <_strtod_r+0x22a>
   d88dc:	4610      	mov	r0, r2
   d88de:	2b30      	cmp	r3, #48	; 0x30
   d88e0:	d105      	bne.n	d88ee <_strtod_r+0x1b6>
   d88e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d88e4:	1c5a      	adds	r2, r3, #1
   d88e6:	9217      	str	r2, [sp, #92]	; 0x5c
   d88e8:	3001      	adds	r0, #1
   d88ea:	785b      	ldrb	r3, [r3, #1]
   d88ec:	e7f7      	b.n	d88de <_strtod_r+0x1a6>
   d88ee:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d88f2:	2a08      	cmp	r2, #8
   d88f4:	d843      	bhi.n	d897e <_strtod_r+0x246>
   d88f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d88f8:	9207      	str	r2, [sp, #28]
   d88fa:	4602      	mov	r2, r0
   d88fc:	2000      	movs	r0, #0
   d88fe:	4605      	mov	r5, r0
   d8900:	3b30      	subs	r3, #48	; 0x30
   d8902:	f100 0101 	add.w	r1, r0, #1
   d8906:	d026      	beq.n	d8956 <_strtod_r+0x21e>
   d8908:	440a      	add	r2, r1
   d890a:	eb05 0c00 	add.w	ip, r5, r0
   d890e:	4629      	mov	r1, r5
   d8910:	260a      	movs	r6, #10
   d8912:	4561      	cmp	r1, ip
   d8914:	d00e      	beq.n	d8934 <_strtod_r+0x1fc>
   d8916:	3101      	adds	r1, #1
   d8918:	f101 3eff 	add.w	lr, r1, #4294967295
   d891c:	f1be 0f08 	cmp.w	lr, #8
   d8920:	dc03      	bgt.n	d892a <_strtod_r+0x1f2>
   d8922:	9f05      	ldr	r7, [sp, #20]
   d8924:	4377      	muls	r7, r6
   d8926:	9705      	str	r7, [sp, #20]
   d8928:	e7f3      	b.n	d8912 <_strtod_r+0x1da>
   d892a:	2910      	cmp	r1, #16
   d892c:	bfd8      	it	le
   d892e:	fb06 f808 	mulle.w	r8, r6, r8
   d8932:	e7ee      	b.n	d8912 <_strtod_r+0x1da>
   d8934:	4428      	add	r0, r5
   d8936:	2808      	cmp	r0, #8
   d8938:	f100 0501 	add.w	r5, r0, #1
   d893c:	dc05      	bgt.n	d894a <_strtod_r+0x212>
   d893e:	9805      	ldr	r0, [sp, #20]
   d8940:	210a      	movs	r1, #10
   d8942:	fb01 3300 	mla	r3, r1, r0, r3
   d8946:	9305      	str	r3, [sp, #20]
   d8948:	e004      	b.n	d8954 <_strtod_r+0x21c>
   d894a:	2d10      	cmp	r5, #16
   d894c:	bfdc      	itt	le
   d894e:	210a      	movle	r1, #10
   d8950:	fb01 3808 	mlale	r8, r1, r8, r3
   d8954:	2100      	movs	r1, #0
   d8956:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8958:	1c58      	adds	r0, r3, #1
   d895a:	9017      	str	r0, [sp, #92]	; 0x5c
   d895c:	785b      	ldrb	r3, [r3, #1]
   d895e:	4608      	mov	r0, r1
   d8960:	e002      	b.n	d8968 <_strtod_r+0x230>
   d8962:	9d04      	ldr	r5, [sp, #16]
   d8964:	4638      	mov	r0, r7
   d8966:	463a      	mov	r2, r7
   d8968:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d896c:	2909      	cmp	r1, #9
   d896e:	d9c7      	bls.n	d8900 <_strtod_r+0x1c8>
   d8970:	2101      	movs	r1, #1
   d8972:	2b65      	cmp	r3, #101	; 0x65
   d8974:	d001      	beq.n	d897a <_strtod_r+0x242>
   d8976:	2b45      	cmp	r3, #69	; 0x45
   d8978:	d151      	bne.n	d8a1e <_strtod_r+0x2e6>
   d897a:	b96d      	cbnz	r5, d8998 <_strtod_r+0x260>
   d897c:	e004      	b.n	d8988 <_strtod_r+0x250>
   d897e:	2b65      	cmp	r3, #101	; 0x65
   d8980:	f040 84b3 	bne.w	d92ea <_strtod_r+0xbb2>
   d8984:	2200      	movs	r2, #0
   d8986:	2101      	movs	r1, #1
   d8988:	b928      	cbnz	r0, d8996 <_strtod_r+0x25e>
   d898a:	9b06      	ldr	r3, [sp, #24]
   d898c:	2b00      	cmp	r3, #0
   d898e:	f000 8095 	beq.w	d8abc <_strtod_r+0x384>
   d8992:	4605      	mov	r5, r0
   d8994:	e000      	b.n	d8998 <_strtod_r+0x260>
   d8996:	2500      	movs	r5, #0
   d8998:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d899a:	1c63      	adds	r3, r4, #1
   d899c:	9317      	str	r3, [sp, #92]	; 0x5c
   d899e:	7863      	ldrb	r3, [r4, #1]
   d89a0:	2b2b      	cmp	r3, #43	; 0x2b
   d89a2:	d006      	beq.n	d89b2 <_strtod_r+0x27a>
   d89a4:	2b2d      	cmp	r3, #45	; 0x2d
   d89a6:	d002      	beq.n	d89ae <_strtod_r+0x276>
   d89a8:	2600      	movs	r6, #0
   d89aa:	9603      	str	r6, [sp, #12]
   d89ac:	e006      	b.n	d89bc <_strtod_r+0x284>
   d89ae:	2301      	movs	r3, #1
   d89b0:	e000      	b.n	d89b4 <_strtod_r+0x27c>
   d89b2:	2300      	movs	r3, #0
   d89b4:	9303      	str	r3, [sp, #12]
   d89b6:	1ca3      	adds	r3, r4, #2
   d89b8:	9317      	str	r3, [sp, #92]	; 0x5c
   d89ba:	78a3      	ldrb	r3, [r4, #2]
   d89bc:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d89c0:	2e09      	cmp	r6, #9
   d89c2:	d82b      	bhi.n	d8a1c <_strtod_r+0x2e4>
   d89c4:	2b30      	cmp	r3, #48	; 0x30
   d89c6:	d104      	bne.n	d89d2 <_strtod_r+0x29a>
   d89c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d89ca:	1c5e      	adds	r6, r3, #1
   d89cc:	9617      	str	r6, [sp, #92]	; 0x5c
   d89ce:	785b      	ldrb	r3, [r3, #1]
   d89d0:	e7f8      	b.n	d89c4 <_strtod_r+0x28c>
   d89d2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d89d6:	2e08      	cmp	r6, #8
   d89d8:	d821      	bhi.n	d8a1e <_strtod_r+0x2e6>
   d89da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d89de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d89e0:	f04f 0c0a 	mov.w	ip, #10
   d89e4:	461f      	mov	r7, r3
   d89e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d89e8:	1c5e      	adds	r6, r3, #1
   d89ea:	9617      	str	r6, [sp, #92]	; 0x5c
   d89ec:	785b      	ldrb	r3, [r3, #1]
   d89ee:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d89f2:	f1b9 0f09 	cmp.w	r9, #9
   d89f6:	d804      	bhi.n	d8a02 <_strtod_r+0x2ca>
   d89f8:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d89fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d8a00:	e7f1      	b.n	d89e6 <_strtod_r+0x2ae>
   d8a02:	1bf6      	subs	r6, r6, r7
   d8a04:	2e08      	cmp	r6, #8
   d8a06:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d8a0a:	dc02      	bgt.n	d8a12 <_strtod_r+0x2da>
   d8a0c:	45f1      	cmp	r9, lr
   d8a0e:	bfa8      	it	ge
   d8a10:	46f1      	movge	r9, lr
   d8a12:	9e03      	ldr	r6, [sp, #12]
   d8a14:	b12e      	cbz	r6, d8a22 <_strtod_r+0x2ea>
   d8a16:	f1c9 0900 	rsb	r9, r9, #0
   d8a1a:	e002      	b.n	d8a22 <_strtod_r+0x2ea>
   d8a1c:	9417      	str	r4, [sp, #92]	; 0x5c
   d8a1e:	f04f 0900 	mov.w	r9, #0
   d8a22:	2d00      	cmp	r5, #0
   d8a24:	d153      	bne.n	d8ace <_strtod_r+0x396>
   d8a26:	2800      	cmp	r0, #0
   d8a28:	f040 8451 	bne.w	d92ce <_strtod_r+0xb96>
   d8a2c:	9a06      	ldr	r2, [sp, #24]
   d8a2e:	2a00      	cmp	r2, #0
   d8a30:	f040 844d 	bne.w	d92ce <_strtod_r+0xb96>
   d8a34:	2900      	cmp	r1, #0
   d8a36:	d141      	bne.n	d8abc <_strtod_r+0x384>
   d8a38:	2b4e      	cmp	r3, #78	; 0x4e
   d8a3a:	d020      	beq.n	d8a7e <_strtod_r+0x346>
   d8a3c:	dc02      	bgt.n	d8a44 <_strtod_r+0x30c>
   d8a3e:	2b49      	cmp	r3, #73	; 0x49
   d8a40:	d00a      	beq.n	d8a58 <_strtod_r+0x320>
   d8a42:	e03b      	b.n	d8abc <_strtod_r+0x384>
   d8a44:	2b69      	cmp	r3, #105	; 0x69
   d8a46:	d007      	beq.n	d8a58 <_strtod_r+0x320>
   d8a48:	2b6e      	cmp	r3, #110	; 0x6e
   d8a4a:	d018      	beq.n	d8a7e <_strtod_r+0x346>
   d8a4c:	e036      	b.n	d8abc <_strtod_r+0x384>
   d8a4e:	bf00      	nop
   d8a50:	000dafac 	.word	0x000dafac
   d8a54:	7ff00000 	.word	0x7ff00000
   d8a58:	49a8      	ldr	r1, [pc, #672]	; (d8cfc <_strtod_r+0x5c4>)
   d8a5a:	a817      	add	r0, sp, #92	; 0x5c
   d8a5c:	f000 fef0 	bl	d9840 <__match>
   d8a60:	b360      	cbz	r0, d8abc <_strtod_r+0x384>
   d8a62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8a64:	49a6      	ldr	r1, [pc, #664]	; (d8d00 <_strtod_r+0x5c8>)
   d8a66:	3b01      	subs	r3, #1
   d8a68:	a817      	add	r0, sp, #92	; 0x5c
   d8a6a:	9317      	str	r3, [sp, #92]	; 0x5c
   d8a6c:	f000 fee8 	bl	d9840 <__match>
   d8a70:	b910      	cbnz	r0, d8a78 <_strtod_r+0x340>
   d8a72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8a74:	3301      	adds	r3, #1
   d8a76:	9317      	str	r3, [sp, #92]	; 0x5c
   d8a78:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d8d1c <_strtod_r+0x5e4>
   d8a7c:	e01a      	b.n	d8ab4 <_strtod_r+0x37c>
   d8a7e:	49a1      	ldr	r1, [pc, #644]	; (d8d04 <_strtod_r+0x5cc>)
   d8a80:	a817      	add	r0, sp, #92	; 0x5c
   d8a82:	f000 fedd 	bl	d9840 <__match>
   d8a86:	b1c8      	cbz	r0, d8abc <_strtod_r+0x384>
   d8a88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8a8a:	781b      	ldrb	r3, [r3, #0]
   d8a8c:	2b28      	cmp	r3, #40	; 0x28
   d8a8e:	d10f      	bne.n	d8ab0 <_strtod_r+0x378>
   d8a90:	aa1a      	add	r2, sp, #104	; 0x68
   d8a92:	499d      	ldr	r1, [pc, #628]	; (d8d08 <_strtod_r+0x5d0>)
   d8a94:	a817      	add	r0, sp, #92	; 0x5c
   d8a96:	f000 fee6 	bl	d9866 <__hexnan>
   d8a9a:	2805      	cmp	r0, #5
   d8a9c:	d108      	bne.n	d8ab0 <_strtod_r+0x378>
   d8a9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d8aa0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d8aa4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d8aa8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d8aac:	f000 bc0f 	b.w	d92ce <_strtod_r+0xb96>
   d8ab0:	f8df b26c 	ldr.w	fp, [pc, #620]	; d8d20 <_strtod_r+0x5e8>
   d8ab4:	f04f 0a00 	mov.w	sl, #0
   d8ab8:	f000 bc09 	b.w	d92ce <_strtod_r+0xb96>
   d8abc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d8abe:	9417      	str	r4, [sp, #92]	; 0x5c
   d8ac0:	2b00      	cmp	r3, #0
   d8ac2:	f000 840f 	beq.w	d92e4 <_strtod_r+0xbac>
   d8ac6:	2300      	movs	r3, #0
   d8ac8:	930c      	str	r3, [sp, #48]	; 0x30
   d8aca:	f000 bc02 	b.w	d92d2 <_strtod_r+0xb9a>
   d8ace:	9b04      	ldr	r3, [sp, #16]
   d8ad0:	9805      	ldr	r0, [sp, #20]
   d8ad2:	2b00      	cmp	r3, #0
   d8ad4:	bf08      	it	eq
   d8ad6:	462b      	moveq	r3, r5
   d8ad8:	2d10      	cmp	r5, #16
   d8ada:	462c      	mov	r4, r5
   d8adc:	ebc2 0909 	rsb	r9, r2, r9
   d8ae0:	bfa8      	it	ge
   d8ae2:	2410      	movge	r4, #16
   d8ae4:	9304      	str	r3, [sp, #16]
   d8ae6:	f7ff f987 	bl	d7df8 <__aeabi_ui2d>
   d8aea:	2c09      	cmp	r4, #9
   d8aec:	4682      	mov	sl, r0
   d8aee:	468b      	mov	fp, r1
   d8af0:	dd13      	ble.n	d8b1a <_strtod_r+0x3e2>
   d8af2:	4b86      	ldr	r3, [pc, #536]	; (d8d0c <_strtod_r+0x5d4>)
   d8af4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d8af8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d8afc:	f7ff f9f2 	bl	d7ee4 <__aeabi_dmul>
   d8b00:	4606      	mov	r6, r0
   d8b02:	4640      	mov	r0, r8
   d8b04:	460f      	mov	r7, r1
   d8b06:	f7ff f977 	bl	d7df8 <__aeabi_ui2d>
   d8b0a:	4602      	mov	r2, r0
   d8b0c:	460b      	mov	r3, r1
   d8b0e:	4630      	mov	r0, r6
   d8b10:	4639      	mov	r1, r7
   d8b12:	f7ff f835 	bl	d7b80 <__adddf3>
   d8b16:	4682      	mov	sl, r0
   d8b18:	468b      	mov	fp, r1
   d8b1a:	2d0f      	cmp	r5, #15
   d8b1c:	dc36      	bgt.n	d8b8c <_strtod_r+0x454>
   d8b1e:	f1b9 0f00 	cmp.w	r9, #0
   d8b22:	f000 83d4 	beq.w	d92ce <_strtod_r+0xb96>
   d8b26:	dd24      	ble.n	d8b72 <_strtod_r+0x43a>
   d8b28:	f1b9 0f16 	cmp.w	r9, #22
   d8b2c:	dc07      	bgt.n	d8b3e <_strtod_r+0x406>
   d8b2e:	4d77      	ldr	r5, [pc, #476]	; (d8d0c <_strtod_r+0x5d4>)
   d8b30:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d8b34:	4652      	mov	r2, sl
   d8b36:	465b      	mov	r3, fp
   d8b38:	e9d9 0100 	ldrd	r0, r1, [r9]
   d8b3c:	e014      	b.n	d8b68 <_strtod_r+0x430>
   d8b3e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d8b42:	4599      	cmp	r9, r3
   d8b44:	dc22      	bgt.n	d8b8c <_strtod_r+0x454>
   d8b46:	4c71      	ldr	r4, [pc, #452]	; (d8d0c <_strtod_r+0x5d4>)
   d8b48:	f1c5 050f 	rsb	r5, r5, #15
   d8b4c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d8b50:	ebc5 0509 	rsb	r5, r5, r9
   d8b54:	4652      	mov	r2, sl
   d8b56:	465b      	mov	r3, fp
   d8b58:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8b5c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d8b60:	f7ff f9c0 	bl	d7ee4 <__aeabi_dmul>
   d8b64:	e9d4 2300 	ldrd	r2, r3, [r4]
   d8b68:	f7ff f9bc 	bl	d7ee4 <__aeabi_dmul>
   d8b6c:	4682      	mov	sl, r0
   d8b6e:	468b      	mov	fp, r1
   d8b70:	e3ad      	b.n	d92ce <_strtod_r+0xb96>
   d8b72:	f119 0f16 	cmn.w	r9, #22
   d8b76:	db09      	blt.n	d8b8c <_strtod_r+0x454>
   d8b78:	4d64      	ldr	r5, [pc, #400]	; (d8d0c <_strtod_r+0x5d4>)
   d8b7a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d8b7e:	e9d9 2300 	ldrd	r2, r3, [r9]
   d8b82:	4650      	mov	r0, sl
   d8b84:	4659      	mov	r1, fp
   d8b86:	f7ff fad7 	bl	d8138 <__aeabi_ddiv>
   d8b8a:	e7ef      	b.n	d8b6c <_strtod_r+0x434>
   d8b8c:	1b2c      	subs	r4, r5, r4
   d8b8e:	444c      	add	r4, r9
   d8b90:	2c00      	cmp	r4, #0
   d8b92:	dd57      	ble.n	d8c44 <_strtod_r+0x50c>
   d8b94:	f014 010f 	ands.w	r1, r4, #15
   d8b98:	d00a      	beq.n	d8bb0 <_strtod_r+0x478>
   d8b9a:	4b5c      	ldr	r3, [pc, #368]	; (d8d0c <_strtod_r+0x5d4>)
   d8b9c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d8ba0:	4652      	mov	r2, sl
   d8ba2:	465b      	mov	r3, fp
   d8ba4:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8ba8:	f7ff f99c 	bl	d7ee4 <__aeabi_dmul>
   d8bac:	4682      	mov	sl, r0
   d8bae:	468b      	mov	fp, r1
   d8bb0:	f034 040f 	bics.w	r4, r4, #15
   d8bb4:	f000 80b8 	beq.w	d8d28 <_strtod_r+0x5f0>
   d8bb8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d8bbc:	dd0b      	ble.n	d8bd6 <_strtod_r+0x49e>
   d8bbe:	2400      	movs	r4, #0
   d8bc0:	4625      	mov	r5, r4
   d8bc2:	9405      	str	r4, [sp, #20]
   d8bc4:	9404      	str	r4, [sp, #16]
   d8bc6:	9a02      	ldr	r2, [sp, #8]
   d8bc8:	f8df b150 	ldr.w	fp, [pc, #336]	; d8d1c <_strtod_r+0x5e4>
   d8bcc:	2322      	movs	r3, #34	; 0x22
   d8bce:	6013      	str	r3, [r2, #0]
   d8bd0:	f04f 0a00 	mov.w	sl, #0
   d8bd4:	e187      	b.n	d8ee6 <_strtod_r+0x7ae>
   d8bd6:	4e4e      	ldr	r6, [pc, #312]	; (d8d10 <_strtod_r+0x5d8>)
   d8bd8:	2300      	movs	r3, #0
   d8bda:	1124      	asrs	r4, r4, #4
   d8bdc:	4650      	mov	r0, sl
   d8bde:	4659      	mov	r1, fp
   d8be0:	4698      	mov	r8, r3
   d8be2:	4637      	mov	r7, r6
   d8be4:	2c01      	cmp	r4, #1
   d8be6:	dd0b      	ble.n	d8c00 <_strtod_r+0x4c8>
   d8be8:	07e2      	lsls	r2, r4, #31
   d8bea:	d504      	bpl.n	d8bf6 <_strtod_r+0x4be>
   d8bec:	e9d6 2300 	ldrd	r2, r3, [r6]
   d8bf0:	f7ff f978 	bl	d7ee4 <__aeabi_dmul>
   d8bf4:	2301      	movs	r3, #1
   d8bf6:	f108 0801 	add.w	r8, r8, #1
   d8bfa:	1064      	asrs	r4, r4, #1
   d8bfc:	3608      	adds	r6, #8
   d8bfe:	e7f1      	b.n	d8be4 <_strtod_r+0x4ac>
   d8c00:	b10b      	cbz	r3, d8c06 <_strtod_r+0x4ce>
   d8c02:	4682      	mov	sl, r0
   d8c04:	468b      	mov	fp, r1
   d8c06:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d8c0a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d8c0e:	4652      	mov	r2, sl
   d8c10:	465b      	mov	r3, fp
   d8c12:	e9d7 0100 	ldrd	r0, r1, [r7]
   d8c16:	f7ff f965 	bl	d7ee4 <__aeabi_dmul>
   d8c1a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8c1e:	468b      	mov	fp, r1
   d8c20:	460a      	mov	r2, r1
   d8c22:	0d1b      	lsrs	r3, r3, #20
   d8c24:	493b      	ldr	r1, [pc, #236]	; (d8d14 <_strtod_r+0x5dc>)
   d8c26:	051b      	lsls	r3, r3, #20
   d8c28:	428b      	cmp	r3, r1
   d8c2a:	4682      	mov	sl, r0
   d8c2c:	d8c7      	bhi.n	d8bbe <_strtod_r+0x486>
   d8c2e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d8c32:	428b      	cmp	r3, r1
   d8c34:	bf86      	itte	hi
   d8c36:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d8d24 <_strtod_r+0x5ec>
   d8c3a:	f04f 3aff 	movhi.w	sl, #4294967295
   d8c3e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d8c42:	e071      	b.n	d8d28 <_strtod_r+0x5f0>
   d8c44:	d070      	beq.n	d8d28 <_strtod_r+0x5f0>
   d8c46:	4264      	negs	r4, r4
   d8c48:	f014 020f 	ands.w	r2, r4, #15
   d8c4c:	d00a      	beq.n	d8c64 <_strtod_r+0x52c>
   d8c4e:	4b2f      	ldr	r3, [pc, #188]	; (d8d0c <_strtod_r+0x5d4>)
   d8c50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d8c54:	4650      	mov	r0, sl
   d8c56:	4659      	mov	r1, fp
   d8c58:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c5c:	f7ff fa6c 	bl	d8138 <__aeabi_ddiv>
   d8c60:	4682      	mov	sl, r0
   d8c62:	468b      	mov	fp, r1
   d8c64:	1124      	asrs	r4, r4, #4
   d8c66:	d05f      	beq.n	d8d28 <_strtod_r+0x5f0>
   d8c68:	2c1f      	cmp	r4, #31
   d8c6a:	dd04      	ble.n	d8c76 <_strtod_r+0x53e>
   d8c6c:	2400      	movs	r4, #0
   d8c6e:	4625      	mov	r5, r4
   d8c70:	9405      	str	r4, [sp, #20]
   d8c72:	9404      	str	r4, [sp, #16]
   d8c74:	e130      	b.n	d8ed8 <_strtod_r+0x7a0>
   d8c76:	f014 0f10 	tst.w	r4, #16
   d8c7a:	bf0c      	ite	eq
   d8c7c:	2300      	moveq	r3, #0
   d8c7e:	236a      	movne	r3, #106	; 0x6a
   d8c80:	4e25      	ldr	r6, [pc, #148]	; (d8d18 <_strtod_r+0x5e0>)
   d8c82:	9303      	str	r3, [sp, #12]
   d8c84:	4650      	mov	r0, sl
   d8c86:	4659      	mov	r1, fp
   d8c88:	2300      	movs	r3, #0
   d8c8a:	2c00      	cmp	r4, #0
   d8c8c:	dd09      	ble.n	d8ca2 <_strtod_r+0x56a>
   d8c8e:	07e2      	lsls	r2, r4, #31
   d8c90:	d504      	bpl.n	d8c9c <_strtod_r+0x564>
   d8c92:	e9d6 2300 	ldrd	r2, r3, [r6]
   d8c96:	f7ff f925 	bl	d7ee4 <__aeabi_dmul>
   d8c9a:	2301      	movs	r3, #1
   d8c9c:	1064      	asrs	r4, r4, #1
   d8c9e:	3608      	adds	r6, #8
   d8ca0:	e7f3      	b.n	d8c8a <_strtod_r+0x552>
   d8ca2:	b10b      	cbz	r3, d8ca8 <_strtod_r+0x570>
   d8ca4:	4682      	mov	sl, r0
   d8ca6:	468b      	mov	fp, r1
   d8ca8:	9b03      	ldr	r3, [sp, #12]
   d8caa:	b1eb      	cbz	r3, d8ce8 <_strtod_r+0x5b0>
   d8cac:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d8cb0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8cb4:	2b00      	cmp	r3, #0
   d8cb6:	4659      	mov	r1, fp
   d8cb8:	dd16      	ble.n	d8ce8 <_strtod_r+0x5b0>
   d8cba:	2b1f      	cmp	r3, #31
   d8cbc:	dd0e      	ble.n	d8cdc <_strtod_r+0x5a4>
   d8cbe:	2b34      	cmp	r3, #52	; 0x34
   d8cc0:	bfde      	ittt	le
   d8cc2:	3b20      	suble	r3, #32
   d8cc4:	f04f 32ff 	movle.w	r2, #4294967295
   d8cc8:	fa02 f303 	lslle.w	r3, r2, r3
   d8ccc:	f04f 0a00 	mov.w	sl, #0
   d8cd0:	bfcc      	ite	gt
   d8cd2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d8cd6:	ea03 0b01 	andle.w	fp, r3, r1
   d8cda:	e005      	b.n	d8ce8 <_strtod_r+0x5b0>
   d8cdc:	f04f 32ff 	mov.w	r2, #4294967295
   d8ce0:	fa02 f303 	lsl.w	r3, r2, r3
   d8ce4:	ea03 0a0a 	and.w	sl, r3, sl
   d8ce8:	2200      	movs	r2, #0
   d8cea:	2300      	movs	r3, #0
   d8cec:	4650      	mov	r0, sl
   d8cee:	4659      	mov	r1, fp
   d8cf0:	f7ff fb60 	bl	d83b4 <__aeabi_dcmpeq>
   d8cf4:	2800      	cmp	r0, #0
   d8cf6:	d1b9      	bne.n	d8c6c <_strtod_r+0x534>
   d8cf8:	e018      	b.n	d8d2c <_strtod_r+0x5f4>
   d8cfa:	bf00      	nop
   d8cfc:	000dafd4 	.word	0x000dafd4
   d8d00:	000dafd7 	.word	0x000dafd7
   d8d04:	000dafdd 	.word	0x000dafdd
   d8d08:	000dafc0 	.word	0x000dafc0
   d8d0c:	000db008 	.word	0x000db008
   d8d10:	000db0d0 	.word	0x000db0d0
   d8d14:	7ca00000 	.word	0x7ca00000
   d8d18:	000dafe0 	.word	0x000dafe0
   d8d1c:	7ff00000 	.word	0x7ff00000
   d8d20:	fff80000 	.word	0xfff80000
   d8d24:	7fefffff 	.word	0x7fefffff
   d8d28:	2300      	movs	r3, #0
   d8d2a:	9303      	str	r3, [sp, #12]
   d8d2c:	9b05      	ldr	r3, [sp, #20]
   d8d2e:	9300      	str	r3, [sp, #0]
   d8d30:	9a04      	ldr	r2, [sp, #16]
   d8d32:	9907      	ldr	r1, [sp, #28]
   d8d34:	9802      	ldr	r0, [sp, #8]
   d8d36:	462b      	mov	r3, r5
   d8d38:	f000 feaa 	bl	d9a90 <__s2b>
   d8d3c:	9005      	str	r0, [sp, #20]
   d8d3e:	2800      	cmp	r0, #0
   d8d40:	f43f af3d 	beq.w	d8bbe <_strtod_r+0x486>
   d8d44:	f1b9 0f00 	cmp.w	r9, #0
   d8d48:	f1c9 0300 	rsb	r3, r9, #0
   d8d4c:	bfa8      	it	ge
   d8d4e:	2300      	movge	r3, #0
   d8d50:	930d      	str	r3, [sp, #52]	; 0x34
   d8d52:	2400      	movs	r4, #0
   d8d54:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d8d58:	9312      	str	r3, [sp, #72]	; 0x48
   d8d5a:	4625      	mov	r5, r4
   d8d5c:	9b05      	ldr	r3, [sp, #20]
   d8d5e:	9802      	ldr	r0, [sp, #8]
   d8d60:	6859      	ldr	r1, [r3, #4]
   d8d62:	f000 fe0e 	bl	d9982 <_Balloc>
   d8d66:	9004      	str	r0, [sp, #16]
   d8d68:	2800      	cmp	r0, #0
   d8d6a:	f43f af2c 	beq.w	d8bc6 <_strtod_r+0x48e>
   d8d6e:	9b05      	ldr	r3, [sp, #20]
   d8d70:	691a      	ldr	r2, [r3, #16]
   d8d72:	3202      	adds	r2, #2
   d8d74:	f103 010c 	add.w	r1, r3, #12
   d8d78:	0092      	lsls	r2, r2, #2
   d8d7a:	300c      	adds	r0, #12
   d8d7c:	f7ff fc0e 	bl	d859c <memcpy>
   d8d80:	aa1a      	add	r2, sp, #104	; 0x68
   d8d82:	a919      	add	r1, sp, #100	; 0x64
   d8d84:	ec4b ab10 	vmov	d0, sl, fp
   d8d88:	9802      	ldr	r0, [sp, #8]
   d8d8a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d8d8e:	f001 f934 	bl	d9ffa <__d2b>
   d8d92:	9018      	str	r0, [sp, #96]	; 0x60
   d8d94:	2800      	cmp	r0, #0
   d8d96:	f43f af16 	beq.w	d8bc6 <_strtod_r+0x48e>
   d8d9a:	2101      	movs	r1, #1
   d8d9c:	9802      	ldr	r0, [sp, #8]
   d8d9e:	f000 ff02 	bl	d9ba6 <__i2b>
   d8da2:	4605      	mov	r5, r0
   d8da4:	2800      	cmp	r0, #0
   d8da6:	f43f af0e 	beq.w	d8bc6 <_strtod_r+0x48e>
   d8daa:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8dac:	9903      	ldr	r1, [sp, #12]
   d8dae:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d8db0:	2b00      	cmp	r3, #0
   d8db2:	bfad      	iteet	ge
   d8db4:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d8db6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d8db8:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d8dbc:	eb02 0803 	addge.w	r8, r2, r3
   d8dc0:	bfb8      	it	lt
   d8dc2:	1ad2      	sublt	r2, r2, r3
   d8dc4:	eba3 0301 	sub.w	r3, r3, r1
   d8dc8:	4433      	add	r3, r6
   d8dca:	49b5      	ldr	r1, [pc, #724]	; (d90a0 <_strtod_r+0x968>)
   d8dcc:	bfa8      	it	ge
   d8dce:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d8dd0:	3b01      	subs	r3, #1
   d8dd2:	428b      	cmp	r3, r1
   d8dd4:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d8dd8:	f280 808a 	bge.w	d8ef0 <_strtod_r+0x7b8>
   d8ddc:	1ac9      	subs	r1, r1, r3
   d8dde:	291f      	cmp	r1, #31
   d8de0:	bfc8      	it	gt
   d8de2:	4fb0      	ldrgt	r7, [pc, #704]	; (d90a4 <_strtod_r+0x96c>)
   d8de4:	f04f 0901 	mov.w	r9, #1
   d8de8:	bfd4      	ite	le
   d8dea:	fa09 f301 	lslle.w	r3, r9, r1
   d8dee:	1aff      	subgt	r7, r7, r3
   d8df0:	eba6 0601 	sub.w	r6, r6, r1
   d8df4:	bfd9      	ittee	le
   d8df6:	9306      	strle	r3, [sp, #24]
   d8df8:	2700      	movle	r7, #0
   d8dfa:	fa09 f707 	lslgt.w	r7, r9, r7
   d8dfe:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d8e02:	eb08 0906 	add.w	r9, r8, r6
   d8e06:	9b03      	ldr	r3, [sp, #12]
   d8e08:	45c8      	cmp	r8, r9
   d8e0a:	4416      	add	r6, r2
   d8e0c:	441e      	add	r6, r3
   d8e0e:	4643      	mov	r3, r8
   d8e10:	bfa8      	it	ge
   d8e12:	464b      	movge	r3, r9
   d8e14:	42b3      	cmp	r3, r6
   d8e16:	bfa8      	it	ge
   d8e18:	4633      	movge	r3, r6
   d8e1a:	2b00      	cmp	r3, #0
   d8e1c:	bfc2      	ittt	gt
   d8e1e:	ebc3 0909 	rsbgt	r9, r3, r9
   d8e22:	1af6      	subgt	r6, r6, r3
   d8e24:	ebc3 0808 	rsbgt	r8, r3, r8
   d8e28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d8e2a:	2b00      	cmp	r3, #0
   d8e2c:	d164      	bne.n	d8ef8 <_strtod_r+0x7c0>
   d8e2e:	f1b9 0f00 	cmp.w	r9, #0
   d8e32:	dc7a      	bgt.n	d8f2a <_strtod_r+0x7f2>
   d8e34:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d8e36:	2b00      	cmp	r3, #0
   d8e38:	f040 8081 	bne.w	d8f3e <_strtod_r+0x806>
   d8e3c:	2e00      	cmp	r6, #0
   d8e3e:	f300 8088 	bgt.w	d8f52 <_strtod_r+0x81a>
   d8e42:	f1b8 0f00 	cmp.w	r8, #0
   d8e46:	f300 808e 	bgt.w	d8f66 <_strtod_r+0x82e>
   d8e4a:	9a04      	ldr	r2, [sp, #16]
   d8e4c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8e4e:	9802      	ldr	r0, [sp, #8]
   d8e50:	f000 ffff 	bl	d9e52 <__mdiff>
   d8e54:	4604      	mov	r4, r0
   d8e56:	2800      	cmp	r0, #0
   d8e58:	f43f aeb5 	beq.w	d8bc6 <_strtod_r+0x48e>
   d8e5c:	68c3      	ldr	r3, [r0, #12]
   d8e5e:	9307      	str	r3, [sp, #28]
   d8e60:	2300      	movs	r3, #0
   d8e62:	60c3      	str	r3, [r0, #12]
   d8e64:	4629      	mov	r1, r5
   d8e66:	f000 ffd8 	bl	d9e1a <__mcmp>
   d8e6a:	2800      	cmp	r0, #0
   d8e6c:	f280 8089 	bge.w	d8f82 <_strtod_r+0x84a>
   d8e70:	9b07      	ldr	r3, [sp, #28]
   d8e72:	2b00      	cmp	r3, #0
   d8e74:	f040 8204 	bne.w	d9280 <_strtod_r+0xb48>
   d8e78:	f1ba 0f00 	cmp.w	sl, #0
   d8e7c:	f040 8200 	bne.w	d9280 <_strtod_r+0xb48>
   d8e80:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8e84:	2b00      	cmp	r3, #0
   d8e86:	f040 81fb 	bne.w	d9280 <_strtod_r+0xb48>
   d8e8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8e8e:	0d1b      	lsrs	r3, r3, #20
   d8e90:	051b      	lsls	r3, r3, #20
   d8e92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d8e96:	f240 81f3 	bls.w	d9280 <_strtod_r+0xb48>
   d8e9a:	6963      	ldr	r3, [r4, #20]
   d8e9c:	2b00      	cmp	r3, #0
   d8e9e:	d06c      	beq.n	d8f7a <_strtod_r+0x842>
   d8ea0:	4621      	mov	r1, r4
   d8ea2:	2201      	movs	r2, #1
   d8ea4:	9802      	ldr	r0, [sp, #8]
   d8ea6:	f000 ff67 	bl	d9d78 <__lshift>
   d8eaa:	4629      	mov	r1, r5
   d8eac:	4604      	mov	r4, r0
   d8eae:	f000 ffb4 	bl	d9e1a <__mcmp>
   d8eb2:	2800      	cmp	r0, #0
   d8eb4:	f340 81e4 	ble.w	d9280 <_strtod_r+0xb48>
   d8eb8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8ebc:	9a03      	ldr	r2, [sp, #12]
   d8ebe:	0d1b      	lsrs	r3, r3, #20
   d8ec0:	051b      	lsls	r3, r3, #20
   d8ec2:	2a00      	cmp	r2, #0
   d8ec4:	f000 808c 	beq.w	d8fe0 <_strtod_r+0x8a8>
   d8ec8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d8ecc:	f300 8088 	bgt.w	d8fe0 <_strtod_r+0x8a8>
   d8ed0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d8ed4:	f300 81d6 	bgt.w	d9284 <_strtod_r+0xb4c>
   d8ed8:	9a02      	ldr	r2, [sp, #8]
   d8eda:	2322      	movs	r3, #34	; 0x22
   d8edc:	f04f 0a00 	mov.w	sl, #0
   d8ee0:	f04f 0b00 	mov.w	fp, #0
   d8ee4:	6013      	str	r3, [r2, #0]
   d8ee6:	9b05      	ldr	r3, [sp, #20]
   d8ee8:	2b00      	cmp	r3, #0
   d8eea:	f040 81dc 	bne.w	d92a6 <_strtod_r+0xb6e>
   d8eee:	e1ee      	b.n	d92ce <_strtod_r+0xb96>
   d8ef0:	2301      	movs	r3, #1
   d8ef2:	2700      	movs	r7, #0
   d8ef4:	9306      	str	r3, [sp, #24]
   d8ef6:	e784      	b.n	d8e02 <_strtod_r+0x6ca>
   d8ef8:	4629      	mov	r1, r5
   d8efa:	461a      	mov	r2, r3
   d8efc:	9802      	ldr	r0, [sp, #8]
   d8efe:	f000 feed 	bl	d9cdc <__pow5mult>
   d8f02:	4605      	mov	r5, r0
   d8f04:	2800      	cmp	r0, #0
   d8f06:	f43f ae5e 	beq.w	d8bc6 <_strtod_r+0x48e>
   d8f0a:	4601      	mov	r1, r0
   d8f0c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d8f0e:	9802      	ldr	r0, [sp, #8]
   d8f10:	f000 fe52 	bl	d9bb8 <__multiply>
   d8f14:	9007      	str	r0, [sp, #28]
   d8f16:	2800      	cmp	r0, #0
   d8f18:	f43f ae55 	beq.w	d8bc6 <_strtod_r+0x48e>
   d8f1c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8f1e:	9802      	ldr	r0, [sp, #8]
   d8f20:	f000 fd64 	bl	d99ec <_Bfree>
   d8f24:	9b07      	ldr	r3, [sp, #28]
   d8f26:	9318      	str	r3, [sp, #96]	; 0x60
   d8f28:	e781      	b.n	d8e2e <_strtod_r+0x6f6>
   d8f2a:	464a      	mov	r2, r9
   d8f2c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8f2e:	9802      	ldr	r0, [sp, #8]
   d8f30:	f000 ff22 	bl	d9d78 <__lshift>
   d8f34:	9018      	str	r0, [sp, #96]	; 0x60
   d8f36:	2800      	cmp	r0, #0
   d8f38:	f47f af7c 	bne.w	d8e34 <_strtod_r+0x6fc>
   d8f3c:	e643      	b.n	d8bc6 <_strtod_r+0x48e>
   d8f3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d8f40:	9904      	ldr	r1, [sp, #16]
   d8f42:	9802      	ldr	r0, [sp, #8]
   d8f44:	f000 feca 	bl	d9cdc <__pow5mult>
   d8f48:	9004      	str	r0, [sp, #16]
   d8f4a:	2800      	cmp	r0, #0
   d8f4c:	f47f af76 	bne.w	d8e3c <_strtod_r+0x704>
   d8f50:	e639      	b.n	d8bc6 <_strtod_r+0x48e>
   d8f52:	4632      	mov	r2, r6
   d8f54:	9904      	ldr	r1, [sp, #16]
   d8f56:	9802      	ldr	r0, [sp, #8]
   d8f58:	f000 ff0e 	bl	d9d78 <__lshift>
   d8f5c:	9004      	str	r0, [sp, #16]
   d8f5e:	2800      	cmp	r0, #0
   d8f60:	f47f af6f 	bne.w	d8e42 <_strtod_r+0x70a>
   d8f64:	e62f      	b.n	d8bc6 <_strtod_r+0x48e>
   d8f66:	4629      	mov	r1, r5
   d8f68:	4642      	mov	r2, r8
   d8f6a:	9802      	ldr	r0, [sp, #8]
   d8f6c:	f000 ff04 	bl	d9d78 <__lshift>
   d8f70:	4605      	mov	r5, r0
   d8f72:	2800      	cmp	r0, #0
   d8f74:	f47f af69 	bne.w	d8e4a <_strtod_r+0x712>
   d8f78:	e625      	b.n	d8bc6 <_strtod_r+0x48e>
   d8f7a:	6923      	ldr	r3, [r4, #16]
   d8f7c:	2b01      	cmp	r3, #1
   d8f7e:	dc8f      	bgt.n	d8ea0 <_strtod_r+0x768>
   d8f80:	e17e      	b.n	d9280 <_strtod_r+0xb48>
   d8f82:	d161      	bne.n	d9048 <_strtod_r+0x910>
   d8f84:	9a07      	ldr	r2, [sp, #28]
   d8f86:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8f8a:	b322      	cbz	r2, d8fd6 <_strtod_r+0x89e>
   d8f8c:	4946      	ldr	r1, [pc, #280]	; (d90a8 <_strtod_r+0x970>)
   d8f8e:	428b      	cmp	r3, r1
   d8f90:	465a      	mov	r2, fp
   d8f92:	d12e      	bne.n	d8ff2 <_strtod_r+0x8ba>
   d8f94:	9b03      	ldr	r3, [sp, #12]
   d8f96:	4651      	mov	r1, sl
   d8f98:	b163      	cbz	r3, d8fb4 <_strtod_r+0x87c>
   d8f9a:	4b44      	ldr	r3, [pc, #272]	; (d90ac <_strtod_r+0x974>)
   d8f9c:	4013      	ands	r3, r2
   d8f9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d8fa2:	d807      	bhi.n	d8fb4 <_strtod_r+0x87c>
   d8fa4:	0d1b      	lsrs	r3, r3, #20
   d8fa6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8faa:	f04f 30ff 	mov.w	r0, #4294967295
   d8fae:	fa00 f303 	lsl.w	r3, r0, r3
   d8fb2:	e001      	b.n	d8fb8 <_strtod_r+0x880>
   d8fb4:	f04f 33ff 	mov.w	r3, #4294967295
   d8fb8:	428b      	cmp	r3, r1
   d8fba:	d11a      	bne.n	d8ff2 <_strtod_r+0x8ba>
   d8fbc:	493c      	ldr	r1, [pc, #240]	; (d90b0 <_strtod_r+0x978>)
   d8fbe:	428a      	cmp	r2, r1
   d8fc0:	d102      	bne.n	d8fc8 <_strtod_r+0x890>
   d8fc2:	3301      	adds	r3, #1
   d8fc4:	f43f adff 	beq.w	d8bc6 <_strtod_r+0x48e>
   d8fc8:	4b38      	ldr	r3, [pc, #224]	; (d90ac <_strtod_r+0x974>)
   d8fca:	4013      	ands	r3, r2
   d8fcc:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d8fd0:	f04f 0a00 	mov.w	sl, #0
   d8fd4:	e154      	b.n	d9280 <_strtod_r+0xb48>
   d8fd6:	b963      	cbnz	r3, d8ff2 <_strtod_r+0x8ba>
   d8fd8:	f1ba 0f00 	cmp.w	sl, #0
   d8fdc:	d109      	bne.n	d8ff2 <_strtod_r+0x8ba>
   d8fde:	e76b      	b.n	d8eb8 <_strtod_r+0x780>
   d8fe0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d8fe4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d8fe8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d8fec:	f04f 3aff 	mov.w	sl, #4294967295
   d8ff0:	e146      	b.n	d9280 <_strtod_r+0xb48>
   d8ff2:	b117      	cbz	r7, d8ffa <_strtod_r+0x8c2>
   d8ff4:	ea17 0f0b 	tst.w	r7, fp
   d8ff8:	e002      	b.n	d9000 <_strtod_r+0x8c8>
   d8ffa:	9b06      	ldr	r3, [sp, #24]
   d8ffc:	ea13 0f0a 	tst.w	r3, sl
   d9000:	f000 813e 	beq.w	d9280 <_strtod_r+0xb48>
   d9004:	9b07      	ldr	r3, [sp, #28]
   d9006:	9a03      	ldr	r2, [sp, #12]
   d9008:	4650      	mov	r0, sl
   d900a:	4659      	mov	r1, fp
   d900c:	b153      	cbz	r3, d9024 <_strtod_r+0x8ec>
   d900e:	f7ff fb77 	bl	d8700 <sulp>
   d9012:	4602      	mov	r2, r0
   d9014:	460b      	mov	r3, r1
   d9016:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d901a:	f7fe fdb1 	bl	d7b80 <__adddf3>
   d901e:	4682      	mov	sl, r0
   d9020:	468b      	mov	fp, r1
   d9022:	e12d      	b.n	d9280 <_strtod_r+0xb48>
   d9024:	f7ff fb6c 	bl	d8700 <sulp>
   d9028:	4602      	mov	r2, r0
   d902a:	460b      	mov	r3, r1
   d902c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d9030:	f7fe fda4 	bl	d7b7c <__aeabi_dsub>
   d9034:	2200      	movs	r2, #0
   d9036:	2300      	movs	r3, #0
   d9038:	4682      	mov	sl, r0
   d903a:	468b      	mov	fp, r1
   d903c:	f7ff f9ba 	bl	d83b4 <__aeabi_dcmpeq>
   d9040:	2800      	cmp	r0, #0
   d9042:	f47f af49 	bne.w	d8ed8 <_strtod_r+0x7a0>
   d9046:	e11b      	b.n	d9280 <_strtod_r+0xb48>
   d9048:	4629      	mov	r1, r5
   d904a:	4620      	mov	r0, r4
   d904c:	f001 f823 	bl	da096 <__ratio>
   d9050:	ec57 6b10 	vmov	r6, r7, d0
   d9054:	2200      	movs	r2, #0
   d9056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d905a:	ee10 0a10 	vmov	r0, s0
   d905e:	4639      	mov	r1, r7
   d9060:	f7ff f9bc 	bl	d83dc <__aeabi_dcmple>
   d9064:	2800      	cmp	r0, #0
   d9066:	d042      	beq.n	d90ee <_strtod_r+0x9b6>
   d9068:	9b07      	ldr	r3, [sp, #28]
   d906a:	b123      	cbz	r3, d9076 <_strtod_r+0x93e>
   d906c:	f04f 0800 	mov.w	r8, #0
   d9070:	f8df 9040 	ldr.w	r9, [pc, #64]	; d90b4 <_strtod_r+0x97c>
   d9074:	e011      	b.n	d909a <_strtod_r+0x962>
   d9076:	f1ba 0f00 	cmp.w	sl, #0
   d907a:	d103      	bne.n	d9084 <_strtod_r+0x94c>
   d907c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9080:	b93b      	cbnz	r3, d9092 <_strtod_r+0x95a>
   d9082:	e01b      	b.n	d90bc <_strtod_r+0x984>
   d9084:	f1ba 0f01 	cmp.w	sl, #1
   d9088:	d103      	bne.n	d9092 <_strtod_r+0x95a>
   d908a:	f1bb 0f00 	cmp.w	fp, #0
   d908e:	f43f af23 	beq.w	d8ed8 <_strtod_r+0x7a0>
   d9092:	f8df 9024 	ldr.w	r9, [pc, #36]	; d90b8 <_strtod_r+0x980>
   d9096:	f04f 0800 	mov.w	r8, #0
   d909a:	2600      	movs	r6, #0
   d909c:	4f05      	ldr	r7, [pc, #20]	; (d90b4 <_strtod_r+0x97c>)
   d909e:	e039      	b.n	d9114 <_strtod_r+0x9dc>
   d90a0:	fffffc02 	.word	0xfffffc02
   d90a4:	fffffbe2 	.word	0xfffffbe2
   d90a8:	000fffff 	.word	0x000fffff
   d90ac:	7ff00000 	.word	0x7ff00000
   d90b0:	7fefffff 	.word	0x7fefffff
   d90b4:	3ff00000 	.word	0x3ff00000
   d90b8:	bff00000 	.word	0xbff00000
   d90bc:	2200      	movs	r2, #0
   d90be:	4b98      	ldr	r3, [pc, #608]	; (d9320 <_strtod_r+0xbe8>)
   d90c0:	4630      	mov	r0, r6
   d90c2:	4639      	mov	r1, r7
   d90c4:	f7ff f980 	bl	d83c8 <__aeabi_dcmplt>
   d90c8:	b940      	cbnz	r0, d90dc <_strtod_r+0x9a4>
   d90ca:	4630      	mov	r0, r6
   d90cc:	4639      	mov	r1, r7
   d90ce:	2200      	movs	r2, #0
   d90d0:	4b94      	ldr	r3, [pc, #592]	; (d9324 <_strtod_r+0xbec>)
   d90d2:	f7fe ff07 	bl	d7ee4 <__aeabi_dmul>
   d90d6:	4606      	mov	r6, r0
   d90d8:	460f      	mov	r7, r1
   d90da:	e001      	b.n	d90e0 <_strtod_r+0x9a8>
   d90dc:	4f91      	ldr	r7, [pc, #580]	; (d9324 <_strtod_r+0xbec>)
   d90de:	2600      	movs	r6, #0
   d90e0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d90e4:	9614      	str	r6, [sp, #80]	; 0x50
   d90e6:	9315      	str	r3, [sp, #84]	; 0x54
   d90e8:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d90ec:	e012      	b.n	d9114 <_strtod_r+0x9dc>
   d90ee:	4b8d      	ldr	r3, [pc, #564]	; (d9324 <_strtod_r+0xbec>)
   d90f0:	4630      	mov	r0, r6
   d90f2:	4639      	mov	r1, r7
   d90f4:	2200      	movs	r2, #0
   d90f6:	f7fe fef5 	bl	d7ee4 <__aeabi_dmul>
   d90fa:	9b07      	ldr	r3, [sp, #28]
   d90fc:	4606      	mov	r6, r0
   d90fe:	460f      	mov	r7, r1
   d9100:	b923      	cbnz	r3, d910c <_strtod_r+0x9d4>
   d9102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9106:	900e      	str	r0, [sp, #56]	; 0x38
   d9108:	930f      	str	r3, [sp, #60]	; 0x3c
   d910a:	e001      	b.n	d9110 <_strtod_r+0x9d8>
   d910c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d9110:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d9114:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9118:	0d1b      	lsrs	r3, r3, #20
   d911a:	051b      	lsls	r3, r3, #20
   d911c:	9306      	str	r3, [sp, #24]
   d911e:	9a06      	ldr	r2, [sp, #24]
   d9120:	4b81      	ldr	r3, [pc, #516]	; (d9328 <_strtod_r+0xbf0>)
   d9122:	429a      	cmp	r2, r3
   d9124:	d12b      	bne.n	d917e <_strtod_r+0xa46>
   d9126:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d912a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d912e:	ec4b ab10 	vmov	d0, sl, fp
   d9132:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d9136:	f000 feeb 	bl	d9f10 <__ulp>
   d913a:	4640      	mov	r0, r8
   d913c:	ec53 2b10 	vmov	r2, r3, d0
   d9140:	4649      	mov	r1, r9
   d9142:	f7fe fecf 	bl	d7ee4 <__aeabi_dmul>
   d9146:	4652      	mov	r2, sl
   d9148:	465b      	mov	r3, fp
   d914a:	f7fe fd19 	bl	d7b80 <__adddf3>
   d914e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d9152:	0d1b      	lsrs	r3, r3, #20
   d9154:	4a75      	ldr	r2, [pc, #468]	; (d932c <_strtod_r+0xbf4>)
   d9156:	051b      	lsls	r3, r3, #20
   d9158:	4293      	cmp	r3, r2
   d915a:	4682      	mov	sl, r0
   d915c:	d90c      	bls.n	d9178 <_strtod_r+0xa40>
   d915e:	4b74      	ldr	r3, [pc, #464]	; (d9330 <_strtod_r+0xbf8>)
   d9160:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d9162:	429a      	cmp	r2, r3
   d9164:	d103      	bne.n	d916e <_strtod_r+0xa36>
   d9166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9168:	3301      	adds	r3, #1
   d916a:	f43f ad2c 	beq.w	d8bc6 <_strtod_r+0x48e>
   d916e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d9330 <_strtod_r+0xbf8>
   d9172:	f04f 3aff 	mov.w	sl, #4294967295
   d9176:	e072      	b.n	d925e <_strtod_r+0xb26>
   d9178:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d917c:	e038      	b.n	d91f0 <_strtod_r+0xab8>
   d917e:	9b03      	ldr	r3, [sp, #12]
   d9180:	b333      	cbz	r3, d91d0 <_strtod_r+0xa98>
   d9182:	9b06      	ldr	r3, [sp, #24]
   d9184:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9188:	d822      	bhi.n	d91d0 <_strtod_r+0xa98>
   d918a:	a35d      	add	r3, pc, #372	; (adr r3, d9300 <_strtod_r+0xbc8>)
   d918c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9190:	4630      	mov	r0, r6
   d9192:	4639      	mov	r1, r7
   d9194:	f7ff f922 	bl	d83dc <__aeabi_dcmple>
   d9198:	b1a8      	cbz	r0, d91c6 <_strtod_r+0xa8e>
   d919a:	4639      	mov	r1, r7
   d919c:	4630      	mov	r0, r6
   d919e:	f7ff f963 	bl	d8468 <__aeabi_d2uiz>
   d91a2:	2800      	cmp	r0, #0
   d91a4:	bf08      	it	eq
   d91a6:	2001      	moveq	r0, #1
   d91a8:	f7fe fe26 	bl	d7df8 <__aeabi_ui2d>
   d91ac:	9b07      	ldr	r3, [sp, #28]
   d91ae:	4606      	mov	r6, r0
   d91b0:	460f      	mov	r7, r1
   d91b2:	b923      	cbnz	r3, d91be <_strtod_r+0xa86>
   d91b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d91b8:	9010      	str	r0, [sp, #64]	; 0x40
   d91ba:	9311      	str	r3, [sp, #68]	; 0x44
   d91bc:	e001      	b.n	d91c2 <_strtod_r+0xa8a>
   d91be:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d91c2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d91c6:	9a06      	ldr	r2, [sp, #24]
   d91c8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d91cc:	ebc2 0903 	rsb	r9, r2, r3
   d91d0:	ed9d 0b08 	vldr	d0, [sp, #32]
   d91d4:	f000 fe9c 	bl	d9f10 <__ulp>
   d91d8:	4640      	mov	r0, r8
   d91da:	ec53 2b10 	vmov	r2, r3, d0
   d91de:	4649      	mov	r1, r9
   d91e0:	f7fe fe80 	bl	d7ee4 <__aeabi_dmul>
   d91e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d91e8:	f7fe fcca 	bl	d7b80 <__adddf3>
   d91ec:	4682      	mov	sl, r0
   d91ee:	468b      	mov	fp, r1
   d91f0:	9b03      	ldr	r3, [sp, #12]
   d91f2:	bba3      	cbnz	r3, d925e <_strtod_r+0xb26>
   d91f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d91f8:	0d1b      	lsrs	r3, r3, #20
   d91fa:	9a06      	ldr	r2, [sp, #24]
   d91fc:	051b      	lsls	r3, r3, #20
   d91fe:	429a      	cmp	r2, r3
   d9200:	46d8      	mov	r8, fp
   d9202:	d12c      	bne.n	d925e <_strtod_r+0xb26>
   d9204:	4639      	mov	r1, r7
   d9206:	4630      	mov	r0, r6
   d9208:	f7ff f906 	bl	d8418 <__aeabi_d2iz>
   d920c:	f7fe fe04 	bl	d7e18 <__aeabi_i2d>
   d9210:	460b      	mov	r3, r1
   d9212:	4602      	mov	r2, r0
   d9214:	4639      	mov	r1, r7
   d9216:	4630      	mov	r0, r6
   d9218:	f7fe fcb0 	bl	d7b7c <__aeabi_dsub>
   d921c:	9b07      	ldr	r3, [sp, #28]
   d921e:	4606      	mov	r6, r0
   d9220:	460f      	mov	r7, r1
   d9222:	b92b      	cbnz	r3, d9230 <_strtod_r+0xaf8>
   d9224:	f1ba 0f00 	cmp.w	sl, #0
   d9228:	d102      	bne.n	d9230 <_strtod_r+0xaf8>
   d922a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d922e:	b183      	cbz	r3, d9252 <_strtod_r+0xb1a>
   d9230:	a335      	add	r3, pc, #212	; (adr r3, d9308 <_strtod_r+0xbd0>)
   d9232:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9236:	4630      	mov	r0, r6
   d9238:	4639      	mov	r1, r7
   d923a:	f7ff f8c5 	bl	d83c8 <__aeabi_dcmplt>
   d923e:	2800      	cmp	r0, #0
   d9240:	d131      	bne.n	d92a6 <_strtod_r+0xb6e>
   d9242:	a333      	add	r3, pc, #204	; (adr r3, d9310 <_strtod_r+0xbd8>)
   d9244:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9248:	4630      	mov	r0, r6
   d924a:	4639      	mov	r1, r7
   d924c:	f7ff f8da 	bl	d8404 <__aeabi_dcmpgt>
   d9250:	e004      	b.n	d925c <_strtod_r+0xb24>
   d9252:	a331      	add	r3, pc, #196	; (adr r3, d9318 <_strtod_r+0xbe0>)
   d9254:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9258:	f7ff f8b6 	bl	d83c8 <__aeabi_dcmplt>
   d925c:	bb18      	cbnz	r0, d92a6 <_strtod_r+0xb6e>
   d925e:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9260:	9802      	ldr	r0, [sp, #8]
   d9262:	f000 fbc3 	bl	d99ec <_Bfree>
   d9266:	9904      	ldr	r1, [sp, #16]
   d9268:	9802      	ldr	r0, [sp, #8]
   d926a:	f000 fbbf 	bl	d99ec <_Bfree>
   d926e:	4629      	mov	r1, r5
   d9270:	9802      	ldr	r0, [sp, #8]
   d9272:	f000 fbbb 	bl	d99ec <_Bfree>
   d9276:	4621      	mov	r1, r4
   d9278:	9802      	ldr	r0, [sp, #8]
   d927a:	f000 fbb7 	bl	d99ec <_Bfree>
   d927e:	e56d      	b.n	d8d5c <_strtod_r+0x624>
   d9280:	9b03      	ldr	r3, [sp, #12]
   d9282:	b183      	cbz	r3, d92a6 <_strtod_r+0xb6e>
   d9284:	4b2b      	ldr	r3, [pc, #172]	; (d9334 <_strtod_r+0xbfc>)
   d9286:	930b      	str	r3, [sp, #44]	; 0x2c
   d9288:	2300      	movs	r3, #0
   d928a:	930a      	str	r3, [sp, #40]	; 0x28
   d928c:	4650      	mov	r0, sl
   d928e:	4659      	mov	r1, fp
   d9290:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9294:	f7fe fe26 	bl	d7ee4 <__aeabi_dmul>
   d9298:	4682      	mov	sl, r0
   d929a:	468b      	mov	fp, r1
   d929c:	b919      	cbnz	r1, d92a6 <_strtod_r+0xb6e>
   d929e:	b910      	cbnz	r0, d92a6 <_strtod_r+0xb6e>
   d92a0:	9a02      	ldr	r2, [sp, #8]
   d92a2:	2322      	movs	r3, #34	; 0x22
   d92a4:	6013      	str	r3, [r2, #0]
   d92a6:	9918      	ldr	r1, [sp, #96]	; 0x60
   d92a8:	9802      	ldr	r0, [sp, #8]
   d92aa:	f000 fb9f 	bl	d99ec <_Bfree>
   d92ae:	9904      	ldr	r1, [sp, #16]
   d92b0:	9802      	ldr	r0, [sp, #8]
   d92b2:	f000 fb9b 	bl	d99ec <_Bfree>
   d92b6:	4629      	mov	r1, r5
   d92b8:	9802      	ldr	r0, [sp, #8]
   d92ba:	f000 fb97 	bl	d99ec <_Bfree>
   d92be:	9905      	ldr	r1, [sp, #20]
   d92c0:	9802      	ldr	r0, [sp, #8]
   d92c2:	f000 fb93 	bl	d99ec <_Bfree>
   d92c6:	4621      	mov	r1, r4
   d92c8:	9802      	ldr	r0, [sp, #8]
   d92ca:	f000 fb8f 	bl	d99ec <_Bfree>
   d92ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d92d0:	b113      	cbz	r3, d92d8 <_strtod_r+0xba0>
   d92d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d92d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d92d6:	6013      	str	r3, [r2, #0]
   d92d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d92da:	b11b      	cbz	r3, d92e4 <_strtod_r+0xbac>
   d92dc:	4652      	mov	r2, sl
   d92de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d92e2:	e007      	b.n	d92f4 <_strtod_r+0xbbc>
   d92e4:	4652      	mov	r2, sl
   d92e6:	465b      	mov	r3, fp
   d92e8:	e004      	b.n	d92f4 <_strtod_r+0xbbc>
   d92ea:	2500      	movs	r5, #0
   d92ec:	462a      	mov	r2, r5
   d92ee:	2101      	movs	r1, #1
   d92f0:	f7ff bb41 	b.w	d8976 <_strtod_r+0x23e>
   d92f4:	ec43 2b10 	vmov	d0, r2, r3
   d92f8:	b01d      	add	sp, #116	; 0x74
   d92fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d92fe:	bf00      	nop
   d9300:	ffc00000 	.word	0xffc00000
   d9304:	41dfffff 	.word	0x41dfffff
   d9308:	94a03595 	.word	0x94a03595
   d930c:	3fdfffff 	.word	0x3fdfffff
   d9310:	35afe535 	.word	0x35afe535
   d9314:	3fe00000 	.word	0x3fe00000
   d9318:	94a03595 	.word	0x94a03595
   d931c:	3fcfffff 	.word	0x3fcfffff
   d9320:	3ff00000 	.word	0x3ff00000
   d9324:	3fe00000 	.word	0x3fe00000
   d9328:	7fe00000 	.word	0x7fe00000
   d932c:	7c9fffff 	.word	0x7c9fffff
   d9330:	7fefffff 	.word	0x7fefffff
   d9334:	39500000 	.word	0x39500000

000d9338 <strtod>:
   d9338:	4b02      	ldr	r3, [pc, #8]	; (d9344 <strtod+0xc>)
   d933a:	460a      	mov	r2, r1
   d933c:	4601      	mov	r1, r0
   d933e:	6818      	ldr	r0, [r3, #0]
   d9340:	f7ff b9fa 	b.w	d8738 <_strtod_r>
   d9344:	2003e18c 	.word	0x2003e18c

000d9348 <rshift>:
   d9348:	b5f0      	push	{r4, r5, r6, r7, lr}
   d934a:	6906      	ldr	r6, [r0, #16]
   d934c:	114b      	asrs	r3, r1, #5
   d934e:	42b3      	cmp	r3, r6
   d9350:	f100 0514 	add.w	r5, r0, #20
   d9354:	da27      	bge.n	d93a6 <rshift+0x5e>
   d9356:	f011 011f 	ands.w	r1, r1, #31
   d935a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d935e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d9362:	d101      	bne.n	d9368 <rshift+0x20>
   d9364:	4629      	mov	r1, r5
   d9366:	e016      	b.n	d9396 <rshift+0x4e>
   d9368:	1d14      	adds	r4, r2, #4
   d936a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d936e:	f1c1 0e20 	rsb	lr, r1, #32
   d9372:	40ca      	lsrs	r2, r1
   d9374:	462b      	mov	r3, r5
   d9376:	42b4      	cmp	r4, r6
   d9378:	d209      	bcs.n	d938e <rshift+0x46>
   d937a:	6827      	ldr	r7, [r4, #0]
   d937c:	fa07 f70e 	lsl.w	r7, r7, lr
   d9380:	433a      	orrs	r2, r7
   d9382:	f843 2b04 	str.w	r2, [r3], #4
   d9386:	f854 2b04 	ldr.w	r2, [r4], #4
   d938a:	40ca      	lsrs	r2, r1
   d938c:	e7f3      	b.n	d9376 <rshift+0x2e>
   d938e:	601a      	str	r2, [r3, #0]
   d9390:	b152      	cbz	r2, d93a8 <rshift+0x60>
   d9392:	3304      	adds	r3, #4
   d9394:	e008      	b.n	d93a8 <rshift+0x60>
   d9396:	42b2      	cmp	r2, r6
   d9398:	460b      	mov	r3, r1
   d939a:	d205      	bcs.n	d93a8 <rshift+0x60>
   d939c:	f852 3b04 	ldr.w	r3, [r2], #4
   d93a0:	f841 3b04 	str.w	r3, [r1], #4
   d93a4:	e7f7      	b.n	d9396 <rshift+0x4e>
   d93a6:	462b      	mov	r3, r5
   d93a8:	1b5b      	subs	r3, r3, r5
   d93aa:	109b      	asrs	r3, r3, #2
   d93ac:	6103      	str	r3, [r0, #16]
   d93ae:	b903      	cbnz	r3, d93b2 <rshift+0x6a>
   d93b0:	6143      	str	r3, [r0, #20]
   d93b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d93b4 <__hexdig_fun>:
   d93b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d93b8:	2b09      	cmp	r3, #9
   d93ba:	d801      	bhi.n	d93c0 <__hexdig_fun+0xc>
   d93bc:	3820      	subs	r0, #32
   d93be:	e00a      	b.n	d93d6 <__hexdig_fun+0x22>
   d93c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d93c4:	2b05      	cmp	r3, #5
   d93c6:	d801      	bhi.n	d93cc <__hexdig_fun+0x18>
   d93c8:	3847      	subs	r0, #71	; 0x47
   d93ca:	e004      	b.n	d93d6 <__hexdig_fun+0x22>
   d93cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d93d0:	2b05      	cmp	r3, #5
   d93d2:	d802      	bhi.n	d93da <__hexdig_fun+0x26>
   d93d4:	3827      	subs	r0, #39	; 0x27
   d93d6:	b2c0      	uxtb	r0, r0
   d93d8:	4770      	bx	lr
   d93da:	2000      	movs	r0, #0
   d93dc:	4770      	bx	lr

000d93de <__gethex>:
   d93de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d93e2:	b08b      	sub	sp, #44	; 0x2c
   d93e4:	468a      	mov	sl, r1
   d93e6:	4690      	mov	r8, r2
   d93e8:	9306      	str	r3, [sp, #24]
   d93ea:	9002      	str	r0, [sp, #8]
   d93ec:	f7ff f8d2 	bl	d8594 <_localeconv_r>
   d93f0:	6803      	ldr	r3, [r0, #0]
   d93f2:	9303      	str	r3, [sp, #12]
   d93f4:	4618      	mov	r0, r3
   d93f6:	f7ff f92f 	bl	d8658 <strlen>
   d93fa:	9b03      	ldr	r3, [sp, #12]
   d93fc:	9001      	str	r0, [sp, #4]
   d93fe:	4403      	add	r3, r0
   d9400:	f04f 0b00 	mov.w	fp, #0
   d9404:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d9408:	9307      	str	r3, [sp, #28]
   d940a:	f8da 3000 	ldr.w	r3, [sl]
   d940e:	3302      	adds	r3, #2
   d9410:	461f      	mov	r7, r3
   d9412:	f813 0b01 	ldrb.w	r0, [r3], #1
   d9416:	2830      	cmp	r0, #48	; 0x30
   d9418:	d102      	bne.n	d9420 <__gethex+0x42>
   d941a:	f10b 0b01 	add.w	fp, fp, #1
   d941e:	e7f7      	b.n	d9410 <__gethex+0x32>
   d9420:	f7ff ffc8 	bl	d93b4 <__hexdig_fun>
   d9424:	4604      	mov	r4, r0
   d9426:	b9e0      	cbnz	r0, d9462 <__gethex+0x84>
   d9428:	9a01      	ldr	r2, [sp, #4]
   d942a:	9903      	ldr	r1, [sp, #12]
   d942c:	4638      	mov	r0, r7
   d942e:	f7ff f93f 	bl	d86b0 <strncmp>
   d9432:	2800      	cmp	r0, #0
   d9434:	d134      	bne.n	d94a0 <__gethex+0xc2>
   d9436:	9b01      	ldr	r3, [sp, #4]
   d9438:	5cf8      	ldrb	r0, [r7, r3]
   d943a:	18fe      	adds	r6, r7, r3
   d943c:	f7ff ffba 	bl	d93b4 <__hexdig_fun>
   d9440:	b380      	cbz	r0, d94a4 <__gethex+0xc6>
   d9442:	4633      	mov	r3, r6
   d9444:	7818      	ldrb	r0, [r3, #0]
   d9446:	2830      	cmp	r0, #48	; 0x30
   d9448:	461f      	mov	r7, r3
   d944a:	f103 0301 	add.w	r3, r3, #1
   d944e:	d0f9      	beq.n	d9444 <__gethex+0x66>
   d9450:	f7ff ffb0 	bl	d93b4 <__hexdig_fun>
   d9454:	fab0 f580 	clz	r5, r0
   d9458:	096d      	lsrs	r5, r5, #5
   d945a:	4634      	mov	r4, r6
   d945c:	f04f 0b01 	mov.w	fp, #1
   d9460:	e001      	b.n	d9466 <__gethex+0x88>
   d9462:	2500      	movs	r5, #0
   d9464:	462c      	mov	r4, r5
   d9466:	463a      	mov	r2, r7
   d9468:	4616      	mov	r6, r2
   d946a:	3201      	adds	r2, #1
   d946c:	7830      	ldrb	r0, [r6, #0]
   d946e:	f7ff ffa1 	bl	d93b4 <__hexdig_fun>
   d9472:	2800      	cmp	r0, #0
   d9474:	d1f8      	bne.n	d9468 <__gethex+0x8a>
   d9476:	9a01      	ldr	r2, [sp, #4]
   d9478:	9903      	ldr	r1, [sp, #12]
   d947a:	4630      	mov	r0, r6
   d947c:	f7ff f918 	bl	d86b0 <strncmp>
   d9480:	b950      	cbnz	r0, d9498 <__gethex+0xba>
   d9482:	b954      	cbnz	r4, d949a <__gethex+0xbc>
   d9484:	9b01      	ldr	r3, [sp, #4]
   d9486:	18f4      	adds	r4, r6, r3
   d9488:	4622      	mov	r2, r4
   d948a:	4616      	mov	r6, r2
   d948c:	3201      	adds	r2, #1
   d948e:	7830      	ldrb	r0, [r6, #0]
   d9490:	f7ff ff90 	bl	d93b4 <__hexdig_fun>
   d9494:	2800      	cmp	r0, #0
   d9496:	d1f8      	bne.n	d948a <__gethex+0xac>
   d9498:	b134      	cbz	r4, d94a8 <__gethex+0xca>
   d949a:	1ba4      	subs	r4, r4, r6
   d949c:	00a4      	lsls	r4, r4, #2
   d949e:	e003      	b.n	d94a8 <__gethex+0xca>
   d94a0:	463e      	mov	r6, r7
   d94a2:	e000      	b.n	d94a6 <__gethex+0xc8>
   d94a4:	4604      	mov	r4, r0
   d94a6:	2501      	movs	r5, #1
   d94a8:	7833      	ldrb	r3, [r6, #0]
   d94aa:	2b50      	cmp	r3, #80	; 0x50
   d94ac:	d001      	beq.n	d94b2 <__gethex+0xd4>
   d94ae:	2b70      	cmp	r3, #112	; 0x70
   d94b0:	d12a      	bne.n	d9508 <__gethex+0x12a>
   d94b2:	7873      	ldrb	r3, [r6, #1]
   d94b4:	2b2b      	cmp	r3, #43	; 0x2b
   d94b6:	d008      	beq.n	d94ca <__gethex+0xec>
   d94b8:	2b2d      	cmp	r3, #45	; 0x2d
   d94ba:	d003      	beq.n	d94c4 <__gethex+0xe6>
   d94bc:	1c71      	adds	r1, r6, #1
   d94be:	f04f 0900 	mov.w	r9, #0
   d94c2:	e005      	b.n	d94d0 <__gethex+0xf2>
   d94c4:	f04f 0901 	mov.w	r9, #1
   d94c8:	e001      	b.n	d94ce <__gethex+0xf0>
   d94ca:	f04f 0900 	mov.w	r9, #0
   d94ce:	1cb1      	adds	r1, r6, #2
   d94d0:	7808      	ldrb	r0, [r1, #0]
   d94d2:	f7ff ff6f 	bl	d93b4 <__hexdig_fun>
   d94d6:	1e43      	subs	r3, r0, #1
   d94d8:	b2db      	uxtb	r3, r3
   d94da:	2b18      	cmp	r3, #24
   d94dc:	d814      	bhi.n	d9508 <__gethex+0x12a>
   d94de:	f1a0 0210 	sub.w	r2, r0, #16
   d94e2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d94e6:	f7ff ff65 	bl	d93b4 <__hexdig_fun>
   d94ea:	1e43      	subs	r3, r0, #1
   d94ec:	b2db      	uxtb	r3, r3
   d94ee:	2b18      	cmp	r3, #24
   d94f0:	d804      	bhi.n	d94fc <__gethex+0x11e>
   d94f2:	230a      	movs	r3, #10
   d94f4:	fb03 0202 	mla	r2, r3, r2, r0
   d94f8:	3a10      	subs	r2, #16
   d94fa:	e7f2      	b.n	d94e2 <__gethex+0x104>
   d94fc:	f1b9 0f00 	cmp.w	r9, #0
   d9500:	d000      	beq.n	d9504 <__gethex+0x126>
   d9502:	4252      	negs	r2, r2
   d9504:	4414      	add	r4, r2
   d9506:	e000      	b.n	d950a <__gethex+0x12c>
   d9508:	4631      	mov	r1, r6
   d950a:	f8ca 1000 	str.w	r1, [sl]
   d950e:	b12d      	cbz	r5, d951c <__gethex+0x13e>
   d9510:	f1bb 0f00 	cmp.w	fp, #0
   d9514:	bf14      	ite	ne
   d9516:	2000      	movne	r0, #0
   d9518:	2006      	moveq	r0, #6
   d951a:	e17c      	b.n	d9816 <__gethex+0x438>
   d951c:	1bf3      	subs	r3, r6, r7
   d951e:	3b01      	subs	r3, #1
   d9520:	4629      	mov	r1, r5
   d9522:	2b07      	cmp	r3, #7
   d9524:	dd02      	ble.n	d952c <__gethex+0x14e>
   d9526:	3101      	adds	r1, #1
   d9528:	105b      	asrs	r3, r3, #1
   d952a:	e7fa      	b.n	d9522 <__gethex+0x144>
   d952c:	9802      	ldr	r0, [sp, #8]
   d952e:	f000 fa28 	bl	d9982 <_Balloc>
   d9532:	9b01      	ldr	r3, [sp, #4]
   d9534:	f100 0a14 	add.w	sl, r0, #20
   d9538:	f04f 0900 	mov.w	r9, #0
   d953c:	f1c3 0301 	rsb	r3, r3, #1
   d9540:	4605      	mov	r5, r0
   d9542:	f8cd a010 	str.w	sl, [sp, #16]
   d9546:	46cb      	mov	fp, r9
   d9548:	9308      	str	r3, [sp, #32]
   d954a:	42b7      	cmp	r7, r6
   d954c:	d22f      	bcs.n	d95ae <__gethex+0x1d0>
   d954e:	1e73      	subs	r3, r6, #1
   d9550:	9305      	str	r3, [sp, #20]
   d9552:	9a07      	ldr	r2, [sp, #28]
   d9554:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d9558:	4293      	cmp	r3, r2
   d955a:	d00b      	beq.n	d9574 <__gethex+0x196>
   d955c:	f1bb 0f20 	cmp.w	fp, #32
   d9560:	d116      	bne.n	d9590 <__gethex+0x1b2>
   d9562:	9b04      	ldr	r3, [sp, #16]
   d9564:	f8c3 9000 	str.w	r9, [r3]
   d9568:	3304      	adds	r3, #4
   d956a:	f04f 0900 	mov.w	r9, #0
   d956e:	9304      	str	r3, [sp, #16]
   d9570:	46cb      	mov	fp, r9
   d9572:	e00d      	b.n	d9590 <__gethex+0x1b2>
   d9574:	9b05      	ldr	r3, [sp, #20]
   d9576:	9a08      	ldr	r2, [sp, #32]
   d9578:	4413      	add	r3, r2
   d957a:	429f      	cmp	r7, r3
   d957c:	d8ee      	bhi.n	d955c <__gethex+0x17e>
   d957e:	4618      	mov	r0, r3
   d9580:	9a01      	ldr	r2, [sp, #4]
   d9582:	9903      	ldr	r1, [sp, #12]
   d9584:	9309      	str	r3, [sp, #36]	; 0x24
   d9586:	f7ff f893 	bl	d86b0 <strncmp>
   d958a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d958c:	b168      	cbz	r0, d95aa <__gethex+0x1cc>
   d958e:	e7e5      	b.n	d955c <__gethex+0x17e>
   d9590:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d9594:	f7ff ff0e 	bl	d93b4 <__hexdig_fun>
   d9598:	f000 000f 	and.w	r0, r0, #15
   d959c:	fa00 f00b 	lsl.w	r0, r0, fp
   d95a0:	9b05      	ldr	r3, [sp, #20]
   d95a2:	ea49 0900 	orr.w	r9, r9, r0
   d95a6:	f10b 0b04 	add.w	fp, fp, #4
   d95aa:	461e      	mov	r6, r3
   d95ac:	e7cd      	b.n	d954a <__gethex+0x16c>
   d95ae:	9804      	ldr	r0, [sp, #16]
   d95b0:	f840 9b04 	str.w	r9, [r0], #4
   d95b4:	ebca 0000 	rsb	r0, sl, r0
   d95b8:	1080      	asrs	r0, r0, #2
   d95ba:	6128      	str	r0, [r5, #16]
   d95bc:	0147      	lsls	r7, r0, #5
   d95be:	4648      	mov	r0, r9
   d95c0:	f000 faa4 	bl	d9b0c <__hi0bits>
   d95c4:	f8d8 6000 	ldr.w	r6, [r8]
   d95c8:	1a38      	subs	r0, r7, r0
   d95ca:	42b0      	cmp	r0, r6
   d95cc:	dd26      	ble.n	d961c <__gethex+0x23e>
   d95ce:	1b87      	subs	r7, r0, r6
   d95d0:	4639      	mov	r1, r7
   d95d2:	4628      	mov	r0, r5
   d95d4:	f000 fda3 	bl	da11e <__any_on>
   d95d8:	b1c8      	cbz	r0, d960e <__gethex+0x230>
   d95da:	1e7b      	subs	r3, r7, #1
   d95dc:	1159      	asrs	r1, r3, #5
   d95de:	f003 021f 	and.w	r2, r3, #31
   d95e2:	f04f 0901 	mov.w	r9, #1
   d95e6:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   d95ea:	fa09 f202 	lsl.w	r2, r9, r2
   d95ee:	420a      	tst	r2, r1
   d95f0:	d00e      	beq.n	d9610 <__gethex+0x232>
   d95f2:	454b      	cmp	r3, r9
   d95f4:	dc02      	bgt.n	d95fc <__gethex+0x21e>
   d95f6:	f04f 0902 	mov.w	r9, #2
   d95fa:	e009      	b.n	d9610 <__gethex+0x232>
   d95fc:	1eb9      	subs	r1, r7, #2
   d95fe:	4628      	mov	r0, r5
   d9600:	f000 fd8d 	bl	da11e <__any_on>
   d9604:	2800      	cmp	r0, #0
   d9606:	d0f6      	beq.n	d95f6 <__gethex+0x218>
   d9608:	f04f 0903 	mov.w	r9, #3
   d960c:	e000      	b.n	d9610 <__gethex+0x232>
   d960e:	4681      	mov	r9, r0
   d9610:	4639      	mov	r1, r7
   d9612:	4628      	mov	r0, r5
   d9614:	f7ff fe98 	bl	d9348 <rshift>
   d9618:	443c      	add	r4, r7
   d961a:	e00c      	b.n	d9636 <__gethex+0x258>
   d961c:	da09      	bge.n	d9632 <__gethex+0x254>
   d961e:	1a37      	subs	r7, r6, r0
   d9620:	4629      	mov	r1, r5
   d9622:	463a      	mov	r2, r7
   d9624:	9802      	ldr	r0, [sp, #8]
   d9626:	f000 fba7 	bl	d9d78 <__lshift>
   d962a:	1be4      	subs	r4, r4, r7
   d962c:	4605      	mov	r5, r0
   d962e:	f100 0a14 	add.w	sl, r0, #20
   d9632:	f04f 0900 	mov.w	r9, #0
   d9636:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d963a:	429c      	cmp	r4, r3
   d963c:	dd08      	ble.n	d9650 <__gethex+0x272>
   d963e:	9802      	ldr	r0, [sp, #8]
   d9640:	4629      	mov	r1, r5
   d9642:	f000 f9d3 	bl	d99ec <_Bfree>
   d9646:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9648:	2300      	movs	r3, #0
   d964a:	6013      	str	r3, [r2, #0]
   d964c:	20a3      	movs	r0, #163	; 0xa3
   d964e:	e0e2      	b.n	d9816 <__gethex+0x438>
   d9650:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d9654:	4284      	cmp	r4, r0
   d9656:	da53      	bge.n	d9700 <__gethex+0x322>
   d9658:	1b04      	subs	r4, r0, r4
   d965a:	42a6      	cmp	r6, r4
   d965c:	dc2e      	bgt.n	d96bc <__gethex+0x2de>
   d965e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9662:	2b02      	cmp	r3, #2
   d9664:	d01a      	beq.n	d969c <__gethex+0x2be>
   d9666:	2b03      	cmp	r3, #3
   d9668:	d01c      	beq.n	d96a4 <__gethex+0x2c6>
   d966a:	2b01      	cmp	r3, #1
   d966c:	d11d      	bne.n	d96aa <__gethex+0x2cc>
   d966e:	42a6      	cmp	r6, r4
   d9670:	d11b      	bne.n	d96aa <__gethex+0x2cc>
   d9672:	2e01      	cmp	r6, #1
   d9674:	dc0b      	bgt.n	d968e <__gethex+0x2b0>
   d9676:	9a06      	ldr	r2, [sp, #24]
   d9678:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d967c:	6013      	str	r3, [r2, #0]
   d967e:	2301      	movs	r3, #1
   d9680:	612b      	str	r3, [r5, #16]
   d9682:	f8ca 3000 	str.w	r3, [sl]
   d9686:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9688:	2062      	movs	r0, #98	; 0x62
   d968a:	601d      	str	r5, [r3, #0]
   d968c:	e0c3      	b.n	d9816 <__gethex+0x438>
   d968e:	1e71      	subs	r1, r6, #1
   d9690:	4628      	mov	r0, r5
   d9692:	f000 fd44 	bl	da11e <__any_on>
   d9696:	2800      	cmp	r0, #0
   d9698:	d1ed      	bne.n	d9676 <__gethex+0x298>
   d969a:	e006      	b.n	d96aa <__gethex+0x2cc>
   d969c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d969e:	2b00      	cmp	r3, #0
   d96a0:	d0e9      	beq.n	d9676 <__gethex+0x298>
   d96a2:	e002      	b.n	d96aa <__gethex+0x2cc>
   d96a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d96a6:	2b00      	cmp	r3, #0
   d96a8:	d1e5      	bne.n	d9676 <__gethex+0x298>
   d96aa:	9802      	ldr	r0, [sp, #8]
   d96ac:	4629      	mov	r1, r5
   d96ae:	f000 f99d 	bl	d99ec <_Bfree>
   d96b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d96b4:	2300      	movs	r3, #0
   d96b6:	6013      	str	r3, [r2, #0]
   d96b8:	2050      	movs	r0, #80	; 0x50
   d96ba:	e0ac      	b.n	d9816 <__gethex+0x438>
   d96bc:	1e67      	subs	r7, r4, #1
   d96be:	f1b9 0f00 	cmp.w	r9, #0
   d96c2:	d106      	bne.n	d96d2 <__gethex+0x2f4>
   d96c4:	b13f      	cbz	r7, d96d6 <__gethex+0x2f8>
   d96c6:	4639      	mov	r1, r7
   d96c8:	4628      	mov	r0, r5
   d96ca:	f000 fd28 	bl	da11e <__any_on>
   d96ce:	4681      	mov	r9, r0
   d96d0:	e001      	b.n	d96d6 <__gethex+0x2f8>
   d96d2:	f04f 0901 	mov.w	r9, #1
   d96d6:	117a      	asrs	r2, r7, #5
   d96d8:	2301      	movs	r3, #1
   d96da:	f007 071f 	and.w	r7, r7, #31
   d96de:	fa03 f707 	lsl.w	r7, r3, r7
   d96e2:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   d96e6:	4621      	mov	r1, r4
   d96e8:	421f      	tst	r7, r3
   d96ea:	4628      	mov	r0, r5
   d96ec:	bf18      	it	ne
   d96ee:	f049 0902 	orrne.w	r9, r9, #2
   d96f2:	1b36      	subs	r6, r6, r4
   d96f4:	f7ff fe28 	bl	d9348 <rshift>
   d96f8:	2702      	movs	r7, #2
   d96fa:	f8d8 4004 	ldr.w	r4, [r8, #4]
   d96fe:	e000      	b.n	d9702 <__gethex+0x324>
   d9700:	2701      	movs	r7, #1
   d9702:	f1b9 0f00 	cmp.w	r9, #0
   d9706:	f000 8081 	beq.w	d980c <__gethex+0x42e>
   d970a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d970e:	2b02      	cmp	r3, #2
   d9710:	d00e      	beq.n	d9730 <__gethex+0x352>
   d9712:	2b03      	cmp	r3, #3
   d9714:	d010      	beq.n	d9738 <__gethex+0x35a>
   d9716:	2b01      	cmp	r3, #1
   d9718:	d176      	bne.n	d9808 <__gethex+0x42a>
   d971a:	f019 0f02 	tst.w	r9, #2
   d971e:	d073      	beq.n	d9808 <__gethex+0x42a>
   d9720:	f8da 0000 	ldr.w	r0, [sl]
   d9724:	ea49 0900 	orr.w	r9, r9, r0
   d9728:	f019 0f01 	tst.w	r9, #1
   d972c:	d107      	bne.n	d973e <__gethex+0x360>
   d972e:	e06b      	b.n	d9808 <__gethex+0x42a>
   d9730:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9732:	f1c3 0301 	rsb	r3, r3, #1
   d9736:	9315      	str	r3, [sp, #84]	; 0x54
   d9738:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d973a:	2b00      	cmp	r3, #0
   d973c:	d064      	beq.n	d9808 <__gethex+0x42a>
   d973e:	f8d5 a010 	ldr.w	sl, [r5, #16]
   d9742:	f105 0314 	add.w	r3, r5, #20
   d9746:	ea4f 098a 	mov.w	r9, sl, lsl #2
   d974a:	eb03 0109 	add.w	r1, r3, r9
   d974e:	2000      	movs	r0, #0
   d9750:	681a      	ldr	r2, [r3, #0]
   d9752:	f1b2 3fff 	cmp.w	r2, #4294967295
   d9756:	d002      	beq.n	d975e <__gethex+0x380>
   d9758:	3201      	adds	r2, #1
   d975a:	601a      	str	r2, [r3, #0]
   d975c:	e020      	b.n	d97a0 <__gethex+0x3c2>
   d975e:	f843 0b04 	str.w	r0, [r3], #4
   d9762:	4299      	cmp	r1, r3
   d9764:	d8f4      	bhi.n	d9750 <__gethex+0x372>
   d9766:	68ab      	ldr	r3, [r5, #8]
   d9768:	459a      	cmp	sl, r3
   d976a:	db12      	blt.n	d9792 <__gethex+0x3b4>
   d976c:	6869      	ldr	r1, [r5, #4]
   d976e:	9802      	ldr	r0, [sp, #8]
   d9770:	3101      	adds	r1, #1
   d9772:	f000 f906 	bl	d9982 <_Balloc>
   d9776:	692a      	ldr	r2, [r5, #16]
   d9778:	3202      	adds	r2, #2
   d977a:	f105 010c 	add.w	r1, r5, #12
   d977e:	4683      	mov	fp, r0
   d9780:	0092      	lsls	r2, r2, #2
   d9782:	300c      	adds	r0, #12
   d9784:	f7fe ff0a 	bl	d859c <memcpy>
   d9788:	4629      	mov	r1, r5
   d978a:	9802      	ldr	r0, [sp, #8]
   d978c:	f000 f92e 	bl	d99ec <_Bfree>
   d9790:	465d      	mov	r5, fp
   d9792:	692b      	ldr	r3, [r5, #16]
   d9794:	1c5a      	adds	r2, r3, #1
   d9796:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   d979a:	612a      	str	r2, [r5, #16]
   d979c:	2201      	movs	r2, #1
   d979e:	615a      	str	r2, [r3, #20]
   d97a0:	2f02      	cmp	r7, #2
   d97a2:	f105 0214 	add.w	r2, r5, #20
   d97a6:	d111      	bne.n	d97cc <__gethex+0x3ee>
   d97a8:	f8d8 3000 	ldr.w	r3, [r8]
   d97ac:	3b01      	subs	r3, #1
   d97ae:	429e      	cmp	r6, r3
   d97b0:	d127      	bne.n	d9802 <__gethex+0x424>
   d97b2:	1171      	asrs	r1, r6, #5
   d97b4:	2301      	movs	r3, #1
   d97b6:	f006 061f 	and.w	r6, r6, #31
   d97ba:	fa03 f606 	lsl.w	r6, r3, r6
   d97be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   d97c2:	421e      	tst	r6, r3
   d97c4:	bf0c      	ite	eq
   d97c6:	2702      	moveq	r7, #2
   d97c8:	2701      	movne	r7, #1
   d97ca:	e01a      	b.n	d9802 <__gethex+0x424>
   d97cc:	692b      	ldr	r3, [r5, #16]
   d97ce:	459a      	cmp	sl, r3
   d97d0:	da0a      	bge.n	d97e8 <__gethex+0x40a>
   d97d2:	2101      	movs	r1, #1
   d97d4:	4628      	mov	r0, r5
   d97d6:	f7ff fdb7 	bl	d9348 <rshift>
   d97da:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d97de:	3401      	adds	r4, #1
   d97e0:	429c      	cmp	r4, r3
   d97e2:	f73f af2c 	bgt.w	d963e <__gethex+0x260>
   d97e6:	e00b      	b.n	d9800 <__gethex+0x422>
   d97e8:	f016 061f 	ands.w	r6, r6, #31
   d97ec:	d008      	beq.n	d9800 <__gethex+0x422>
   d97ee:	4491      	add	r9, r2
   d97f0:	f1c6 0620 	rsb	r6, r6, #32
   d97f4:	f859 0c04 	ldr.w	r0, [r9, #-4]
   d97f8:	f000 f988 	bl	d9b0c <__hi0bits>
   d97fc:	42b0      	cmp	r0, r6
   d97fe:	dbe8      	blt.n	d97d2 <__gethex+0x3f4>
   d9800:	2701      	movs	r7, #1
   d9802:	f047 0720 	orr.w	r7, r7, #32
   d9806:	e001      	b.n	d980c <__gethex+0x42e>
   d9808:	f047 0710 	orr.w	r7, r7, #16
   d980c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d980e:	601d      	str	r5, [r3, #0]
   d9810:	9b06      	ldr	r3, [sp, #24]
   d9812:	4638      	mov	r0, r7
   d9814:	601c      	str	r4, [r3, #0]
   d9816:	b00b      	add	sp, #44	; 0x2c
   d9818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d981c <L_shift>:
   d981c:	f1c2 0208 	rsb	r2, r2, #8
   d9820:	0092      	lsls	r2, r2, #2
   d9822:	b570      	push	{r4, r5, r6, lr}
   d9824:	f1c2 0620 	rsb	r6, r2, #32
   d9828:	6843      	ldr	r3, [r0, #4]
   d982a:	6805      	ldr	r5, [r0, #0]
   d982c:	fa03 f406 	lsl.w	r4, r3, r6
   d9830:	432c      	orrs	r4, r5
   d9832:	40d3      	lsrs	r3, r2
   d9834:	6004      	str	r4, [r0, #0]
   d9836:	f840 3f04 	str.w	r3, [r0, #4]!
   d983a:	4288      	cmp	r0, r1
   d983c:	d3f4      	bcc.n	d9828 <L_shift+0xc>
   d983e:	bd70      	pop	{r4, r5, r6, pc}

000d9840 <__match>:
   d9840:	b530      	push	{r4, r5, lr}
   d9842:	6803      	ldr	r3, [r0, #0]
   d9844:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9848:	3301      	adds	r3, #1
   d984a:	b14c      	cbz	r4, d9860 <__match+0x20>
   d984c:	781a      	ldrb	r2, [r3, #0]
   d984e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d9852:	2d19      	cmp	r5, #25
   d9854:	bf98      	it	ls
   d9856:	3220      	addls	r2, #32
   d9858:	42a2      	cmp	r2, r4
   d985a:	d0f3      	beq.n	d9844 <__match+0x4>
   d985c:	2000      	movs	r0, #0
   d985e:	bd30      	pop	{r4, r5, pc}
   d9860:	6003      	str	r3, [r0, #0]
   d9862:	2001      	movs	r0, #1
   d9864:	bd30      	pop	{r4, r5, pc}

000d9866 <__hexnan>:
   d9866:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d986a:	680b      	ldr	r3, [r1, #0]
   d986c:	f8d0 b000 	ldr.w	fp, [r0]
   d9870:	115e      	asrs	r6, r3, #5
   d9872:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d9876:	f013 031f 	ands.w	r3, r3, #31
   d987a:	b085      	sub	sp, #20
   d987c:	bf18      	it	ne
   d987e:	3604      	addne	r6, #4
   d9880:	1f35      	subs	r5, r6, #4
   d9882:	4617      	mov	r7, r2
   d9884:	2200      	movs	r2, #0
   d9886:	4682      	mov	sl, r0
   d9888:	9301      	str	r3, [sp, #4]
   d988a:	f846 2c04 	str.w	r2, [r6, #-4]
   d988e:	46a8      	mov	r8, r5
   d9890:	462c      	mov	r4, r5
   d9892:	9200      	str	r2, [sp, #0]
   d9894:	4691      	mov	r9, r2
   d9896:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   d989a:	2900      	cmp	r1, #0
   d989c:	d03c      	beq.n	d9918 <__hexnan+0xb2>
   d989e:	4608      	mov	r0, r1
   d98a0:	9203      	str	r2, [sp, #12]
   d98a2:	9102      	str	r1, [sp, #8]
   d98a4:	f7ff fd86 	bl	d93b4 <__hexdig_fun>
   d98a8:	9a03      	ldr	r2, [sp, #12]
   d98aa:	bb00      	cbnz	r0, d98ee <__hexnan+0x88>
   d98ac:	9902      	ldr	r1, [sp, #8]
   d98ae:	2920      	cmp	r1, #32
   d98b0:	d816      	bhi.n	d98e0 <__hexnan+0x7a>
   d98b2:	9b00      	ldr	r3, [sp, #0]
   d98b4:	4599      	cmp	r9, r3
   d98b6:	ddee      	ble.n	d9896 <__hexnan+0x30>
   d98b8:	4544      	cmp	r4, r8
   d98ba:	d205      	bcs.n	d98c8 <__hexnan+0x62>
   d98bc:	2a07      	cmp	r2, #7
   d98be:	dc03      	bgt.n	d98c8 <__hexnan+0x62>
   d98c0:	4641      	mov	r1, r8
   d98c2:	4620      	mov	r0, r4
   d98c4:	f7ff ffaa 	bl	d981c <L_shift>
   d98c8:	42bc      	cmp	r4, r7
   d98ca:	d923      	bls.n	d9914 <__hexnan+0xae>
   d98cc:	2300      	movs	r3, #0
   d98ce:	f1a4 0804 	sub.w	r8, r4, #4
   d98d2:	f844 3c04 	str.w	r3, [r4, #-4]
   d98d6:	f8cd 9000 	str.w	r9, [sp]
   d98da:	4644      	mov	r4, r8
   d98dc:	461a      	mov	r2, r3
   d98de:	e7da      	b.n	d9896 <__hexnan+0x30>
   d98e0:	2929      	cmp	r1, #41	; 0x29
   d98e2:	d148      	bne.n	d9976 <__hexnan+0x110>
   d98e4:	f10b 0301 	add.w	r3, fp, #1
   d98e8:	f8ca 3000 	str.w	r3, [sl]
   d98ec:	e014      	b.n	d9918 <__hexnan+0xb2>
   d98ee:	3201      	adds	r2, #1
   d98f0:	2a08      	cmp	r2, #8
   d98f2:	f109 0901 	add.w	r9, r9, #1
   d98f6:	dd06      	ble.n	d9906 <__hexnan+0xa0>
   d98f8:	42bc      	cmp	r4, r7
   d98fa:	d9cc      	bls.n	d9896 <__hexnan+0x30>
   d98fc:	2300      	movs	r3, #0
   d98fe:	f844 3c04 	str.w	r3, [r4, #-4]
   d9902:	2201      	movs	r2, #1
   d9904:	3c04      	subs	r4, #4
   d9906:	6821      	ldr	r1, [r4, #0]
   d9908:	f000 000f 	and.w	r0, r0, #15
   d990c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   d9910:	6020      	str	r0, [r4, #0]
   d9912:	e7c0      	b.n	d9896 <__hexnan+0x30>
   d9914:	2208      	movs	r2, #8
   d9916:	e7be      	b.n	d9896 <__hexnan+0x30>
   d9918:	f1b9 0f00 	cmp.w	r9, #0
   d991c:	d02b      	beq.n	d9976 <__hexnan+0x110>
   d991e:	4544      	cmp	r4, r8
   d9920:	d205      	bcs.n	d992e <__hexnan+0xc8>
   d9922:	2a07      	cmp	r2, #7
   d9924:	dc03      	bgt.n	d992e <__hexnan+0xc8>
   d9926:	4641      	mov	r1, r8
   d9928:	4620      	mov	r0, r4
   d992a:	f7ff ff77 	bl	d981c <L_shift>
   d992e:	42bc      	cmp	r4, r7
   d9930:	d90c      	bls.n	d994c <__hexnan+0xe6>
   d9932:	463b      	mov	r3, r7
   d9934:	f854 2b04 	ldr.w	r2, [r4], #4
   d9938:	f843 2b04 	str.w	r2, [r3], #4
   d993c:	42a5      	cmp	r5, r4
   d993e:	d2f9      	bcs.n	d9934 <__hexnan+0xce>
   d9940:	2200      	movs	r2, #0
   d9942:	f843 2b04 	str.w	r2, [r3], #4
   d9946:	429d      	cmp	r5, r3
   d9948:	d2fb      	bcs.n	d9942 <__hexnan+0xdc>
   d994a:	e00b      	b.n	d9964 <__hexnan+0xfe>
   d994c:	9b01      	ldr	r3, [sp, #4]
   d994e:	b14b      	cbz	r3, d9964 <__hexnan+0xfe>
   d9950:	f1c3 0220 	rsb	r2, r3, #32
   d9954:	f04f 33ff 	mov.w	r3, #4294967295
   d9958:	40d3      	lsrs	r3, r2
   d995a:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d995e:	4013      	ands	r3, r2
   d9960:	f846 3c04 	str.w	r3, [r6, #-4]
   d9964:	682b      	ldr	r3, [r5, #0]
   d9966:	b943      	cbnz	r3, d997a <__hexnan+0x114>
   d9968:	42bd      	cmp	r5, r7
   d996a:	d102      	bne.n	d9972 <__hexnan+0x10c>
   d996c:	2301      	movs	r3, #1
   d996e:	602b      	str	r3, [r5, #0]
   d9970:	e003      	b.n	d997a <__hexnan+0x114>
   d9972:	3d04      	subs	r5, #4
   d9974:	e7f6      	b.n	d9964 <__hexnan+0xfe>
   d9976:	2004      	movs	r0, #4
   d9978:	e000      	b.n	d997c <__hexnan+0x116>
   d997a:	2005      	movs	r0, #5
   d997c:	b005      	add	sp, #20
   d997e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9982 <_Balloc>:
   d9982:	b570      	push	{r4, r5, r6, lr}
   d9984:	6a45      	ldr	r5, [r0, #36]	; 0x24
   d9986:	4604      	mov	r4, r0
   d9988:	460e      	mov	r6, r1
   d998a:	b93d      	cbnz	r5, d999c <_Balloc+0x1a>
   d998c:	2010      	movs	r0, #16
   d998e:	f7fc fccf 	bl	d6330 <malloc>
   d9992:	6260      	str	r0, [r4, #36]	; 0x24
   d9994:	6045      	str	r5, [r0, #4]
   d9996:	6085      	str	r5, [r0, #8]
   d9998:	6005      	str	r5, [r0, #0]
   d999a:	60c5      	str	r5, [r0, #12]
   d999c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d999e:	68eb      	ldr	r3, [r5, #12]
   d99a0:	b143      	cbz	r3, d99b4 <_Balloc+0x32>
   d99a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d99a4:	68db      	ldr	r3, [r3, #12]
   d99a6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   d99aa:	b178      	cbz	r0, d99cc <_Balloc+0x4a>
   d99ac:	6802      	ldr	r2, [r0, #0]
   d99ae:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   d99b2:	e017      	b.n	d99e4 <_Balloc+0x62>
   d99b4:	2221      	movs	r2, #33	; 0x21
   d99b6:	2104      	movs	r1, #4
   d99b8:	4620      	mov	r0, r4
   d99ba:	f000 fbd2 	bl	da162 <_calloc_r>
   d99be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d99c0:	60e8      	str	r0, [r5, #12]
   d99c2:	68db      	ldr	r3, [r3, #12]
   d99c4:	2b00      	cmp	r3, #0
   d99c6:	d1ec      	bne.n	d99a2 <_Balloc+0x20>
   d99c8:	2000      	movs	r0, #0
   d99ca:	bd70      	pop	{r4, r5, r6, pc}
   d99cc:	2101      	movs	r1, #1
   d99ce:	fa01 f506 	lsl.w	r5, r1, r6
   d99d2:	1d6a      	adds	r2, r5, #5
   d99d4:	0092      	lsls	r2, r2, #2
   d99d6:	4620      	mov	r0, r4
   d99d8:	f000 fbc3 	bl	da162 <_calloc_r>
   d99dc:	2800      	cmp	r0, #0
   d99de:	d0f3      	beq.n	d99c8 <_Balloc+0x46>
   d99e0:	6046      	str	r6, [r0, #4]
   d99e2:	6085      	str	r5, [r0, #8]
   d99e4:	2300      	movs	r3, #0
   d99e6:	6103      	str	r3, [r0, #16]
   d99e8:	60c3      	str	r3, [r0, #12]
   d99ea:	bd70      	pop	{r4, r5, r6, pc}

000d99ec <_Bfree>:
   d99ec:	b570      	push	{r4, r5, r6, lr}
   d99ee:	6a44      	ldr	r4, [r0, #36]	; 0x24
   d99f0:	4606      	mov	r6, r0
   d99f2:	460d      	mov	r5, r1
   d99f4:	b93c      	cbnz	r4, d9a06 <_Bfree+0x1a>
   d99f6:	2010      	movs	r0, #16
   d99f8:	f7fc fc9a 	bl	d6330 <malloc>
   d99fc:	6270      	str	r0, [r6, #36]	; 0x24
   d99fe:	6044      	str	r4, [r0, #4]
   d9a00:	6084      	str	r4, [r0, #8]
   d9a02:	6004      	str	r4, [r0, #0]
   d9a04:	60c4      	str	r4, [r0, #12]
   d9a06:	b13d      	cbz	r5, d9a18 <_Bfree+0x2c>
   d9a08:	6a73      	ldr	r3, [r6, #36]	; 0x24
   d9a0a:	686a      	ldr	r2, [r5, #4]
   d9a0c:	68db      	ldr	r3, [r3, #12]
   d9a0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d9a12:	6029      	str	r1, [r5, #0]
   d9a14:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   d9a18:	bd70      	pop	{r4, r5, r6, pc}

000d9a1a <__multadd>:
   d9a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9a1e:	690d      	ldr	r5, [r1, #16]
   d9a20:	461f      	mov	r7, r3
   d9a22:	4606      	mov	r6, r0
   d9a24:	460c      	mov	r4, r1
   d9a26:	f101 0e14 	add.w	lr, r1, #20
   d9a2a:	2300      	movs	r3, #0
   d9a2c:	f8de 0000 	ldr.w	r0, [lr]
   d9a30:	b281      	uxth	r1, r0
   d9a32:	fb02 7101 	mla	r1, r2, r1, r7
   d9a36:	0c0f      	lsrs	r7, r1, #16
   d9a38:	0c00      	lsrs	r0, r0, #16
   d9a3a:	fb02 7000 	mla	r0, r2, r0, r7
   d9a3e:	b289      	uxth	r1, r1
   d9a40:	3301      	adds	r3, #1
   d9a42:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   d9a46:	429d      	cmp	r5, r3
   d9a48:	ea4f 4710 	mov.w	r7, r0, lsr #16
   d9a4c:	f84e 1b04 	str.w	r1, [lr], #4
   d9a50:	dcec      	bgt.n	d9a2c <__multadd+0x12>
   d9a52:	b1d7      	cbz	r7, d9a8a <__multadd+0x70>
   d9a54:	68a3      	ldr	r3, [r4, #8]
   d9a56:	429d      	cmp	r5, r3
   d9a58:	db12      	blt.n	d9a80 <__multadd+0x66>
   d9a5a:	6861      	ldr	r1, [r4, #4]
   d9a5c:	4630      	mov	r0, r6
   d9a5e:	3101      	adds	r1, #1
   d9a60:	f7ff ff8f 	bl	d9982 <_Balloc>
   d9a64:	6922      	ldr	r2, [r4, #16]
   d9a66:	3202      	adds	r2, #2
   d9a68:	f104 010c 	add.w	r1, r4, #12
   d9a6c:	4680      	mov	r8, r0
   d9a6e:	0092      	lsls	r2, r2, #2
   d9a70:	300c      	adds	r0, #12
   d9a72:	f7fe fd93 	bl	d859c <memcpy>
   d9a76:	4621      	mov	r1, r4
   d9a78:	4630      	mov	r0, r6
   d9a7a:	f7ff ffb7 	bl	d99ec <_Bfree>
   d9a7e:	4644      	mov	r4, r8
   d9a80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   d9a84:	3501      	adds	r5, #1
   d9a86:	615f      	str	r7, [r3, #20]
   d9a88:	6125      	str	r5, [r4, #16]
   d9a8a:	4620      	mov	r0, r4
   d9a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9a90 <__s2b>:
   d9a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9a94:	460c      	mov	r4, r1
   d9a96:	4615      	mov	r5, r2
   d9a98:	461f      	mov	r7, r3
   d9a9a:	2209      	movs	r2, #9
   d9a9c:	3308      	adds	r3, #8
   d9a9e:	4606      	mov	r6, r0
   d9aa0:	fb93 f3f2 	sdiv	r3, r3, r2
   d9aa4:	2100      	movs	r1, #0
   d9aa6:	2201      	movs	r2, #1
   d9aa8:	429a      	cmp	r2, r3
   d9aaa:	da02      	bge.n	d9ab2 <__s2b+0x22>
   d9aac:	0052      	lsls	r2, r2, #1
   d9aae:	3101      	adds	r1, #1
   d9ab0:	e7fa      	b.n	d9aa8 <__s2b+0x18>
   d9ab2:	4630      	mov	r0, r6
   d9ab4:	f7ff ff65 	bl	d9982 <_Balloc>
   d9ab8:	9b08      	ldr	r3, [sp, #32]
   d9aba:	6143      	str	r3, [r0, #20]
   d9abc:	2d09      	cmp	r5, #9
   d9abe:	f04f 0301 	mov.w	r3, #1
   d9ac2:	6103      	str	r3, [r0, #16]
   d9ac4:	dd11      	ble.n	d9aea <__s2b+0x5a>
   d9ac6:	f104 0809 	add.w	r8, r4, #9
   d9aca:	46c1      	mov	r9, r8
   d9acc:	442c      	add	r4, r5
   d9ace:	f819 3b01 	ldrb.w	r3, [r9], #1
   d9ad2:	4601      	mov	r1, r0
   d9ad4:	3b30      	subs	r3, #48	; 0x30
   d9ad6:	220a      	movs	r2, #10
   d9ad8:	4630      	mov	r0, r6
   d9ada:	f7ff ff9e 	bl	d9a1a <__multadd>
   d9ade:	45a1      	cmp	r9, r4
   d9ae0:	d1f5      	bne.n	d9ace <__s2b+0x3e>
   d9ae2:	eb08 0405 	add.w	r4, r8, r5
   d9ae6:	3c08      	subs	r4, #8
   d9ae8:	e001      	b.n	d9aee <__s2b+0x5e>
   d9aea:	340a      	adds	r4, #10
   d9aec:	2509      	movs	r5, #9
   d9aee:	1b2d      	subs	r5, r5, r4
   d9af0:	1963      	adds	r3, r4, r5
   d9af2:	429f      	cmp	r7, r3
   d9af4:	dd08      	ble.n	d9b08 <__s2b+0x78>
   d9af6:	f814 3b01 	ldrb.w	r3, [r4], #1
   d9afa:	4601      	mov	r1, r0
   d9afc:	3b30      	subs	r3, #48	; 0x30
   d9afe:	220a      	movs	r2, #10
   d9b00:	4630      	mov	r0, r6
   d9b02:	f7ff ff8a 	bl	d9a1a <__multadd>
   d9b06:	e7f3      	b.n	d9af0 <__s2b+0x60>
   d9b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9b0c <__hi0bits>:
   d9b0c:	0c03      	lsrs	r3, r0, #16
   d9b0e:	041b      	lsls	r3, r3, #16
   d9b10:	b913      	cbnz	r3, d9b18 <__hi0bits+0xc>
   d9b12:	0400      	lsls	r0, r0, #16
   d9b14:	2310      	movs	r3, #16
   d9b16:	e000      	b.n	d9b1a <__hi0bits+0xe>
   d9b18:	2300      	movs	r3, #0
   d9b1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d9b1e:	bf04      	itt	eq
   d9b20:	0200      	lsleq	r0, r0, #8
   d9b22:	3308      	addeq	r3, #8
   d9b24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d9b28:	bf04      	itt	eq
   d9b2a:	0100      	lsleq	r0, r0, #4
   d9b2c:	3304      	addeq	r3, #4
   d9b2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d9b32:	bf04      	itt	eq
   d9b34:	0080      	lsleq	r0, r0, #2
   d9b36:	3302      	addeq	r3, #2
   d9b38:	2800      	cmp	r0, #0
   d9b3a:	db03      	blt.n	d9b44 <__hi0bits+0x38>
   d9b3c:	0042      	lsls	r2, r0, #1
   d9b3e:	d503      	bpl.n	d9b48 <__hi0bits+0x3c>
   d9b40:	1c58      	adds	r0, r3, #1
   d9b42:	4770      	bx	lr
   d9b44:	4618      	mov	r0, r3
   d9b46:	4770      	bx	lr
   d9b48:	2020      	movs	r0, #32
   d9b4a:	4770      	bx	lr

000d9b4c <__lo0bits>:
   d9b4c:	6803      	ldr	r3, [r0, #0]
   d9b4e:	f013 0207 	ands.w	r2, r3, #7
   d9b52:	d00b      	beq.n	d9b6c <__lo0bits+0x20>
   d9b54:	07d9      	lsls	r1, r3, #31
   d9b56:	d422      	bmi.n	d9b9e <__lo0bits+0x52>
   d9b58:	079a      	lsls	r2, r3, #30
   d9b5a:	bf4b      	itete	mi
   d9b5c:	085b      	lsrmi	r3, r3, #1
   d9b5e:	089b      	lsrpl	r3, r3, #2
   d9b60:	6003      	strmi	r3, [r0, #0]
   d9b62:	6003      	strpl	r3, [r0, #0]
   d9b64:	bf4c      	ite	mi
   d9b66:	2001      	movmi	r0, #1
   d9b68:	2002      	movpl	r0, #2
   d9b6a:	4770      	bx	lr
   d9b6c:	b299      	uxth	r1, r3
   d9b6e:	b909      	cbnz	r1, d9b74 <__lo0bits+0x28>
   d9b70:	0c1b      	lsrs	r3, r3, #16
   d9b72:	2210      	movs	r2, #16
   d9b74:	f013 0fff 	tst.w	r3, #255	; 0xff
   d9b78:	bf04      	itt	eq
   d9b7a:	0a1b      	lsreq	r3, r3, #8
   d9b7c:	3208      	addeq	r2, #8
   d9b7e:	0719      	lsls	r1, r3, #28
   d9b80:	bf04      	itt	eq
   d9b82:	091b      	lsreq	r3, r3, #4
   d9b84:	3204      	addeq	r2, #4
   d9b86:	0799      	lsls	r1, r3, #30
   d9b88:	bf04      	itt	eq
   d9b8a:	089b      	lsreq	r3, r3, #2
   d9b8c:	3202      	addeq	r2, #2
   d9b8e:	07d9      	lsls	r1, r3, #31
   d9b90:	d402      	bmi.n	d9b98 <__lo0bits+0x4c>
   d9b92:	085b      	lsrs	r3, r3, #1
   d9b94:	d005      	beq.n	d9ba2 <__lo0bits+0x56>
   d9b96:	3201      	adds	r2, #1
   d9b98:	6003      	str	r3, [r0, #0]
   d9b9a:	4610      	mov	r0, r2
   d9b9c:	4770      	bx	lr
   d9b9e:	2000      	movs	r0, #0
   d9ba0:	4770      	bx	lr
   d9ba2:	2020      	movs	r0, #32
   d9ba4:	4770      	bx	lr

000d9ba6 <__i2b>:
   d9ba6:	b510      	push	{r4, lr}
   d9ba8:	460c      	mov	r4, r1
   d9baa:	2101      	movs	r1, #1
   d9bac:	f7ff fee9 	bl	d9982 <_Balloc>
   d9bb0:	2201      	movs	r2, #1
   d9bb2:	6144      	str	r4, [r0, #20]
   d9bb4:	6102      	str	r2, [r0, #16]
   d9bb6:	bd10      	pop	{r4, pc}

000d9bb8 <__multiply>:
   d9bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9bbc:	4614      	mov	r4, r2
   d9bbe:	690a      	ldr	r2, [r1, #16]
   d9bc0:	6923      	ldr	r3, [r4, #16]
   d9bc2:	429a      	cmp	r2, r3
   d9bc4:	bfb8      	it	lt
   d9bc6:	460b      	movlt	r3, r1
   d9bc8:	4688      	mov	r8, r1
   d9bca:	bfbc      	itt	lt
   d9bcc:	46a0      	movlt	r8, r4
   d9bce:	461c      	movlt	r4, r3
   d9bd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   d9bd4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d9bd8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9bdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   d9be0:	eb07 0609 	add.w	r6, r7, r9
   d9be4:	429e      	cmp	r6, r3
   d9be6:	bfc8      	it	gt
   d9be8:	3101      	addgt	r1, #1
   d9bea:	f7ff feca 	bl	d9982 <_Balloc>
   d9bee:	f100 0514 	add.w	r5, r0, #20
   d9bf2:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   d9bf6:	462b      	mov	r3, r5
   d9bf8:	2200      	movs	r2, #0
   d9bfa:	4563      	cmp	r3, ip
   d9bfc:	d202      	bcs.n	d9c04 <__multiply+0x4c>
   d9bfe:	f843 2b04 	str.w	r2, [r3], #4
   d9c02:	e7fa      	b.n	d9bfa <__multiply+0x42>
   d9c04:	f104 0214 	add.w	r2, r4, #20
   d9c08:	f108 0114 	add.w	r1, r8, #20
   d9c0c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d9c10:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   d9c14:	9300      	str	r3, [sp, #0]
   d9c16:	9b00      	ldr	r3, [sp, #0]
   d9c18:	9201      	str	r2, [sp, #4]
   d9c1a:	4293      	cmp	r3, r2
   d9c1c:	d957      	bls.n	d9cce <__multiply+0x116>
   d9c1e:	f8b2 b000 	ldrh.w	fp, [r2]
   d9c22:	f1bb 0f00 	cmp.w	fp, #0
   d9c26:	d023      	beq.n	d9c70 <__multiply+0xb8>
   d9c28:	4689      	mov	r9, r1
   d9c2a:	46ae      	mov	lr, r5
   d9c2c:	f04f 0800 	mov.w	r8, #0
   d9c30:	f859 4b04 	ldr.w	r4, [r9], #4
   d9c34:	f8be a000 	ldrh.w	sl, [lr]
   d9c38:	b2a3      	uxth	r3, r4
   d9c3a:	fb0b a303 	mla	r3, fp, r3, sl
   d9c3e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   d9c42:	f8de 4000 	ldr.w	r4, [lr]
   d9c46:	4443      	add	r3, r8
   d9c48:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d9c4c:	fb0b 840a 	mla	r4, fp, sl, r8
   d9c50:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   d9c54:	46f2      	mov	sl, lr
   d9c56:	b29b      	uxth	r3, r3
   d9c58:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   d9c5c:	454f      	cmp	r7, r9
   d9c5e:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d9c62:	f84a 3b04 	str.w	r3, [sl], #4
   d9c66:	d901      	bls.n	d9c6c <__multiply+0xb4>
   d9c68:	46d6      	mov	lr, sl
   d9c6a:	e7e1      	b.n	d9c30 <__multiply+0x78>
   d9c6c:	f8ce 8004 	str.w	r8, [lr, #4]
   d9c70:	9b01      	ldr	r3, [sp, #4]
   d9c72:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   d9c76:	3204      	adds	r2, #4
   d9c78:	f1ba 0f00 	cmp.w	sl, #0
   d9c7c:	d021      	beq.n	d9cc2 <__multiply+0x10a>
   d9c7e:	682b      	ldr	r3, [r5, #0]
   d9c80:	462c      	mov	r4, r5
   d9c82:	4689      	mov	r9, r1
   d9c84:	f04f 0800 	mov.w	r8, #0
   d9c88:	f8b9 e000 	ldrh.w	lr, [r9]
   d9c8c:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   d9c90:	fb0a be0e 	mla	lr, sl, lr, fp
   d9c94:	44f0      	add	r8, lr
   d9c96:	46a3      	mov	fp, r4
   d9c98:	b29b      	uxth	r3, r3
   d9c9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   d9c9e:	f84b 3b04 	str.w	r3, [fp], #4
   d9ca2:	f859 3b04 	ldr.w	r3, [r9], #4
   d9ca6:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   d9caa:	0c1b      	lsrs	r3, r3, #16
   d9cac:	fb0a e303 	mla	r3, sl, r3, lr
   d9cb0:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   d9cb4:	454f      	cmp	r7, r9
   d9cb6:	ea4f 4813 	mov.w	r8, r3, lsr #16
   d9cba:	d901      	bls.n	d9cc0 <__multiply+0x108>
   d9cbc:	465c      	mov	r4, fp
   d9cbe:	e7e3      	b.n	d9c88 <__multiply+0xd0>
   d9cc0:	6063      	str	r3, [r4, #4]
   d9cc2:	3504      	adds	r5, #4
   d9cc4:	e7a7      	b.n	d9c16 <__multiply+0x5e>
   d9cc6:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   d9cca:	b913      	cbnz	r3, d9cd2 <__multiply+0x11a>
   d9ccc:	3e01      	subs	r6, #1
   d9cce:	2e00      	cmp	r6, #0
   d9cd0:	dcf9      	bgt.n	d9cc6 <__multiply+0x10e>
   d9cd2:	6106      	str	r6, [r0, #16]
   d9cd4:	b003      	add	sp, #12
   d9cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d9cdc <__pow5mult>:
   d9cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9ce0:	4615      	mov	r5, r2
   d9ce2:	f012 0203 	ands.w	r2, r2, #3
   d9ce6:	4606      	mov	r6, r0
   d9ce8:	460f      	mov	r7, r1
   d9cea:	d007      	beq.n	d9cfc <__pow5mult+0x20>
   d9cec:	3a01      	subs	r2, #1
   d9cee:	4c21      	ldr	r4, [pc, #132]	; (d9d74 <__pow5mult+0x98>)
   d9cf0:	2300      	movs	r3, #0
   d9cf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d9cf6:	f7ff fe90 	bl	d9a1a <__multadd>
   d9cfa:	4607      	mov	r7, r0
   d9cfc:	10ad      	asrs	r5, r5, #2
   d9cfe:	d036      	beq.n	d9d6e <__pow5mult+0x92>
   d9d00:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d9d02:	b93c      	cbnz	r4, d9d14 <__pow5mult+0x38>
   d9d04:	2010      	movs	r0, #16
   d9d06:	f7fc fb13 	bl	d6330 <malloc>
   d9d0a:	6270      	str	r0, [r6, #36]	; 0x24
   d9d0c:	6044      	str	r4, [r0, #4]
   d9d0e:	6084      	str	r4, [r0, #8]
   d9d10:	6004      	str	r4, [r0, #0]
   d9d12:	60c4      	str	r4, [r0, #12]
   d9d14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d9d18:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d9d1c:	b94c      	cbnz	r4, d9d32 <__pow5mult+0x56>
   d9d1e:	f240 2171 	movw	r1, #625	; 0x271
   d9d22:	4630      	mov	r0, r6
   d9d24:	f7ff ff3f 	bl	d9ba6 <__i2b>
   d9d28:	2300      	movs	r3, #0
   d9d2a:	f8c8 0008 	str.w	r0, [r8, #8]
   d9d2e:	4604      	mov	r4, r0
   d9d30:	6003      	str	r3, [r0, #0]
   d9d32:	f04f 0800 	mov.w	r8, #0
   d9d36:	07eb      	lsls	r3, r5, #31
   d9d38:	d50a      	bpl.n	d9d50 <__pow5mult+0x74>
   d9d3a:	4639      	mov	r1, r7
   d9d3c:	4622      	mov	r2, r4
   d9d3e:	4630      	mov	r0, r6
   d9d40:	f7ff ff3a 	bl	d9bb8 <__multiply>
   d9d44:	4639      	mov	r1, r7
   d9d46:	4681      	mov	r9, r0
   d9d48:	4630      	mov	r0, r6
   d9d4a:	f7ff fe4f 	bl	d99ec <_Bfree>
   d9d4e:	464f      	mov	r7, r9
   d9d50:	106d      	asrs	r5, r5, #1
   d9d52:	d00c      	beq.n	d9d6e <__pow5mult+0x92>
   d9d54:	6820      	ldr	r0, [r4, #0]
   d9d56:	b108      	cbz	r0, d9d5c <__pow5mult+0x80>
   d9d58:	4604      	mov	r4, r0
   d9d5a:	e7ec      	b.n	d9d36 <__pow5mult+0x5a>
   d9d5c:	4622      	mov	r2, r4
   d9d5e:	4621      	mov	r1, r4
   d9d60:	4630      	mov	r0, r6
   d9d62:	f7ff ff29 	bl	d9bb8 <__multiply>
   d9d66:	6020      	str	r0, [r4, #0]
   d9d68:	f8c0 8000 	str.w	r8, [r0]
   d9d6c:	e7f4      	b.n	d9d58 <__pow5mult+0x7c>
   d9d6e:	4638      	mov	r0, r7
   d9d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9d74:	000db0f8 	.word	0x000db0f8

000d9d78 <__lshift>:
   d9d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9d7c:	460c      	mov	r4, r1
   d9d7e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d9d82:	6926      	ldr	r6, [r4, #16]
   d9d84:	6849      	ldr	r1, [r1, #4]
   d9d86:	68a3      	ldr	r3, [r4, #8]
   d9d88:	4456      	add	r6, sl
   d9d8a:	4607      	mov	r7, r0
   d9d8c:	4691      	mov	r9, r2
   d9d8e:	1c75      	adds	r5, r6, #1
   d9d90:	42ab      	cmp	r3, r5
   d9d92:	da02      	bge.n	d9d9a <__lshift+0x22>
   d9d94:	3101      	adds	r1, #1
   d9d96:	005b      	lsls	r3, r3, #1
   d9d98:	e7fa      	b.n	d9d90 <__lshift+0x18>
   d9d9a:	4638      	mov	r0, r7
   d9d9c:	f7ff fdf1 	bl	d9982 <_Balloc>
   d9da0:	2300      	movs	r3, #0
   d9da2:	4680      	mov	r8, r0
   d9da4:	f100 0114 	add.w	r1, r0, #20
   d9da8:	461a      	mov	r2, r3
   d9daa:	4553      	cmp	r3, sl
   d9dac:	da03      	bge.n	d9db6 <__lshift+0x3e>
   d9dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   d9db2:	3301      	adds	r3, #1
   d9db4:	e7f9      	b.n	d9daa <__lshift+0x32>
   d9db6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   d9dba:	6920      	ldr	r0, [r4, #16]
   d9dbc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d9dc0:	f019 091f 	ands.w	r9, r9, #31
   d9dc4:	f104 0114 	add.w	r1, r4, #20
   d9dc8:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   d9dcc:	d014      	beq.n	d9df8 <__lshift+0x80>
   d9dce:	f1c9 0c20 	rsb	ip, r9, #32
   d9dd2:	2200      	movs	r2, #0
   d9dd4:	6808      	ldr	r0, [r1, #0]
   d9dd6:	fa00 f009 	lsl.w	r0, r0, r9
   d9dda:	4302      	orrs	r2, r0
   d9ddc:	469a      	mov	sl, r3
   d9dde:	f843 2b04 	str.w	r2, [r3], #4
   d9de2:	f851 2b04 	ldr.w	r2, [r1], #4
   d9de6:	458e      	cmp	lr, r1
   d9de8:	fa22 f20c 	lsr.w	r2, r2, ip
   d9dec:	d8f2      	bhi.n	d9dd4 <__lshift+0x5c>
   d9dee:	f8ca 2004 	str.w	r2, [sl, #4]
   d9df2:	b142      	cbz	r2, d9e06 <__lshift+0x8e>
   d9df4:	1cb5      	adds	r5, r6, #2
   d9df6:	e006      	b.n	d9e06 <__lshift+0x8e>
   d9df8:	3b04      	subs	r3, #4
   d9dfa:	f851 2b04 	ldr.w	r2, [r1], #4
   d9dfe:	f843 2f04 	str.w	r2, [r3, #4]!
   d9e02:	458e      	cmp	lr, r1
   d9e04:	d8f9      	bhi.n	d9dfa <__lshift+0x82>
   d9e06:	3d01      	subs	r5, #1
   d9e08:	4638      	mov	r0, r7
   d9e0a:	f8c8 5010 	str.w	r5, [r8, #16]
   d9e0e:	4621      	mov	r1, r4
   d9e10:	f7ff fdec 	bl	d99ec <_Bfree>
   d9e14:	4640      	mov	r0, r8
   d9e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d9e1a <__mcmp>:
   d9e1a:	6903      	ldr	r3, [r0, #16]
   d9e1c:	690a      	ldr	r2, [r1, #16]
   d9e1e:	1a9b      	subs	r3, r3, r2
   d9e20:	b510      	push	{r4, lr}
   d9e22:	d111      	bne.n	d9e48 <__mcmp+0x2e>
   d9e24:	0092      	lsls	r2, r2, #2
   d9e26:	3014      	adds	r0, #20
   d9e28:	3114      	adds	r1, #20
   d9e2a:	1883      	adds	r3, r0, r2
   d9e2c:	440a      	add	r2, r1
   d9e2e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   d9e32:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   d9e36:	428c      	cmp	r4, r1
   d9e38:	d002      	beq.n	d9e40 <__mcmp+0x26>
   d9e3a:	d307      	bcc.n	d9e4c <__mcmp+0x32>
   d9e3c:	2001      	movs	r0, #1
   d9e3e:	bd10      	pop	{r4, pc}
   d9e40:	4298      	cmp	r0, r3
   d9e42:	d3f4      	bcc.n	d9e2e <__mcmp+0x14>
   d9e44:	2000      	movs	r0, #0
   d9e46:	bd10      	pop	{r4, pc}
   d9e48:	4618      	mov	r0, r3
   d9e4a:	bd10      	pop	{r4, pc}
   d9e4c:	f04f 30ff 	mov.w	r0, #4294967295
   d9e50:	bd10      	pop	{r4, pc}

000d9e52 <__mdiff>:
   d9e52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9e56:	460c      	mov	r4, r1
   d9e58:	4607      	mov	r7, r0
   d9e5a:	4611      	mov	r1, r2
   d9e5c:	4620      	mov	r0, r4
   d9e5e:	4615      	mov	r5, r2
   d9e60:	f7ff ffdb 	bl	d9e1a <__mcmp>
   d9e64:	1e06      	subs	r6, r0, #0
   d9e66:	d108      	bne.n	d9e7a <__mdiff+0x28>
   d9e68:	4631      	mov	r1, r6
   d9e6a:	4638      	mov	r0, r7
   d9e6c:	f7ff fd89 	bl	d9982 <_Balloc>
   d9e70:	2301      	movs	r3, #1
   d9e72:	6103      	str	r3, [r0, #16]
   d9e74:	6146      	str	r6, [r0, #20]
   d9e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9e7a:	bfbc      	itt	lt
   d9e7c:	4623      	movlt	r3, r4
   d9e7e:	462c      	movlt	r4, r5
   d9e80:	4638      	mov	r0, r7
   d9e82:	6861      	ldr	r1, [r4, #4]
   d9e84:	bfba      	itte	lt
   d9e86:	461d      	movlt	r5, r3
   d9e88:	2601      	movlt	r6, #1
   d9e8a:	2600      	movge	r6, #0
   d9e8c:	f7ff fd79 	bl	d9982 <_Balloc>
   d9e90:	692b      	ldr	r3, [r5, #16]
   d9e92:	60c6      	str	r6, [r0, #12]
   d9e94:	6926      	ldr	r6, [r4, #16]
   d9e96:	f105 0914 	add.w	r9, r5, #20
   d9e9a:	3414      	adds	r4, #20
   d9e9c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   d9ea0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   d9ea4:	f100 0514 	add.w	r5, r0, #20
   d9ea8:	f04f 0c00 	mov.w	ip, #0
   d9eac:	f854 3b04 	ldr.w	r3, [r4], #4
   d9eb0:	f859 2b04 	ldr.w	r2, [r9], #4
   d9eb4:	fa1c f183 	uxtah	r1, ip, r3
   d9eb8:	fa1f fe82 	uxth.w	lr, r2
   d9ebc:	0c12      	lsrs	r2, r2, #16
   d9ebe:	ebce 0101 	rsb	r1, lr, r1
   d9ec2:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   d9ec6:	eb03 4321 	add.w	r3, r3, r1, asr #16
   d9eca:	b289      	uxth	r1, r1
   d9ecc:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d9ed0:	45c8      	cmp	r8, r9
   d9ed2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   d9ed6:	46a6      	mov	lr, r4
   d9ed8:	f845 3b04 	str.w	r3, [r5], #4
   d9edc:	d8e6      	bhi.n	d9eac <__mdiff+0x5a>
   d9ede:	45be      	cmp	lr, r7
   d9ee0:	d20e      	bcs.n	d9f00 <__mdiff+0xae>
   d9ee2:	f85e 1b04 	ldr.w	r1, [lr], #4
   d9ee6:	fa1c f281 	uxtah	r2, ip, r1
   d9eea:	1413      	asrs	r3, r2, #16
   d9eec:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   d9ef0:	b292      	uxth	r2, r2
   d9ef2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   d9ef6:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d9efa:	f845 2b04 	str.w	r2, [r5], #4
   d9efe:	e7ee      	b.n	d9ede <__mdiff+0x8c>
   d9f00:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   d9f04:	b90b      	cbnz	r3, d9f0a <__mdiff+0xb8>
   d9f06:	3e01      	subs	r6, #1
   d9f08:	e7fa      	b.n	d9f00 <__mdiff+0xae>
   d9f0a:	6106      	str	r6, [r0, #16]
   d9f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9f10 <__ulp>:
   d9f10:	4b12      	ldr	r3, [pc, #72]	; (d9f5c <__ulp+0x4c>)
   d9f12:	ee10 2a90 	vmov	r2, s1
   d9f16:	401a      	ands	r2, r3
   d9f18:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   d9f1c:	2b00      	cmp	r3, #0
   d9f1e:	dd02      	ble.n	d9f26 <__ulp+0x16>
   d9f20:	2000      	movs	r0, #0
   d9f22:	4619      	mov	r1, r3
   d9f24:	e017      	b.n	d9f56 <__ulp+0x46>
   d9f26:	425b      	negs	r3, r3
   d9f28:	151b      	asrs	r3, r3, #20
   d9f2a:	2b13      	cmp	r3, #19
   d9f2c:	f04f 0000 	mov.w	r0, #0
   d9f30:	f04f 0100 	mov.w	r1, #0
   d9f34:	dc04      	bgt.n	d9f40 <__ulp+0x30>
   d9f36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   d9f3a:	fa42 f103 	asr.w	r1, r2, r3
   d9f3e:	e00a      	b.n	d9f56 <__ulp+0x46>
   d9f40:	3b14      	subs	r3, #20
   d9f42:	2b1e      	cmp	r3, #30
   d9f44:	f04f 0201 	mov.w	r2, #1
   d9f48:	bfda      	itte	le
   d9f4a:	f1c3 031f 	rsble	r3, r3, #31
   d9f4e:	fa02 f303 	lslle.w	r3, r2, r3
   d9f52:	4613      	movgt	r3, r2
   d9f54:	4618      	mov	r0, r3
   d9f56:	ec41 0b10 	vmov	d0, r0, r1
   d9f5a:	4770      	bx	lr
   d9f5c:	7ff00000 	.word	0x7ff00000

000d9f60 <__b2d>:
   d9f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9f62:	6905      	ldr	r5, [r0, #16]
   d9f64:	f100 0614 	add.w	r6, r0, #20
   d9f68:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   d9f6c:	1f2f      	subs	r7, r5, #4
   d9f6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d9f72:	4620      	mov	r0, r4
   d9f74:	f7ff fdca 	bl	d9b0c <__hi0bits>
   d9f78:	f1c0 0320 	rsb	r3, r0, #32
   d9f7c:	280a      	cmp	r0, #10
   d9f7e:	600b      	str	r3, [r1, #0]
   d9f80:	dc14      	bgt.n	d9fac <__b2d+0x4c>
   d9f82:	f1c0 0e0b 	rsb	lr, r0, #11
   d9f86:	fa24 f10e 	lsr.w	r1, r4, lr
   d9f8a:	42be      	cmp	r6, r7
   d9f8c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   d9f90:	bf34      	ite	cc
   d9f92:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9f96:	2100      	movcs	r1, #0
   d9f98:	3015      	adds	r0, #21
   d9f9a:	fa04 f000 	lsl.w	r0, r4, r0
   d9f9e:	fa21 f10e 	lsr.w	r1, r1, lr
   d9fa2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d9fa6:	ea40 0201 	orr.w	r2, r0, r1
   d9faa:	e023      	b.n	d9ff4 <__b2d+0x94>
   d9fac:	42be      	cmp	r6, r7
   d9fae:	bf3a      	itte	cc
   d9fb0:	f1a5 0708 	subcc.w	r7, r5, #8
   d9fb4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9fb8:	2100      	movcs	r1, #0
   d9fba:	380b      	subs	r0, #11
   d9fbc:	d015      	beq.n	d9fea <__b2d+0x8a>
   d9fbe:	4084      	lsls	r4, r0
   d9fc0:	f1c0 0520 	rsb	r5, r0, #32
   d9fc4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   d9fc8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   d9fcc:	42b7      	cmp	r7, r6
   d9fce:	fa21 fe05 	lsr.w	lr, r1, r5
   d9fd2:	ea44 030e 	orr.w	r3, r4, lr
   d9fd6:	bf8c      	ite	hi
   d9fd8:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   d9fdc:	2400      	movls	r4, #0
   d9fde:	fa01 f000 	lsl.w	r0, r1, r0
   d9fe2:	40ec      	lsrs	r4, r5
   d9fe4:	ea40 0204 	orr.w	r2, r0, r4
   d9fe8:	e004      	b.n	d9ff4 <__b2d+0x94>
   d9fea:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   d9fee:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d9ff2:	460a      	mov	r2, r1
   d9ff4:	ec43 2b10 	vmov	d0, r2, r3
   d9ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9ffa <__d2b>:
   d9ffa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9ffe:	460e      	mov	r6, r1
   da000:	2101      	movs	r1, #1
   da002:	ec59 8b10 	vmov	r8, r9, d0
   da006:	4615      	mov	r5, r2
   da008:	f7ff fcbb 	bl	d9982 <_Balloc>
   da00c:	f3c9 540a 	ubfx	r4, r9, #20, #11
   da010:	4607      	mov	r7, r0
   da012:	f3c9 0313 	ubfx	r3, r9, #0, #20
   da016:	b10c      	cbz	r4, da01c <__d2b+0x22>
   da018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da01c:	9301      	str	r3, [sp, #4]
   da01e:	f1b8 0f00 	cmp.w	r8, #0
   da022:	d019      	beq.n	da058 <__d2b+0x5e>
   da024:	a802      	add	r0, sp, #8
   da026:	f840 8d08 	str.w	r8, [r0, #-8]!
   da02a:	f7ff fd8f 	bl	d9b4c <__lo0bits>
   da02e:	9b00      	ldr	r3, [sp, #0]
   da030:	b148      	cbz	r0, da046 <__d2b+0x4c>
   da032:	9a01      	ldr	r2, [sp, #4]
   da034:	f1c0 0120 	rsb	r1, r0, #32
   da038:	fa02 f101 	lsl.w	r1, r2, r1
   da03c:	430b      	orrs	r3, r1
   da03e:	40c2      	lsrs	r2, r0
   da040:	617b      	str	r3, [r7, #20]
   da042:	9201      	str	r2, [sp, #4]
   da044:	e000      	b.n	da048 <__d2b+0x4e>
   da046:	617b      	str	r3, [r7, #20]
   da048:	9b01      	ldr	r3, [sp, #4]
   da04a:	61bb      	str	r3, [r7, #24]
   da04c:	2b00      	cmp	r3, #0
   da04e:	bf14      	ite	ne
   da050:	2102      	movne	r1, #2
   da052:	2101      	moveq	r1, #1
   da054:	6139      	str	r1, [r7, #16]
   da056:	e007      	b.n	da068 <__d2b+0x6e>
   da058:	a801      	add	r0, sp, #4
   da05a:	f7ff fd77 	bl	d9b4c <__lo0bits>
   da05e:	9b01      	ldr	r3, [sp, #4]
   da060:	617b      	str	r3, [r7, #20]
   da062:	2101      	movs	r1, #1
   da064:	6139      	str	r1, [r7, #16]
   da066:	3020      	adds	r0, #32
   da068:	b134      	cbz	r4, da078 <__d2b+0x7e>
   da06a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   da06e:	4404      	add	r4, r0
   da070:	6034      	str	r4, [r6, #0]
   da072:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   da076:	e009      	b.n	da08c <__d2b+0x92>
   da078:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   da07c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   da080:	6030      	str	r0, [r6, #0]
   da082:	6918      	ldr	r0, [r3, #16]
   da084:	f7ff fd42 	bl	d9b0c <__hi0bits>
   da088:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   da08c:	6028      	str	r0, [r5, #0]
   da08e:	4638      	mov	r0, r7
   da090:	b003      	add	sp, #12
   da092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000da096 <__ratio>:
   da096:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da09a:	4688      	mov	r8, r1
   da09c:	4669      	mov	r1, sp
   da09e:	4681      	mov	r9, r0
   da0a0:	f7ff ff5e 	bl	d9f60 <__b2d>
   da0a4:	a901      	add	r1, sp, #4
   da0a6:	4640      	mov	r0, r8
   da0a8:	ec55 4b10 	vmov	r4, r5, d0
   da0ac:	f7ff ff58 	bl	d9f60 <__b2d>
   da0b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   da0b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
   da0b8:	1a9a      	subs	r2, r3, r2
   da0ba:	e89d 000a 	ldmia.w	sp, {r1, r3}
   da0be:	1ac9      	subs	r1, r1, r3
   da0c0:	ec57 6b10 	vmov	r6, r7, d0
   da0c4:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   da0c8:	2b00      	cmp	r3, #0
   da0ca:	bfcc      	ite	gt
   da0cc:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   da0d0:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   da0d4:	4632      	mov	r2, r6
   da0d6:	463b      	mov	r3, r7
   da0d8:	4620      	mov	r0, r4
   da0da:	4629      	mov	r1, r5
   da0dc:	f7fe f82c 	bl	d8138 <__aeabi_ddiv>
   da0e0:	ec41 0b10 	vmov	d0, r0, r1
   da0e4:	b003      	add	sp, #12
   da0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000da0ea <__copybits>:
   da0ea:	3901      	subs	r1, #1
   da0ec:	b510      	push	{r4, lr}
   da0ee:	1149      	asrs	r1, r1, #5
   da0f0:	6914      	ldr	r4, [r2, #16]
   da0f2:	3101      	adds	r1, #1
   da0f4:	f102 0314 	add.w	r3, r2, #20
   da0f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   da0fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   da100:	42a3      	cmp	r3, r4
   da102:	4602      	mov	r2, r0
   da104:	d204      	bcs.n	da110 <__copybits+0x26>
   da106:	f853 2b04 	ldr.w	r2, [r3], #4
   da10a:	f840 2b04 	str.w	r2, [r0], #4
   da10e:	e7f7      	b.n	da100 <__copybits+0x16>
   da110:	2300      	movs	r3, #0
   da112:	428a      	cmp	r2, r1
   da114:	d202      	bcs.n	da11c <__copybits+0x32>
   da116:	f842 3b04 	str.w	r3, [r2], #4
   da11a:	e7fa      	b.n	da112 <__copybits+0x28>
   da11c:	bd10      	pop	{r4, pc}

000da11e <__any_on>:
   da11e:	f100 0214 	add.w	r2, r0, #20
   da122:	6900      	ldr	r0, [r0, #16]
   da124:	114b      	asrs	r3, r1, #5
   da126:	4298      	cmp	r0, r3
   da128:	b510      	push	{r4, lr}
   da12a:	db0c      	blt.n	da146 <__any_on+0x28>
   da12c:	dd0c      	ble.n	da148 <__any_on+0x2a>
   da12e:	f011 011f 	ands.w	r1, r1, #31
   da132:	d009      	beq.n	da148 <__any_on+0x2a>
   da134:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   da138:	fa24 f001 	lsr.w	r0, r4, r1
   da13c:	fa00 f101 	lsl.w	r1, r0, r1
   da140:	428c      	cmp	r4, r1
   da142:	d10c      	bne.n	da15e <__any_on+0x40>
   da144:	e000      	b.n	da148 <__any_on+0x2a>
   da146:	4603      	mov	r3, r0
   da148:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   da14c:	4293      	cmp	r3, r2
   da14e:	d904      	bls.n	da15a <__any_on+0x3c>
   da150:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   da154:	2900      	cmp	r1, #0
   da156:	d0f9      	beq.n	da14c <__any_on+0x2e>
   da158:	e001      	b.n	da15e <__any_on+0x40>
   da15a:	2000      	movs	r0, #0
   da15c:	bd10      	pop	{r4, pc}
   da15e:	2001      	movs	r0, #1
   da160:	bd10      	pop	{r4, pc}

000da162 <_calloc_r>:
   da162:	b538      	push	{r3, r4, r5, lr}
   da164:	fb02 f401 	mul.w	r4, r2, r1
   da168:	4621      	mov	r1, r4
   da16a:	f7fc f8f9 	bl	d6360 <_malloc_r>
   da16e:	4605      	mov	r5, r0
   da170:	b118      	cbz	r0, da17a <_calloc_r+0x18>
   da172:	4622      	mov	r2, r4
   da174:	2100      	movs	r1, #0
   da176:	f7fe fa37 	bl	d85e8 <memset>
   da17a:	4628      	mov	r0, r5
   da17c:	bd38      	pop	{r3, r4, r5, pc}

000da17e <link_code_end>:
	...

000da180 <dynalib_user>:
   da180:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   da190:	0000 0000 6f43 6e6e 6365 6974 676e 7420     ....Connecting t
   da1a0:	206f 514d 5454 2e2e 202e 5200 7465 7972     o MQTT... .Retry
   da1b0:	6e69 2067 514d 5454 6320 6e6f 656e 7463     ing MQTT connect
   da1c0:	6f69 206e 6e69 3520 7320 6365 6e6f 7364     ion in 5 seconds
   da1d0:	2e2e 002e 514d 5454 4320 6e6f 656e 7463     ....MQTT Connect
   da1e0:	6465 0021 6950 676e 6e69 2067 514d 5454     ed!.Pinging MQTT
   da1f0:	0a20 4400 7369 6f63 6e6e 6365 6974 676e      ..Disconnecting
   da200:	0a20 6e00 6369 736b 796b 6968 6867 6900      ..nickskyhigh.i
   da210:	2e6f 6461 6661 7572 7469 632e 6d6f 6100     o.adafruit.com.a
   da220:	6f69 6e5f 5664 394d 4733 5379 7974 5346     io_ndVM93GyStyFS
   da230:	584e 6c4b 5249 716b 7946 4145 4d51 007a     NXKlIRkqFyEAQMz.
   da240:	696e 6b63 6b73 6879 6769 2f68 6566 6465     nickskyhigh/feed
   da250:	2f73 6361 6974 6176 6574 6e00 6369 736b     s/activate.nicks
   da260:	796b 6968 6867 662f 6565 7364 742f 7275     kyhigh/feeds/tur
   da270:	6f6e 006e 696e 6b63 6b73 6879 6769 2f68     non.nickskyhigh/
   da280:	6566 6465 2f73 6e69 6973 6564 6574 706d     feeds/insidetemp
   da290:	0000 0000                                   ....

000da294 <_ZTVN8particle13__SPISettingsE>:
	...
   da29c:	4465 000d 6564 6166 6c75 2074 4d00 4253     eD..default .MSB
   da2ac:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   da2bc:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   da2cc:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   da2dc:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000da2e8 <_ZTV18DHTSensorTypeDHT22>:
	...
   da2f0:	4be1 000d 4be5 000d 4b51 000d 4ba9 000d     .K...K..QK...K..
   da300:	4844 3154 0031 4844 3254 0032 726e 7866     DHT11.DHT22.nrfx
   da310:	695f 7332 695f 696e 2074 7265 6f72 3d72     _i2s_init error=
   da320:	6c25 0075 726e 7866 695f 7332 735f 6174     %lu.nrfx_i2s_sta
   da330:	7472 6520 7272 726f 253d 756c 6200 6461     rt error=%lu.bad
   da340:	6320 6568 6b63 7573 006d 6170 7269 3d73      checksum.pairs=
   da350:	6425 6520 7078 6365 6574 2064 3034 7200     %d expected 40.r
   da360:	7465 7972 6e69 0067                         etrying.

000da368 <_ZTV18DHTSensorTypeDHT11>:
	...
   da370:	4be3 000d 4bf3 000d 4b2f 000d 4b3d 000d     .K...K../K..=K..

000da380 <_ZTV16Adafruit_SSD1306>:
	...
   da388:	40cd 000d 437d 000d 5681 000d 675d 000d     .@..}C...V..]g..
   da398:	4f7d 000d 5381 000d 4e05 000d 4c91 000d     }O...S...N...L..
   da3a8:	5441 000d 54d7 000d 550f 000d 552b 000d     AT...T...U..+U..

000da3b8 <_ZTV12Adafruit_GFX>:
	...
   da3c8:	5681 000d 675d 000d 40a9 000d 5381 000d     .V..]g...@...S..
   da3d8:	54a1 000d 54bd 000d 5441 000d 54d7 000d     .T...T..AT...T..
   da3e8:	550f 000d 552b 000d                         .U..+U..

000da3f0 <_ZL4font>:
   da3f0:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   da400:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   da410:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   da420:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   da430:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   da440:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   da450:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   da460:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   da470:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   da480:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   da490:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   da4a0:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   da4b0:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   da4c0:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   da4d0:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   da4e0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   da4f0:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   da500:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   da510:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   da520:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   da530:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   da540:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   da550:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   da560:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   da570:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   da580:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   da590:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   da5a0:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   da5b0:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   da5c0:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   da5d0:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   da5e0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   da5f0:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   da600:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   da610:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   da620:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   da630:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   da640:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   da650:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   da660:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   da670:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   da680:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   da690:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   da6a0:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   da6b0:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   da6c0:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   da6d0:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   da6e0:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   da6f0:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   da700:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   da710:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   da720:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   da730:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   da740:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   da750:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   da760:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   da770:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   da780:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   da790:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   da7a0:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   da7b0:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   da7c0:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   da7d0:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   da7e0:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   da7f0:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   da800:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   da810:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   da820:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   da830:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   da840:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   da850:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   da860:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   da870:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   da880:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   da890:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   da8a0:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   da8b0:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   da8c0:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   da8d0:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   da8e0:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000da8ec <_ZTV19Adafruit_MQTT_SPARK>:
	...
   da8f4:	40cf 000d 438b 000d 570b 000d 57b7 000d     .@...C...W...W..
   da904:	57e9 000d 571f 000d 575f 000d               .W...W.._W..

000da910 <_ZTV13Adafruit_MQTT>:
	...
   da920:	40a9 000d 40a9 000d 40a9 000d 40a9 000d     .@...@...@...@..
   da930:	40a9 000d                                   .@..

000da934 <CSWTCH.52>:
   da934:	a995 000d a9a9 000d a979 000d a9bb 000d     ........y.......
   da944:	aa00 000d aa45 000d aa65 000d aa98 000d     ....E...e.......
   da954:	aab2 000d aae9 000d 5b20 7830 5d00 202c     ........ [0x.], 
   da964:	0a00 0009 7244 706f 6570 2064 2061 6170     ....Dropped a pa
   da974:	6b63 7465 5500 6b6e 6f6e 6e77 6520 7272     cket.Unknown err
   da984:	726f 4d00 5451 0054 2525 6425 252e 6664     or.MQTT.%%%d.%df
   da994:	4600 6961 656c 2064 6f74 7320 6275 6373     .Failed to subsc
   da9a4:	6972 6562 4300 6e6f 656e 7463 6f69 206e     ribe.Connection 
   da9b4:	6166 6c69 6465 5400 6568 5320 7265 6576     failed.The Serve
   da9c4:	2072 6f64 7365 6e20 746f 7320 7075 6f70     r does not suppo
   da9d4:	7472 7420 6568 6c20 7665 6c65 6f20 2066     rt the level of 
   da9e4:	6874 2065 514d 5454 7020 6f72 6f74 6f63     the MQTT protoco
   da9f4:	206c 6572 7571 7365 6574 0064 6854 2065     l requested.The 
   daa04:	6c43 6569 746e 6920 6564 746e 6669 6569     Client identifie
   daa14:	2072 7369 6320 726f 6572 7463 5520 4654     r is correct UTF
   daa24:	382d 6220 7475 6e20 746f 6120 6c6c 776f     -8 but not allow
   daa34:	6465 6220 2079 6874 2065 6553 7672 7265     ed by the Server
   daa44:	5400 6568 4d20 5451 2054 6573 7672 6369     .The MQTT servic
   daa54:	2065 7369 7520 616e 6176 6c69 6261 656c     e is unavailable
   daa64:	5400 6568 6420 7461 2061 6e69 7420 6568     .The data in the
   daa74:	7520 6573 2072 616e 656d 6f20 2072 6170      user name or pa
   daa84:	7373 6f77 6472 6920 2073 616d 666c 726f     ssword is malfor
   daa94:	656d 0064 6f4e 2074 7561 6874 726f 7a69     med.Not authoriz
   daaa4:	6465 7420 206f 6f63 6e6e 6365 0074 7845     ed to connect.Ex
   daab4:	6563 6465 6465 7220 6365 6e6f 656e 7463     ceeded reconnect
   daac4:	7220 7461 2065 696c 696d 2e74 5020 656c      rate limit. Ple
   daad4:	7361 2065 7274 2079 6761 6961 206e 616c     ase try again la
   daae4:	6574 2e72 5900 756f 6820 7661 2065 6562     ter..You have be
   daaf4:	6e65 6220 6e61 656e 2064 7266 6d6f 6320     en banned from c
   dab04:	6e6f 656e 7463 6e69 2e67 5020 656c 7361     onnecting. Pleas
   dab14:	2065 6f63 746e 6361 2074 6874 2065 514d     e contact the MQ
   dab24:	5454 7320 7265 6576 2072 6461 696d 696e     TT server admini
   dab34:	7473 6172 6f74 2072 6f66 2072 6f6d 6572     strator for more
   dab44:	6420 7465 6961 736c 002e 0000                details....

000dab50 <_ZTVN5spark13EthernetClassE>:
	...
   dab58:	63df 000d 63d5 000d 63cb 000d 63c1 000d     .c...c...c...c..
   dab68:	63b5 000d 63a9 000d 639d 000d 6395 000d     .c...c...c...c..
   dab78:	638b 000d 6381 000d 7615 000d               .c...c...v..

000dab84 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dab84:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   dab94:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   daba4:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   dabb4:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   dabc4:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   dabd4:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   dabe4:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   dabf4:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   dac04:	3130 7530 0020 205d 2800 3a29 0020 5b20     010u .] .(): . [
   dac14:	6300 646f 2065 203d 2500 0069 6564 6174     .code = .%i.deta
   dac24:	6c69 2073 203d 0d00 000a 6e6c 6600 006e     ils = ....ln.fn.
   dac34:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   dac44:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   dac54:	7000 6e61 6369 6100 6c6c 5a00 2500 302b     .panic.all.Z.%+0
   dac64:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
   dac74:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   dac84:	6d69 0065                                   ime.

000dac88 <_ZTV9IPAddress>:
	...
   dac90:	6a0d 000d 69fd 000d 69ff 000d               .j...i...i..

000dac9c <_ZTV9USBSerial>:
	...
   daca4:	6b11 000d 6b61 000d 6b6f 000d 675d 000d     .k..ak..ok..]g..
   dacb4:	6b4d 000d 6b13 000d 6b29 000d 6b5b 000d     Mk...k..)k..[k..
   dacc4:	6b3f 000d 6b0d 000d                         ?k...k..

000daccc <_ZTV11USARTSerial>:
	...
   dacd4:	6c15 000d 6c65 000d 6c73 000d 675d 000d     .l..el..sl..]g..
   dace4:	6c29 000d 6c4b 000d 6c37 000d 6c5f 000d     )l..Kl..7l.._l..
   dacf4:	6c17 000d 6c1b 000d                         .l...l..

000dacfc <_ZTV7TwoWire>:
	...
   dad04:	6d19 000d 6d63 000d 6d3b 000d 6d1b 000d     .m..cm..;m...m..
   dad14:	6d43 000d 6d4b 000d 6d53 000d 6d5b 000d     Cm..Km..Sm..[m..

000dad24 <_ZTVN5spark9MeshClassE>:
	...
   dad2c:	6e85 000d 6e7b 000d 6e71 000d 6e67 000d     .n..{n..qn..gn..
   dad3c:	6e5b 000d 6e4f 000d 6e43 000d 6e3b 000d     [n..On..Cn..;n..
   dad4c:	6e31 000d 6e27 000d 7615 000d               1n..'n...v..

000dad58 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dad60:	7029 000d 702f 000d 7517 000d 703d 000d     )p../p...u..=p..
   dad70:	702b 000d                                   +p..

000dad74 <_ZTV9TCPClient>:
	...
   dad7c:	40d1 000d 4105 000d 6fa1 000d 6fbb 000d     .@...A...o...o..
   dad8c:	73bd 000d 710f 000d 70e1 000d 6fe5 000d     .s...q...p...o..
   dad9c:	7299 000d 7195 000d 7143 000d 738d 000d     .r...q..Cq...s..
   dadac:	6fe7 000d 701f 000d 6fcd 000d 7041 000d     .o...p...o..Ap..
   dadbc:	70c1 000d 6977 6972 676e 7200 6365 2076     .p..wiring.recv 
   dadcc:	7265 6f72 2072 203d 6425 0000               error = %d..

000dadd8 <_ZTVN5spark9WiFiClassE>:
	...
   dade0:	758d 000d 7583 000d 7579 000d 752f 000d     .u...u..yu../u..
   dadf0:	756d 000d 7561 000d 7555 000d 754d 000d     mu..au..Uu..Mu..
   dae00:	7543 000d 7539 000d 7615 000d               Cu..9u...v..

000dae0c <_ZTVN5spark12NetworkClassE>:
	...
   dae14:	75ad 000d 75b7 000d 75c1 000d 75cb 000d     .u...u...u...u..
   dae24:	75d5 000d 75e1 000d 75ed 000d 75f9 000d     .u...u...u...u..
   dae34:	7601 000d 760b 000d 7615 000d               .v...v...v..

000dae40 <_ZSt7nothrow>:
	...

000dae41 <_ctype_>:
   dae41:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dae51:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dae61:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dae71:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dae81:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dae91:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   daea1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   daeb1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   daec1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000daf44 <__sf_fake_stdin>:
	...

000daf64 <__sf_fake_stdout>:
	...

000daf84 <__sf_fake_stderr>:
	...
   dafa4:	0043 4f50 4953 0058                         C.POSIX.

000dafac <fpi.5344>:
   dafac:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dafbc:	0000 0000                                   ....

000dafc0 <fpinan.5380>:
   dafc0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dafd0:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

000dafe0 <tinytens>:
   dafe0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   daff0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   db000:	6f43 64ac 0628 1168                         Co.d(.h.

000db008 <__mprec_tens>:
   db008:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   db018:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   db028:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   db038:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   db048:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   db058:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   db068:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   db078:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   db088:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   db098:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   db0a8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   db0b8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   db0c8:	9db4 79d9 7843 44ea                         ...yCx.D

000db0d0 <__mprec_bigtens>:
   db0d0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   db0e0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   db0f0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000db0f8 <p05.5387>:
   db0f8:	0005 0000 0019 0000 007d 0000               ........}...

000db104 <link_const_variable_data_end>:
   db104:	000d4399 	.word	0x000d4399
   db108:	000d4b2b 	.word	0x000d4b2b
   db10c:	000d4c4d 	.word	0x000d4c4d
   db110:	000d537d 	.word	0x000d537d
   db114:	000d5707 	.word	0x000d5707
   db118:	000d5849 	.word	0x000d5849
   db11c:	000d5e3f 	.word	0x000d5e3f
   db120:	000d5e43 	.word	0x000d5e43
   db124:	000d63e9 	.word	0x000d63e9
   db128:	000d6671 	.word	0x000d6671
   db12c:	000d6735 	.word	0x000d6735
   db130:	000d6899 	.word	0x000d6899
   db134:	000d68a9 	.word	0x000d68a9
   db138:	000d68d1 	.word	0x000d68d1
   db13c:	000d6f51 	.word	0x000d6f51
   db140:	000d7599 	.word	0x000d7599
   db144:	000d76e1 	.word	0x000d76e1
   db148:	000d78e5 	.word	0x000d78e5
   db14c:	000d7969 	.word	0x000d7969
   db150:	000d7a2d 	.word	0x000d7a2d
   db154:	000d7af1 	.word	0x000d7af1

000db158 <link_constructors_end>:
	...
