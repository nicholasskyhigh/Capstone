
c:/Users/Nick/Desktop/Iot/Capstone/Elkins_capstone/target/1.5.2/argon/Elkins_capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004c70  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8c90  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000484  2003dd5c  000d8c94  0001dd5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000610  2003e1e0  2003e1e0  0002e1e0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9118  000d9118  00029118  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9140  000d9140  00029140  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00104198  00000000  00000000  00029144  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015806  00000000  00000000  0012d2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002297e  00000000  00000000  00142ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c90  00000000  00000000  00165460  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005068  00000000  00000000  001680f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003e465  00000000  00000000  0016d158  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00036d9a  00000000  00000000  001ab5bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010c370  00000000  00000000  001e2357  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e0cc  00000000  00000000  002ee6c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 ff17 	bl	d7e64 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 ff1c 	bl	d7e7a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dd5c 	.word	0x2003dd5c
   d404c:	000d8c94 	.word	0x000d8c94
   d4050:	2003e1e0 	.word	0x2003e1e0
   d4054:	2003e1e0 	.word	0x2003e1e0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 f9f1 	bl	d6444 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d8c8c 	.word	0x000d8c8c
   d4084:	000d8c38 	.word	0x000d8c38

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b89a 	b.w	d41c0 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f8e3 	bl	d4258 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 b997 	b.w	d63c8 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bee1 	b.w	d5e60 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bee7 	b.w	d5e70 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bee5 	b.w	d5e70 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f001 fe4a 	bl	d5d48 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d5ab9 	.word	0x000d5ab9

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40cc:	4770      	bx	lr

000d40ce <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40ce:	4770      	bx	lr

000d40d0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40d0:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40d2:	6984      	ldr	r4, [r0, #24]
   d40d4:	4b0a      	ldr	r3, [pc, #40]	; (d4100 <_ZN9TCPClientD1Ev+0x30>)
   d40d6:	6003      	str	r3, [r0, #0]
   d40d8:	4605      	mov	r5, r0
   d40da:	b17c      	cbz	r4, d40fc <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40dc:	6863      	ldr	r3, [r4, #4]
   d40de:	3b01      	subs	r3, #1
   d40e0:	6063      	str	r3, [r4, #4]
   d40e2:	b95b      	cbnz	r3, d40fc <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d40e4:	6823      	ldr	r3, [r4, #0]
   d40e6:	4620      	mov	r0, r4
   d40e8:	689b      	ldr	r3, [r3, #8]
   d40ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40ec:	68a3      	ldr	r3, [r4, #8]
   d40ee:	3b01      	subs	r3, #1
   d40f0:	60a3      	str	r3, [r4, #8]
   d40f2:	b91b      	cbnz	r3, d40fc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40f4:	6823      	ldr	r3, [r4, #0]
   d40f6:	4620      	mov	r0, r4
   d40f8:	68db      	ldr	r3, [r3, #12]
   d40fa:	4798      	blx	r3
   d40fc:	4628      	mov	r0, r5
   d40fe:	bd38      	pop	{r3, r4, r5, pc}
   d4100:	000d8b0c 	.word	0x000d8b0c

000d4104 <_ZN9TCPClientD0Ev>:
   d4104:	b510      	push	{r4, lr}
   d4106:	4604      	mov	r4, r0
   d4108:	f7ff ffe2 	bl	d40d0 <_ZN9TCPClientD1Ev>
   d410c:	4620      	mov	r0, r4
   d410e:	211c      	movs	r1, #28
   d4110:	f003 f924 	bl	d735c <_ZdlPvj>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <_Z5beginv>:

void climateread() {

}

void begin() {
   d4118:	b510      	push	{r4, lr}
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d411a:	4c0b      	ldr	r4, [pc, #44]	; (d4148 <_Z5beginv+0x30>)
   d411c:	223c      	movs	r2, #60	; 0x3c
   d411e:	4620      	mov	r0, r4
   d4120:	2102      	movs	r1, #2
   d4122:	f000 fecf 	bl	d4ec4 <_ZN16Adafruit_SSD13065beginEhh>
  display.setTextColor(WHITE);
   d4126:	2101      	movs	r1, #1
   d4128:	4620      	mov	r0, r4
   d412a:	f001 f9d2 	bl	d54d2 <_ZN12Adafruit_GFX12setTextColorEt>
  bme.begin();
   d412e:	4807      	ldr	r0, [pc, #28]	; (d414c <_Z5beginv+0x34>)
   d4130:	f000 fbdc 	bl	d48ec <_ZN15Adafruit_BME2805beginEv>
  display.display();
   d4134:	4620      	mov	r0, r4
   d4136:	f000 ff97 	bl	d5068 <_ZN16Adafruit_SSD13067displayEv>
  delay(750);
   d413a:	f240 20ee 	movw	r0, #750	; 0x2ee
}
   d413e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void begin() {
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.setTextColor(WHITE);
  bme.begin();
  display.display();
  delay(750);
   d4142:	f002 b90b 	b.w	d635c <delay>
   d4146:	bf00      	nop
   d4148:	2003e354 	.word	0x2003e354
   d414c:	2003e310 	.word	0x2003e310

000d4150 <_Z12MQTT_connectv>:
}

void MQTT_connect() { //connection to adafruit.io
   d4150:	b538      	push	{r3, r4, r5, lr}
  int8_t ret;
 
 
  if (mqtt.connected()) {
   d4152:	4817      	ldr	r0, [pc, #92]	; (d41b0 <_Z12MQTT_connectv+0x60>)
   d4154:	f001 f9ca 	bl	d54ec <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   d4158:	bb40      	cbnz	r0, d41ac <_Z12MQTT_connectv+0x5c>
    return;
  }
 
  Serial.print("Connecting to MQTT... ");
   d415a:	f002 fa85 	bl	d6668 <_Z16_fetch_usbserialv>
   d415e:	4915      	ldr	r1, [pc, #84]	; (d41b4 <_Z12MQTT_connectv+0x64>)
   d4160:	f002 f872 	bl	d6248 <_ZN5Print5printEPKc>
 
  while ((ret = mqtt.connect()) != 0) { 
   d4164:	4812      	ldr	r0, [pc, #72]	; (d41b0 <_Z12MQTT_connectv+0x60>)
   d4166:	f001 fb9d 	bl	d58a4 <_ZN13Adafruit_MQTT7connectEv>
   d416a:	4604      	mov	r4, r0
   d416c:	b1b8      	cbz	r0, d419e <_Z12MQTT_connectv+0x4e>
       Serial.println(mqtt.connectErrorString(ret));
   d416e:	f002 fa7b 	bl	d6668 <_Z16_fetch_usbserialv>
   d4172:	4621      	mov	r1, r4
   d4174:	4605      	mov	r5, r0
   d4176:	480e      	ldr	r0, [pc, #56]	; (d41b0 <_Z12MQTT_connectv+0x60>)
   d4178:	f001 fad0 	bl	d571c <_ZN13Adafruit_MQTT18connectErrorStringEa>
   d417c:	4601      	mov	r1, r0
   d417e:	4628      	mov	r0, r5
   d4180:	f002 f875 	bl	d626e <_ZN5Print7printlnEPKc>
       Serial.println("Retrying MQTT connection in 5 seconds...");
   d4184:	f002 fa70 	bl	d6668 <_Z16_fetch_usbserialv>
   d4188:	490b      	ldr	r1, [pc, #44]	; (d41b8 <_Z12MQTT_connectv+0x68>)
   d418a:	f002 f870 	bl	d626e <_ZN5Print7printlnEPKc>
       mqtt.disconnect();
   d418e:	4808      	ldr	r0, [pc, #32]	; (d41b0 <_Z12MQTT_connectv+0x60>)
   d4190:	f001 fad2 	bl	d5738 <_ZN13Adafruit_MQTT10disconnectEv>
       delay(5000);  
   d4194:	f241 3088 	movw	r0, #5000	; 0x1388
   d4198:	f002 f8e0 	bl	d635c <delay>
   d419c:	e7e2      	b.n	d4164 <_Z12MQTT_connectv+0x14>
  }
  Serial.println("MQTT Connected!");
   d419e:	f002 fa63 	bl	d6668 <_Z16_fetch_usbserialv>
   d41a2:	4906      	ldr	r1, [pc, #24]	; (d41bc <_Z12MQTT_connectv+0x6c>)
}
   d41a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  
  }
  Serial.println("MQTT Connected!");
   d41a8:	f002 b861 	b.w	d626e <_ZN5Print7printlnEPKc>
   d41ac:	bd38      	pop	{r3, r4, r5, pc}
   d41ae:	bf00      	nop
   d41b0:	2003e23c 	.word	0x2003e23c
   d41b4:	000d7f38 	.word	0x000d7f38
   d41b8:	000d7f4f 	.word	0x000d7f4f
   d41bc:	000d7f78 	.word	0x000d7f78

000d41c0 <setup>:
int last;
int waterlevel; //Waterlevel sensor input
int relay1 = D2, relay2 = D3, relay3 = D4; //sets up the relays for each tec
int pushbutton = D9;

void setup() {
   d41c0:	b508      	push	{r3, lr}
  pinMode(A0, INPUT);
   d41c2:	2100      	movs	r1, #0
   d41c4:	2013      	movs	r0, #19
   d41c6:	f003 f81b 	bl	d7200 <pinMode>
  pinMode(relay1, OUTPUT);
   d41ca:	4b0a      	ldr	r3, [pc, #40]	; (d41f4 <setup+0x34>)
   d41cc:	2101      	movs	r1, #1
   d41ce:	8818      	ldrh	r0, [r3, #0]
   d41d0:	f003 f816 	bl	d7200 <pinMode>
  pinMode(relay2, OUTPUT);
   d41d4:	4b08      	ldr	r3, [pc, #32]	; (d41f8 <setup+0x38>)
   d41d6:	2101      	movs	r1, #1
   d41d8:	8818      	ldrh	r0, [r3, #0]
   d41da:	f003 f811 	bl	d7200 <pinMode>
  pinMode(relay3, OUTPUT);
   d41de:	4b07      	ldr	r3, [pc, #28]	; (d41fc <setup+0x3c>)
   d41e0:	2101      	movs	r1, #1
   d41e2:	8818      	ldrh	r0, [r3, #0]
   d41e4:	f003 f80c 	bl	d7200 <pinMode>
  MQTT_connect();
   d41e8:	f7ff ffb2 	bl	d4150 <_Z12MQTT_connectv>
  begin();


}
   d41ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(A0, INPUT);
  pinMode(relay1, OUTPUT);
  pinMode(relay2, OUTPUT);
  pinMode(relay3, OUTPUT);
  MQTT_connect();
  begin();
   d41f0:	f7ff bf92 	b.w	d4118 <_Z5beginv>
   d41f4:	2003dd5c 	.word	0x2003dd5c
   d41f8:	2003dd60 	.word	0x2003dd60
   d41fc:	2003dd64 	.word	0x2003dd64

000d4200 <_Z4pingv>:
       delay(5000);  
  }
  Serial.println("MQTT Connected!");
}

void ping() {  //pings adafruit.io to make sure  connection is active
   d4200:	b538      	push	{r3, r4, r5, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4202:	f001 fc61 	bl	d5ac8 <HAL_Timer_Get_Milli_Seconds>
   if ((millis()-last)>30000) {
   d4206:	4b10      	ldr	r3, [pc, #64]	; (d4248 <_Z4pingv+0x48>)
   d4208:	681a      	ldr	r2, [r3, #0]
   d420a:	1a80      	subs	r0, r0, r2
   d420c:	f247 5230 	movw	r2, #30000	; 0x7530
   d4210:	4290      	cmp	r0, r2
   d4212:	461c      	mov	r4, r3
   d4214:	d917      	bls.n	d4246 <_Z4pingv+0x46>
      Serial.printf("Pinging MQTT \n");
   d4216:	f002 fa27 	bl	d6668 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d421a:	4a0c      	ldr	r2, [pc, #48]	; (d424c <_Z4pingv+0x4c>)
   d421c:	2100      	movs	r1, #0
   d421e:	f002 f850 	bl	d62c2 <_ZN5Print11printf_implEbPKcz>
      
      if(! mqtt.ping()) {
   d4222:	2101      	movs	r1, #1
   d4224:	480a      	ldr	r0, [pc, #40]	; (d4250 <_Z4pingv+0x50>)
   d4226:	f001 fa9b 	bl	d5760 <_ZN13Adafruit_MQTT4pingEh>
   d422a:	4605      	mov	r5, r0
   d422c:	b940      	cbnz	r0, d4240 <_Z4pingv+0x40>
        Serial.printf("Disconnecting \n");
   d422e:	f002 fa1b 	bl	d6668 <_Z16_fetch_usbserialv>
   d4232:	4a08      	ldr	r2, [pc, #32]	; (d4254 <_Z4pingv+0x54>)
   d4234:	4629      	mov	r1, r5
   d4236:	f002 f844 	bl	d62c2 <_ZN5Print11printf_implEbPKcz>
        mqtt.disconnect();
   d423a:	4805      	ldr	r0, [pc, #20]	; (d4250 <_Z4pingv+0x50>)
   d423c:	f001 fa7c 	bl	d5738 <_ZN13Adafruit_MQTT10disconnectEv>
   d4240:	f001 fc42 	bl	d5ac8 <HAL_Timer_Get_Milli_Seconds>
      }
      last = millis();
   d4244:	6020      	str	r0, [r4, #0]
   d4246:	bd38      	pop	{r3, r4, r5, pc}
   d4248:	2003e238 	.word	0x2003e238
   d424c:	000d7f88 	.word	0x000d7f88
   d4250:	2003e23c 	.word	0x2003e23c
   d4254:	000d7f97 	.word	0x000d7f97

000d4258 <loop>:
  begin();


}

void loop() {
   d4258:	b510      	push	{r4, lr}
  digitalWrite(relay1, HIGH);
   d425a:	4b0f      	ldr	r3, [pc, #60]	; (d4298 <loop+0x40>)
  digitalWrite(relay2, HIGH);
  digitalWrite(relay3, HIGH);
  ping();
  display.clearDisplay();
   d425c:	4c0f      	ldr	r4, [pc, #60]	; (d429c <loop+0x44>)


}

void loop() {
  digitalWrite(relay1, HIGH);
   d425e:	8818      	ldrh	r0, [r3, #0]
   d4260:	2101      	movs	r1, #1
   d4262:	f002 ffde 	bl	d7222 <digitalWrite>
  digitalWrite(relay2, HIGH);
   d4266:	4b0e      	ldr	r3, [pc, #56]	; (d42a0 <loop+0x48>)
   d4268:	2101      	movs	r1, #1
   d426a:	8818      	ldrh	r0, [r3, #0]
   d426c:	f002 ffd9 	bl	d7222 <digitalWrite>
  digitalWrite(relay3, HIGH);
   d4270:	4b0c      	ldr	r3, [pc, #48]	; (d42a4 <loop+0x4c>)
   d4272:	2101      	movs	r1, #1
   d4274:	8818      	ldrh	r0, [r3, #0]
   d4276:	f002 ffd4 	bl	d7222 <digitalWrite>
  ping();
   d427a:	f7ff ffc1 	bl	d4200 <_Z4pingv>
  display.clearDisplay();
   d427e:	4620      	mov	r0, r4
   d4280:	f000 fdd0 	bl	d4e24 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.println("hello world");
   d4284:	4620      	mov	r0, r4
   d4286:	4908      	ldr	r1, [pc, #32]	; (d42a8 <loop+0x50>)
   d4288:	f001 fff1 	bl	d626e <_ZN5Print7printlnEPKc>
  display.display();
   d428c:	4620      	mov	r0, r4
  

}
   d428e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(relay2, HIGH);
  digitalWrite(relay3, HIGH);
  ping();
  display.clearDisplay();
  display.println("hello world");
  display.display();
   d4292:	f000 bee9 	b.w	d5068 <_ZN16Adafruit_SSD13067displayEv>
   d4296:	bf00      	nop
   d4298:	2003dd5c 	.word	0x2003dd5c
   d429c:	2003e354 	.word	0x2003e354
   d42a0:	2003dd60 	.word	0x2003dd60
   d42a4:	2003dd64 	.word	0x2003dd64
   d42a8:	000d7fa7 	.word	0x000d7fa7

000d42ac <_ZN16Adafruit_SSD1306D0Ev>:
   d42ac:	b510      	push	{r4, lr}
   d42ae:	2124      	movs	r1, #36	; 0x24
   d42b0:	4604      	mov	r4, r0
   d42b2:	f003 f853 	bl	d735c <_ZdlPvj>
   d42b6:	4620      	mov	r0, r4
   d42b8:	bd10      	pop	{r4, pc}

000d42ba <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d42ba:	b510      	push	{r4, lr}
   d42bc:	21d4      	movs	r1, #212	; 0xd4
   d42be:	4604      	mov	r4, r0
   d42c0:	f003 f84c 	bl	d735c <_ZdlPvj>
   d42c4:	4620      	mov	r0, r4
   d42c6:	bd10      	pop	{r4, pc}

000d42c8 <_GLOBAL__sub_I_display>:
        Serial.printf("Disconnecting \n");
        mqtt.disconnect();
      }
      last = millis();
  }
   d42c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
#include "Apikey.h"


#define BME280_ADDRESS  (0x77)
#define OLED_RESET D4
Adafruit_SSD1306 display(OLED_RESET);
   d42ca:	4c1d      	ldr	r4, [pc, #116]	; (d4340 <_GLOBAL__sub_I_display+0x78>)
   d42cc:	4d1d      	ldr	r5, [pc, #116]	; (d4344 <_GLOBAL__sub_I_display+0x7c>)
#define AIO_SERVER      "io.adafruit.com" 
#define AIO_SERVERPORT  1883 
//this is a github test  


TCPClient TheClient; 
   d42ce:	4e1e      	ldr	r6, [pc, #120]	; (d4348 <_GLOBAL__sub_I_display+0x80>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42d0:	f001 fb62 	bl	d5998 <HAL_Pin_Map>
#include "Apikey.h"


#define BME280_ADDRESS  (0x77)
#define OLED_RESET D4
Adafruit_SSD1306 display(OLED_RESET);
   d42d4:	2104      	movs	r1, #4
   d42d6:	4620      	mov	r0, r4
   d42d8:	f000 fd8e 	bl	d4df8 <_ZN16Adafruit_SSD1306C1Ea>
   d42dc:	462a      	mov	r2, r5
   d42de:	491b      	ldr	r1, [pc, #108]	; (d434c <_GLOBAL__sub_I_display+0x84>)
   d42e0:	4620      	mov	r0, r4
   d42e2:	f003 f82d 	bl	d7340 <__aeabi_atexit>
Adafruit_BME280 bme;
   d42e6:	481a      	ldr	r0, [pc, #104]	; (d4350 <_GLOBAL__sub_I_display+0x88>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d42e8:	4c1a      	ldr	r4, [pc, #104]	; (d4354 <_GLOBAL__sub_I_display+0x8c>)
   d42ea:	f000 f875 	bl	d43d8 <_ZN15Adafruit_BME280C1Ev>
#define AIO_SERVER      "io.adafruit.com" 
#define AIO_SERVERPORT  1883 
//this is a github test  


TCPClient TheClient; 
   d42ee:	4630      	mov	r0, r6
   d42f0:	f002 fe50 	bl	d6f94 <_ZN9TCPClientC1Ev>
   d42f4:	462a      	mov	r2, r5
   d42f6:	4918      	ldr	r1, [pc, #96]	; (d4358 <_GLOBAL__sub_I_display+0x90>)
   d42f8:	4630      	mov	r0, r6
   d42fa:	f003 f821 	bl	d7340 <__aeabi_atexit>
   d42fe:	4b17      	ldr	r3, [pc, #92]	; (d435c <_GLOBAL__sub_I_display+0x94>)
   d4300:	9300      	str	r3, [sp, #0]
   d4302:	f240 725b 	movw	r2, #1883	; 0x75b
   d4306:	4b16      	ldr	r3, [pc, #88]	; (d4360 <_GLOBAL__sub_I_display+0x98>)
   d4308:	4916      	ldr	r1, [pc, #88]	; (d4364 <_GLOBAL__sub_I_display+0x9c>)
   d430a:	4620      	mov	r0, r4
   d430c:	f001 f980 	bl	d5610 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d4310:	4b15      	ldr	r3, [pc, #84]	; (d4368 <_GLOBAL__sub_I_display+0xa0>)
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);
   d4312:	4916      	ldr	r1, [pc, #88]	; (d436c <_GLOBAL__sub_I_display+0xa4>)
   d4314:	6023      	str	r3, [r4, #0]
   d4316:	462a      	mov	r2, r5
   d4318:	4620      	mov	r0, r4
   d431a:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d431e:	f003 f80f 	bl	d7340 <__aeabi_atexit>

Adafruit_MQTT_Subscribe activate = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/activate"); 
   d4322:	4621      	mov	r1, r4
   d4324:	2300      	movs	r3, #0
   d4326:	4a12      	ldr	r2, [pc, #72]	; (d4370 <_GLOBAL__sub_I_display+0xa8>)
   d4328:	4812      	ldr	r0, [pc, #72]	; (d4374 <_GLOBAL__sub_I_display+0xac>)
   d432a:	f001 fb14 	bl	d5956 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Subscribe turnon = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/turnon");
   d432e:	4a12      	ldr	r2, [pc, #72]	; (d4378 <_GLOBAL__sub_I_display+0xb0>)
   d4330:	4812      	ldr	r0, [pc, #72]	; (d437c <_GLOBAL__sub_I_display+0xb4>)
   d4332:	2300      	movs	r3, #0
   d4334:	4621      	mov	r1, r4
        Serial.printf("Disconnecting \n");
        mqtt.disconnect();
      }
      last = millis();
  }
   d4336:	b002      	add	sp, #8
   d4338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

TCPClient TheClient; 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);

Adafruit_MQTT_Subscribe activate = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/activate"); 
Adafruit_MQTT_Subscribe turnon = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/turnon");
   d433c:	f001 bb0b 	b.w	d5956 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
   d4340:	2003e354 	.word	0x2003e354
   d4344:	2003e1e0 	.word	0x2003e1e0
   d4348:	2003e1e4 	.word	0x2003e1e4
   d434c:	000d40cd 	.word	0x000d40cd
   d4350:	2003e310 	.word	0x2003e310
   d4354:	2003e23c 	.word	0x2003e23c
   d4358:	000d40d1 	.word	0x000d40d1
   d435c:	000d7fcf 	.word	0x000d7fcf
   d4360:	000d7fb3 	.word	0x000d7fb3
   d4364:	000d7fbf 	.word	0x000d7fbf
   d4368:	000d8684 	.word	0x000d8684
   d436c:	000d40cf 	.word	0x000d40cf
   d4370:	000d7ff0 	.word	0x000d7ff0
   d4374:	2003e200 	.word	0x2003e200
   d4378:	000d800b 	.word	0x000d800b
   d437c:	2003e378 	.word	0x2003e378

000d4380 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4380:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4382:	4602      	mov	r2, r0
   d4384:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4386:	7913      	ldrb	r3, [r2, #4]
   d4388:	6895      	ldr	r5, [r2, #8]
   d438a:	b133      	cbz	r3, d439a <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d438c:	b93d      	cbnz	r5, d439e <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d438e:	490c      	ldr	r1, [pc, #48]	; (d43c0 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4390:	b004      	add	sp, #16
   d4392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4396:	f001 bf57 	b.w	d6248 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d439a:	4b0a      	ldr	r3, [pc, #40]	; (d43c4 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d439c:	e000      	b.n	d43a0 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d439e:	4b0a      	ldr	r3, [pc, #40]	; (d43c8 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d43a0:	7b16      	ldrb	r6, [r2, #12]
   d43a2:	4c0a      	ldr	r4, [pc, #40]	; (d43cc <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d43a4:	490a      	ldr	r1, [pc, #40]	; (d43d0 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
   d43a6:	7b52      	ldrb	r2, [r2, #13]
   d43a8:	9202      	str	r2, [sp, #8]
   d43aa:	2e01      	cmp	r6, #1
   d43ac:	bf08      	it	eq
   d43ae:	4621      	moveq	r1, r4
   d43b0:	9101      	str	r1, [sp, #4]
   d43b2:	9500      	str	r5, [sp, #0]
   d43b4:	4a07      	ldr	r2, [pc, #28]	; (d43d4 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d43b6:	2100      	movs	r1, #0
   d43b8:	f001 ff83 	bl	d62c2 <_ZN5Print11printf_implEbPKcz>
  }
   d43bc:	b004      	add	sp, #16
   d43be:	bd70      	pop	{r4, r5, r6, pc}
   d43c0:	000d8041 	.word	0x000d8041
   d43c4:	000d86f7 	.word	0x000d86f7
   d43c8:	000d8030 	.word	0x000d8030
   d43cc:	000d8039 	.word	0x000d8039
   d43d0:	000d803d 	.word	0x000d803d
   d43d4:	000d8057 	.word	0x000d8057

000d43d8 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d43d8:	22ff      	movs	r2, #255	; 0xff
   d43da:	7402      	strb	r2, [r0, #16]
   d43dc:	7442      	strb	r2, [r0, #17]
   d43de:	7482      	strb	r2, [r0, #18]
   d43e0:	74c2      	strb	r2, [r0, #19]
{ }
   d43e2:	4770      	bx	lr

000d43e4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d43e4:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d43e6:	4d09      	ldr	r5, [pc, #36]	; (d440c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d43e8:	6829      	ldr	r1, [r5, #0]
   d43ea:	f011 0401 	ands.w	r4, r1, #1
   d43ee:	d10a      	bne.n	d4406 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d43f0:	4628      	mov	r0, r5
   d43f2:	f7ff fe63 	bl	d40bc <__cxa_guard_acquire>
   d43f6:	b130      	cbz	r0, d4406 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d43f8:	4621      	mov	r1, r4
   d43fa:	4805      	ldr	r0, [pc, #20]	; (d4410 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d43fc:	f001 fd94 	bl	d5f28 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4400:	4628      	mov	r0, r5
   d4402:	f7ff fe60 	bl	d40c6 <__cxa_guard_release>
        return instance;
    }
   d4406:	4802      	ldr	r0, [pc, #8]	; (d4410 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4408:	bd38      	pop	{r3, r4, r5, pc}
   d440a:	bf00      	nop
   d440c:	2003e3b0 	.word	0x2003e3b0
   d4410:	2003e3b4 	.word	0x2003e3b4

000d4414 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4418:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d441c:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d441e:	4605      	mov	r5, r0
   d4420:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d4422:	d106      	bne.n	d4432 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4424:	f7ff ffde 	bl	d43e4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4428:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d442a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d442e:	f001 be97 	b.w	d6160 <_ZN8SPIClass8transferEh>
   d4432:	2607      	movs	r6, #7
   d4434:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d4436:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d443a:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d443e:	2100      	movs	r1, #0
   d4440:	b280      	uxth	r0, r0
   d4442:	f002 feee 	bl	d7222 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4446:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d444a:	fa08 f106 	lsl.w	r1, r8, r6
   d444e:	4039      	ands	r1, r7
   d4450:	b280      	uxth	r0, r0
   d4452:	f002 fee6 	bl	d7222 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4456:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d445a:	2101      	movs	r1, #1
   d445c:	b280      	uxth	r0, r0
   d445e:	f002 fee0 	bl	d7222 <digitalWrite>
        if (digitalRead(_miso))
   d4462:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4466:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4468:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d446a:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d446c:	f002 fef2 	bl	d7254 <digitalRead>
   d4470:	b108      	cbz	r0, d4476 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4472:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d4476:	f116 36ff 	adds.w	r6, r6, #4294967295
   d447a:	d2de      	bcs.n	d443a <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d447c:	4620      	mov	r0, r4
   d447e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4482 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d4482:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4484:	f7ff ffae 	bl	d43e4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d4488:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d448c:	f001 bd89 	b.w	d5fa2 <_ZN8SPIClass14endTransactionEv>

000d4490 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d4490:	b510      	push	{r4, lr}
   d4492:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d4494:	f7ff ffa6 	bl	d43e4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4498:	4621      	mov	r1, r4
    }
   d449a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d449e:	f001 bd99 	b.w	d5fd4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d44a4 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d44a4:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d44a6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d44aa:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d44ac:	b085      	sub	sp, #20
   d44ae:	4604      	mov	r4, r0
   d44b0:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d44b2:	d11d      	bne.n	d44f0 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d44b4:	7901      	ldrb	r1, [r0, #4]
   d44b6:	6800      	ldr	r0, [r0, #0]
   d44b8:	f002 f9f3 	bl	d68a2 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d44bc:	6820      	ldr	r0, [r4, #0]
   d44be:	6803      	ldr	r3, [r0, #0]
   d44c0:	4629      	mov	r1, r5
   d44c2:	689b      	ldr	r3, [r3, #8]
   d44c4:	4798      	blx	r3
        _wire -> endTransmission();
   d44c6:	6820      	ldr	r0, [r4, #0]
   d44c8:	f002 f9f6 	bl	d68b8 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d44cc:	2202      	movs	r2, #2
   d44ce:	7921      	ldrb	r1, [r4, #4]
   d44d0:	6820      	ldr	r0, [r4, #0]
   d44d2:	f002 f9e3 	bl	d689c <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d44d6:	6820      	ldr	r0, [r4, #0]
   d44d8:	6803      	ldr	r3, [r0, #0]
   d44da:	695b      	ldr	r3, [r3, #20]
   d44dc:	4798      	blx	r3
   d44de:	4605      	mov	r5, r0
   d44e0:	6820      	ldr	r0, [r4, #0]
   d44e2:	6803      	ldr	r3, [r0, #0]
   d44e4:	695b      	ldr	r3, [r3, #20]
   d44e6:	4798      	blx	r3
   d44e8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d44ec:	b285      	uxth	r5, r0
   d44ee:	e035      	b.n	d455c <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d44f0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d44f4:	3301      	adds	r3, #1
   d44f6:	d10e      	bne.n	d4516 <_ZN15Adafruit_BME2806read16Eh+0x72>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d44f8:	4b1a      	ldr	r3, [pc, #104]	; (d4564 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d44fa:	4a1b      	ldr	r2, [pc, #108]	; (d4568 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d44fc:	9300      	str	r3, [sp, #0]
   d44fe:	9202      	str	r2, [sp, #8]
   d4500:	2300      	movs	r3, #0
   d4502:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4504:	4668      	mov	r0, sp
   d4506:	f88d 3004 	strb.w	r3, [sp, #4]
   d450a:	f88d 200c 	strb.w	r2, [sp, #12]
   d450e:	f88d 300d 	strb.w	r3, [sp, #13]
   d4512:	f7ff ffbd 	bl	d4490 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4516:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d451a:	2100      	movs	r1, #0
   d451c:	b280      	uxth	r0, r0
   d451e:	f002 fe80 	bl	d7222 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4522:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4526:	4620      	mov	r0, r4
   d4528:	f7ff ff74 	bl	d4414 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d452c:	2100      	movs	r1, #0
   d452e:	4620      	mov	r0, r4
   d4530:	f7ff ff70 	bl	d4414 <_ZN15Adafruit_BME2807spixferEh>
   d4534:	2100      	movs	r1, #0
   d4536:	4605      	mov	r5, r0
   d4538:	4620      	mov	r0, r4
   d453a:	f7ff ff6b 	bl	d4414 <_ZN15Adafruit_BME2807spixferEh>
   d453e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4542:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4544:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4548:	2101      	movs	r1, #1
   d454a:	b280      	uxth	r0, r0
   d454c:	f002 fe69 	bl	d7222 <digitalWrite>
        if (_sck == -1)
   d4550:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4554:	3301      	adds	r3, #1
   d4556:	d101      	bne.n	d455c <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d4558:	f7ff ff93 	bl	d4482 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d455c:	4628      	mov	r0, r5
   d455e:	b005      	add	sp, #20
   d4560:	bd30      	pop	{r4, r5, pc}
   d4562:	bf00      	nop
   d4564:	000d802c 	.word	0x000d802c
   d4568:	0007a120 	.word	0x0007a120

000d456c <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d456c:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d456e:	f7ff ff99 	bl	d44a4 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d4572:	ba40      	rev16	r0, r0
}
   d4574:	b280      	uxth	r0, r0
   d4576:	bd08      	pop	{r3, pc}

000d4578 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4578:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d457a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d457e:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4580:	b085      	sub	sp, #20
   d4582:	4604      	mov	r4, r0
   d4584:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d4586:	d116      	bne.n	d45b6 <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4588:	7901      	ldrb	r1, [r0, #4]
   d458a:	6800      	ldr	r0, [r0, #0]
   d458c:	f002 f989 	bl	d68a2 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4590:	6820      	ldr	r0, [r4, #0]
   d4592:	6803      	ldr	r3, [r0, #0]
   d4594:	4629      	mov	r1, r5
   d4596:	689b      	ldr	r3, [r3, #8]
   d4598:	4798      	blx	r3
        _wire -> endTransmission();
   d459a:	6820      	ldr	r0, [r4, #0]
   d459c:	f002 f98c 	bl	d68b8 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d45a0:	2201      	movs	r2, #1
   d45a2:	7921      	ldrb	r1, [r4, #4]
   d45a4:	6820      	ldr	r0, [r4, #0]
   d45a6:	f002 f979 	bl	d689c <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d45aa:	6820      	ldr	r0, [r4, #0]
   d45ac:	6803      	ldr	r3, [r0, #0]
   d45ae:	695b      	ldr	r3, [r3, #20]
   d45b0:	4798      	blx	r3
   d45b2:	b2c5      	uxtb	r5, r0
   d45b4:	e02e      	b.n	d4614 <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d45b6:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d45ba:	3301      	adds	r3, #1
   d45bc:	d10e      	bne.n	d45dc <_ZN15Adafruit_BME2805read8Eh+0x64>
   d45be:	4b17      	ldr	r3, [pc, #92]	; (d461c <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d45c0:	4a17      	ldr	r2, [pc, #92]	; (d4620 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d45c2:	9300      	str	r3, [sp, #0]
   d45c4:	9202      	str	r2, [sp, #8]
   d45c6:	2300      	movs	r3, #0
   d45c8:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d45ca:	4668      	mov	r0, sp
   d45cc:	f88d 3004 	strb.w	r3, [sp, #4]
   d45d0:	f88d 200c 	strb.w	r2, [sp, #12]
   d45d4:	f88d 300d 	strb.w	r3, [sp, #13]
   d45d8:	f7ff ff5a 	bl	d4490 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d45dc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d45e0:	2100      	movs	r1, #0
   d45e2:	b280      	uxth	r0, r0
   d45e4:	f002 fe1d 	bl	d7222 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d45e8:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d45ec:	4620      	mov	r0, r4
   d45ee:	f7ff ff11 	bl	d4414 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d45f2:	2100      	movs	r1, #0
   d45f4:	4620      	mov	r0, r4
   d45f6:	f7ff ff0d 	bl	d4414 <_ZN15Adafruit_BME2807spixferEh>
   d45fa:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d45fc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4600:	2101      	movs	r1, #1
   d4602:	b280      	uxth	r0, r0
   d4604:	f002 fe0d 	bl	d7222 <digitalWrite>
        if (_sck == -1)
   d4608:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d460c:	3301      	adds	r3, #1
   d460e:	d101      	bne.n	d4614 <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d4610:	f7ff ff37 	bl	d4482 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d4614:	4628      	mov	r0, r5
   d4616:	b005      	add	sp, #20
   d4618:	bd30      	pop	{r4, r5, pc}
   d461a:	bf00      	nop
   d461c:	000d802c 	.word	0x000d802c
   d4620:	0007a120 	.word	0x0007a120

000d4624 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d4624:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d4626:	21f3      	movs	r1, #243	; 0xf3
   d4628:	f7ff ffa6 	bl	d4578 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d462c:	f000 0001 	and.w	r0, r0, #1
   d4630:	bd08      	pop	{r3, pc}

000d4632 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4632:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4634:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4636:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4638:	f7ff ff98 	bl	d456c <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d463c:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d463e:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4640:	4620      	mov	r0, r4
   d4642:	f7ff ff93 	bl	d456c <_ZN15Adafruit_BME2809read16_LEEh>
   d4646:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4648:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d464a:	4620      	mov	r0, r4
   d464c:	f7ff ff8e 	bl	d456c <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4650:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d4652:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4654:	4620      	mov	r0, r4
   d4656:	f7ff ff89 	bl	d456c <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d465a:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d465c:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d465e:	4620      	mov	r0, r4
   d4660:	f7ff ff84 	bl	d456c <_ZN15Adafruit_BME2809read16_LEEh>
   d4664:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d4666:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4668:	4620      	mov	r0, r4
   d466a:	f7ff ff7f 	bl	d456c <_ZN15Adafruit_BME2809read16_LEEh>
   d466e:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4670:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4672:	4620      	mov	r0, r4
   d4674:	f7ff ff7a 	bl	d456c <_ZN15Adafruit_BME2809read16_LEEh>
   d4678:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d467a:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d467c:	4620      	mov	r0, r4
   d467e:	f7ff ff75 	bl	d456c <_ZN15Adafruit_BME2809read16_LEEh>
   d4682:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d4684:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4686:	4620      	mov	r0, r4
   d4688:	f7ff ff70 	bl	d456c <_ZN15Adafruit_BME2809read16_LEEh>
   d468c:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d468e:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4690:	4620      	mov	r0, r4
   d4692:	f7ff ff6b 	bl	d456c <_ZN15Adafruit_BME2809read16_LEEh>
   d4696:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d4698:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d469a:	4620      	mov	r0, r4
   d469c:	f7ff ff66 	bl	d456c <_ZN15Adafruit_BME2809read16_LEEh>
   d46a0:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d46a2:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d46a4:	4620      	mov	r0, r4
   d46a6:	f7ff ff61 	bl	d456c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d46aa:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d46ac:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d46ae:	4620      	mov	r0, r4
   d46b0:	f7ff ff62 	bl	d4578 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d46b4:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d46b6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d46ba:	4620      	mov	r0, r4
   d46bc:	f7ff ff56 	bl	d456c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d46c0:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d46c2:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d46c4:	4620      	mov	r0, r4
   d46c6:	f7ff ff57 	bl	d4578 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d46ca:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d46cc:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d46d0:	4620      	mov	r0, r4
   d46d2:	f7ff ff51 	bl	d4578 <_ZN15Adafruit_BME2805read8Eh>
   d46d6:	21e5      	movs	r1, #229	; 0xe5
   d46d8:	4605      	mov	r5, r0
   d46da:	4620      	mov	r0, r4
   d46dc:	f7ff ff4c 	bl	d4578 <_ZN15Adafruit_BME2805read8Eh>
   d46e0:	f000 000f 	and.w	r0, r0, #15
   d46e4:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d46e8:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d46ea:	21e6      	movs	r1, #230	; 0xe6
   d46ec:	4620      	mov	r0, r4
   d46ee:	f7ff ff43 	bl	d4578 <_ZN15Adafruit_BME2805read8Eh>
   d46f2:	21e5      	movs	r1, #229	; 0xe5
   d46f4:	4605      	mov	r5, r0
   d46f6:	4620      	mov	r0, r4
   d46f8:	f7ff ff3e 	bl	d4578 <_ZN15Adafruit_BME2805read8Eh>
   d46fc:	1100      	asrs	r0, r0, #4
   d46fe:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4702:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d4704:	21e7      	movs	r1, #231	; 0xe7
   d4706:	4620      	mov	r0, r4
   d4708:	f7ff ff36 	bl	d4578 <_ZN15Adafruit_BME2805read8Eh>
   d470c:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d4710:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4714 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4714:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d4716:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d471a:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d471c:	4604      	mov	r4, r0
   d471e:	460e      	mov	r6, r1
   d4720:	4615      	mov	r5, r2
    if (_cs == -1) {
   d4722:	d111      	bne.n	d4748 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4724:	7901      	ldrb	r1, [r0, #4]
   d4726:	6800      	ldr	r0, [r0, #0]
   d4728:	f002 f8bb 	bl	d68a2 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d472c:	6820      	ldr	r0, [r4, #0]
   d472e:	6803      	ldr	r3, [r0, #0]
   d4730:	4631      	mov	r1, r6
   d4732:	689b      	ldr	r3, [r3, #8]
   d4734:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d4736:	6820      	ldr	r0, [r4, #0]
   d4738:	6803      	ldr	r3, [r0, #0]
   d473a:	4629      	mov	r1, r5
   d473c:	689b      	ldr	r3, [r3, #8]
   d473e:	4798      	blx	r3
        _wire -> endTransmission();
   d4740:	6820      	ldr	r0, [r4, #0]
   d4742:	f002 f8b9 	bl	d68b8 <_ZN7TwoWire15endTransmissionEv>
   d4746:	e02d      	b.n	d47a4 <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d4748:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d474c:	3301      	adds	r3, #1
   d474e:	d10e      	bne.n	d476e <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d4750:	4b15      	ldr	r3, [pc, #84]	; (d47a8 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d4752:	4a16      	ldr	r2, [pc, #88]	; (d47ac <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d4754:	9300      	str	r3, [sp, #0]
   d4756:	9202      	str	r2, [sp, #8]
   d4758:	2300      	movs	r3, #0
   d475a:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d475c:	4668      	mov	r0, sp
   d475e:	f88d 3004 	strb.w	r3, [sp, #4]
   d4762:	f88d 200c 	strb.w	r2, [sp, #12]
   d4766:	f88d 300d 	strb.w	r3, [sp, #13]
   d476a:	f7ff fe91 	bl	d4490 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d476e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4772:	2100      	movs	r1, #0
   d4774:	b280      	uxth	r0, r0
   d4776:	f002 fd54 	bl	d7222 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d477a:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d477e:	4620      	mov	r0, r4
   d4780:	f7ff fe48 	bl	d4414 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d4784:	4629      	mov	r1, r5
   d4786:	4620      	mov	r0, r4
   d4788:	f7ff fe44 	bl	d4414 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d478c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4790:	2101      	movs	r1, #1
   d4792:	b280      	uxth	r0, r0
   d4794:	f002 fd45 	bl	d7222 <digitalWrite>
    if (_sck == -1)
   d4798:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d479c:	3301      	adds	r3, #1
   d479e:	d101      	bne.n	d47a4 <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d47a0:	f7ff fe6f 	bl	d4482 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d47a4:	b004      	add	sp, #16
   d47a6:	bd70      	pop	{r4, r5, r6, pc}
   d47a8:	000d802c 	.word	0x000d802c
   d47ac:	0007a120 	.word	0x0007a120

000d47b0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d47b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d47b2:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d47b6:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d47ba:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d47be:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d47c2:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d47c6:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d47ca:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d47ce:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d47d2:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d47d6:	f366 1347 	bfi	r3, r6, #5, #3
   d47da:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d47de:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d47e2:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d47e6:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d47e8:	f367 0302 	bfi	r3, r7, #0, #3
   d47ec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d47f0:	f006 0207 	and.w	r2, r6, #7
   d47f4:	21f2      	movs	r1, #242	; 0xf2
   d47f6:	f7ff ff8d 	bl	d4714 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d47fa:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d47fe:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4802:	f002 0107 	and.w	r1, r2, #7
   d4806:	009b      	lsls	r3, r3, #2
   d4808:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d480c:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4810:	4620      	mov	r0, r4
   d4812:	21f5      	movs	r1, #245	; 0xf5
   d4814:	f7ff ff7e 	bl	d4714 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4818:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d481c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4820:	f002 0107 	and.w	r1, r2, #7
   d4824:	009b      	lsls	r3, r3, #2
   d4826:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d482a:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d482e:	4620      	mov	r0, r4
   d4830:	21f4      	movs	r1, #244	; 0xf4
}
   d4832:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4836:	f7ff bf6d 	b.w	d4714 <_ZN15Adafruit_BME2806write8Ehh>

000d483a <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d483a:	b530      	push	{r4, r5, lr}
   d483c:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d483e:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4842:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4844:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4846:	d103      	bne.n	d4850 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4848:	6820      	ldr	r0, [r4, #0]
   d484a:	f001 fff3 	bl	d6834 <_ZN7TwoWire5beginEv>
   d484e:	e022      	b.n	d4896 <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d4850:	2101      	movs	r1, #1
   d4852:	b280      	uxth	r0, r0
   d4854:	f002 fce5 	bl	d7222 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4858:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d485c:	2101      	movs	r1, #1
   d485e:	b280      	uxth	r0, r0
   d4860:	f002 fcce 	bl	d7200 <pinMode>
        if (_sck == -1) {
   d4864:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4868:	1c43      	adds	r3, r0, #1
   d486a:	d104      	bne.n	d4876 <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d486c:	f7ff fdba 	bl	d43e4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4870:	f001 fb64 	bl	d5f3c <_ZN8SPIClass5beginEv>
   d4874:	e00f      	b.n	d4896 <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d4876:	2101      	movs	r1, #1
   d4878:	b280      	uxth	r0, r0
   d487a:	f002 fcc1 	bl	d7200 <pinMode>
            pinMode(_mosi, OUTPUT);
   d487e:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d4882:	2101      	movs	r1, #1
   d4884:	b280      	uxth	r0, r0
   d4886:	f002 fcbb 	bl	d7200 <pinMode>
            pinMode(_miso, INPUT);
   d488a:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d488e:	2100      	movs	r1, #0
   d4890:	b280      	uxth	r0, r0
   d4892:	f002 fcb5 	bl	d7200 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4896:	21d0      	movs	r1, #208	; 0xd0
   d4898:	4620      	mov	r0, r4
   d489a:	f7ff fe6d 	bl	d4578 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d489e:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d48a0:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d48a2:	d120      	bne.n	d48e6 <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d48a4:	4620      	mov	r0, r4
   d48a6:	22b6      	movs	r2, #182	; 0xb6
   d48a8:	21e0      	movs	r1, #224	; 0xe0
   d48aa:	f7ff ff33 	bl	d4714 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d48ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d48b2:	f001 fd53 	bl	d635c <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d48b6:	4620      	mov	r0, r4
   d48b8:	f7ff feb4 	bl	d4624 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d48bc:	4605      	mov	r5, r0
   d48be:	b108      	cbz	r0, d48c4 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d48c0:	2064      	movs	r0, #100	; 0x64
   d48c2:	e7f6      	b.n	d48b2 <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d48c4:	4620      	mov	r0, r4
   d48c6:	f7ff feb4 	bl	d4632 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d48ca:	2305      	movs	r3, #5
   d48cc:	9300      	str	r3, [sp, #0]
   d48ce:	461a      	mov	r2, r3
   d48d0:	2103      	movs	r1, #3
   d48d2:	4620      	mov	r0, r4
   d48d4:	9502      	str	r5, [sp, #8]
   d48d6:	9501      	str	r5, [sp, #4]
   d48d8:	f7ff ff6a 	bl	d47b0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d48dc:	2064      	movs	r0, #100	; 0x64
   d48de:	f001 fd3d 	bl	d635c <delay>
   d48e2:	2001      	movs	r0, #1
   d48e4:	e000      	b.n	d48e8 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d48e6:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d48e8:	b005      	add	sp, #20
   d48ea:	bd30      	pop	{r4, r5, pc}

000d48ec <_ZN15Adafruit_BME2805beginEv>:
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d48ec:	2377      	movs	r3, #119	; 0x77
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d48ee:	b510      	push	{r4, lr}
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d48f0:	7103      	strb	r3, [r0, #4]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d48f2:	4604      	mov	r4, r0
    bool status = false;
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
   d48f4:	f002 fcfe 	bl	d72f4 <_Z19__fetch_global_Wirev>
   d48f8:	6020      	str	r0, [r4, #0]
	status = init();
   d48fa:	4620      	mov	r0, r4
   d48fc:	f7ff ff9d 	bl	d483a <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d4900:	b930      	cbnz	r0, d4910 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d4902:	2376      	movs	r3, #118	; 0x76
   d4904:	7123      	strb	r3, [r4, #4]
 		status = init();
   d4906:	4620      	mov	r0, r4
 		}
	return status;
}
   d4908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
	status = init();
 	if(!status){
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 		status = init();
   d490c:	f7ff bf95 	b.w	d483a <_ZN15Adafruit_BME2804initEv>
 		}
	return status;
}
   d4910:	bd10      	pop	{r4, pc}

000d4912 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4912:	f001 b841 	b.w	d5998 <HAL_Pin_Map>

000d4916 <_ZNK18DHTSensorTypeDHT118getTempCERK9DHTSample>:
DHTSensorTypeDHT11::DHTSensorTypeDHT11() : DHTSensorType("DHT11", 1000, 25) {

};

float DHTSensorTypeDHT11::getTempC(const DHTSample &sample) const {
	return (float) ((int8_t) sample[2]);
   d4916:	f991 300e 	ldrsb.w	r3, [r1, #14]
   d491a:	ee00 3a10 	vmov	s0, r3
}
   d491e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d4922:	4770      	bx	lr

000d4924 <_ZNK18DHTSensorTypeDHT1111getHumidityERK9DHTSample>:

float DHTSensorTypeDHT11::getHumidity(const DHTSample &sample) const {
	return (float) ((int8_t) sample[0]);
   d4924:	f991 300c 	ldrsb.w	r3, [r1, #12]
   d4928:	ee00 3a10 	vmov	s0, r3
}
   d492c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d4930:	4770      	bx	lr
   d4932:	0000      	movs	r0, r0
   d4934:	0000      	movs	r0, r0
	...

000d4938 <_ZNK18DHTSensorTypeDHT228getTempCERK9DHTSample>:

DHTSensorTypeDHT22::DHTSensorTypeDHT22() : DHTSensorType("DHT22", 2000, 25) {

};

float DHTSensorTypeDHT22::getTempC(const DHTSample &sample) const {
   d4938:	b508      	push	{r3, lr}
	DHTSample &withSensorType(DHTSensorType *sensorType) { this->sensorType = sensorType; return *this; };

	/**
	 * @brief Get a byte from the bytes array
	 */
	uint8_t operator[](size_t index) const { return bytes[index]; };
   d493a:	7b8a      	ldrb	r2, [r1, #14]
   d493c:	89cb      	ldrh	r3, [r1, #14]
	return (sample[2] & 0x80 ? -combineBytes(sample[2] & 0x7F, sample[3]) : combineBytes(sample[2], sample[3])) * 0.1;
   d493e:	0610      	lsls	r0, r2, #24
   d4940:	ba5b      	rev16	r3, r3
   d4942:	b29b      	uxth	r3, r3
   d4944:	bf41      	itttt	mi
   d4946:	7bcb      	ldrbmi	r3, [r1, #15]
   d4948:	f002 027f 	andmi.w	r2, r2, #127	; 0x7f
   d494c:	ea43 2302 	orrmi.w	r3, r3, r2, lsl #8
   d4950:	ee07 3a90 	vmovmi	s15, r3
DHTSensorTypeDHT11 DHT22Gen3::sensorTypeDHT11;
DHTSensorTypeDHT22 DHT22Gen3::sensorTypeDHT22;


static float combineBytes(uint8_t highByte, uint8_t lowByte) {
	return (float) ((((uint16_t)highByte) << 8) | lowByte);
   d4954:	bf55      	itete	pl
   d4956:	ee07 3a90 	vmovpl	s15, r3
DHTSensorTypeDHT22::DHTSensorTypeDHT22() : DHTSensorType("DHT22", 2000, 25) {

};

float DHTSensorTypeDHT22::getTempC(const DHTSample &sample) const {
	return (sample[2] & 0x80 ? -combineBytes(sample[2] & 0x7F, sample[3]) : combineBytes(sample[2], sample[3])) * 0.1;
   d495a:	eef8 7ae7 	vcvtmi.f32.s32	s15, s15
DHTSensorTypeDHT11 DHT22Gen3::sensorTypeDHT11;
DHTSensorTypeDHT22 DHT22Gen3::sensorTypeDHT22;


static float combineBytes(uint8_t highByte, uint8_t lowByte) {
	return (float) ((((uint16_t)highByte) << 8) | lowByte);
   d495e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
DHTSensorTypeDHT22::DHTSensorTypeDHT22() : DHTSensorType("DHT22", 2000, 25) {

};

float DHTSensorTypeDHT22::getTempC(const DHTSample &sample) const {
	return (sample[2] & 0x80 ? -combineBytes(sample[2] & 0x7F, sample[3]) : combineBytes(sample[2], sample[3])) * 0.1;
   d4962:	eef1 7a67 	vnegmi.f32	s15, s15
   d4966:	ee17 0a90 	vmov	r0, s15
   d496a:	f002 ffb7 	bl	d78dc <__aeabi_f2d>
   d496e:	a306      	add	r3, pc, #24	; (adr r3, d4988 <_ZNK18DHTSensorTypeDHT228getTempCERK9DHTSample+0x50>)
   d4970:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4974:	f003 f806 	bl	d7984 <__aeabi_dmul>
   d4978:	f003 fa16 	bl	d7da8 <__aeabi_d2f>

}
   d497c:	ee00 0a10 	vmov	s0, r0
   d4980:	bd08      	pop	{r3, pc}
   d4982:	bf00      	nop
   d4984:	f3af 8000 	nop.w
   d4988:	9999999a 	.word	0x9999999a
   d498c:	3fb99999 	.word	0x3fb99999

000d4990 <_ZNK18DHTSensorTypeDHT2211getHumidityERK9DHTSample>:

float DHTSensorTypeDHT22::getHumidity(const DHTSample &sample) const {
   d4990:	b508      	push	{r3, lr}
	return combineBytes(sample[0], sample[1]) * 0.1;
   d4992:	8988      	ldrh	r0, [r1, #12]
   d4994:	ba40      	rev16	r0, r0
   d4996:	b280      	uxth	r0, r0
   d4998:	ee07 0a90 	vmov	s15, r0
   d499c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d49a0:	ee17 0a90 	vmov	r0, s15
   d49a4:	f002 ff9a 	bl	d78dc <__aeabi_f2d>
   d49a8:	a305      	add	r3, pc, #20	; (adr r3, d49c0 <_ZNK18DHTSensorTypeDHT2211getHumidityERK9DHTSample+0x30>)
   d49aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49ae:	f002 ffe9 	bl	d7984 <__aeabi_dmul>
   d49b2:	f003 f9f9 	bl	d7da8 <__aeabi_d2f>
}
   d49b6:	ee00 0a10 	vmov	s0, r0
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	f3af 8000 	nop.w
   d49c0:	9999999a 	.word	0x9999999a
   d49c4:	3fb99999 	.word	0x3fb99999

000d49c8 <_ZN18DHTSensorTypeDHT22D1Ev>:


/**
 * @brief DHTSensorType object to decode DHT22 sensor data
 */
class DHTSensorTypeDHT22 : public DHTSensorType {
   d49c8:	4770      	bx	lr

000d49ca <_ZN18DHTSensorTypeDHT11D1Ev>:
};

/**
 * @brief DHTSensorType object to decode DHT11 sensor data
 */
class DHTSensorTypeDHT11 : public DHTSensorType {
   d49ca:	4770      	bx	lr

000d49cc <_ZN18DHTSensorTypeDHT22D0Ev>:


/**
 * @brief DHTSensorType object to decode DHT22 sensor data
 */
class DHTSensorTypeDHT22 : public DHTSensorType {
   d49cc:	b510      	push	{r4, lr}
   d49ce:	2110      	movs	r1, #16
   d49d0:	4604      	mov	r4, r0
   d49d2:	f002 fcc3 	bl	d735c <_ZdlPvj>
   d49d6:	4620      	mov	r0, r4
   d49d8:	bd10      	pop	{r4, pc}

000d49da <_ZN18DHTSensorTypeDHT11D0Ev>:
};

/**
 * @brief DHTSensorType object to decode DHT11 sensor data
 */
class DHTSensorTypeDHT11 : public DHTSensorType {
   d49da:	b510      	push	{r4, lr}
   d49dc:	2110      	movs	r1, #16
   d49de:	4604      	mov	r4, r0
   d49e0:	f002 fcbc 	bl	d735c <_ZdlPvj>
   d49e4:	4620      	mov	r0, r4
   d49e6:	bd10      	pop	{r4, pc}

000d49e8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d49e8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d49ea:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d49ec:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d49ee:	b113      	cbz	r3, d49f6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d49f0:	2203      	movs	r2, #3
   d49f2:	4601      	mov	r1, r0
   d49f4:	4798      	blx	r3
    }
   d49f6:	4620      	mov	r0, r4
   d49f8:	bd10      	pop	{r4, pc}
	...

000d49fc <_ZN18DHTSensorTypeDHT11C1Ev>:
	 * @param minSamplePeriodMs Minimum number of milliseconds between queries to the sensor
	 *
	 * @param oneBitThreshold Number of counts for the bit in the I2S buffer to be considered a 1 bit
	 */
	DHTSensorType(const char *name, unsigned long minSamplePeriodMs, unsigned long oneBitThreshold) :
			name(name), minSamplePeriodMs(minSamplePeriodMs), oneBitThreshold(oneBitThreshold) {};
   d49fc:	4a04      	ldr	r2, [pc, #16]	; (d4a10 <_ZN18DHTSensorTypeDHT11C1Ev+0x14>)
   d49fe:	6042      	str	r2, [r0, #4]
   d4a00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4a04:	6082      	str	r2, [r0, #8]
   d4a06:	2219      	movs	r2, #25
   d4a08:	60c2      	str	r2, [r0, #12]
}

//
// Sensor type decoders
//
DHTSensorTypeDHT11::DHTSensorTypeDHT11() : DHTSensorType("DHT11", 1000, 25) {
   d4a0a:	4a02      	ldr	r2, [pc, #8]	; (d4a14 <_ZN18DHTSensorTypeDHT11C1Ev+0x18>)
   d4a0c:	6002      	str	r2, [r0, #0]

};
   d4a0e:	4770      	bx	lr
   d4a10:	000d8090 	.word	0x000d8090
   d4a14:	000d8100 	.word	0x000d8100

000d4a18 <_ZN18DHTSensorTypeDHT22C1Ev>:
   d4a18:	4a04      	ldr	r2, [pc, #16]	; (d4a2c <_ZN18DHTSensorTypeDHT22C1Ev+0x14>)
   d4a1a:	6042      	str	r2, [r0, #4]
   d4a1c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d4a20:	6082      	str	r2, [r0, #8]
   d4a22:	2219      	movs	r2, #25
   d4a24:	60c2      	str	r2, [r0, #12]
float DHTSensorTypeDHT11::getHumidity(const DHTSample &sample) const {
	return (float) ((int8_t) sample[0]);
}


DHTSensorTypeDHT22::DHTSensorTypeDHT22() : DHTSensorType("DHT22", 2000, 25) {
   d4a26:	4a02      	ldr	r2, [pc, #8]	; (d4a30 <_ZN18DHTSensorTypeDHT22C1Ev+0x18>)
   d4a28:	6002      	str	r2, [r0, #0]

};
   d4a2a:	4770      	bx	lr
   d4a2c:	000d8096 	.word	0x000d8096
   d4a30:	000d8080 	.word	0x000d8080

000d4a34 <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E>:
	result.sampleResult = sampleResult;
	state = State::IDLE_STATE;
	if (completion) {
		completion(result);
	}
}
   d4a34:	b510      	push	{r4, lr}
   d4a36:	f000 ffaf 	bl	d5998 <HAL_Pin_Map>
static nrfx_i2s_buffers_t i2sBuffer = {
		.p_rx_buffer = (uint32_t *)sampleBuffer,
		.p_tx_buffer = 0
};

DHTSensorTypeDHT11 DHT22Gen3::sensorTypeDHT11;
   d4a3a:	4b0a      	ldr	r3, [pc, #40]	; (d4a64 <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x30>)
   d4a3c:	4c0a      	ldr	r4, [pc, #40]	; (d4a68 <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x34>)
   d4a3e:	4618      	mov	r0, r3
   d4a40:	f7ff ffdc 	bl	d49fc <_ZN18DHTSensorTypeDHT11C1Ev>
   d4a44:	4622      	mov	r2, r4
   d4a46:	4909      	ldr	r1, [pc, #36]	; (d4a6c <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x38>)
   d4a48:	4618      	mov	r0, r3
   d4a4a:	f002 fc79 	bl	d7340 <__aeabi_atexit>
DHTSensorTypeDHT22 DHT22Gen3::sensorTypeDHT22;
   d4a4e:	4b08      	ldr	r3, [pc, #32]	; (d4a70 <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x3c>)
   d4a50:	4618      	mov	r0, r3
   d4a52:	f7ff ffe1 	bl	d4a18 <_ZN18DHTSensorTypeDHT22C1Ev>
   d4a56:	4622      	mov	r2, r4
   d4a58:	4906      	ldr	r1, [pc, #24]	; (d4a74 <_GLOBAL__sub_I__ZN9DHT22Gen315sensorTypeDHT11E+0x40>)
   d4a5a:	4618      	mov	r0, r3
	result.sampleResult = sampleResult;
	state = State::IDLE_STATE;
	if (completion) {
		completion(result);
	}
}
   d4a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		.p_rx_buffer = (uint32_t *)sampleBuffer,
		.p_tx_buffer = 0
};

DHTSensorTypeDHT11 DHT22Gen3::sensorTypeDHT11;
DHTSensorTypeDHT22 DHT22Gen3::sensorTypeDHT22;
   d4a60:	f002 bc6e 	b.w	d7340 <__aeabi_atexit>
   d4a64:	2003e3cc 	.word	0x2003e3cc
   d4a68:	2003e1e0 	.word	0x2003e1e0
   d4a6c:	000d49cb 	.word	0x000d49cb
   d4a70:	2003e3bc 	.word	0x2003e3bc
   d4a74:	000d49c9 	.word	0x000d49c9

000d4a78 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4a78:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4a7a:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4a7c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4a80:	2c02      	cmp	r4, #2
   d4a82:	d008      	beq.n	d4a96 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d4a84:	2c03      	cmp	r4, #3
   d4a86:	d00f      	beq.n	d4aa8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4a88:	2c01      	cmp	r4, #1
   d4a8a:	d170      	bne.n	d4b6e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4a8c:	8904      	ldrh	r4, [r0, #8]
   d4a8e:	3c01      	subs	r4, #1
   d4a90:	1aa2      	subs	r2, r4, r2
   d4a92:	b212      	sxth	r2, r2
      break;
   d4a94:	e00c      	b.n	d4ab0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4a96:	8944      	ldrh	r4, [r0, #10]
   d4a98:	3c01      	subs	r4, #1
   d4a9a:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4a9c:	8904      	ldrh	r4, [r0, #8]
   d4a9e:	1ae4      	subs	r4, r4, r3
   d4aa0:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4aa2:	b212      	sxth	r2, r2
      x -= (w-1);
   d4aa4:	b209      	sxth	r1, r1
      break;
   d4aa6:	e062      	b.n	d4b6e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d4aa8:	8944      	ldrh	r4, [r0, #10]
   d4aaa:	1ae4      	subs	r4, r4, r3
   d4aac:	1a61      	subs	r1, r4, r1
   d4aae:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4ab0:	2a00      	cmp	r2, #0
   d4ab2:	db5b      	blt.n	d4b6c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d4ab4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4ab8:	4294      	cmp	r4, r2
   d4aba:	f340 8090 	ble.w	d4bde <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4abe:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4ac0:	bfbe      	ittt	lt
   d4ac2:	185b      	addlt	r3, r3, r1
   d4ac4:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4ac6:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4ac8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4acc:	18cc      	adds	r4, r1, r3
   d4ace:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4ad0:	bfc4      	itt	gt
   d4ad2:	1a43      	subgt	r3, r0, r1
   d4ad4:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4ad6:	2b00      	cmp	r3, #0
   d4ad8:	f340 8081 	ble.w	d4bde <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4adc:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4ade:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4ae0:	4f3f      	ldr	r7, [pc, #252]	; (d4be0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4ae2:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4ae6:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4aea:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4aec:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4af0:	d017      	beq.n	d4b22 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4af2:	f1c1 0108 	rsb	r1, r1, #8
   d4af6:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4af8:	493a      	ldr	r1, [pc, #232]	; (d4be4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4afa:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4afc:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4afe:	bf3f      	itttt	cc
   d4b00:	ebc3 0e00 	rsbcc	lr, r3, r0
   d4b04:	21ff      	movcc	r1, #255	; 0xff
   d4b06:	fa41 f10e 	asrcc.w	r1, r1, lr
   d4b0a:	400e      	andcc	r6, r1
   d4b0c:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d4b0e:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4b10:	bf0c      	ite	eq
   d4b12:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d4b14:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4b16:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4b18:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4b1a:	d360      	bcc.n	d4bde <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d4b1c:	1a18      	subs	r0, r3, r0
   d4b1e:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d4b20:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4b22:	2b07      	cmp	r3, #7
   d4b24:	d917      	bls.n	d4b56 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4b26:	2d01      	cmp	r5, #1
   d4b28:	bf0c      	ite	eq
   d4b2a:	20ff      	moveq	r0, #255	; 0xff
   d4b2c:	2000      	movne	r0, #0
   d4b2e:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d4b32:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4b34:	3a08      	subs	r2, #8
   d4b36:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4b38:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4b3a:	f801 0c80 	strb.w	r0, [r1, #-128]
   d4b3e:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4b42:	d8f7      	bhi.n	d4b34 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d4b44:	f1a3 0208 	sub.w	r2, r3, #8
   d4b48:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4b4c:	3201      	adds	r2, #1
   d4b4e:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d4b52:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4b56:	2b00      	cmp	r3, #0
   d4b58:	d041      	beq.n	d4bde <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4b5a:	4a23      	ldr	r2, [pc, #140]	; (d4be8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d4b5c:	5cd2      	ldrb	r2, [r2, r3]
   d4b5e:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d4b60:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4b62:	bf0c      	ite	eq
   d4b64:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d4b66:	4393      	bicne	r3, r2
   d4b68:	7023      	strb	r3, [r4, #0]
   d4b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4b6e:	2a00      	cmp	r2, #0
   d4b70:	db35      	blt.n	d4bde <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4b72:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4b76:	4294      	cmp	r4, r2
   d4b78:	dd31      	ble.n	d4bde <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4b7a:	2900      	cmp	r1, #0
    w += x;
   d4b7c:	bfbc      	itt	lt
   d4b7e:	18c9      	addlt	r1, r1, r3
   d4b80:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4b82:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4b86:	bfb8      	it	lt
   d4b88:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4b8a:	18ce      	adds	r6, r1, r3
   d4b8c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4b8e:	bfc4      	itt	gt
   d4b90:	1a63      	subgt	r3, r4, r1
   d4b92:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4b94:	2b00      	cmp	r3, #0
   d4b96:	dd22      	ble.n	d4bde <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4b98:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d4b9a:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d4b9e:	4810      	ldr	r0, [pc, #64]	; (d4be0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d4ba0:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4ba4:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d4ba6:	2001      	movs	r0, #1
   d4ba8:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d4bac:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4bae:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d4bb0:	d109      	bne.n	d4bc6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d4bb2:	3b01      	subs	r3, #1
   d4bb4:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d4bb6:	1c5c      	adds	r4, r3, #1
   d4bb8:	d011      	beq.n	d4bde <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4bba:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4bbe:	4310      	orrs	r0, r2
   d4bc0:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4bc4:	e7f5      	b.n	d4bb2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d4bc6:	43d2      	mvns	r2, r2
   d4bc8:	b2d2      	uxtb	r2, r2
   d4bca:	3b01      	subs	r3, #1
   d4bcc:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d4bce:	1c58      	adds	r0, r3, #1
   d4bd0:	d005      	beq.n	d4bde <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4bd2:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4bd6:	4010      	ands	r0, r2
   d4bd8:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4bdc:	e7f5      	b.n	d4bca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d4bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4be0:	2003dd78 	.word	0x2003dd78
   d4be4:	2003dd70 	.word	0x2003dd70
   d4be8:	2003dd68 	.word	0x2003dd68

000d4bec <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4bec:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d4bee:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4bf0:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d4bf4:	2c02      	cmp	r4, #2
   d4bf6:	d008      	beq.n	d4c0a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d4bf8:	2c03      	cmp	r4, #3
   d4bfa:	d00f      	beq.n	d4c1c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d4bfc:	2c01      	cmp	r4, #1
   d4bfe:	d112      	bne.n	d4c26 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d4c00:	8904      	ldrh	r4, [r0, #8]
   d4c02:	1ae4      	subs	r4, r4, r3
   d4c04:	1aa2      	subs	r2, r4, r2
   d4c06:	b212      	sxth	r2, r2
      break;
   d4c08:	e06d      	b.n	d4ce6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4c0a:	8904      	ldrh	r4, [r0, #8]
   d4c0c:	3c01      	subs	r4, #1
   d4c0e:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4c10:	8944      	ldrh	r4, [r0, #10]
   d4c12:	1ae4      	subs	r4, r4, r3
   d4c14:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4c16:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4c18:	b212      	sxth	r2, r2
      break;
   d4c1a:	e004      	b.n	d4c26 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d4c1c:	8944      	ldrh	r4, [r0, #10]
   d4c1e:	3c01      	subs	r4, #1
   d4c20:	1a61      	subs	r1, r4, r1
   d4c22:	b209      	sxth	r1, r1
      break;
   d4c24:	e05f      	b.n	d4ce6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4c26:	2900      	cmp	r1, #0
   d4c28:	db5c      	blt.n	d4ce4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d4c2a:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4c2e:	428c      	cmp	r4, r1
   d4c30:	f340 8091 	ble.w	d4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4c34:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4c36:	bfbc      	itt	lt
   d4c38:	18d2      	addlt	r2, r2, r3
   d4c3a:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4c3c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d4c40:	bfb8      	it	lt
   d4c42:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4c44:	18d4      	adds	r4, r2, r3
   d4c46:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4c48:	bfc4      	itt	gt
   d4c4a:	1a83      	subgt	r3, r0, r2
   d4c4c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4c4e:	2b00      	cmp	r3, #0
   d4c50:	f340 8081 	ble.w	d4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4c54:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4c56:	4e40      	ldr	r6, [pc, #256]	; (d4d58 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4c58:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4c5a:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d4c5c:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4c60:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4c64:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4c68:	d017      	beq.n	d4c9a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4c6a:	f1c4 0408 	rsb	r4, r4, #8
   d4c6e:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4c70:	4c3a      	ldr	r4, [pc, #232]	; (d4d5c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4c72:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4c74:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4c76:	bf3f      	itttt	cc
   d4c78:	ebc2 0e00 	rsbcc	lr, r2, r0
   d4c7c:	24ff      	movcc	r4, #255	; 0xff
   d4c7e:	fa44 f40e 	asrcc.w	r4, r4, lr
   d4c82:	4027      	andcc	r7, r4
   d4c84:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d4c86:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4c88:	bf0c      	ite	eq
   d4c8a:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d4c8c:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4c8e:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4c90:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4c92:	d360      	bcc.n	d4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d4c94:	1a10      	subs	r0, r2, r0
   d4c96:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d4c98:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4c9a:	2a07      	cmp	r2, #7
   d4c9c:	d917      	bls.n	d4cce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4c9e:	2d01      	cmp	r5, #1
   d4ca0:	bf0c      	ite	eq
   d4ca2:	24ff      	moveq	r4, #255	; 0xff
   d4ca4:	2400      	movne	r4, #0
   d4ca6:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d4caa:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4cac:	3908      	subs	r1, #8
   d4cae:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d4cb0:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4cb2:	f800 4c80 	strb.w	r4, [r0, #-128]
   d4cb6:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4cba:	d8f7      	bhi.n	d4cac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d4cbc:	f1a2 0108 	sub.w	r1, r2, #8
   d4cc0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d4cc4:	3101      	adds	r1, #1
   d4cc6:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d4cca:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4cce:	2a00      	cmp	r2, #0
   d4cd0:	d041      	beq.n	d4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4cd2:	4923      	ldr	r1, [pc, #140]	; (d4d60 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d4cd4:	5c89      	ldrb	r1, [r1, r2]
   d4cd6:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d4cd8:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4cda:	bf0c      	ite	eq
   d4cdc:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d4cde:	438a      	bicne	r2, r1
   d4ce0:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d4ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4ce6:	2900      	cmp	r1, #0
   d4ce8:	db35      	blt.n	d4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4cea:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4cee:	428c      	cmp	r4, r1
   d4cf0:	dd31      	ble.n	d4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4cf2:	2a00      	cmp	r2, #0
    w += x;
   d4cf4:	bfbc      	itt	lt
   d4cf6:	18d2      	addlt	r2, r2, r3
   d4cf8:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4cfa:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4cfe:	bfb8      	it	lt
   d4d00:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4d02:	18d6      	adds	r6, r2, r3
   d4d04:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4d06:	bfc4      	itt	gt
   d4d08:	1aa3      	subgt	r3, r4, r2
   d4d0a:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4d0c:	2b00      	cmp	r3, #0
   d4d0e:	dd22      	ble.n	d4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4d10:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4d12:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d4d16:	4810      	ldr	r0, [pc, #64]	; (d4d58 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d4d18:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4d1c:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d4d1e:	2201      	movs	r2, #1
   d4d20:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d4d24:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4d26:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d4d28:	d109      	bne.n	d4d3e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d4d2a:	1e5a      	subs	r2, r3, #1
   d4d2c:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d4d2e:	1c5c      	adds	r4, r3, #1
   d4d30:	d011      	beq.n	d4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4d32:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4d36:	430a      	orrs	r2, r1
   d4d38:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4d3c:	e7f5      	b.n	d4d2a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d4d3e:	43c9      	mvns	r1, r1
   d4d40:	b2c9      	uxtb	r1, r1
   d4d42:	1e5a      	subs	r2, r3, #1
   d4d44:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d4d46:	1c5a      	adds	r2, r3, #1
   d4d48:	d005      	beq.n	d4d56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4d4a:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4d4e:	400a      	ands	r2, r1
   d4d50:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4d54:	e7f5      	b.n	d4d42 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d4d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d58:	2003dd78 	.word	0x2003dd78
   d4d5c:	2003dd70 	.word	0x2003dd70
   d4d60:	2003dd68 	.word	0x2003dd68

000d4d64 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4d66:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4d68:	4606      	mov	r6, r0
   d4d6a:	4614      	mov	r4, r2
   d4d6c:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4d6e:	db3f      	blt.n	d4df0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4d70:	f000 fbb4 	bl	d54dc <_ZN12Adafruit_GFX5widthEv>
   d4d74:	4285      	cmp	r5, r0
   d4d76:	da3b      	bge.n	d4df0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4d78:	2c00      	cmp	r4, #0
   d4d7a:	db39      	blt.n	d4df0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4d7c:	4630      	mov	r0, r6
   d4d7e:	f000 fbb0 	bl	d54e2 <_ZN12Adafruit_GFX6heightEv>
   d4d82:	4284      	cmp	r4, r0
   d4d84:	da34      	bge.n	d4df0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4d86:	4630      	mov	r0, r6
   d4d88:	f000 fba6 	bl	d54d8 <_ZN12Adafruit_GFX11getRotationEv>
   d4d8c:	2802      	cmp	r0, #2
   d4d8e:	d127      	bne.n	d4de0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4d90:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d4d92:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4d94:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d4d96:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4d98:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d4d9a:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4d9c:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d4d9e:	b204      	sxth	r4, r0
   d4da0:	e006      	b.n	d4db0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4da2:	2801      	cmp	r0, #1
   d4da4:	d104      	bne.n	d4db0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d4da6:	8933      	ldrh	r3, [r6, #8]
   d4da8:	3b01      	subs	r3, #1
   d4daa:	1b1b      	subs	r3, r3, r4
   d4dac:	462c      	mov	r4, r5
   d4dae:	b21d      	sxth	r5, r3
   d4db0:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4db2:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4db4:	fb94 f0f0 	sdiv	r0, r4, r0
   d4db8:	b200      	sxth	r0, r0
   d4dba:	4b0e      	ldr	r3, [pc, #56]	; (d4df4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d4dbc:	f004 0207 	and.w	r2, r4, #7
   d4dc0:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4dc4:	d104      	bne.n	d4dd0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4dc6:	4097      	lsls	r7, r2
   d4dc8:	5c5a      	ldrb	r2, [r3, r1]
   d4dca:	4317      	orrs	r7, r2
   d4dcc:	545f      	strb	r7, [r3, r1]
   d4dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d4dd0:	5c58      	ldrb	r0, [r3, r1]
   d4dd2:	2701      	movs	r7, #1
   d4dd4:	fa07 f202 	lsl.w	r2, r7, r2
   d4dd8:	ea20 0202 	bic.w	r2, r0, r2
   d4ddc:	545a      	strb	r2, [r3, r1]
   d4dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4de0:	2803      	cmp	r0, #3
   d4de2:	d1de      	bne.n	d4da2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d4de4:	8973      	ldrh	r3, [r6, #10]
   d4de6:	3b01      	subs	r3, #1
   d4de8:	1b5b      	subs	r3, r3, r5
   d4dea:	4625      	mov	r5, r4
   d4dec:	b21c      	sxth	r4, r3
   d4dee:	e7df      	b.n	d4db0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d4df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4df2:	bf00      	nop
   d4df4:	2003dd78 	.word	0x2003dd78

000d4df8 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4df8:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4dfa:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4dfc:	4604      	mov	r4, r0
   d4dfe:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4e00:	2180      	movs	r1, #128	; 0x80
   d4e02:	f000 fa87 	bl	d5314 <_ZN12Adafruit_GFXC1Ess>
   d4e06:	4b06      	ldr	r3, [pc, #24]	; (d4e20 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d4e08:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d4e0a:	23ff      	movs	r3, #255	; 0xff
   d4e0c:	7763      	strb	r3, [r4, #29]
   d4e0e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d4e12:	77e3      	strb	r3, [r4, #31]
   d4e14:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d4e16:	f884 5020 	strb.w	r5, [r4, #32]
}
   d4e1a:	4620      	mov	r0, r4
   d4e1c:	bd38      	pop	{r3, r4, r5, pc}
   d4e1e:	bf00      	nop
   d4e20:	000d8118 	.word	0x000d8118

000d4e24 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d4e24:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4e28:	2100      	movs	r1, #0
   d4e2a:	4801      	ldr	r0, [pc, #4]	; (d4e30 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d4e2c:	f003 b825 	b.w	d7e7a <memset>
   d4e30:	2003dd78 	.word	0x2003dd78

000d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4e34:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d4e36:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4e3a:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4e3c:	4604      	mov	r4, r0
   d4e3e:	460d      	mov	r5, r1
  if (sid != -1)
   d4e40:	d028      	beq.n	d4e94 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d4e42:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d4e46:	2101      	movs	r1, #1
   d4e48:	b280      	uxth	r0, r0
   d4e4a:	f002 f9ea 	bl	d7222 <digitalWrite>
    digitalWrite(dc, LOW);
   d4e4e:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4e52:	2100      	movs	r1, #0
   d4e54:	b280      	uxth	r0, r0
   d4e56:	f002 f9e4 	bl	d7222 <digitalWrite>
    digitalWrite(cs, LOW);
   d4e5a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4e5e:	2100      	movs	r1, #0
   d4e60:	b280      	uxth	r0, r0
   d4e62:	f002 f9de 	bl	d7222 <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4e66:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4e6a:	b12b      	cbz	r3, d4e78 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4e6c:	f7ff faba 	bl	d43e4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4e70:	4629      	mov	r1, r5
   d4e72:	f001 f975 	bl	d6160 <_ZN8SPIClass8transferEh>
   d4e76:	e005      	b.n	d4e84 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4e78:	462b      	mov	r3, r5
   d4e7a:	2201      	movs	r2, #1
   d4e7c:	7fa1      	ldrb	r1, [r4, #30]
   d4e7e:	7f60      	ldrb	r0, [r4, #29]
   d4e80:	f002 f9fb 	bl	d727a <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d4e84:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4e88:	2101      	movs	r1, #1
   d4e8a:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d4e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d4e90:	f002 b9c7 	b.w	d7222 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d4e94:	f002 fa2e 	bl	d72f4 <_Z19__fetch_global_Wirev>
   d4e98:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4e9c:	f001 fd05 	bl	d68aa <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d4ea0:	f002 fa28 	bl	d72f4 <_Z19__fetch_global_Wirev>
   d4ea4:	6803      	ldr	r3, [r0, #0]
   d4ea6:	2100      	movs	r1, #0
   d4ea8:	689b      	ldr	r3, [r3, #8]
   d4eaa:	4798      	blx	r3
    Wire.write(c);
   d4eac:	f002 fa22 	bl	d72f4 <_Z19__fetch_global_Wirev>
   d4eb0:	6803      	ldr	r3, [r0, #0]
   d4eb2:	4629      	mov	r1, r5
   d4eb4:	689b      	ldr	r3, [r3, #8]
   d4eb6:	4798      	blx	r3
    Wire.endTransmission();
   d4eb8:	f002 fa1c 	bl	d72f4 <_Z19__fetch_global_Wirev>
  }
}
   d4ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d4ec0:	f001 bcfa 	b.w	d68b8 <_ZN7TwoWire15endTransmissionEv>

000d4ec4 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d4ec4:	b538      	push	{r3, r4, r5, lr}
   d4ec6:	4604      	mov	r4, r0
   d4ec8:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d4eca:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d4ecc:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d4ed0:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d4ed2:	3301      	adds	r3, #1
   d4ed4:	d037      	beq.n	d4f46 <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d4ed6:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d4eda:	2101      	movs	r1, #1
   d4edc:	b280      	uxth	r0, r0
   d4ede:	f002 f98f 	bl	d7200 <pinMode>
    pinMode(cs, OUTPUT);
   d4ee2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4ee6:	2101      	movs	r1, #1
   d4ee8:	b280      	uxth	r0, r0
   d4eea:	f002 f989 	bl	d7200 <pinMode>
    if (!hwSPI){
   d4eee:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4ef2:	b95b      	cbnz	r3, d4f0c <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d4ef4:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4ef8:	2101      	movs	r1, #1
   d4efa:	b280      	uxth	r0, r0
   d4efc:	f002 f980 	bl	d7200 <pinMode>
    	pinMode(sclk, OUTPUT);
   d4f00:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d4f04:	2101      	movs	r1, #1
   d4f06:	b280      	uxth	r0, r0
   d4f08:	f002 f97a 	bl	d7200 <pinMode>
    	}
    if (hwSPI){
   d4f0c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4f10:	b1eb      	cbz	r3, d4f4e <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d4f12:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4f16:	2101      	movs	r1, #1
   d4f18:	b280      	uxth	r0, r0
   d4f1a:	f002 f982 	bl	d7222 <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d4f1e:	f7ff fa61 	bl	d43e4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4f22:	2101      	movs	r1, #1
   d4f24:	f001 f81b 	bl	d5f5e <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d4f28:	f7ff fa5c 	bl	d43e4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4f2c:	2110      	movs	r1, #16
   d4f2e:	f001 f8f3 	bl	d6118 <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d4f32:	f7ff fa57 	bl	d43e4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4f36:	2100      	movs	r1, #0
   d4f38:	f001 f822 	bl	d5f80 <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4f3c:	f7ff fa52 	bl	d43e4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4f40:	f000 fffc 	bl	d5f3c <_ZN8SPIClass5beginEv>
   d4f44:	e003      	b.n	d4f4e <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d4f46:	f002 f9d5 	bl	d72f4 <_Z19__fetch_global_Wirev>
   d4f4a:	f001 fc73 	bl	d6834 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d4f4e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4f52:	2101      	movs	r1, #1
   d4f54:	b280      	uxth	r0, r0
   d4f56:	f002 f953 	bl	d7200 <pinMode>
  digitalWrite(rst, HIGH);
   d4f5a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4f5e:	2101      	movs	r1, #1
   d4f60:	b280      	uxth	r0, r0
   d4f62:	f002 f95e 	bl	d7222 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d4f66:	2001      	movs	r0, #1
   d4f68:	f001 f9f8 	bl	d635c <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d4f6c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4f70:	2100      	movs	r1, #0
   d4f72:	b280      	uxth	r0, r0
   d4f74:	f002 f955 	bl	d7222 <digitalWrite>
  // wait 10ms
  delay(10);
   d4f78:	200a      	movs	r0, #10
   d4f7a:	f001 f9ef 	bl	d635c <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d4f7e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4f82:	2101      	movs	r1, #1
   d4f84:	b280      	uxth	r0, r0
   d4f86:	f002 f94c 	bl	d7222 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d4f8a:	4620      	mov	r0, r4
   d4f8c:	21ae      	movs	r1, #174	; 0xae
   d4f8e:	f7ff ff51 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d4f92:	4620      	mov	r0, r4
   d4f94:	21d5      	movs	r1, #213	; 0xd5
   d4f96:	f7ff ff4d 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d4f9a:	4620      	mov	r0, r4
   d4f9c:	2180      	movs	r1, #128	; 0x80
   d4f9e:	f7ff ff49 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d4fa2:	4620      	mov	r0, r4
   d4fa4:	21a8      	movs	r1, #168	; 0xa8
   d4fa6:	f7ff ff45 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d4faa:	4620      	mov	r0, r4
   d4fac:	213f      	movs	r1, #63	; 0x3f
   d4fae:	f7ff ff41 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d4fb2:	4620      	mov	r0, r4
   d4fb4:	21d3      	movs	r1, #211	; 0xd3
   d4fb6:	f7ff ff3d 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d4fba:	4620      	mov	r0, r4
   d4fbc:	2100      	movs	r1, #0
   d4fbe:	f7ff ff39 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d4fc2:	4620      	mov	r0, r4
   d4fc4:	2140      	movs	r1, #64	; 0x40
   d4fc6:	f7ff ff35 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d4fca:	218d      	movs	r1, #141	; 0x8d
   d4fcc:	4620      	mov	r0, r4
   d4fce:	f7ff ff31 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4fd2:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d4fd4:	bf0c      	ite	eq
   d4fd6:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d4fd8:	2114      	movne	r1, #20
   d4fda:	4620      	mov	r0, r4
   d4fdc:	f7ff ff2a 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d4fe0:	4620      	mov	r0, r4
   d4fe2:	2120      	movs	r1, #32
   d4fe4:	f7ff ff26 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d4fe8:	4620      	mov	r0, r4
   d4fea:	2100      	movs	r1, #0
   d4fec:	f7ff ff22 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d4ff0:	4620      	mov	r0, r4
   d4ff2:	21a1      	movs	r1, #161	; 0xa1
   d4ff4:	f7ff ff1e 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d4ff8:	4620      	mov	r0, r4
   d4ffa:	21c8      	movs	r1, #200	; 0xc8
   d4ffc:	f7ff ff1a 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d5000:	4620      	mov	r0, r4
   d5002:	21da      	movs	r1, #218	; 0xda
   d5004:	f7ff ff16 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d5008:	4620      	mov	r0, r4
   d500a:	2112      	movs	r1, #18
   d500c:	f7ff ff12 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d5010:	2181      	movs	r1, #129	; 0x81
   d5012:	4620      	mov	r0, r4
   d5014:	f7ff ff0e 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5018:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d501a:	bf0c      	ite	eq
   d501c:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d501e:	21cf      	movne	r1, #207	; 0xcf
   d5020:	4620      	mov	r0, r4
   d5022:	f7ff ff07 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d5026:	21d9      	movs	r1, #217	; 0xd9
   d5028:	4620      	mov	r0, r4
   d502a:	f7ff ff03 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d502e:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d5030:	bf0c      	ite	eq
   d5032:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d5034:	21f1      	movne	r1, #241	; 0xf1
   d5036:	4620      	mov	r0, r4
   d5038:	f7ff fefc 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d503c:	4620      	mov	r0, r4
   d503e:	21db      	movs	r1, #219	; 0xdb
   d5040:	f7ff fef8 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d5044:	4620      	mov	r0, r4
   d5046:	2140      	movs	r1, #64	; 0x40
   d5048:	f7ff fef4 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d504c:	4620      	mov	r0, r4
   d504e:	21a4      	movs	r1, #164	; 0xa4
   d5050:	f7ff fef0 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d5054:	4620      	mov	r0, r4
   d5056:	21a6      	movs	r1, #166	; 0xa6
   d5058:	f7ff feec 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d505c:	4620      	mov	r0, r4
   d505e:	21af      	movs	r1, #175	; 0xaf
}
   d5060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5064:	f7ff bee6 	b.w	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d5068 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d5068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d506c:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d506e:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d5070:	f7ff fee0 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d5074:	2100      	movs	r1, #0
   d5076:	4620      	mov	r0, r4
   d5078:	f7ff fedc 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d507c:	217f      	movs	r1, #127	; 0x7f
   d507e:	4620      	mov	r0, r4
   d5080:	f7ff fed8 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d5084:	2122      	movs	r1, #34	; 0x22
   d5086:	4620      	mov	r0, r4
   d5088:	f7ff fed4 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d508c:	2100      	movs	r1, #0
   d508e:	4620      	mov	r0, r4
   d5090:	f7ff fed0 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d5094:	2107      	movs	r1, #7
   d5096:	4620      	mov	r0, r4
   d5098:	f7ff fecc 	bl	d4e34 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d509c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d50a0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d5160 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d50a4:	3301      	adds	r3, #1
   d50a6:	d035      	beq.n	d5114 <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d50a8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d50ac:	2101      	movs	r1, #1
   d50ae:	b280      	uxth	r0, r0
   d50b0:	f002 f8b7 	bl	d7222 <digitalWrite>
    digitalWrite(dc, HIGH);
   d50b4:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d50b8:	2101      	movs	r1, #1
   d50ba:	b280      	uxth	r0, r0
   d50bc:	f002 f8b1 	bl	d7222 <digitalWrite>
    digitalWrite(cs, LOW);
   d50c0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d50c4:	2100      	movs	r1, #0
   d50c6:	b280      	uxth	r0, r0
   d50c8:	f002 f8ab 	bl	d7222 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d50cc:	2001      	movs	r0, #1
   d50ce:	f000 fcf3 	bl	d5ab8 <HAL_Delay_Microseconds>
   d50d2:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d50d4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d50d8:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d50dc:	b12b      	cbz	r3, d50ea <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d50de:	f7ff f981 	bl	d43e4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d50e2:	4631      	mov	r1, r6
   d50e4:	f001 f83c 	bl	d6160 <_ZN8SPIClass8transferEh>
   d50e8:	e005      	b.n	d50f6 <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d50ea:	4633      	mov	r3, r6
   d50ec:	2201      	movs	r2, #1
   d50ee:	7fa1      	ldrb	r1, [r4, #30]
   d50f0:	7f60      	ldrb	r0, [r4, #29]
   d50f2:	f002 f8c2 	bl	d727a <shiftOut>
   d50f6:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d50f8:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d50fc:	d1ea      	bne.n	d50d4 <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d50fe:	2001      	movs	r0, #1
   d5100:	f000 fcda 	bl	d5ab8 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d5104:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5108:	2101      	movs	r1, #1
   d510a:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d510c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d5110:	f002 b887 	b.w	d7222 <digitalWrite>
   d5114:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d5116:	f002 f8ed 	bl	d72f4 <_Z19__fetch_global_Wirev>
   d511a:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d511e:	f001 fbc4 	bl	d68aa <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d5122:	f002 f8e7 	bl	d72f4 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5126:	6803      	ldr	r3, [r0, #0]
   d5128:	2140      	movs	r1, #64	; 0x40
   d512a:	689b      	ldr	r3, [r3, #8]
   d512c:	4798      	blx	r3
   d512e:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d5130:	f002 f8e0 	bl	d72f4 <_Z19__fetch_global_Wirev>
   d5134:	19af      	adds	r7, r5, r6
   d5136:	6803      	ldr	r3, [r0, #0]
   d5138:	b2bf      	uxth	r7, r7
   d513a:	689b      	ldr	r3, [r3, #8]
   d513c:	f818 1007 	ldrb.w	r1, [r8, r7]
   d5140:	3601      	adds	r6, #1
   d5142:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d5144:	2e10      	cmp	r6, #16
   d5146:	d1f3      	bne.n	d5130 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d5148:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d514a:	f002 f8d3 	bl	d72f4 <_Z19__fetch_global_Wirev>
   d514e:	b2ad      	uxth	r5, r5
   d5150:	f001 fbb2 	bl	d68b8 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d5154:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d5158:	d1dd      	bne.n	d5116 <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d515a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d515e:	bf00      	nop
   d5160:	2003dd78 	.word	0x2003dd78

000d5164 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d5164:	f000 bc18 	b.w	d5998 <HAL_Pin_Map>

000d5168 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d516c:	b085      	sub	sp, #20
   d516e:	461e      	mov	r6, r3
   d5170:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d5174:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d5178:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d517a:	1a9a      	subs	r2, r3, r2
   d517c:	2a00      	cmp	r2, #0
   d517e:	bfb8      	it	lt
   d5180:	4252      	neglt	r2, r2
   d5182:	9200      	str	r2, [sp, #0]
   d5184:	1a72      	subs	r2, r6, r1
   d5186:	2a00      	cmp	r2, #0
   d5188:	bfb8      	it	lt
   d518a:	4252      	neglt	r2, r2
   d518c:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d518e:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d5190:	9a00      	ldr	r2, [sp, #0]
   d5192:	9901      	ldr	r1, [sp, #4]
   d5194:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5196:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d5198:	dd05      	ble.n	d51a6 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d519a:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d519c:	461e      	mov	r6, r3
   d519e:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d51a0:	4622      	mov	r2, r4
    swap(x0, y0);
   d51a2:	462c      	mov	r4, r5
   d51a4:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d51a6:	42b4      	cmp	r4, r6
   d51a8:	dd05      	ble.n	d51b6 <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d51aa:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d51ac:	461d      	mov	r5, r3
   d51ae:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d51b0:	4622      	mov	r2, r4
   d51b2:	4634      	mov	r4, r6
   d51b4:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d51b6:	1b5a      	subs	r2, r3, r5
   d51b8:	2a00      	cmp	r2, #0
   d51ba:	bfb8      	it	lt
   d51bc:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d51be:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d51c2:	429d      	cmp	r5, r3
   d51c4:	bfb4      	ite	lt
   d51c6:	2301      	movlt	r3, #1
   d51c8:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d51cc:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d51d0:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d51d2:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d51d4:	fa0f f788 	sxth.w	r7, r8
   d51d8:	2202      	movs	r2, #2
   d51da:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d51de:	42b4      	cmp	r4, r6
   d51e0:	dc1f      	bgt.n	d5222 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d51e2:	9a01      	ldr	r2, [sp, #4]
   d51e4:	9b00      	ldr	r3, [sp, #0]
   d51e6:	4293      	cmp	r3, r2
   d51e8:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d51ec:	bfc8      	it	gt
   d51ee:	4622      	movgt	r2, r4
   d51f0:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d51f4:	bfc8      	it	gt
   d51f6:	4629      	movgt	r1, r5
   d51f8:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d51fa:	bfdc      	itt	le
   d51fc:	462a      	movle	r2, r5
   d51fe:	4621      	movle	r1, r4
   d5200:	4648      	mov	r0, r9
   d5202:	47d8      	blx	fp
    }
    err -= dy;
   d5204:	9b03      	ldr	r3, [sp, #12]
   d5206:	1aff      	subs	r7, r7, r3
   d5208:	b2bb      	uxth	r3, r7
   d520a:	b21f      	sxth	r7, r3
    if (err < 0) {
   d520c:	2f00      	cmp	r7, #0
   d520e:	da05      	bge.n	d521c <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d5210:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d5212:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d5216:	4415      	add	r5, r2
   d5218:	b22d      	sxth	r5, r5
      err += dx;
   d521a:	b23f      	sxth	r7, r7
   d521c:	3401      	adds	r4, #1
   d521e:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d5220:	e7dd      	b.n	d51de <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d5222:	b005      	add	sp, #20
   d5224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5228 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5228:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d522c:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d5230:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5232:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d5236:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5238:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d523a:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d523c:	4691      	mov	r9, r2
   d523e:	460d      	mov	r5, r1
   d5240:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d5242:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d5244:	6823      	ldr	r3, [r4, #0]
   d5246:	9600      	str	r6, [sp, #0]
   d5248:	f10a 32ff 	add.w	r2, sl, #4294967295
   d524c:	444a      	add	r2, r9
   d524e:	69df      	ldr	r7, [r3, #28]
   d5250:	4629      	mov	r1, r5
   d5252:	4643      	mov	r3, r8
   d5254:	4620      	mov	r0, r4
   d5256:	b212      	sxth	r2, r2
   d5258:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d525a:	6823      	ldr	r3, [r4, #0]
   d525c:	9600      	str	r6, [sp, #0]
   d525e:	699f      	ldr	r7, [r3, #24]
   d5260:	464a      	mov	r2, r9
   d5262:	4653      	mov	r3, sl
   d5264:	4629      	mov	r1, r5
   d5266:	4620      	mov	r0, r4
   d5268:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d526a:	6823      	ldr	r3, [r4, #0]
   d526c:	960a      	str	r6, [sp, #40]	; 0x28
   d526e:	f108 31ff 	add.w	r1, r8, #4294967295
   d5272:	4429      	add	r1, r5
   d5274:	699d      	ldr	r5, [r3, #24]
   d5276:	464a      	mov	r2, r9
   d5278:	4653      	mov	r3, sl
   d527a:	b209      	sxth	r1, r1
   d527c:	4620      	mov	r0, r4
   d527e:	46ac      	mov	ip, r5
}
   d5280:	b002      	add	sp, #8
   d5282:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d5286:	4760      	bx	ip

000d5288 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d5288:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d528a:	3b01      	subs	r3, #1
   d528c:	4413      	add	r3, r2
   d528e:	6804      	ldr	r4, [r0, #0]
   d5290:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d5294:	9501      	str	r5, [sp, #4]
   d5296:	b21b      	sxth	r3, r3
   d5298:	9300      	str	r3, [sp, #0]
   d529a:	6964      	ldr	r4, [r4, #20]
   d529c:	460b      	mov	r3, r1
   d529e:	47a0      	blx	r4
}
   d52a0:	b003      	add	sp, #12
   d52a2:	bd30      	pop	{r4, r5, pc}

000d52a4 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d52a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d52a6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d52aa:	6804      	ldr	r4, [r0, #0]
   d52ac:	e88d 0024 	stmia.w	sp, {r2, r5}
   d52b0:	3b01      	subs	r3, #1
   d52b2:	440b      	add	r3, r1
   d52b4:	6964      	ldr	r4, [r4, #20]
   d52b6:	b21b      	sxth	r3, r3
   d52b8:	47a0      	blx	r4
}
   d52ba:	b003      	add	sp, #12
   d52bc:	bd30      	pop	{r4, r5, pc}

000d52be <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d52be:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d52c2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d52c6:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d52ca:	4605      	mov	r5, r0
   d52cc:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d52ce:	460c      	mov	r4, r1
   d52d0:	eb01 0a03 	add.w	sl, r1, r3
   d52d4:	4554      	cmp	r4, sl
   d52d6:	da0b      	bge.n	d52f0 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d52d8:	682b      	ldr	r3, [r5, #0]
   d52da:	f8cd 9000 	str.w	r9, [sp]
   d52de:	699e      	ldr	r6, [r3, #24]
   d52e0:	4621      	mov	r1, r4
   d52e2:	4643      	mov	r3, r8
   d52e4:	463a      	mov	r2, r7
   d52e6:	4628      	mov	r0, r5
   d52e8:	3401      	adds	r4, #1
   d52ea:	47b0      	blx	r6
   d52ec:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d52ee:	e7f1      	b.n	d52d4 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d52f0:	b002      	add	sp, #8
   d52f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d52f6 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d52f6:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d52f8:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d52fc:	6804      	ldr	r4, [r0, #0]
   d52fe:	9101      	str	r1, [sp, #4]
   d5300:	9200      	str	r2, [sp, #0]
   d5302:	2200      	movs	r2, #0
   d5304:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5308:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d530a:	4611      	mov	r1, r2
   d530c:	47a0      	blx	r4
}
   d530e:	b002      	add	sp, #8
   d5310:	bd10      	pop	{r4, pc}

000d5312 <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d5312:	4770      	bx	lr

000d5314 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d5314:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d5316:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5318:	2400      	movs	r4, #0
   d531a:	4d08      	ldr	r5, [pc, #32]	; (d533c <_ZN12Adafruit_GFXC1Ess+0x28>)
   d531c:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d531e:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d5320:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d5322:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d5326:	2201      	movs	r2, #1
   d5328:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d532a:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d532c:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d532e:	8204      	strh	r4, [r0, #16]
   d5330:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d5332:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d5334:	82c1      	strh	r1, [r0, #22]
   d5336:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d5338:	7682      	strb	r2, [r0, #26]
}
   d533a:	bd30      	pop	{r4, r5, pc}
   d533c:	000d8150 	.word	0x000d8150

000d5340 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5344:	b08f      	sub	sp, #60	; 0x3c
   d5346:	4605      	mov	r5, r0
   d5348:	9106      	str	r1, [sp, #24]
   d534a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d534e:	9107      	str	r1, [sp, #28]
   d5350:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d5354:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d5356:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d535a:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d535c:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d5360:	4281      	cmp	r1, r0
   d5362:	dd7c      	ble.n	d545e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d5364:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d5368:	4291      	cmp	r1, r2
   d536a:	dd78      	ble.n	d545e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d536c:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d536e:	fb11 0008 	smlabb	r0, r1, r8, r0
   d5372:	2800      	cmp	r0, #0
   d5374:	dd73      	ble.n	d545e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d5376:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d537a:	2800      	cmp	r0, #0
   d537c:	dd6f      	ble.n	d545e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d537e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5382:	b296      	uxth	r6, r2
   d5384:	930c      	str	r3, [sp, #48]	; 0x30
   d5386:	f106 0308 	add.w	r3, r6, #8
   d538a:	b29b      	uxth	r3, r3
   d538c:	9109      	str	r1, [sp, #36]	; 0x24
   d538e:	2400      	movs	r4, #0
   d5390:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d5392:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d5394:	bf1c      	itt	ne
   d5396:	4b33      	ldrne	r3, [pc, #204]	; (d5464 <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d5398:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d539a:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d539c:	bf16      	itet	ne
   d539e:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d53a0:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d53a4:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d53a8:	9604      	str	r6, [sp, #16]
   d53aa:	fa1f f388 	uxth.w	r3, r8
   d53ae:	9303      	str	r3, [sp, #12]
   d53b0:	9a03      	ldr	r2, [sp, #12]
   d53b2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d53b6:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d53ba:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d53be:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d53c0:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d53c2:	920a      	str	r2, [sp, #40]	; 0x28
   d53c4:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d53c6:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d53ca:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d53cc:	f019 0f01 	tst.w	r9, #1
   d53d0:	d011      	beq.n	d53f6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d53d2:	f1b8 0f01 	cmp.w	r8, #1
   d53d6:	682b      	ldr	r3, [r5, #0]
   d53d8:	d103      	bne.n	d53e2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d53da:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d53de:	9b07      	ldr	r3, [sp, #28]
   d53e0:	e014      	b.n	d540c <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d53e2:	9a07      	ldr	r2, [sp, #28]
   d53e4:	9201      	str	r2, [sp, #4]
   d53e6:	f8cd a000 	str.w	sl, [sp]
   d53ea:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d53ee:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d53f2:	4653      	mov	r3, sl
   d53f4:	e018      	b.n	d5428 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d53f6:	9b07      	ldr	r3, [sp, #28]
   d53f8:	9a08      	ldr	r2, [sp, #32]
   d53fa:	4293      	cmp	r3, r2
   d53fc:	d017      	beq.n	d542e <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d53fe:	f1b8 0f01 	cmp.w	r8, #1
   d5402:	682b      	ldr	r3, [r5, #0]
   d5404:	d107      	bne.n	d5416 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d5406:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d540a:	4613      	mov	r3, r2
   d540c:	b23a      	sxth	r2, r7
   d540e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d5410:	4628      	mov	r0, r5
   d5412:	47d8      	blx	fp
   d5414:	e00b      	b.n	d542e <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5416:	9a08      	ldr	r2, [sp, #32]
   d5418:	9201      	str	r2, [sp, #4]
   d541a:	f8cd a000 	str.w	sl, [sp]
   d541e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d5422:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d5426:	4653      	mov	r3, sl
   d5428:	990a      	ldr	r1, [sp, #40]	; 0x28
   d542a:	4628      	mov	r0, r5
   d542c:	47d8      	blx	fp
   d542e:	9b04      	ldr	r3, [sp, #16]
   d5430:	9a03      	ldr	r2, [sp, #12]
   d5432:	4413      	add	r3, r2
   d5434:	b29b      	uxth	r3, r3
   d5436:	9304      	str	r3, [sp, #16]
   d5438:	9b05      	ldr	r3, [sp, #20]
   d543a:	4413      	add	r3, r2
   d543c:	b29b      	uxth	r3, r3
   d543e:	3701      	adds	r7, #1
   d5440:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d5442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d5444:	b2bf      	uxth	r7, r7
   d5446:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d5448:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d544c:	d1be      	bne.n	d53cc <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d544e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5450:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d5452:	3401      	adds	r4, #1
   d5454:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5458:	b264      	sxtb	r4, r4
   d545a:	9309      	str	r3, [sp, #36]	; 0x24
   d545c:	d199      	bne.n	d5392 <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d545e:	b00f      	add	sp, #60	; 0x3c
   d5460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5464:	000d8180 	.word	0x000d8180

000d5468 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d5468:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d546a:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d546c:	b085      	sub	sp, #20
   d546e:	4604      	mov	r4, r0
   d5470:	460b      	mov	r3, r1

  if (c == '\n') {
   d5472:	d104      	bne.n	d547e <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d5474:	7e02      	ldrb	r2, [r0, #24]
   d5476:	8a43      	ldrh	r3, [r0, #18]
   d5478:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d547c:	e023      	b.n	d54c6 <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d547e:	290d      	cmp	r1, #13
   d5480:	d024      	beq.n	d54cc <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d5482:	7e05      	ldrb	r5, [r0, #24]
   d5484:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d5488:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d548c:	9502      	str	r5, [sp, #8]
   d548e:	8ac5      	ldrh	r5, [r0, #22]
   d5490:	9501      	str	r5, [sp, #4]
   d5492:	8a85      	ldrh	r5, [r0, #20]
   d5494:	9500      	str	r5, [sp, #0]
   d5496:	f7ff ff53 	bl	d5340 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d549a:	7e22      	ldrb	r2, [r4, #24]
   d549c:	8a23      	ldrh	r3, [r4, #16]
   d549e:	b291      	uxth	r1, r2
   d54a0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d54a4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d54a8:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d54aa:	b21b      	sxth	r3, r3
   d54ac:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d54ae:	b168      	cbz	r0, d54cc <_ZN12Adafruit_GFX5writeEh+0x64>
   d54b0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d54b4:	f06f 0505 	mvn.w	r5, #5
   d54b8:	fb05 0202 	mla	r2, r5, r2, r0
   d54bc:	4293      	cmp	r3, r2
   d54be:	dd05      	ble.n	d54cc <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d54c0:	8a63      	ldrh	r3, [r4, #18]
   d54c2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d54c6:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d54c8:	2300      	movs	r3, #0
   d54ca:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d54cc:	2001      	movs	r0, #1
   d54ce:	b005      	add	sp, #20
   d54d0:	bd30      	pop	{r4, r5, pc}

000d54d2 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d54d2:	82c1      	strh	r1, [r0, #22]
   d54d4:	8281      	strh	r1, [r0, #20]
   d54d6:	4770      	bx	lr

000d54d8 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d54d8:	7e40      	ldrb	r0, [r0, #25]
   d54da:	4770      	bx	lr

000d54dc <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d54dc:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d54e0:	4770      	bx	lr

000d54e2 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d54e2:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d54e6:	4770      	bx	lr

000d54e8 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d54e8:	f000 ba56 	b.w	d5998 <HAL_Pin_Map>

000d54ec <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d54ec:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d54ee:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d54f2:	6803      	ldr	r3, [r0, #0]
   d54f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d54f6:	4798      	blx	r3
}
   d54f8:	3000      	adds	r0, #0
   d54fa:	bf18      	it	ne
   d54fc:	2001      	movne	r0, #1
   d54fe:	bd08      	pop	{r3, pc}

000d5500 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d5500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5502:	4606      	mov	r6, r0
   d5504:	460f      	mov	r7, r1
   d5506:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d5508:	b1c4      	cbz	r4, d553c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d550a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d550e:	6803      	ldr	r3, [r0, #0]
   d5510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5512:	4798      	blx	r3
   d5514:	b908      	cbnz	r0, d551a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d5516:	2000      	movs	r0, #0
   d5518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d551a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d551e:	2cfa      	cmp	r4, #250	; 0xfa
   d5520:	6803      	ldr	r3, [r0, #0]
   d5522:	4625      	mov	r5, r4
   d5524:	bfa8      	it	ge
   d5526:	25fa      	movge	r5, #250	; 0xfa
   d5528:	68db      	ldr	r3, [r3, #12]
   d552a:	462a      	mov	r2, r5
   d552c:	4639      	mov	r1, r7
   d552e:	4798      	blx	r3
   d5530:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d5532:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d5534:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d5536:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d5538:	d0e6      	beq.n	d5508 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d553a:	e7ec      	b.n	d5516 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d553c:	2001      	movs	r0, #1
}
   d553e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5540 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d5540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5544:	4606      	mov	r6, r0
   d5546:	4688      	mov	r8, r1
   d5548:	4691      	mov	r9, r2
   d554a:	461f      	mov	r7, r3
   d554c:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d554e:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d5550:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5554:	6803      	ldr	r3, [r0, #0]
   d5556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5558:	4798      	blx	r3
   d555a:	b1d0      	cbz	r0, d5592 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d555c:	2d00      	cmp	r5, #0
   d555e:	db18      	blt.n	d5592 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d5560:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5564:	6803      	ldr	r3, [r0, #0]
   d5566:	691b      	ldr	r3, [r3, #16]
   d5568:	4798      	blx	r3
   d556a:	b160      	cbz	r0, d5586 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d556c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5570:	6803      	ldr	r3, [r0, #0]
   d5572:	695b      	ldr	r3, [r3, #20]
   d5574:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d5576:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d557a:	3401      	adds	r4, #1
   d557c:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d557e:	454c      	cmp	r4, r9
   d5580:	d007      	beq.n	d5592 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d5582:	463d      	mov	r5, r7
   d5584:	e7ec      	b.n	d5560 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d5586:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d5588:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d558a:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d558c:	f000 fee6 	bl	d635c <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d5590:	e7de      	b.n	d5550 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d5592:	4620      	mov	r0, r4
   d5594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5598 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d5598:	b570      	push	{r4, r5, r6, lr}
   d559a:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d559c:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d55a0:	2296      	movs	r2, #150	; 0x96
   d55a2:	2100      	movs	r1, #0
   d55a4:	4628      	mov	r0, r5
   d55a6:	f002 fc68 	bl	d7e7a <memset>
  strcpy((char *)buffer, servername);
   d55aa:	6861      	ldr	r1, [r4, #4]
   d55ac:	4628      	mov	r0, r5
   d55ae:	f002 fc95 	bl	d7edc <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d55b2:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d55b6:	8922      	ldrh	r2, [r4, #8]
   d55b8:	6803      	ldr	r3, [r0, #0]
   d55ba:	4629      	mov	r1, r5
   d55bc:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d55be:	2300      	movs	r3, #0
   d55c0:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d55c2:	3000      	adds	r0, #0
   d55c4:	bf18      	it	ne
   d55c6:	2001      	movne	r0, #1
   d55c8:	bd70      	pop	{r4, r5, r6, pc}

000d55ca <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d55ca:	b510      	push	{r4, lr}
   d55cc:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d55ce:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d55d2:	6803      	ldr	r3, [r0, #0]
   d55d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55d6:	4798      	blx	r3
   d55d8:	b120      	cbz	r0, d55e4 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d55da:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d55de:	6803      	ldr	r3, [r0, #0]
   d55e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d55e2:	4798      	blx	r3
  }
  return true;
}
   d55e4:	2001      	movs	r0, #1
   d55e6:	bd10      	pop	{r4, pc}

000d55e8 <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d55e8:	f000 b9d6 	b.w	d5998 <HAL_Pin_Map>

000d55ec <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d55ec:	b570      	push	{r4, r5, r6, lr}
   d55ee:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d55f0:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d55f2:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d55f4:	f002 fc7a 	bl	d7eec <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d55f8:	1203      	asrs	r3, r0, #8
   d55fa:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d55fc:	7060      	strb	r0, [r4, #1]
   d55fe:	b285      	uxth	r5, r0
   d5600:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d5602:	462a      	mov	r2, r5
   d5604:	4631      	mov	r1, r6
   d5606:	4620      	mov	r0, r4
   d5608:	f002 fc78 	bl	d7efc <strncpy>
  return p+len;
}
   d560c:	1960      	adds	r0, r4, r5
   d560e:	bd70      	pop	{r4, r5, r6, pc}

000d5610 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d5610:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d5612:	6103      	str	r3, [r0, #16]
  password = pass;
   d5614:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d5616:	4d0d      	ldr	r5, [pc, #52]	; (d564c <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d5618:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d561a:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d561c:	4a0c      	ldr	r2, [pc, #48]	; (d5650 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d561e:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5620:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d5622:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d5624:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5626:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d562a:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d562e:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d5632:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d5636:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d563a:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d563c:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d563e:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d5642:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d5646:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d564a:	bd30      	pop	{r4, r5, pc}
   d564c:	000d86a8 	.word	0x000d86a8
   d5650:	000d86f7 	.word	0x000d86f7

000d5654 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d5654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5658:	fa0f fa83 	sxth.w	sl, r3
   d565c:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d565e:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5660:	699d      	ldr	r5, [r3, #24]
   d5662:	2201      	movs	r2, #1
   d5664:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d5666:	4606      	mov	r6, r0
   d5668:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d566a:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d566c:	b2c0      	uxtb	r0, r0
   d566e:	2801      	cmp	r0, #1
   d5670:	d001      	beq.n	d5676 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d5672:	2000      	movs	r0, #0
   d5674:	e034      	b.n	d56e0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d5676:	1c65      	adds	r5, r4, #1
   d5678:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d567c:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d567e:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d5682:	6833      	ldr	r3, [r6, #0]
   d5684:	699b      	ldr	r3, [r3, #24]
   d5686:	2201      	movs	r2, #1
   d5688:	461f      	mov	r7, r3
   d568a:	4629      	mov	r1, r5
   d568c:	4653      	mov	r3, sl
   d568e:	4630      	mov	r0, r6
   d5690:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d5692:	b2c0      	uxtb	r0, r0
   d5694:	2801      	cmp	r0, #1
   d5696:	d1ec      	bne.n	d5672 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d5698:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d569c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d56a0:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d56a2:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d56a6:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d56aa:	d0e2      	beq.n	d5672 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d56ac:	061b      	lsls	r3, r3, #24
   d56ae:	d4e8      	bmi.n	d5682 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d56b0:	9b01      	ldr	r3, [sp, #4]
   d56b2:	1b2c      	subs	r4, r5, r4
   d56b4:	1b1b      	subs	r3, r3, r4
   d56b6:	3b01      	subs	r3, #1
   d56b8:	4599      	cmp	r9, r3
   d56ba:	6833      	ldr	r3, [r6, #0]
   d56bc:	d906      	bls.n	d56cc <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d56be:	9a01      	ldr	r2, [sp, #4]
   d56c0:	699f      	ldr	r7, [r3, #24]
   d56c2:	3a01      	subs	r2, #1
   d56c4:	1b12      	subs	r2, r2, r4
   d56c6:	4653      	mov	r3, sl
   d56c8:	b292      	uxth	r2, r2
   d56ca:	e003      	b.n	d56d4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d56cc:	699f      	ldr	r7, [r3, #24]
   d56ce:	fa1f f289 	uxth.w	r2, r9
   d56d2:	4653      	mov	r3, sl
   d56d4:	4629      	mov	r1, r5
   d56d6:	4630      	mov	r0, r6
   d56d8:	47b8      	blx	r7
   d56da:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d56dc:	4420      	add	r0, r4
   d56de:	b280      	uxth	r0, r0
}
   d56e0:	b003      	add	sp, #12
   d56e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d56e8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d56e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56ea:	4605      	mov	r5, r0
   d56ec:	460c      	mov	r4, r1
   d56ee:	4616      	mov	r6, r2
   d56f0:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d56f2:	463b      	mov	r3, r7
   d56f4:	2296      	movs	r2, #150	; 0x96
   d56f6:	4621      	mov	r1, r4
   d56f8:	4628      	mov	r0, r5
   d56fa:	f7ff ffab 	bl	d5654 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d56fe:	b148      	cbz	r0, d5714 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d5700:	7823      	ldrb	r3, [r4, #0]
   d5702:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d5706:	d005      	beq.n	d5714 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d5708:	f000 ffae 	bl	d6668 <_Z16_fetch_usbserialv>
   d570c:	4902      	ldr	r1, [pc, #8]	; (d5718 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d570e:	f000 fdae 	bl	d626e <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d5712:	e7ee      	b.n	d56f2 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d5714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5716:	bf00      	nop
   d5718:	000d86f8 	.word	0x000d86f8

000d571c <_ZN13Adafruit_MQTT18connectErrorStringEa>:

  return ((pbuff - buffer)+rlen);
}

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   d571c:	3102      	adds	r1, #2
   d571e:	b2c9      	uxtb	r1, r1
   d5720:	2909      	cmp	r1, #9
   d5722:	bf9a      	itte	ls
   d5724:	4b02      	ldrls	r3, [pc, #8]	; (d5730 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   d5726:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   switch (code) {
   d572a:	4802      	ldrhi	r0, [pc, #8]	; (d5734 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   d572c:	4770      	bx	lr
   d572e:	bf00      	nop
   d5730:	000d86c4 	.word	0x000d86c4
   d5734:	000d8709 	.word	0x000d8709

000d5738 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   d5738:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d573a:	23e0      	movs	r3, #224	; 0xe0
   d573c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d5740:	2300      	movs	r3, #0
   d5742:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d5746:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d5748:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d574a:	695b      	ldr	r3, [r3, #20]
   d574c:	2202      	movs	r2, #2
   d574e:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d5752:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d5754:	6823      	ldr	r3, [r4, #0]
   d5756:	4620      	mov	r0, r4
   d5758:	691b      	ldr	r3, [r3, #16]

}
   d575a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d575e:	4718      	bx	r3

000d5760 <_ZN13Adafruit_MQTT4pingEh>:
  // flush input!
  DEBUG_PRINTLN(F("Flushing input buffer"));
  while (readPacket(buffer, MAXBUFFERSIZE, timeout));
}

bool Adafruit_MQTT::ping(uint8_t num) {
   d5760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5764:	4604      	mov	r4, r0
   d5766:	460d      	mov	r5, r1
   d5768:	f04f 0800 	mov.w	r8, #0
  return len;

}

uint8_t Adafruit_MQTT::pingPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d576c:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  //flushIncoming(100);

  while (num--) {
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d5770:	f100 0722 	add.w	r7, r0, #34	; 0x22
}

bool Adafruit_MQTT::ping(uint8_t num) {
  //flushIncoming(100);

  while (num--) {
   d5774:	b1d5      	cbz	r5, d57ac <_ZN13Adafruit_MQTT4pingEh+0x4c>
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d5776:	6823      	ldr	r3, [r4, #0]
  return len;

}

uint8_t Adafruit_MQTT::pingPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d5778:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
  packet[1] = 0;
   d577c:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
  //flushIncoming(100);

  while (num--) {
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d5780:	695b      	ldr	r3, [r3, #20]
   d5782:	2202      	movs	r2, #2
   d5784:	4639      	mov	r1, r7
   d5786:	4620      	mov	r0, r4
   d5788:	4798      	blx	r3
   d578a:	4606      	mov	r6, r0
   d578c:	b910      	cbnz	r0, d5794 <_ZN13Adafruit_MQTT4pingEh+0x34>
   d578e:	3d01      	subs	r5, #1
   d5790:	b2ed      	uxtb	r5, r5
   d5792:	e7ef      	b.n	d5774 <_ZN13Adafruit_MQTT4pingEh+0x14>
      continue;

    // Process ping reply.
    len = processPacketsUntil(buffer, MQTT_CTRL_PINGRESP, PING_TIMEOUT_MS);
   d5794:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5798:	220d      	movs	r2, #13
   d579a:	4639      	mov	r1, r7
   d579c:	4620      	mov	r0, r4
   d579e:	f7ff ffa3 	bl	d56e8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
    if (buffer[0] == (MQTT_CTRL_PINGRESP << 4))
   d57a2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d57a6:	2bd0      	cmp	r3, #208	; 0xd0
   d57a8:	d1f1      	bne.n	d578e <_ZN13Adafruit_MQTT4pingEh+0x2e>
   d57aa:	e000      	b.n	d57ae <_ZN13Adafruit_MQTT4pingEh+0x4e>
      return true;
  }

  return false;
   d57ac:	462e      	mov	r6, r5
}
   d57ae:	4630      	mov	r0, r6
   d57b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d57b4 <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d57b4:	b538      	push	{r3, r4, r5, lr}
   d57b6:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d57b8:	4608      	mov	r0, r1
   d57ba:	2310      	movs	r3, #16
   d57bc:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d57c0:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d57c2:	4929      	ldr	r1, [pc, #164]	; (d5868 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d57c4:	f7ff ff12 	bl	d55ec <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d57c8:	2304      	movs	r3, #4
   d57ca:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d57cc:	2302      	movs	r3, #2
   d57ce:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d57d0:	69a3      	ldr	r3, [r4, #24]
   d57d2:	b1ab      	cbz	r3, d5800 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d57d4:	781b      	ldrb	r3, [r3, #0]
   d57d6:	b19b      	cbz	r3, d5800 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d57d8:	2306      	movs	r3, #6
   d57da:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d57dc:	f894 3020 	ldrb.w	r3, [r4, #32]
   d57e0:	2b01      	cmp	r3, #1
   d57e2:	d101      	bne.n	d57e8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d57e4:	230e      	movs	r3, #14
   d57e6:	e002      	b.n	d57ee <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d57e8:	2b02      	cmp	r3, #2
   d57ea:	d101      	bne.n	d57f0 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d57ec:	231e      	movs	r3, #30
   d57ee:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d57f0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d57f4:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d57f6:	bf02      	ittt	eq
   d57f8:	7843      	ldrbeq	r3, [r0, #1]
   d57fa:	f043 0320 	orreq.w	r3, r3, #32
   d57fe:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d5800:	6923      	ldr	r3, [r4, #16]
   d5802:	781b      	ldrb	r3, [r3, #0]
   d5804:	b11b      	cbz	r3, d580e <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d5806:	7843      	ldrb	r3, [r0, #1]
   d5808:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d580c:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d580e:	6963      	ldr	r3, [r4, #20]
   d5810:	781b      	ldrb	r3, [r3, #0]
   d5812:	b11b      	cbz	r3, d581c <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d5814:	7843      	ldrb	r3, [r0, #1]
   d5816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d581a:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d581c:	2301      	movs	r3, #1
   d581e:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d5820:	232c      	movs	r3, #44	; 0x2c
   d5822:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d5824:	68e1      	ldr	r1, [r4, #12]
   d5826:	780b      	ldrb	r3, [r1, #0]
   d5828:	b11b      	cbz	r3, d5832 <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d582a:	3004      	adds	r0, #4
   d582c:	f7ff fede 	bl	d55ec <_ZL11stringprintPhPKct.constprop.3>
   d5830:	e002      	b.n	d5838 <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d5832:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d5834:	7143      	strb	r3, [r0, #5]
      p++;
   d5836:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5838:	69a1      	ldr	r1, [r4, #24]
   d583a:	b131      	cbz	r1, d584a <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d583c:	780b      	ldrb	r3, [r1, #0]
   d583e:	b123      	cbz	r3, d584a <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d5840:	f7ff fed4 	bl	d55ec <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d5844:	69e1      	ldr	r1, [r4, #28]
   d5846:	f7ff fed1 	bl	d55ec <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d584a:	6921      	ldr	r1, [r4, #16]
   d584c:	780b      	ldrb	r3, [r1, #0]
   d584e:	b10b      	cbz	r3, d5854 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d5850:	f7ff fecc 	bl	d55ec <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d5854:	6961      	ldr	r1, [r4, #20]
   d5856:	780b      	ldrb	r3, [r1, #0]
   d5858:	b10b      	cbz	r3, d585e <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d585a:	f7ff fec7 	bl	d55ec <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d585e:	1b40      	subs	r0, r0, r5
   d5860:	b2c0      	uxtb	r0, r0
   d5862:	1e83      	subs	r3, r0, #2
   d5864:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5866:	bd38      	pop	{r3, r4, r5, pc}
   d5868:	000d8717 	.word	0x000d8717

000d586c <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d586c:	b538      	push	{r3, r4, r5, lr}
   d586e:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d5870:	2382      	movs	r3, #130	; 0x82
   d5872:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5874:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d5876:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d587a:	0a09      	lsrs	r1, r1, #8
   d587c:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d587e:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d5882:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d5884:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5888:	3101      	adds	r1, #1
   d588a:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d588e:	4611      	mov	r1, r2
   d5890:	1d20      	adds	r0, r4, #4
   d5892:	f7ff feab 	bl	d55ec <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d5896:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d589a:	1b00      	subs	r0, r0, r4
   d589c:	b2c0      	uxtb	r0, r0
   d589e:	1e83      	subs	r3, r0, #2
   d58a0:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d58a2:	bd38      	pop	{r3, r4, r5, pc}

000d58a4 <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d58a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d58a8:	6803      	ldr	r3, [r0, #0]
   d58aa:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d58ac:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d58ae:	4798      	blx	r3
   d58b0:	b918      	cbnz	r0, d58ba <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d58b2:	f04f 30ff 	mov.w	r0, #4294967295
   d58b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d58ba:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d58be:	4629      	mov	r1, r5
   d58c0:	4620      	mov	r0, r4
   d58c2:	f7ff ff77 	bl	d57b4 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d58c6:	6823      	ldr	r3, [r4, #0]
   d58c8:	b282      	uxth	r2, r0
   d58ca:	695b      	ldr	r3, [r3, #20]
   d58cc:	4629      	mov	r1, r5
   d58ce:	4620      	mov	r0, r4
   d58d0:	4798      	blx	r3
   d58d2:	2800      	cmp	r0, #0
   d58d4:	d0ed      	beq.n	d58b2 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d58d6:	f241 7370 	movw	r3, #6000	; 0x1770
   d58da:	2296      	movs	r2, #150	; 0x96
   d58dc:	4629      	mov	r1, r5
   d58de:	4620      	mov	r0, r4
   d58e0:	f7ff feb8 	bl	d5654 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d58e4:	b2c0      	uxtb	r0, r0
   d58e6:	2804      	cmp	r0, #4
   d58e8:	d1e3      	bne.n	d58b2 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d58ea:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d58ec:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d58f0:	d1df      	bne.n	d58b2 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d58f2:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d58f6:	b110      	cbz	r0, d58fe <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d58f8:	b240      	sxtb	r0, r0
   d58fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d58fe:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d5902:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d5906:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d590a:	b1fb      	cbz	r3, d594c <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d590c:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d590e:	683a      	ldr	r2, [r7, #0]
   d5910:	4629      	mov	r1, r5
   d5912:	7913      	ldrb	r3, [r2, #4]
   d5914:	6812      	ldr	r2, [r2, #0]
   d5916:	4620      	mov	r0, r4
   d5918:	f7ff ffa8 	bl	d586c <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d591c:	6823      	ldr	r3, [r4, #0]
   d591e:	b282      	uxth	r2, r0
   d5920:	695b      	ldr	r3, [r3, #20]
   d5922:	4629      	mov	r1, r5
   d5924:	4620      	mov	r0, r4
   d5926:	4798      	blx	r3
   d5928:	2800      	cmp	r0, #0
   d592a:	d0c2      	beq.n	d58b2 <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d592c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5930:	2209      	movs	r2, #9
   d5932:	4629      	mov	r1, r5
   d5934:	4620      	mov	r0, r4
   d5936:	f7ff fed7 	bl	d56e8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d593a:	b938      	cbnz	r0, d594c <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d593c:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d593e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d5942:	d1e4      	bne.n	d590e <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d5944:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d5948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d594c:	4547      	cmp	r7, r8
   d594e:	d1da      	bne.n	d5906 <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d5950:	2000      	movs	r0, #0
   d5952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5956 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d5956:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d5958:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d595a:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d595c:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d595e:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d5960:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d5962:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d5964:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d5966:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d5968:	6283      	str	r3, [r0, #40]	; 0x28
   d596a:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d596c:	6303      	str	r3, [r0, #48]	; 0x30
}
   d596e:	bd10      	pop	{r4, pc}

000d5970 <_GLOBAL__sub_I__Z11printBufferPht>:
   d5970:	f000 b812 	b.w	d5998 <HAL_Pin_Map>

000d5974 <_GLOBAL__sub_I__ZN5TWISTC2Ev>:
   d5974:	f000 b810 	b.w	d5998 <HAL_Pin_Map>

000d5978 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5978:	b508      	push	{r3, lr}
   d597a:	4b02      	ldr	r3, [pc, #8]	; (d5984 <netdb_freeaddrinfo+0xc>)
   d597c:	681b      	ldr	r3, [r3, #0]
   d597e:	689b      	ldr	r3, [r3, #8]
   d5980:	9301      	str	r3, [sp, #4]
   d5982:	bd08      	pop	{r3, pc}
   d5984:	00030268 	.word	0x00030268

000d5988 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5988:	b508      	push	{r3, lr}
   d598a:	4b02      	ldr	r3, [pc, #8]	; (d5994 <netdb_getaddrinfo+0xc>)
   d598c:	681b      	ldr	r3, [r3, #0]
   d598e:	68db      	ldr	r3, [r3, #12]
   d5990:	9301      	str	r3, [sp, #4]
   d5992:	bd08      	pop	{r3, pc}
   d5994:	00030268 	.word	0x00030268

000d5998 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5998:	b508      	push	{r3, lr}
   d599a:	4b02      	ldr	r3, [pc, #8]	; (d59a4 <HAL_Pin_Map+0xc>)
   d599c:	681b      	ldr	r3, [r3, #0]
   d599e:	681b      	ldr	r3, [r3, #0]
   d59a0:	9301      	str	r3, [sp, #4]
   d59a2:	bd08      	pop	{r3, pc}
   d59a4:	0003022c 	.word	0x0003022c

000d59a8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d59a8:	b508      	push	{r3, lr}
   d59aa:	4b02      	ldr	r3, [pc, #8]	; (d59b4 <HAL_Pin_Mode+0xc>)
   d59ac:	681b      	ldr	r3, [r3, #0]
   d59ae:	689b      	ldr	r3, [r3, #8]
   d59b0:	9301      	str	r3, [sp, #4]
   d59b2:	bd08      	pop	{r3, pc}
   d59b4:	0003022c 	.word	0x0003022c

000d59b8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d59b8:	b508      	push	{r3, lr}
   d59ba:	4b02      	ldr	r3, [pc, #8]	; (d59c4 <HAL_Get_Pin_Mode+0xc>)
   d59bc:	681b      	ldr	r3, [r3, #0]
   d59be:	68db      	ldr	r3, [r3, #12]
   d59c0:	9301      	str	r3, [sp, #4]
   d59c2:	bd08      	pop	{r3, pc}
   d59c4:	0003022c 	.word	0x0003022c

000d59c8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d59c8:	b508      	push	{r3, lr}
   d59ca:	4b02      	ldr	r3, [pc, #8]	; (d59d4 <HAL_GPIO_Write+0xc>)
   d59cc:	681b      	ldr	r3, [r3, #0]
   d59ce:	691b      	ldr	r3, [r3, #16]
   d59d0:	9301      	str	r3, [sp, #4]
   d59d2:	bd08      	pop	{r3, pc}
   d59d4:	0003022c 	.word	0x0003022c

000d59d8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d59d8:	b508      	push	{r3, lr}
   d59da:	4b02      	ldr	r3, [pc, #8]	; (d59e4 <HAL_GPIO_Read+0xc>)
   d59dc:	681b      	ldr	r3, [r3, #0]
   d59de:	695b      	ldr	r3, [r3, #20]
   d59e0:	9301      	str	r3, [sp, #4]
   d59e2:	bd08      	pop	{r3, pc}
   d59e4:	0003022c 	.word	0x0003022c

000d59e8 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d59e8:	b508      	push	{r3, lr}
   d59ea:	4b02      	ldr	r3, [pc, #8]	; (d59f4 <HAL_SPI_Begin+0xc>)
   d59ec:	681b      	ldr	r3, [r3, #0]
   d59ee:	681b      	ldr	r3, [r3, #0]
   d59f0:	9301      	str	r3, [sp, #4]
   d59f2:	bd08      	pop	{r3, pc}
   d59f4:	00030230 	.word	0x00030230

000d59f8 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d59f8:	b508      	push	{r3, lr}
   d59fa:	4b02      	ldr	r3, [pc, #8]	; (d5a04 <HAL_SPI_Set_Bit_Order+0xc>)
   d59fc:	681b      	ldr	r3, [r3, #0]
   d59fe:	689b      	ldr	r3, [r3, #8]
   d5a00:	9301      	str	r3, [sp, #4]
   d5a02:	bd08      	pop	{r3, pc}
   d5a04:	00030230 	.word	0x00030230

000d5a08 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d5a08:	b508      	push	{r3, lr}
   d5a0a:	4b02      	ldr	r3, [pc, #8]	; (d5a14 <HAL_SPI_Set_Data_Mode+0xc>)
   d5a0c:	681b      	ldr	r3, [r3, #0]
   d5a0e:	68db      	ldr	r3, [r3, #12]
   d5a10:	9301      	str	r3, [sp, #4]
   d5a12:	bd08      	pop	{r3, pc}
   d5a14:	00030230 	.word	0x00030230

000d5a18 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d5a18:	b508      	push	{r3, lr}
   d5a1a:	4b02      	ldr	r3, [pc, #8]	; (d5a24 <HAL_SPI_Set_Clock_Divider+0xc>)
   d5a1c:	681b      	ldr	r3, [r3, #0]
   d5a1e:	691b      	ldr	r3, [r3, #16]
   d5a20:	9301      	str	r3, [sp, #4]
   d5a22:	bd08      	pop	{r3, pc}
   d5a24:	00030230 	.word	0x00030230

000d5a28 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5a28:	b508      	push	{r3, lr}
   d5a2a:	4b02      	ldr	r3, [pc, #8]	; (d5a34 <HAL_SPI_Send_Receive_Data+0xc>)
   d5a2c:	681b      	ldr	r3, [r3, #0]
   d5a2e:	695b      	ldr	r3, [r3, #20]
   d5a30:	9301      	str	r3, [sp, #4]
   d5a32:	bd08      	pop	{r3, pc}
   d5a34:	00030230 	.word	0x00030230

000d5a38 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5a38:	b508      	push	{r3, lr}
   d5a3a:	4b02      	ldr	r3, [pc, #8]	; (d5a44 <HAL_SPI_Init+0xc>)
   d5a3c:	681b      	ldr	r3, [r3, #0]
   d5a3e:	69db      	ldr	r3, [r3, #28]
   d5a40:	9301      	str	r3, [sp, #4]
   d5a42:	bd08      	pop	{r3, pc}
   d5a44:	00030230 	.word	0x00030230

000d5a48 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5a48:	b508      	push	{r3, lr}
   d5a4a:	4b02      	ldr	r3, [pc, #8]	; (d5a54 <HAL_SPI_Is_Enabled+0xc>)
   d5a4c:	681b      	ldr	r3, [r3, #0]
   d5a4e:	6a1b      	ldr	r3, [r3, #32]
   d5a50:	9301      	str	r3, [sp, #4]
   d5a52:	bd08      	pop	{r3, pc}
   d5a54:	00030230 	.word	0x00030230

000d5a58 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5a58:	b508      	push	{r3, lr}
   d5a5a:	4b02      	ldr	r3, [pc, #8]	; (d5a64 <HAL_SPI_Info+0xc>)
   d5a5c:	681b      	ldr	r3, [r3, #0]
   d5a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a60:	9301      	str	r3, [sp, #4]
   d5a62:	bd08      	pop	{r3, pc}
   d5a64:	00030230 	.word	0x00030230

000d5a68 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5a68:	b508      	push	{r3, lr}
   d5a6a:	4b02      	ldr	r3, [pc, #8]	; (d5a74 <HAL_SPI_Set_Settings+0xc>)
   d5a6c:	681b      	ldr	r3, [r3, #0]
   d5a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5a70:	9301      	str	r3, [sp, #4]
   d5a72:	bd08      	pop	{r3, pc}
   d5a74:	00030230 	.word	0x00030230

000d5a78 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5a78:	b508      	push	{r3, lr}
   d5a7a:	4b02      	ldr	r3, [pc, #8]	; (d5a84 <HAL_SPI_Acquire+0xc>)
   d5a7c:	681b      	ldr	r3, [r3, #0]
   d5a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5a80:	9301      	str	r3, [sp, #4]
   d5a82:	bd08      	pop	{r3, pc}
   d5a84:	00030230 	.word	0x00030230

000d5a88 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5a88:	b508      	push	{r3, lr}
   d5a8a:	4b02      	ldr	r3, [pc, #8]	; (d5a94 <HAL_SPI_Release+0xc>)
   d5a8c:	681b      	ldr	r3, [r3, #0]
   d5a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a90:	9301      	str	r3, [sp, #4]
   d5a92:	bd08      	pop	{r3, pc}
   d5a94:	00030230 	.word	0x00030230

000d5a98 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5a98:	b508      	push	{r3, lr}
   d5a9a:	4b02      	ldr	r3, [pc, #8]	; (d5aa4 <if_index_to_name+0xc>)
   d5a9c:	681b      	ldr	r3, [r3, #0]
   d5a9e:	695b      	ldr	r3, [r3, #20]
   d5aa0:	9301      	str	r3, [sp, #4]
   d5aa2:	bd08      	pop	{r3, pc}
   d5aa4:	0003026c 	.word	0x0003026c

000d5aa8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5aa8:	b508      	push	{r3, lr}
   d5aaa:	4b02      	ldr	r3, [pc, #8]	; (d5ab4 <HAL_RNG_GetRandomNumber+0xc>)
   d5aac:	681b      	ldr	r3, [r3, #0]
   d5aae:	685b      	ldr	r3, [r3, #4]
   d5ab0:	9301      	str	r3, [sp, #4]
   d5ab2:	bd08      	pop	{r3, pc}
   d5ab4:	00030218 	.word	0x00030218

000d5ab8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5ab8:	b508      	push	{r3, lr}
   d5aba:	4b02      	ldr	r3, [pc, #8]	; (d5ac4 <HAL_Delay_Microseconds+0xc>)
   d5abc:	681b      	ldr	r3, [r3, #0]
   d5abe:	68db      	ldr	r3, [r3, #12]
   d5ac0:	9301      	str	r3, [sp, #4]
   d5ac2:	bd08      	pop	{r3, pc}
   d5ac4:	00030218 	.word	0x00030218

000d5ac8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5ac8:	b508      	push	{r3, lr}
   d5aca:	4b02      	ldr	r3, [pc, #8]	; (d5ad4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5acc:	681b      	ldr	r3, [r3, #0]
   d5ace:	695b      	ldr	r3, [r3, #20]
   d5ad0:	9301      	str	r3, [sp, #4]
   d5ad2:	bd08      	pop	{r3, pc}
   d5ad4:	00030218 	.word	0x00030218

000d5ad8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5ad8:	b508      	push	{r3, lr}
   d5ada:	4b02      	ldr	r3, [pc, #8]	; (d5ae4 <os_thread_is_current+0xc>)
   d5adc:	681b      	ldr	r3, [r3, #0]
   d5ade:	689b      	ldr	r3, [r3, #8]
   d5ae0:	9301      	str	r3, [sp, #4]
   d5ae2:	bd08      	pop	{r3, pc}
   d5ae4:	00030248 	.word	0x00030248

000d5ae8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5ae8:	b508      	push	{r3, lr}
   d5aea:	4b02      	ldr	r3, [pc, #8]	; (d5af4 <os_thread_join+0xc>)
   d5aec:	681b      	ldr	r3, [r3, #0]
   d5aee:	691b      	ldr	r3, [r3, #16]
   d5af0:	9301      	str	r3, [sp, #4]
   d5af2:	bd08      	pop	{r3, pc}
   d5af4:	00030248 	.word	0x00030248

000d5af8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5af8:	b508      	push	{r3, lr}
   d5afa:	4b02      	ldr	r3, [pc, #8]	; (d5b04 <os_thread_cleanup+0xc>)
   d5afc:	681b      	ldr	r3, [r3, #0]
   d5afe:	695b      	ldr	r3, [r3, #20]
   d5b00:	9301      	str	r3, [sp, #4]
   d5b02:	bd08      	pop	{r3, pc}
   d5b04:	00030248 	.word	0x00030248

000d5b08 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5b08:	b508      	push	{r3, lr}
   d5b0a:	4b02      	ldr	r3, [pc, #8]	; (d5b14 <os_mutex_recursive_create+0xc>)
   d5b0c:	681b      	ldr	r3, [r3, #0]
   d5b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5b10:	9301      	str	r3, [sp, #4]
   d5b12:	bd08      	pop	{r3, pc}
   d5b14:	00030248 	.word	0x00030248

000d5b18 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5b18:	b508      	push	{r3, lr}
   d5b1a:	4b02      	ldr	r3, [pc, #8]	; (d5b24 <os_mutex_recursive_destroy+0xc>)
   d5b1c:	681b      	ldr	r3, [r3, #0]
   d5b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5b20:	9301      	str	r3, [sp, #4]
   d5b22:	bd08      	pop	{r3, pc}
   d5b24:	00030248 	.word	0x00030248

000d5b28 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5b28:	b508      	push	{r3, lr}
   d5b2a:	4b02      	ldr	r3, [pc, #8]	; (d5b34 <inet_inet_ntop+0xc>)
   d5b2c:	681b      	ldr	r3, [r3, #0]
   d5b2e:	695b      	ldr	r3, [r3, #20]
   d5b30:	9301      	str	r3, [sp, #4]
   d5b32:	bd08      	pop	{r3, pc}
   d5b34:	00030264 	.word	0x00030264

000d5b38 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5b38:	b508      	push	{r3, lr}
   d5b3a:	4b02      	ldr	r3, [pc, #8]	; (d5b44 <inet_htonl+0xc>)
   d5b3c:	681b      	ldr	r3, [r3, #0]
   d5b3e:	6a1b      	ldr	r3, [r3, #32]
   d5b40:	9301      	str	r3, [sp, #4]
   d5b42:	bd08      	pop	{r3, pc}
   d5b44:	00030264 	.word	0x00030264

000d5b48 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5b48:	b508      	push	{r3, lr}
   d5b4a:	4b02      	ldr	r3, [pc, #8]	; (d5b54 <inet_htons+0xc>)
   d5b4c:	681b      	ldr	r3, [r3, #0]
   d5b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b50:	9301      	str	r3, [sp, #4]
   d5b52:	bd08      	pop	{r3, pc}
   d5b54:	00030264 	.word	0x00030264

000d5b58 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5b58:	b508      	push	{r3, lr}
   d5b5a:	4b02      	ldr	r3, [pc, #8]	; (d5b64 <HAL_USART_Init+0xc>)
   d5b5c:	681b      	ldr	r3, [r3, #0]
   d5b5e:	681b      	ldr	r3, [r3, #0]
   d5b60:	9301      	str	r3, [sp, #4]
   d5b62:	bd08      	pop	{r3, pc}
   d5b64:	0003023c 	.word	0x0003023c

000d5b68 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5b68:	b508      	push	{r3, lr}
   d5b6a:	4b02      	ldr	r3, [pc, #8]	; (d5b74 <HAL_USART_Write_Data+0xc>)
   d5b6c:	681b      	ldr	r3, [r3, #0]
   d5b6e:	68db      	ldr	r3, [r3, #12]
   d5b70:	9301      	str	r3, [sp, #4]
   d5b72:	bd08      	pop	{r3, pc}
   d5b74:	0003023c 	.word	0x0003023c

000d5b78 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5b78:	b508      	push	{r3, lr}
   d5b7a:	4b02      	ldr	r3, [pc, #8]	; (d5b84 <HAL_USART_Available_Data+0xc>)
   d5b7c:	681b      	ldr	r3, [r3, #0]
   d5b7e:	691b      	ldr	r3, [r3, #16]
   d5b80:	9301      	str	r3, [sp, #4]
   d5b82:	bd08      	pop	{r3, pc}
   d5b84:	0003023c 	.word	0x0003023c

000d5b88 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5b88:	b508      	push	{r3, lr}
   d5b8a:	4b02      	ldr	r3, [pc, #8]	; (d5b94 <HAL_USART_Read_Data+0xc>)
   d5b8c:	681b      	ldr	r3, [r3, #0]
   d5b8e:	695b      	ldr	r3, [r3, #20]
   d5b90:	9301      	str	r3, [sp, #4]
   d5b92:	bd08      	pop	{r3, pc}
   d5b94:	0003023c 	.word	0x0003023c

000d5b98 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5b98:	b508      	push	{r3, lr}
   d5b9a:	4b02      	ldr	r3, [pc, #8]	; (d5ba4 <HAL_USART_Peek_Data+0xc>)
   d5b9c:	681b      	ldr	r3, [r3, #0]
   d5b9e:	699b      	ldr	r3, [r3, #24]
   d5ba0:	9301      	str	r3, [sp, #4]
   d5ba2:	bd08      	pop	{r3, pc}
   d5ba4:	0003023c 	.word	0x0003023c

000d5ba8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5ba8:	b508      	push	{r3, lr}
   d5baa:	4b02      	ldr	r3, [pc, #8]	; (d5bb4 <HAL_USART_Flush_Data+0xc>)
   d5bac:	681b      	ldr	r3, [r3, #0]
   d5bae:	69db      	ldr	r3, [r3, #28]
   d5bb0:	9301      	str	r3, [sp, #4]
   d5bb2:	bd08      	pop	{r3, pc}
   d5bb4:	0003023c 	.word	0x0003023c

000d5bb8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5bb8:	b508      	push	{r3, lr}
   d5bba:	4b02      	ldr	r3, [pc, #8]	; (d5bc4 <HAL_USART_Is_Enabled+0xc>)
   d5bbc:	681b      	ldr	r3, [r3, #0]
   d5bbe:	6a1b      	ldr	r3, [r3, #32]
   d5bc0:	9301      	str	r3, [sp, #4]
   d5bc2:	bd08      	pop	{r3, pc}
   d5bc4:	0003023c 	.word	0x0003023c

000d5bc8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5bc8:	b508      	push	{r3, lr}
   d5bca:	4b02      	ldr	r3, [pc, #8]	; (d5bd4 <HAL_USART_Available_Data_For_Write+0xc>)
   d5bcc:	681b      	ldr	r3, [r3, #0]
   d5bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5bd0:	9301      	str	r3, [sp, #4]
   d5bd2:	bd08      	pop	{r3, pc}
   d5bd4:	0003023c 	.word	0x0003023c

000d5bd8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5bd8:	b508      	push	{r3, lr}
   d5bda:	4b02      	ldr	r3, [pc, #8]	; (d5be4 <HAL_I2C_Begin+0xc>)
   d5bdc:	681b      	ldr	r3, [r3, #0]
   d5bde:	68db      	ldr	r3, [r3, #12]
   d5be0:	9301      	str	r3, [sp, #4]
   d5be2:	bd08      	pop	{r3, pc}
   d5be4:	00030228 	.word	0x00030228

000d5be8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5be8:	b508      	push	{r3, lr}
   d5bea:	4b02      	ldr	r3, [pc, #8]	; (d5bf4 <HAL_I2C_Begin_Transmission+0xc>)
   d5bec:	681b      	ldr	r3, [r3, #0]
   d5bee:	699b      	ldr	r3, [r3, #24]
   d5bf0:	9301      	str	r3, [sp, #4]
   d5bf2:	bd08      	pop	{r3, pc}
   d5bf4:	00030228 	.word	0x00030228

000d5bf8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5bf8:	b508      	push	{r3, lr}
   d5bfa:	4b02      	ldr	r3, [pc, #8]	; (d5c04 <HAL_I2C_End_Transmission+0xc>)
   d5bfc:	681b      	ldr	r3, [r3, #0]
   d5bfe:	69db      	ldr	r3, [r3, #28]
   d5c00:	9301      	str	r3, [sp, #4]
   d5c02:	bd08      	pop	{r3, pc}
   d5c04:	00030228 	.word	0x00030228

000d5c08 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5c08:	b508      	push	{r3, lr}
   d5c0a:	4b02      	ldr	r3, [pc, #8]	; (d5c14 <HAL_I2C_Write_Data+0xc>)
   d5c0c:	681b      	ldr	r3, [r3, #0]
   d5c0e:	6a1b      	ldr	r3, [r3, #32]
   d5c10:	9301      	str	r3, [sp, #4]
   d5c12:	bd08      	pop	{r3, pc}
   d5c14:	00030228 	.word	0x00030228

000d5c18 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5c18:	b508      	push	{r3, lr}
   d5c1a:	4b02      	ldr	r3, [pc, #8]	; (d5c24 <HAL_I2C_Available_Data+0xc>)
   d5c1c:	681b      	ldr	r3, [r3, #0]
   d5c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5c20:	9301      	str	r3, [sp, #4]
   d5c22:	bd08      	pop	{r3, pc}
   d5c24:	00030228 	.word	0x00030228

000d5c28 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5c28:	b508      	push	{r3, lr}
   d5c2a:	4b02      	ldr	r3, [pc, #8]	; (d5c34 <HAL_I2C_Read_Data+0xc>)
   d5c2c:	681b      	ldr	r3, [r3, #0]
   d5c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c30:	9301      	str	r3, [sp, #4]
   d5c32:	bd08      	pop	{r3, pc}
   d5c34:	00030228 	.word	0x00030228

000d5c38 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5c38:	b508      	push	{r3, lr}
   d5c3a:	4b02      	ldr	r3, [pc, #8]	; (d5c44 <HAL_I2C_Peek_Data+0xc>)
   d5c3c:	681b      	ldr	r3, [r3, #0]
   d5c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c40:	9301      	str	r3, [sp, #4]
   d5c42:	bd08      	pop	{r3, pc}
   d5c44:	00030228 	.word	0x00030228

000d5c48 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5c48:	b508      	push	{r3, lr}
   d5c4a:	4b02      	ldr	r3, [pc, #8]	; (d5c54 <HAL_I2C_Flush_Data+0xc>)
   d5c4c:	681b      	ldr	r3, [r3, #0]
   d5c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c50:	9301      	str	r3, [sp, #4]
   d5c52:	bd08      	pop	{r3, pc}
   d5c54:	00030228 	.word	0x00030228

000d5c58 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5c58:	b508      	push	{r3, lr}
   d5c5a:	4b02      	ldr	r3, [pc, #8]	; (d5c64 <HAL_I2C_Is_Enabled+0xc>)
   d5c5c:	681b      	ldr	r3, [r3, #0]
   d5c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c60:	9301      	str	r3, [sp, #4]
   d5c62:	bd08      	pop	{r3, pc}
   d5c64:	00030228 	.word	0x00030228

000d5c68 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5c68:	b508      	push	{r3, lr}
   d5c6a:	4b02      	ldr	r3, [pc, #8]	; (d5c74 <HAL_I2C_Init+0xc>)
   d5c6c:	681b      	ldr	r3, [r3, #0]
   d5c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5c70:	9301      	str	r3, [sp, #4]
   d5c72:	bd08      	pop	{r3, pc}
   d5c74:	00030228 	.word	0x00030228

000d5c78 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5c78:	b508      	push	{r3, lr}
   d5c7a:	4b02      	ldr	r3, [pc, #8]	; (d5c84 <HAL_I2C_Request_Data_Ex+0xc>)
   d5c7c:	681b      	ldr	r3, [r3, #0]
   d5c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5c80:	9301      	str	r3, [sp, #4]
   d5c82:	bd08      	pop	{r3, pc}
   d5c84:	00030228 	.word	0x00030228

000d5c88 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5c88:	b508      	push	{r3, lr}
   d5c8a:	4b02      	ldr	r3, [pc, #8]	; (d5c94 <sock_setsockopt+0xc>)
   d5c8c:	681b      	ldr	r3, [r3, #0]
   d5c8e:	699b      	ldr	r3, [r3, #24]
   d5c90:	9301      	str	r3, [sp, #4]
   d5c92:	bd08      	pop	{r3, pc}
   d5c94:	00030238 	.word	0x00030238

000d5c98 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5c98:	b508      	push	{r3, lr}
   d5c9a:	4b02      	ldr	r3, [pc, #8]	; (d5ca4 <sock_close+0xc>)
   d5c9c:	681b      	ldr	r3, [r3, #0]
   d5c9e:	69db      	ldr	r3, [r3, #28]
   d5ca0:	9301      	str	r3, [sp, #4]
   d5ca2:	bd08      	pop	{r3, pc}
   d5ca4:	00030238 	.word	0x00030238

000d5ca8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5ca8:	b508      	push	{r3, lr}
   d5caa:	4b02      	ldr	r3, [pc, #8]	; (d5cb4 <sock_connect+0xc>)
   d5cac:	681b      	ldr	r3, [r3, #0]
   d5cae:	6a1b      	ldr	r3, [r3, #32]
   d5cb0:	9301      	str	r3, [sp, #4]
   d5cb2:	bd08      	pop	{r3, pc}
   d5cb4:	00030238 	.word	0x00030238

000d5cb8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5cb8:	b508      	push	{r3, lr}
   d5cba:	4b02      	ldr	r3, [pc, #8]	; (d5cc4 <sock_recv+0xc>)
   d5cbc:	681b      	ldr	r3, [r3, #0]
   d5cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5cc0:	9301      	str	r3, [sp, #4]
   d5cc2:	bd08      	pop	{r3, pc}
   d5cc4:	00030238 	.word	0x00030238

000d5cc8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5cc8:	b508      	push	{r3, lr}
   d5cca:	4b02      	ldr	r3, [pc, #8]	; (d5cd4 <sock_send+0xc>)
   d5ccc:	681b      	ldr	r3, [r3, #0]
   d5cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5cd0:	9301      	str	r3, [sp, #4]
   d5cd2:	bd08      	pop	{r3, pc}
   d5cd4:	00030238 	.word	0x00030238

000d5cd8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5cd8:	b508      	push	{r3, lr}
   d5cda:	4b02      	ldr	r3, [pc, #8]	; (d5ce4 <sock_socket+0xc>)
   d5cdc:	681b      	ldr	r3, [r3, #0]
   d5cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5ce0:	9301      	str	r3, [sp, #4]
   d5ce2:	bd08      	pop	{r3, pc}
   d5ce4:	00030238 	.word	0x00030238

000d5ce8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5ce8:	b508      	push	{r3, lr}
   d5cea:	4b02      	ldr	r3, [pc, #8]	; (d5cf4 <HAL_USB_USART_Init+0xc>)
   d5cec:	681b      	ldr	r3, [r3, #0]
   d5cee:	681b      	ldr	r3, [r3, #0]
   d5cf0:	9301      	str	r3, [sp, #4]
   d5cf2:	bd08      	pop	{r3, pc}
   d5cf4:	0003024c 	.word	0x0003024c

000d5cf8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5cf8:	b508      	push	{r3, lr}
   d5cfa:	4b02      	ldr	r3, [pc, #8]	; (d5d04 <HAL_USB_USART_Available_Data+0xc>)
   d5cfc:	681b      	ldr	r3, [r3, #0]
   d5cfe:	691b      	ldr	r3, [r3, #16]
   d5d00:	9301      	str	r3, [sp, #4]
   d5d02:	bd08      	pop	{r3, pc}
   d5d04:	0003024c 	.word	0x0003024c

000d5d08 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5d08:	b508      	push	{r3, lr}
   d5d0a:	4b02      	ldr	r3, [pc, #8]	; (d5d14 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5d0c:	681b      	ldr	r3, [r3, #0]
   d5d0e:	695b      	ldr	r3, [r3, #20]
   d5d10:	9301      	str	r3, [sp, #4]
   d5d12:	bd08      	pop	{r3, pc}
   d5d14:	0003024c 	.word	0x0003024c

000d5d18 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5d18:	b508      	push	{r3, lr}
   d5d1a:	4b02      	ldr	r3, [pc, #8]	; (d5d24 <HAL_USB_USART_Receive_Data+0xc>)
   d5d1c:	681b      	ldr	r3, [r3, #0]
   d5d1e:	699b      	ldr	r3, [r3, #24]
   d5d20:	9301      	str	r3, [sp, #4]
   d5d22:	bd08      	pop	{r3, pc}
   d5d24:	0003024c 	.word	0x0003024c

000d5d28 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5d28:	b508      	push	{r3, lr}
   d5d2a:	4b02      	ldr	r3, [pc, #8]	; (d5d34 <HAL_USB_USART_Send_Data+0xc>)
   d5d2c:	681b      	ldr	r3, [r3, #0]
   d5d2e:	69db      	ldr	r3, [r3, #28]
   d5d30:	9301      	str	r3, [sp, #4]
   d5d32:	bd08      	pop	{r3, pc}
   d5d34:	0003024c 	.word	0x0003024c

000d5d38 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5d38:	b508      	push	{r3, lr}
   d5d3a:	4b02      	ldr	r3, [pc, #8]	; (d5d44 <HAL_USB_USART_Flush_Data+0xc>)
   d5d3c:	681b      	ldr	r3, [r3, #0]
   d5d3e:	6a1b      	ldr	r3, [r3, #32]
   d5d40:	9301      	str	r3, [sp, #4]
   d5d42:	bd08      	pop	{r3, pc}
   d5d44:	0003024c 	.word	0x0003024c

000d5d48 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5d48:	b508      	push	{r3, lr}
   d5d4a:	4b02      	ldr	r3, [pc, #8]	; (d5d54 <panic_+0xc>)
   d5d4c:	681b      	ldr	r3, [r3, #0]
   d5d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5d50:	9301      	str	r3, [sp, #4]
   d5d52:	bd08      	pop	{r3, pc}
   d5d54:	00030260 	.word	0x00030260

000d5d58 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5d58:	b508      	push	{r3, lr}
   d5d5a:	4b02      	ldr	r3, [pc, #8]	; (d5d64 <log_message+0xc>)
   d5d5c:	681b      	ldr	r3, [r3, #0]
   d5d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5d60:	9301      	str	r3, [sp, #4]
   d5d62:	bd08      	pop	{r3, pc}
   d5d64:	00030260 	.word	0x00030260

000d5d68 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5d68:	b508      	push	{r3, lr}
   d5d6a:	4b02      	ldr	r3, [pc, #8]	; (d5d74 <set_system_mode+0xc>)
   d5d6c:	681b      	ldr	r3, [r3, #0]
   d5d6e:	685b      	ldr	r3, [r3, #4]
   d5d70:	9301      	str	r3, [sp, #4]
   d5d72:	bd08      	pop	{r3, pc}
   d5d74:	00030220 	.word	0x00030220

000d5d78 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5d78:	b508      	push	{r3, lr}
   d5d7a:	4b02      	ldr	r3, [pc, #8]	; (d5d84 <system_delay_ms+0xc>)
   d5d7c:	681b      	ldr	r3, [r3, #0]
   d5d7e:	695b      	ldr	r3, [r3, #20]
   d5d80:	9301      	str	r3, [sp, #4]
   d5d82:	bd08      	pop	{r3, pc}
   d5d84:	00030220 	.word	0x00030220

000d5d88 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5d88:	b508      	push	{r3, lr}
   d5d8a:	4b03      	ldr	r3, [pc, #12]	; (d5d98 <system_ctrl_set_app_request_handler+0x10>)
   d5d8c:	681b      	ldr	r3, [r3, #0]
   d5d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5d92:	9301      	str	r3, [sp, #4]
   d5d94:	bd08      	pop	{r3, pc}
   d5d96:	0000      	.short	0x0000
   d5d98:	00030220 	.word	0x00030220

000d5d9c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5d9c:	b508      	push	{r3, lr}
   d5d9e:	4b03      	ldr	r3, [pc, #12]	; (d5dac <system_ctrl_set_result+0x10>)
   d5da0:	681b      	ldr	r3, [r3, #0]
   d5da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5da6:	9301      	str	r3, [sp, #4]
   d5da8:	bd08      	pop	{r3, pc}
   d5daa:	0000      	.short	0x0000
   d5dac:	00030220 	.word	0x00030220

000d5db0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5db0:	b508      	push	{r3, lr}
   d5db2:	4b02      	ldr	r3, [pc, #8]	; (d5dbc <network_connect+0xc>)
   d5db4:	681b      	ldr	r3, [r3, #0]
   d5db6:	685b      	ldr	r3, [r3, #4]
   d5db8:	9301      	str	r3, [sp, #4]
   d5dba:	bd08      	pop	{r3, pc}
   d5dbc:	00030240 	.word	0x00030240

000d5dc0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5dc0:	b508      	push	{r3, lr}
   d5dc2:	4b02      	ldr	r3, [pc, #8]	; (d5dcc <network_connecting+0xc>)
   d5dc4:	681b      	ldr	r3, [r3, #0]
   d5dc6:	689b      	ldr	r3, [r3, #8]
   d5dc8:	9301      	str	r3, [sp, #4]
   d5dca:	bd08      	pop	{r3, pc}
   d5dcc:	00030240 	.word	0x00030240

000d5dd0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5dd0:	b508      	push	{r3, lr}
   d5dd2:	4b02      	ldr	r3, [pc, #8]	; (d5ddc <network_disconnect+0xc>)
   d5dd4:	681b      	ldr	r3, [r3, #0]
   d5dd6:	68db      	ldr	r3, [r3, #12]
   d5dd8:	9301      	str	r3, [sp, #4]
   d5dda:	bd08      	pop	{r3, pc}
   d5ddc:	00030240 	.word	0x00030240

000d5de0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5de0:	b508      	push	{r3, lr}
   d5de2:	4b02      	ldr	r3, [pc, #8]	; (d5dec <network_ready+0xc>)
   d5de4:	681b      	ldr	r3, [r3, #0]
   d5de6:	691b      	ldr	r3, [r3, #16]
   d5de8:	9301      	str	r3, [sp, #4]
   d5dea:	bd08      	pop	{r3, pc}
   d5dec:	00030240 	.word	0x00030240

000d5df0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5df0:	b508      	push	{r3, lr}
   d5df2:	4b02      	ldr	r3, [pc, #8]	; (d5dfc <network_on+0xc>)
   d5df4:	681b      	ldr	r3, [r3, #0]
   d5df6:	695b      	ldr	r3, [r3, #20]
   d5df8:	9301      	str	r3, [sp, #4]
   d5dfa:	bd08      	pop	{r3, pc}
   d5dfc:	00030240 	.word	0x00030240

000d5e00 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5e00:	b508      	push	{r3, lr}
   d5e02:	4b02      	ldr	r3, [pc, #8]	; (d5e0c <network_off+0xc>)
   d5e04:	681b      	ldr	r3, [r3, #0]
   d5e06:	699b      	ldr	r3, [r3, #24]
   d5e08:	9301      	str	r3, [sp, #4]
   d5e0a:	bd08      	pop	{r3, pc}
   d5e0c:	00030240 	.word	0x00030240

000d5e10 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5e10:	b508      	push	{r3, lr}
   d5e12:	4b02      	ldr	r3, [pc, #8]	; (d5e1c <network_listen+0xc>)
   d5e14:	681b      	ldr	r3, [r3, #0]
   d5e16:	69db      	ldr	r3, [r3, #28]
   d5e18:	9301      	str	r3, [sp, #4]
   d5e1a:	bd08      	pop	{r3, pc}
   d5e1c:	00030240 	.word	0x00030240

000d5e20 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5e20:	b508      	push	{r3, lr}
   d5e22:	4b02      	ldr	r3, [pc, #8]	; (d5e2c <network_listening+0xc>)
   d5e24:	681b      	ldr	r3, [r3, #0]
   d5e26:	6a1b      	ldr	r3, [r3, #32]
   d5e28:	9301      	str	r3, [sp, #4]
   d5e2a:	bd08      	pop	{r3, pc}
   d5e2c:	00030240 	.word	0x00030240

000d5e30 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5e30:	b508      	push	{r3, lr}
   d5e32:	4b02      	ldr	r3, [pc, #8]	; (d5e3c <network_set_listen_timeout+0xc>)
   d5e34:	681b      	ldr	r3, [r3, #0]
   d5e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e38:	9301      	str	r3, [sp, #4]
   d5e3a:	bd08      	pop	{r3, pc}
   d5e3c:	00030240 	.word	0x00030240

000d5e40 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5e40:	b508      	push	{r3, lr}
   d5e42:	4b02      	ldr	r3, [pc, #8]	; (d5e4c <network_get_listen_timeout+0xc>)
   d5e44:	681b      	ldr	r3, [r3, #0]
   d5e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5e48:	9301      	str	r3, [sp, #4]
   d5e4a:	bd08      	pop	{r3, pc}
   d5e4c:	00030240 	.word	0x00030240

000d5e50 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5e50:	b508      	push	{r3, lr}
   d5e52:	4b02      	ldr	r3, [pc, #8]	; (d5e5c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5e54:	681b      	ldr	r3, [r3, #0]
   d5e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5e58:	9301      	str	r3, [sp, #4]
   d5e5a:	bd08      	pop	{r3, pc}
   d5e5c:	00030244 	.word	0x00030244

000d5e60 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5e60:	b508      	push	{r3, lr}
   d5e62:	4b02      	ldr	r3, [pc, #8]	; (d5e6c <malloc+0xc>)
   d5e64:	681b      	ldr	r3, [r3, #0]
   d5e66:	681b      	ldr	r3, [r3, #0]
   d5e68:	9301      	str	r3, [sp, #4]
   d5e6a:	bd08      	pop	{r3, pc}
   d5e6c:	0003021c 	.word	0x0003021c

000d5e70 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5e70:	b508      	push	{r3, lr}
   d5e72:	4b02      	ldr	r3, [pc, #8]	; (d5e7c <free+0xc>)
   d5e74:	681b      	ldr	r3, [r3, #0]
   d5e76:	685b      	ldr	r3, [r3, #4]
   d5e78:	9301      	str	r3, [sp, #4]
   d5e7a:	bd08      	pop	{r3, pc}
   d5e7c:	0003021c 	.word	0x0003021c

000d5e80 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5e80:	b508      	push	{r3, lr}
   d5e82:	4b02      	ldr	r3, [pc, #8]	; (d5e8c <vsnprintf+0xc>)
   d5e84:	681b      	ldr	r3, [r3, #0]
   d5e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5e88:	9301      	str	r3, [sp, #4]
   d5e8a:	bd08      	pop	{r3, pc}
   d5e8c:	0003021c 	.word	0x0003021c

000d5e90 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5e90:	b508      	push	{r3, lr}
   d5e92:	4b02      	ldr	r3, [pc, #8]	; (d5e9c <__errno+0xc>)
   d5e94:	681b      	ldr	r3, [r3, #0]
   d5e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5e98:	9301      	str	r3, [sp, #4]
   d5e9a:	bd08      	pop	{r3, pc}
   d5e9c:	0003021c 	.word	0x0003021c

000d5ea0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5ea0:	2200      	movs	r2, #0
   d5ea2:	4611      	mov	r1, r2
   d5ea4:	6840      	ldr	r0, [r0, #4]
   d5ea6:	f7ff bfbb 	b.w	d5e20 <network_listening>

000d5eaa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5eaa:	2200      	movs	r2, #0
   d5eac:	4611      	mov	r1, r2
   d5eae:	6840      	ldr	r0, [r0, #4]
   d5eb0:	f7ff bfc6 	b.w	d5e40 <network_get_listen_timeout>

000d5eb4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5eb4:	2200      	movs	r2, #0
   d5eb6:	6840      	ldr	r0, [r0, #4]
   d5eb8:	f7ff bfba 	b.w	d5e30 <network_set_listen_timeout>

000d5ebc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5ebc:	2200      	movs	r2, #0
   d5ebe:	f081 0101 	eor.w	r1, r1, #1
   d5ec2:	6840      	ldr	r0, [r0, #4]
   d5ec4:	f7ff bfa4 	b.w	d5e10 <network_listen>

000d5ec8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5ec8:	2300      	movs	r3, #0
   d5eca:	461a      	mov	r2, r3
   d5ecc:	4619      	mov	r1, r3
   d5ece:	6840      	ldr	r0, [r0, #4]
   d5ed0:	f7ff bf96 	b.w	d5e00 <network_off>

000d5ed4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5ed4:	2300      	movs	r3, #0
   d5ed6:	461a      	mov	r2, r3
   d5ed8:	4619      	mov	r1, r3
   d5eda:	6840      	ldr	r0, [r0, #4]
   d5edc:	f7ff bf88 	b.w	d5df0 <network_on>

000d5ee0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ee0:	2200      	movs	r2, #0
   d5ee2:	4611      	mov	r1, r2
   d5ee4:	6840      	ldr	r0, [r0, #4]
   d5ee6:	f7ff bf7b 	b.w	d5de0 <network_ready>

000d5eea <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5eea:	2200      	movs	r2, #0
   d5eec:	4611      	mov	r1, r2
   d5eee:	6840      	ldr	r0, [r0, #4]
   d5ef0:	f7ff bf66 	b.w	d5dc0 <network_connecting>

000d5ef4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ef4:	2200      	movs	r2, #0
   d5ef6:	2102      	movs	r1, #2
   d5ef8:	6840      	ldr	r0, [r0, #4]
   d5efa:	f7ff bf69 	b.w	d5dd0 <network_disconnect>

000d5efe <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5efe:	2300      	movs	r3, #0
   d5f00:	461a      	mov	r2, r3
   d5f02:	6840      	ldr	r0, [r0, #4]
   d5f04:	f7ff bf54 	b.w	d5db0 <network_connect>

000d5f08 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5f08:	4b02      	ldr	r3, [pc, #8]	; (d5f14 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5f0a:	2203      	movs	r2, #3
   d5f0c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5f0e:	4a02      	ldr	r2, [pc, #8]	; (d5f18 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5f10:	601a      	str	r2, [r3, #0]
   d5f12:	4770      	bx	lr
   d5f14:	2003e3dc 	.word	0x2003e3dc
   d5f18:	000d88e8 	.word	0x000d88e8

000d5f1c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d5f1c:	2100      	movs	r1, #0
   d5f1e:	f7ff bdab 	b.w	d5a78 <HAL_SPI_Acquire>

000d5f22 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d5f22:	2100      	movs	r1, #0
   d5f24:	f7ff bdb0 	b.w	d5a88 <HAL_SPI_Release>

000d5f28 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5f28:	b510      	push	{r4, lr}
   d5f2a:	4604      	mov	r4, r0
{
    _spi = spi;
   d5f2c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d5f2e:	4608      	mov	r0, r1
   d5f30:	f7ff fd82 	bl	d5a38 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5f34:	2300      	movs	r3, #0
   d5f36:	6063      	str	r3, [r4, #4]
}
   d5f38:	4620      	mov	r0, r4
   d5f3a:	bd10      	pop	{r4, pc}

000d5f3c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5f3c:	b510      	push	{r4, lr}
   d5f3e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5f40:	7800      	ldrb	r0, [r0, #0]
   d5f42:	f7ff ffeb 	bl	d5f1c <_ZN8SPIClass4lockEv.isra.0>
   d5f46:	b948      	cbnz	r0, d5f5c <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5f48:	7820      	ldrb	r0, [r4, #0]
   d5f4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5f4e:	f7ff fd4b 	bl	d59e8 <HAL_SPI_Begin>
        unlock();
   d5f52:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d5f58:	f7ff bfe3 	b.w	d5f22 <_ZN8SPIClass6unlockEv.isra.1>
   d5f5c:	bd10      	pop	{r4, pc}

000d5f5e <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5f5e:	b538      	push	{r3, r4, r5, lr}
   d5f60:	4604      	mov	r4, r0
    if (!lock())
   d5f62:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5f64:	460d      	mov	r5, r1
    if (!lock())
   d5f66:	f7ff ffd9 	bl	d5f1c <_ZN8SPIClass4lockEv.isra.0>
   d5f6a:	b940      	cbnz	r0, d5f7e <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d5f6c:	7820      	ldrb	r0, [r4, #0]
   d5f6e:	4629      	mov	r1, r5
   d5f70:	f7ff fd42 	bl	d59f8 <HAL_SPI_Set_Bit_Order>
        unlock();
   d5f74:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d5f7a:	f7ff bfd2 	b.w	d5f22 <_ZN8SPIClass6unlockEv.isra.1>
   d5f7e:	bd38      	pop	{r3, r4, r5, pc}

000d5f80 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5f80:	b538      	push	{r3, r4, r5, lr}
   d5f82:	4604      	mov	r4, r0
    if (!lock())
   d5f84:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5f86:	460d      	mov	r5, r1
    if (!lock())
   d5f88:	f7ff ffc8 	bl	d5f1c <_ZN8SPIClass4lockEv.isra.0>
   d5f8c:	b940      	cbnz	r0, d5fa0 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d5f8e:	7820      	ldrb	r0, [r4, #0]
   d5f90:	4629      	mov	r1, r5
   d5f92:	f7ff fd39 	bl	d5a08 <HAL_SPI_Set_Data_Mode>
        unlock();
   d5f96:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d5f9c:	f7ff bfc1 	b.w	d5f22 <_ZN8SPIClass6unlockEv.isra.1>
   d5fa0:	bd38      	pop	{r3, r4, r5, pc}

000d5fa2 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5fa2:	7800      	ldrb	r0, [r0, #0]
   d5fa4:	f7ff bfbd 	b.w	d5f22 <_ZN8SPIClass6unlockEv.isra.1>

000d5fa8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5fa8:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d5faa:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5fac:	6018      	str	r0, [r3, #0]
   d5fae:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5fb0:	6818      	ldr	r0, [r3, #0]
   d5fb2:	4288      	cmp	r0, r1
   d5fb4:	b2e5      	uxtb	r5, r4
   d5fb6:	d906      	bls.n	d5fc6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5fb8:	3401      	adds	r4, #1
   d5fba:	2c08      	cmp	r4, #8
   d5fbc:	d002      	beq.n	d5fc4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5fbe:	0840      	lsrs	r0, r0, #1
   d5fc0:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5fc2:	e7f5      	b.n	d5fb0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5fc4:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5fc6:	4b02      	ldr	r3, [pc, #8]	; (d5fd0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5fc8:	5d5b      	ldrb	r3, [r3, r5]
   d5fca:	7013      	strb	r3, [r2, #0]
   d5fcc:	bd30      	pop	{r4, r5, pc}
   d5fce:	bf00      	nop
   d5fd0:	000d8914 	.word	0x000d8914

000d5fd4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5fd8:	4607      	mov	r7, r0
   d5fda:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d5fdc:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5fde:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d5fe0:	f7ff ff9c 	bl	d5f1c <_ZN8SPIClass4lockEv.isra.0>
   d5fe4:	2800      	cmp	r0, #0
   d5fe6:	db62      	blt.n	d60ae <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d5fe8:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d5fea:	2214      	movs	r2, #20
   d5fec:	2100      	movs	r1, #0
   d5fee:	a809      	add	r0, sp, #36	; 0x24
   d5ff0:	f001 ff43 	bl	d7e7a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5ff4:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d5ff6:	4620      	mov	r0, r4
   d5ff8:	2200      	movs	r2, #0
   d5ffa:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d5ffc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d6000:	f7ff fd2a 	bl	d5a58 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d6004:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d6008:	b154      	cbz	r4, d6020 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d600a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d600e:	b935      	cbnz	r5, d601e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d6010:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6014:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6018:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d601c:	e003      	b.n	d6026 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d601e:	2400      	movs	r4, #0
   d6020:	46a1      	mov	r9, r4
   d6022:	46a0      	mov	r8, r4
   d6024:	2501      	movs	r5, #1
   d6026:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6028:	b105      	cbz	r5, d602c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d602a:	b9bb      	cbnz	r3, d605c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d602c:	429d      	cmp	r5, r3
   d602e:	d10b      	bne.n	d6048 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d6030:	68b2      	ldr	r2, [r6, #8]
   d6032:	4542      	cmp	r2, r8
   d6034:	d108      	bne.n	d6048 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6036:	f88d 9020 	strb.w	r9, [sp, #32]
   d603a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d603e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d6042:	89b2      	ldrh	r2, [r6, #12]
   d6044:	4291      	cmp	r1, r2
   d6046:	d009      	beq.n	d605c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d6048:	b153      	cbz	r3, d6060 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d604a:	2400      	movs	r4, #0
   d604c:	7838      	ldrb	r0, [r7, #0]
   d604e:	9401      	str	r4, [sp, #4]
   d6050:	9400      	str	r4, [sp, #0]
   d6052:	4623      	mov	r3, r4
   d6054:	4622      	mov	r2, r4
   d6056:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6058:	f7ff fd06 	bl	d5a68 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d605c:	2000      	movs	r0, #0
   d605e:	e026      	b.n	d60ae <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d6060:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d6064:	68b1      	ldr	r1, [r6, #8]
   d6066:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6068:	ab04      	add	r3, sp, #16
   d606a:	f10d 020f 	add.w	r2, sp, #15
   d606e:	f7ff ff9b 	bl	d5fa8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d6072:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6074:	b105      	cbz	r5, d6078 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d6076:	b9b1      	cbnz	r1, d60a6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d6078:	42a9      	cmp	r1, r5
   d607a:	d008      	beq.n	d608e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d607c:	2400      	movs	r4, #0
   d607e:	7838      	ldrb	r0, [r7, #0]
   d6080:	9401      	str	r4, [sp, #4]
   d6082:	7b74      	ldrb	r4, [r6, #13]
   d6084:	7b33      	ldrb	r3, [r6, #12]
   d6086:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d608a:	9400      	str	r4, [sp, #0]
   d608c:	e7e4      	b.n	d6058 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d608e:	68b3      	ldr	r3, [r6, #8]
   d6090:	4543      	cmp	r3, r8
   d6092:	d3f3      	bcc.n	d607c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6094:	f88d 9020 	strb.w	r9, [sp, #32]
   d6098:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d609c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d60a0:	89b3      	ldrh	r3, [r6, #12]
   d60a2:	429a      	cmp	r2, r3
   d60a4:	d1ea      	bne.n	d607c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d60a6:	9b04      	ldr	r3, [sp, #16]
   d60a8:	4543      	cmp	r3, r8
   d60aa:	d1e7      	bne.n	d607c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d60ac:	e7d6      	b.n	d605c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d60ae:	b00f      	add	sp, #60	; 0x3c
   d60b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d60b4 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d60b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d60b8:	b088      	sub	sp, #32
    unsigned clock = 0;
   d60ba:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d60bc:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d60be:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d60c0:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d60c2:	460e      	mov	r6, r1
   d60c4:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d60c6:	f7ff ff29 	bl	d5f1c <_ZN8SPIClass4lockEv.isra.0>
   d60ca:	4605      	mov	r5, r0
   d60cc:	bb00      	cbnz	r0, d6110 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d60ce:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d60d2:	4601      	mov	r1, r0
   d60d4:	2214      	movs	r2, #20
   d60d6:	a803      	add	r0, sp, #12
   d60d8:	f001 fecf 	bl	d7e7a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d60dc:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d60de:	462a      	mov	r2, r5
   d60e0:	a903      	add	r1, sp, #12
   d60e2:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d60e4:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d60e8:	f7ff fcb6 	bl	d5a58 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d60ec:	ab02      	add	r3, sp, #8
   d60ee:	f10d 0207 	add.w	r2, sp, #7
   d60f2:	fb07 f106 	mul.w	r1, r7, r6
   d60f6:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d60f8:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d60fc:	f7ff ff54 	bl	d5fa8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d6100:	7820      	ldrb	r0, [r4, #0]
   d6102:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d6106:	f7ff fc87 	bl	d5a18 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d610a:	7820      	ldrb	r0, [r4, #0]
   d610c:	f7ff ff09 	bl	d5f22 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d6110:	9802      	ldr	r0, [sp, #8]
   d6112:	b008      	add	sp, #32
   d6114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6118 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6118:	b538      	push	{r3, r4, r5, lr}
   d611a:	4604      	mov	r4, r0
    if (!lock())
   d611c:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d611e:	460d      	mov	r5, r1
    if (!lock())
   d6120:	f7ff fefc 	bl	d5f1c <_ZN8SPIClass4lockEv.isra.0>
   d6124:	b9c8      	cbnz	r0, d615a <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d6126:	6861      	ldr	r1, [r4, #4]
   d6128:	b171      	cbz	r1, d6148 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d612a:	4b0c      	ldr	r3, [pc, #48]	; (d615c <_ZN8SPIClass15setClockDividerEh+0x44>)
   d612c:	5cc2      	ldrb	r2, [r0, r3]
   d612e:	42aa      	cmp	r2, r5
   d6130:	d002      	beq.n	d6138 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d6132:	3001      	adds	r0, #1
   d6134:	2808      	cmp	r0, #8
   d6136:	d1f9      	bne.n	d612c <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d6138:	3001      	adds	r0, #1
   d613a:	b2c0      	uxtb	r0, r0
   d613c:	40c1      	lsrs	r1, r0
   d613e:	2201      	movs	r2, #1
   d6140:	4620      	mov	r0, r4
   d6142:	f7ff ffb7 	bl	d60b4 <_ZN8SPIClass13setClockSpeedEjj>
   d6146:	e003      	b.n	d6150 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6148:	4629      	mov	r1, r5
   d614a:	7820      	ldrb	r0, [r4, #0]
   d614c:	f7ff fc64 	bl	d5a18 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d6150:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d6156:	f7ff bee4 	b.w	d5f22 <_ZN8SPIClass6unlockEv.isra.1>
   d615a:	bd38      	pop	{r3, r4, r5, pc}
   d615c:	000d8914 	.word	0x000d8914

000d6160 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6160:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d6162:	7800      	ldrb	r0, [r0, #0]
   d6164:	f7ff fc60 	bl	d5a28 <HAL_SPI_Send_Receive_Data>
}
   d6168:	b2c0      	uxtb	r0, r0
   d616a:	bd08      	pop	{r3, pc}

000d616c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d616c:	7800      	ldrb	r0, [r0, #0]
   d616e:	f7ff bc6b 	b.w	d5a48 <HAL_SPI_Is_Enabled>

000d6172 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6172:	b510      	push	{r4, lr}
   d6174:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6176:	6800      	ldr	r0, [r0, #0]
   d6178:	b118      	cbz	r0, d6182 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d617a:	f7ff fe79 	bl	d5e70 <free>
            wakeupSource_ = nullptr;
   d617e:	2300      	movs	r3, #0
   d6180:	6023      	str	r3, [r4, #0]
   d6182:	bd10      	pop	{r4, pc}

000d6184 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6184:	b510      	push	{r4, lr}
   d6186:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6188:	f7ff fff3 	bl	d6172 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d618c:	4620      	mov	r0, r4
   d618e:	bd10      	pop	{r4, pc}

000d6190 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6190:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6192:	4c09      	ldr	r4, [pc, #36]	; (d61b8 <_GLOBAL__sub_I_System+0x28>)
   d6194:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6196:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d619a:	6020      	str	r0, [r4, #0]
   d619c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d619e:	71a0      	strb	r0, [r4, #6]
   d61a0:	8120      	strh	r0, [r4, #8]
   d61a2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d61a4:	f7ff fde0 	bl	d5d68 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d61a8:	4620      	mov	r0, r4
   d61aa:	4a04      	ldr	r2, [pc, #16]	; (d61bc <_GLOBAL__sub_I_System+0x2c>)
   d61ac:	4904      	ldr	r1, [pc, #16]	; (d61c0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d61ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d61b2:	f001 b8c5 	b.w	d7340 <__aeabi_atexit>
   d61b6:	bf00      	nop
   d61b8:	2003e3e4 	.word	0x2003e3e4
   d61bc:	2003e1e0 	.word	0x2003e1e0
   d61c0:	000d6185 	.word	0x000d6185

000d61c4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d61c4:	b510      	push	{r4, lr}
   d61c6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d61c8:	6800      	ldr	r0, [r0, #0]
   d61ca:	b108      	cbz	r0, d61d0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d61cc:	f7ff fca4 	bl	d5b18 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d61d0:	4620      	mov	r0, r4
   d61d2:	bd10      	pop	{r4, pc}

000d61d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d61d4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d61d6:	4c06      	ldr	r4, [pc, #24]	; (d61f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d61d8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d61da:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d61dc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d61de:	f7ff fc93 	bl	d5b08 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d61e2:	4620      	mov	r0, r4
   d61e4:	4a03      	ldr	r2, [pc, #12]	; (d61f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d61e6:	4904      	ldr	r1, [pc, #16]	; (d61f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d61e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d61ec:	f001 b8a8 	b.w	d7340 <__aeabi_atexit>
   d61f0:	2003e3f0 	.word	0x2003e3f0
   d61f4:	2003e1e0 	.word	0x2003e1e0
   d61f8:	000d61c5 	.word	0x000d61c5

000d61fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d61fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d61fe:	4606      	mov	r6, r0
   d6200:	460d      	mov	r5, r1
   d6202:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6204:	2400      	movs	r4, #0
  while (size--) {
   d6206:	42bd      	cmp	r5, r7
   d6208:	d00c      	beq.n	d6224 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d620a:	6833      	ldr	r3, [r6, #0]
   d620c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6210:	689b      	ldr	r3, [r3, #8]
   d6212:	4630      	mov	r0, r6
   d6214:	4798      	blx	r3
     if (chunk>=0)
   d6216:	2800      	cmp	r0, #0
   d6218:	db01      	blt.n	d621e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d621a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d621c:	e7f3      	b.n	d6206 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d621e:	2c00      	cmp	r4, #0
   d6220:	bf08      	it	eq
   d6222:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6224:	4620      	mov	r0, r4
   d6226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6228 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6228:	b570      	push	{r4, r5, r6, lr}
   d622a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d622c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d622e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6230:	b149      	cbz	r1, d6246 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6232:	f001 fe5b 	bl	d7eec <strlen>
   d6236:	682b      	ldr	r3, [r5, #0]
   d6238:	4602      	mov	r2, r0
   d623a:	4621      	mov	r1, r4
   d623c:	4628      	mov	r0, r5
   d623e:	68db      	ldr	r3, [r3, #12]
    }
   d6240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6244:	4718      	bx	r3
    }
   d6246:	bd70      	pop	{r4, r5, r6, pc}

000d6248 <_ZN5Print5printEPKc>:
   d6248:	b508      	push	{r3, lr}
   d624a:	f7ff ffed 	bl	d6228 <_ZN5Print5writeEPKc>
   d624e:	bd08      	pop	{r3, pc}

000d6250 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6250:	6803      	ldr	r3, [r0, #0]
   d6252:	689b      	ldr	r3, [r3, #8]
   d6254:	4718      	bx	r3

000d6256 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6256:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6258:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d625a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d625c:	f7ff fff8 	bl	d6250 <_ZN5Print5printEc>
  n += print('\n');
   d6260:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6262:	4604      	mov	r4, r0
  n += print('\n');
   d6264:	4628      	mov	r0, r5
   d6266:	f7ff fff3 	bl	d6250 <_ZN5Print5printEc>
  return n;
}
   d626a:	4420      	add	r0, r4
   d626c:	bd38      	pop	{r3, r4, r5, pc}

000d626e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d626e:	b538      	push	{r3, r4, r5, lr}
   d6270:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6272:	f7ff ffd9 	bl	d6228 <_ZN5Print5writeEPKc>
   d6276:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6278:	4628      	mov	r0, r5
   d627a:	f7ff ffec 	bl	d6256 <_ZN5Print7printlnEv>
  return n;
}
   d627e:	4420      	add	r0, r4
   d6280:	bd38      	pop	{r3, r4, r5, pc}

000d6282 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6282:	b530      	push	{r4, r5, lr}
   d6284:	b08b      	sub	sp, #44	; 0x2c
   d6286:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6288:	2100      	movs	r1, #0
   d628a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d628e:	2a01      	cmp	r2, #1
   d6290:	bf98      	it	ls
   d6292:	220a      	movls	r2, #10
   d6294:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6298:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d629c:	fb05 3312 	mls	r3, r5, r2, r3
   d62a0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d62a4:	2b09      	cmp	r3, #9
   d62a6:	bf94      	ite	ls
   d62a8:	3330      	addls	r3, #48	; 0x30
   d62aa:	3337      	addhi	r3, #55	; 0x37
   d62ac:	b2db      	uxtb	r3, r3
   d62ae:	4621      	mov	r1, r4
   d62b0:	f804 3901 	strb.w	r3, [r4], #-1
   d62b4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d62b6:	2d00      	cmp	r5, #0
   d62b8:	d1ee      	bne.n	d6298 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d62ba:	f7ff ffb5 	bl	d6228 <_ZN5Print5writeEPKc>
}
   d62be:	b00b      	add	sp, #44	; 0x2c
   d62c0:	bd30      	pop	{r4, r5, pc}

000d62c2 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d62c2:	b40c      	push	{r2, r3}
   d62c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d62c8:	b087      	sub	sp, #28
   d62ca:	af00      	add	r7, sp, #0
   d62cc:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d62d0:	4605      	mov	r5, r0
   d62d2:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d62d6:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d62d8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d62da:	4623      	mov	r3, r4
   d62dc:	464a      	mov	r2, r9
   d62de:	2114      	movs	r1, #20
   d62e0:	1d38      	adds	r0, r7, #4
   d62e2:	f7ff fdcd 	bl	d5e80 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d62e6:	2813      	cmp	r0, #19
   d62e8:	d805      	bhi.n	d62f6 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d62ea:	1d39      	adds	r1, r7, #4
   d62ec:	4628      	mov	r0, r5
   d62ee:	f7ff ff9b 	bl	d6228 <_ZN5Print5writeEPKc>
   d62f2:	4604      	mov	r4, r0
   d62f4:	e013      	b.n	d631e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d62f6:	f100 0308 	add.w	r3, r0, #8
   d62fa:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d62fe:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6300:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6304:	1c41      	adds	r1, r0, #1
   d6306:	4623      	mov	r3, r4
   d6308:	464a      	mov	r2, r9
   d630a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d630c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d630e:	f7ff fdb7 	bl	d5e80 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6312:	4669      	mov	r1, sp
   d6314:	4628      	mov	r0, r5
   d6316:	f7ff ff87 	bl	d6228 <_ZN5Print5writeEPKc>
   d631a:	4604      	mov	r4, r0
   d631c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d631e:	b11e      	cbz	r6, d6328 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6320:	4628      	mov	r0, r5
   d6322:	f7ff ff98 	bl	d6256 <_ZN5Print7printlnEv>
   d6326:	4404      	add	r4, r0
    return n;
}
   d6328:	4620      	mov	r0, r4
   d632a:	371c      	adds	r7, #28
   d632c:	46bd      	mov	sp, r7
   d632e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6332:	b002      	add	sp, #8
   d6334:	4770      	bx	lr
	...

000d6338 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6338:	4b01      	ldr	r3, [pc, #4]	; (d6340 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d633a:	4a02      	ldr	r2, [pc, #8]	; (d6344 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d633c:	601a      	str	r2, [r3, #0]
   d633e:	4770      	bx	lr
   d6340:	2003e3f4 	.word	0x2003e3f4
   d6344:	000d898f 	.word	0x000d898f

000d6348 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6348:	4b02      	ldr	r3, [pc, #8]	; (d6354 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d634a:	681a      	ldr	r2, [r3, #0]
   d634c:	4b02      	ldr	r3, [pc, #8]	; (d6358 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d634e:	601a      	str	r2, [r3, #0]
   d6350:	4770      	bx	lr
   d6352:	bf00      	nop
   d6354:	2003e178 	.word	0x2003e178
   d6358:	2003e3f8 	.word	0x2003e3f8

000d635c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d635c:	2100      	movs	r1, #0
   d635e:	f7ff bd0b 	b.w	d5d78 <system_delay_ms>

000d6362 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6362:	b510      	push	{r4, lr}
   d6364:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6366:	f7fe fb3f 	bl	d49e8 <_ZNSt14_Function_baseD1Ev>
   d636a:	4620      	mov	r0, r4
   d636c:	bd10      	pop	{r4, pc}
	...

000d6370 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6370:	4803      	ldr	r0, [pc, #12]	; (d6380 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6372:	4a04      	ldr	r2, [pc, #16]	; (d6384 <_GLOBAL__sub_I_RGB+0x14>)
   d6374:	4904      	ldr	r1, [pc, #16]	; (d6388 <_GLOBAL__sub_I_RGB+0x18>)
   d6376:	2300      	movs	r3, #0
   d6378:	6083      	str	r3, [r0, #8]
   d637a:	f000 bfe1 	b.w	d7340 <__aeabi_atexit>
   d637e:	bf00      	nop
   d6380:	2003e3fc 	.word	0x2003e3fc
   d6384:	2003e1e0 	.word	0x2003e1e0
   d6388:	000d6363 	.word	0x000d6363

000d638c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d638c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d638e:	4b0c      	ldr	r3, [pc, #48]	; (d63c0 <serialEventRun+0x34>)
   d6390:	b133      	cbz	r3, d63a0 <serialEventRun+0x14>
   d6392:	f000 f969 	bl	d6668 <_Z16_fetch_usbserialv>
   d6396:	6803      	ldr	r3, [r0, #0]
   d6398:	691b      	ldr	r3, [r3, #16]
   d639a:	4798      	blx	r3
   d639c:	2800      	cmp	r0, #0
   d639e:	dc09      	bgt.n	d63b4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d63a0:	4b08      	ldr	r3, [pc, #32]	; (d63c4 <serialEventRun+0x38>)
   d63a2:	b163      	cbz	r3, d63be <serialEventRun+0x32>
   d63a4:	f000 f9e2 	bl	d676c <_Z22__fetch_global_Serial1v>
   d63a8:	6803      	ldr	r3, [r0, #0]
   d63aa:	691b      	ldr	r3, [r3, #16]
   d63ac:	4798      	blx	r3
   d63ae:	2800      	cmp	r0, #0
   d63b0:	dc03      	bgt.n	d63ba <serialEventRun+0x2e>
   d63b2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d63b4:	f3af 8000 	nop.w
   d63b8:	e7f2      	b.n	d63a0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d63ba:	f3af 8000 	nop.w
   d63be:	bd08      	pop	{r3, pc}
	...

000d63c8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d63c8:	b508      	push	{r3, lr}
	serialEventRun();
   d63ca:	f7ff ffdf 	bl	d638c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d63ce:	f7ff fb7b 	bl	d5ac8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d63d2:	4b01      	ldr	r3, [pc, #4]	; (d63d8 <_post_loop+0x10>)
   d63d4:	6018      	str	r0, [r3, #0]
   d63d6:	bd08      	pop	{r3, pc}
   d63d8:	2003e730 	.word	0x2003e730

000d63dc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d63dc:	4802      	ldr	r0, [pc, #8]	; (d63e8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d63de:	4a03      	ldr	r2, [pc, #12]	; (d63ec <_Z33system_initialize_user_backup_ramv+0x10>)
   d63e0:	4903      	ldr	r1, [pc, #12]	; (d63f0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d63e2:	1a12      	subs	r2, r2, r0
   d63e4:	f001 bd3e 	b.w	d7e64 <memcpy>
   d63e8:	2003f400 	.word	0x2003f400
   d63ec:	2003f404 	.word	0x2003f404
   d63f0:	000d8c90 	.word	0x000d8c90

000d63f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d63f4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d63f6:	2300      	movs	r3, #0
   d63f8:	9300      	str	r3, [sp, #0]
   d63fa:	461a      	mov	r2, r3
   d63fc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6400:	f7ff fccc 	bl	d5d9c <system_ctrl_set_result>
}
   d6404:	b003      	add	sp, #12
   d6406:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d640c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d640c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d640e:	8843      	ldrh	r3, [r0, #2]
   d6410:	2b0a      	cmp	r3, #10
   d6412:	d008      	beq.n	d6426 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6414:	2b50      	cmp	r3, #80	; 0x50
   d6416:	d109      	bne.n	d642c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6418:	4b09      	ldr	r3, [pc, #36]	; (d6440 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d641a:	681b      	ldr	r3, [r3, #0]
   d641c:	b13b      	cbz	r3, d642e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d641e:	b003      	add	sp, #12
   d6420:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6424:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6426:	f7ff ffe5 	bl	d63f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d642a:	e006      	b.n	d643a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d642c:	2300      	movs	r3, #0
   d642e:	9300      	str	r3, [sp, #0]
   d6430:	461a      	mov	r2, r3
   d6432:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6436:	f7ff fcb1 	bl	d5d9c <system_ctrl_set_result>
        break;
    }
}
   d643a:	b003      	add	sp, #12
   d643c:	f85d fb04 	ldr.w	pc, [sp], #4
   d6440:	2003e40c 	.word	0x2003e40c

000d6444 <module_user_init_hook>:

void module_user_init_hook()
{
   d6444:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6446:	4c10      	ldr	r4, [pc, #64]	; (d6488 <module_user_init_hook+0x44>)
   d6448:	4d10      	ldr	r5, [pc, #64]	; (d648c <module_user_init_hook+0x48>)
   d644a:	6823      	ldr	r3, [r4, #0]
   d644c:	42ab      	cmp	r3, r5
   d644e:	4b10      	ldr	r3, [pc, #64]	; (d6490 <module_user_init_hook+0x4c>)
   d6450:	bf0c      	ite	eq
   d6452:	2201      	moveq	r2, #1
   d6454:	2200      	movne	r2, #0
   d6456:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6458:	d002      	beq.n	d6460 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d645a:	f7ff ffbf 	bl	d63dc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d645e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6460:	f7ff fb22 	bl	d5aa8 <HAL_RNG_GetRandomNumber>
   d6464:	4604      	mov	r4, r0
    srand(seed);
   d6466:	f001 fd11 	bl	d7e8c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d646a:	4b0a      	ldr	r3, [pc, #40]	; (d6494 <module_user_init_hook+0x50>)
   d646c:	b113      	cbz	r3, d6474 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d646e:	4620      	mov	r0, r4
   d6470:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6474:	2100      	movs	r1, #0
   d6476:	4807      	ldr	r0, [pc, #28]	; (d6494 <module_user_init_hook+0x50>)
   d6478:	f7ff fcea 	bl	d5e50 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d647c:	2100      	movs	r1, #0
   d647e:	4806      	ldr	r0, [pc, #24]	; (d6498 <module_user_init_hook+0x54>)
}
   d6480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6484:	f7ff bc80 	b.w	d5d88 <system_ctrl_set_app_request_handler>
   d6488:	2003f400 	.word	0x2003f400
   d648c:	9a271c1e 	.word	0x9a271c1e
   d6490:	2003e410 	.word	0x2003e410
   d6494:	00000000 	.word	0x00000000
   d6498:	000d640d 	.word	0x000d640d

000d649c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d649c:	4770      	bx	lr

000d649e <_ZN9IPAddressD0Ev>:
   d649e:	b510      	push	{r4, lr}
   d64a0:	2118      	movs	r1, #24
   d64a2:	4604      	mov	r4, r0
   d64a4:	f000 ff5a 	bl	d735c <_ZdlPvj>
   d64a8:	4620      	mov	r0, r4
   d64aa:	bd10      	pop	{r4, pc}

000d64ac <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d64ac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d64ae:	7d03      	ldrb	r3, [r0, #20]
   d64b0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d64b2:	b08d      	sub	sp, #52	; 0x34
   d64b4:	460e      	mov	r6, r1
   d64b6:	f100 0704 	add.w	r7, r0, #4
   d64ba:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d64be:	d002      	beq.n	d64c6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d64c0:	f100 0508 	add.w	r5, r0, #8
   d64c4:	e018      	b.n	d64f8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d64c6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d64c8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d64ca:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d64ce:	232f      	movs	r3, #47	; 0x2f
   d64d0:	462a      	mov	r2, r5
   d64d2:	200a      	movs	r0, #10
   d64d4:	f7ff fb28 	bl	d5b28 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d64d8:	4628      	mov	r0, r5
   d64da:	f001 fd07 	bl	d7eec <strlen>
   d64de:	6833      	ldr	r3, [r6, #0]
   d64e0:	4602      	mov	r2, r0
   d64e2:	68db      	ldr	r3, [r3, #12]
   d64e4:	4629      	mov	r1, r5
   d64e6:	4630      	mov	r0, r6
   d64e8:	4798      	blx	r3
   d64ea:	e00f      	b.n	d650c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d64ec:	b124      	cbz	r4, d64f8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d64ee:	212e      	movs	r1, #46	; 0x2e
   d64f0:	4630      	mov	r0, r6
   d64f2:	f7ff fead 	bl	d6250 <_ZN5Print5printEc>
   d64f6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d64f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d64fc:	220a      	movs	r2, #10
   d64fe:	4630      	mov	r0, r6
   d6500:	f7ff febf 	bl	d6282 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6504:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6506:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6508:	d1f0      	bne.n	d64ec <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d650a:	4620      	mov	r0, r4
    }
    return n;
}
   d650c:	b00d      	add	sp, #52	; 0x34
   d650e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6510 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6510:	b510      	push	{r4, lr}
   d6512:	4b05      	ldr	r3, [pc, #20]	; (d6528 <_ZN9IPAddressC1Ev+0x18>)
   d6514:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6516:	2211      	movs	r2, #17
   d6518:	f840 3b04 	str.w	r3, [r0], #4
   d651c:	2100      	movs	r1, #0
   d651e:	f001 fcac 	bl	d7e7a <memset>
{
    clear();
}
   d6522:	4620      	mov	r0, r4
   d6524:	bd10      	pop	{r4, pc}
   d6526:	bf00      	nop
   d6528:	000d8a20 	.word	0x000d8a20

000d652c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d652c:	4603      	mov	r3, r0
   d652e:	4a07      	ldr	r2, [pc, #28]	; (d654c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6530:	b510      	push	{r4, lr}
   d6532:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6536:	f101 0210 	add.w	r2, r1, #16
   d653a:	f851 4b04 	ldr.w	r4, [r1], #4
   d653e:	f843 4b04 	str.w	r4, [r3], #4
   d6542:	4291      	cmp	r1, r2
   d6544:	d1f9      	bne.n	d653a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6546:	780a      	ldrb	r2, [r1, #0]
   d6548:	701a      	strb	r2, [r3, #0]
}
   d654a:	bd10      	pop	{r4, pc}
   d654c:	000d8a20 	.word	0x000d8a20

000d6550 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d6550:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d6552:	2b04      	cmp	r3, #4
   d6554:	d101      	bne.n	d655a <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d6556:	6840      	ldr	r0, [r0, #4]
   d6558:	e008      	b.n	d656c <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d655a:	2b06      	cmp	r3, #6
   d655c:	d10a      	bne.n	d6574 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d655e:	6843      	ldr	r3, [r0, #4]
   d6560:	b953      	cbnz	r3, d6578 <_ZNK9IPAddresscvbEv+0x28>
   d6562:	6883      	ldr	r3, [r0, #8]
   d6564:	b943      	cbnz	r3, d6578 <_ZNK9IPAddresscvbEv+0x28>
   d6566:	68c3      	ldr	r3, [r0, #12]
   d6568:	b933      	cbnz	r3, d6578 <_ZNK9IPAddresscvbEv+0x28>
   d656a:	6900      	ldr	r0, [r0, #16]
   d656c:	3000      	adds	r0, #0
   d656e:	bf18      	it	ne
   d6570:	2001      	movne	r0, #1
   d6572:	4770      	bx	lr
    } else {
        return false;
   d6574:	2000      	movs	r0, #0
   d6576:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6578:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d657a:	4770      	bx	lr

000d657c <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d657c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d657e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6582:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6586:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d658a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d658e:	2304      	movs	r3, #4
   d6590:	6041      	str	r1, [r0, #4]
   d6592:	7503      	strb	r3, [r0, #20]
   d6594:	bd10      	pop	{r4, pc}

000d6596 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6596:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6598:	780d      	ldrb	r5, [r1, #0]
   d659a:	788b      	ldrb	r3, [r1, #2]
   d659c:	784a      	ldrb	r2, [r1, #1]
   d659e:	78c9      	ldrb	r1, [r1, #3]
   d65a0:	9100      	str	r1, [sp, #0]
   d65a2:	4629      	mov	r1, r5
   d65a4:	f7ff ffea 	bl	d657c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d65a8:	b003      	add	sp, #12
   d65aa:	bd30      	pop	{r4, r5, pc}

000d65ac <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d65ac:	7441      	strb	r1, [r0, #17]
   d65ae:	4770      	bx	lr

000d65b0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d65b0:	4770      	bx	lr

000d65b2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d65b2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d65b4:	2100      	movs	r1, #0
   d65b6:	7c00      	ldrb	r0, [r0, #16]
   d65b8:	f7ff fbae 	bl	d5d18 <HAL_USB_USART_Receive_Data>
}
   d65bc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d65c0:	bf28      	it	cs
   d65c2:	f04f 30ff 	movcs.w	r0, #4294967295
   d65c6:	bd08      	pop	{r3, pc}

000d65c8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d65c8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d65ca:	2101      	movs	r1, #1
   d65cc:	7c00      	ldrb	r0, [r0, #16]
   d65ce:	f7ff fba3 	bl	d5d18 <HAL_USB_USART_Receive_Data>
}
   d65d2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d65d6:	bf28      	it	cs
   d65d8:	f04f 30ff 	movcs.w	r0, #4294967295
   d65dc:	bd08      	pop	{r3, pc}

000d65de <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d65de:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d65e0:	7c00      	ldrb	r0, [r0, #16]
   d65e2:	f7ff fb91 	bl	d5d08 <HAL_USB_USART_Available_Data_For_Write>
}
   d65e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d65ea:	bd08      	pop	{r3, pc}

000d65ec <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d65ec:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d65ee:	7c00      	ldrb	r0, [r0, #16]
   d65f0:	f7ff fb82 	bl	d5cf8 <HAL_USB_USART_Available_Data>
}
   d65f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d65f8:	bd08      	pop	{r3, pc}

000d65fa <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d65fa:	7c00      	ldrb	r0, [r0, #16]
   d65fc:	f7ff bb9c 	b.w	d5d38 <HAL_USB_USART_Flush_Data>

000d6600 <_ZN9USBSerialD0Ev>:
   d6600:	b510      	push	{r4, lr}
   d6602:	2114      	movs	r1, #20
   d6604:	4604      	mov	r4, r0
   d6606:	f000 fea9 	bl	d735c <_ZdlPvj>
   d660a:	4620      	mov	r0, r4
   d660c:	bd10      	pop	{r4, pc}

000d660e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d660e:	b538      	push	{r3, r4, r5, lr}
   d6610:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6612:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6614:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6616:	f7ff fb77 	bl	d5d08 <HAL_USB_USART_Available_Data_For_Write>
   d661a:	2800      	cmp	r0, #0
   d661c:	dc01      	bgt.n	d6622 <_ZN9USBSerial5writeEh+0x14>
   d661e:	7c60      	ldrb	r0, [r4, #17]
   d6620:	b128      	cbz	r0, d662e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6622:	4629      	mov	r1, r5
   d6624:	7c20      	ldrb	r0, [r4, #16]
   d6626:	f7ff fb7f 	bl	d5d28 <HAL_USB_USART_Send_Data>
   d662a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d662e:	bd38      	pop	{r3, r4, r5, pc}

000d6630 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6630:	b510      	push	{r4, lr}
   d6632:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6634:	2300      	movs	r3, #0
   d6636:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d663c:	60a3      	str	r3, [r4, #8]
   d663e:	4b05      	ldr	r3, [pc, #20]	; (d6654 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6640:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6642:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6644:	4608      	mov	r0, r1
{
  _serial = serial;
   d6646:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6648:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d664a:	4611      	mov	r1, r2
   d664c:	f7ff fb4c 	bl	d5ce8 <HAL_USB_USART_Init>
}
   d6650:	4620      	mov	r0, r4
   d6652:	bd10      	pop	{r4, pc}
   d6654:	000d8a34 	.word	0x000d8a34

000d6658 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6658:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d665a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d665c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d665e:	2100      	movs	r1, #0
   d6660:	f001 fc0b 	bl	d7e7a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6664:	4620      	mov	r0, r4
   d6666:	bd10      	pop	{r4, pc}

000d6668 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6668:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d666a:	4d0e      	ldr	r5, [pc, #56]	; (d66a4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d666c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d666e:	a801      	add	r0, sp, #4
   d6670:	f7ff fff2 	bl	d6658 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6674:	6829      	ldr	r1, [r5, #0]
   d6676:	f011 0401 	ands.w	r4, r1, #1
   d667a:	d110      	bne.n	d669e <_Z16_fetch_usbserialv+0x36>
   d667c:	4628      	mov	r0, r5
   d667e:	f7fd fd1d 	bl	d40bc <__cxa_guard_acquire>
   d6682:	b160      	cbz	r0, d669e <_Z16_fetch_usbserialv+0x36>
   d6684:	aa01      	add	r2, sp, #4
   d6686:	4621      	mov	r1, r4
   d6688:	4807      	ldr	r0, [pc, #28]	; (d66a8 <_Z16_fetch_usbserialv+0x40>)
   d668a:	f7ff ffd1 	bl	d6630 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d668e:	4628      	mov	r0, r5
   d6690:	f7fd fd19 	bl	d40c6 <__cxa_guard_release>
   d6694:	4a05      	ldr	r2, [pc, #20]	; (d66ac <_Z16_fetch_usbserialv+0x44>)
   d6696:	4906      	ldr	r1, [pc, #24]	; (d66b0 <_Z16_fetch_usbserialv+0x48>)
   d6698:	4803      	ldr	r0, [pc, #12]	; (d66a8 <_Z16_fetch_usbserialv+0x40>)
   d669a:	f000 fe51 	bl	d7340 <__aeabi_atexit>
	return _usbserial;
}
   d669e:	4802      	ldr	r0, [pc, #8]	; (d66a8 <_Z16_fetch_usbserialv+0x40>)
   d66a0:	b007      	add	sp, #28
   d66a2:	bd30      	pop	{r4, r5, pc}
   d66a4:	2003e414 	.word	0x2003e414
   d66a8:	2003e418 	.word	0x2003e418
   d66ac:	2003e1e0 	.word	0x2003e1e0
   d66b0:	000d65b1 	.word	0x000d65b1

000d66b4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d66b4:	4770      	bx	lr

000d66b6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d66b6:	7441      	strb	r1, [r0, #17]
   d66b8:	4770      	bx	lr

000d66ba <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d66ba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d66bc:	7c00      	ldrb	r0, [r0, #16]
   d66be:	f7ff fa83 	bl	d5bc8 <HAL_USART_Available_Data_For_Write>
}
   d66c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66c6:	bd08      	pop	{r3, pc}

000d66c8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d66c8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d66ca:	7c00      	ldrb	r0, [r0, #16]
   d66cc:	f7ff fa54 	bl	d5b78 <HAL_USART_Available_Data>
}
   d66d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66d4:	bd08      	pop	{r3, pc}

000d66d6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d66d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d66d8:	7c00      	ldrb	r0, [r0, #16]
   d66da:	f7ff fa5d 	bl	d5b98 <HAL_USART_Peek_Data>
}
   d66de:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d66e2:	bf28      	it	cs
   d66e4:	f04f 30ff 	movcs.w	r0, #4294967295
   d66e8:	bd08      	pop	{r3, pc}

000d66ea <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d66ea:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d66ec:	7c00      	ldrb	r0, [r0, #16]
   d66ee:	f7ff fa4b 	bl	d5b88 <HAL_USART_Read_Data>
}
   d66f2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d66f6:	bf28      	it	cs
   d66f8:	f04f 30ff 	movcs.w	r0, #4294967295
   d66fc:	bd08      	pop	{r3, pc}

000d66fe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d66fe:	7c00      	ldrb	r0, [r0, #16]
   d6700:	f7ff ba52 	b.w	d5ba8 <HAL_USART_Flush_Data>

000d6704 <_ZN11USARTSerialD0Ev>:
   d6704:	b510      	push	{r4, lr}
   d6706:	2114      	movs	r1, #20
   d6708:	4604      	mov	r4, r0
   d670a:	f000 fe27 	bl	d735c <_ZdlPvj>
   d670e:	4620      	mov	r0, r4
   d6710:	bd10      	pop	{r4, pc}

000d6712 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6712:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6714:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6716:	4604      	mov	r4, r0
   d6718:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d671a:	b925      	cbnz	r5, d6726 <_ZN11USARTSerial5writeEh+0x14>
   d671c:	7c00      	ldrb	r0, [r0, #16]
   d671e:	f7ff fa53 	bl	d5bc8 <HAL_USART_Available_Data_For_Write>
   d6722:	2800      	cmp	r0, #0
   d6724:	dd05      	ble.n	d6732 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6726:	4631      	mov	r1, r6
   d6728:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d672a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d672e:	f7ff ba1b 	b.w	d5b68 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6732:	4628      	mov	r0, r5
   d6734:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6738 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6738:	b510      	push	{r4, lr}
   d673a:	4604      	mov	r4, r0
   d673c:	4608      	mov	r0, r1
   d673e:	4611      	mov	r1, r2
   d6740:	2200      	movs	r2, #0
   d6742:	6062      	str	r2, [r4, #4]
   d6744:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6748:	60a2      	str	r2, [r4, #8]
   d674a:	4a05      	ldr	r2, [pc, #20]	; (d6760 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d674c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d674e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6750:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6752:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6754:	461a      	mov	r2, r3
   d6756:	f7ff f9ff 	bl	d5b58 <HAL_USART_Init>
}
   d675a:	4620      	mov	r0, r4
   d675c:	bd10      	pop	{r4, pc}
   d675e:	bf00      	nop
   d6760:	000d8a64 	.word	0x000d8a64

000d6764 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6764:	7c00      	ldrb	r0, [r0, #16]
   d6766:	f7ff ba27 	b.w	d5bb8 <HAL_USART_Is_Enabled>
	...

000d676c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d676c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d676e:	4d0c      	ldr	r5, [pc, #48]	; (d67a0 <_Z22__fetch_global_Serial1v+0x34>)
   d6770:	6829      	ldr	r1, [r5, #0]
   d6772:	f011 0401 	ands.w	r4, r1, #1
   d6776:	d111      	bne.n	d679c <_Z22__fetch_global_Serial1v+0x30>
   d6778:	4628      	mov	r0, r5
   d677a:	f7fd fc9f 	bl	d40bc <__cxa_guard_acquire>
   d677e:	b168      	cbz	r0, d679c <_Z22__fetch_global_Serial1v+0x30>
   d6780:	4a08      	ldr	r2, [pc, #32]	; (d67a4 <_Z22__fetch_global_Serial1v+0x38>)
   d6782:	4b09      	ldr	r3, [pc, #36]	; (d67a8 <_Z22__fetch_global_Serial1v+0x3c>)
   d6784:	4809      	ldr	r0, [pc, #36]	; (d67ac <_Z22__fetch_global_Serial1v+0x40>)
   d6786:	4621      	mov	r1, r4
   d6788:	f7ff ffd6 	bl	d6738 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d678c:	4628      	mov	r0, r5
   d678e:	f7fd fc9a 	bl	d40c6 <__cxa_guard_release>
   d6792:	4a07      	ldr	r2, [pc, #28]	; (d67b0 <_Z22__fetch_global_Serial1v+0x44>)
   d6794:	4907      	ldr	r1, [pc, #28]	; (d67b4 <_Z22__fetch_global_Serial1v+0x48>)
   d6796:	4805      	ldr	r0, [pc, #20]	; (d67ac <_Z22__fetch_global_Serial1v+0x40>)
   d6798:	f000 fdd2 	bl	d7340 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d679c:	4803      	ldr	r0, [pc, #12]	; (d67ac <_Z22__fetch_global_Serial1v+0x40>)
   d679e:	bd38      	pop	{r3, r4, r5, pc}
   d67a0:	2003e4c4 	.word	0x2003e4c4
   d67a4:	2003e4c8 	.word	0x2003e4c8
   d67a8:	2003e440 	.word	0x2003e440
   d67ac:	2003e42c 	.word	0x2003e42c
   d67b0:	2003e1e0 	.word	0x2003e1e0
   d67b4:	000d66b5 	.word	0x000d66b5

000d67b8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d67b8:	4770      	bx	lr

000d67ba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d67ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67bc:	4606      	mov	r6, r0
   d67be:	4615      	mov	r5, r2
   d67c0:	460c      	mov	r4, r1
   d67c2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d67c4:	42bc      	cmp	r4, r7
   d67c6:	d006      	beq.n	d67d6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d67c8:	6833      	ldr	r3, [r6, #0]
   d67ca:	f814 1b01 	ldrb.w	r1, [r4], #1
   d67ce:	689b      	ldr	r3, [r3, #8]
   d67d0:	4630      	mov	r0, r6
   d67d2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d67d4:	e7f6      	b.n	d67c4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d67d6:	4628      	mov	r0, r5
   d67d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d67da <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d67da:	2200      	movs	r2, #0
   d67dc:	7c00      	ldrb	r0, [r0, #16]
   d67de:	f7ff ba13 	b.w	d5c08 <HAL_I2C_Write_Data>

000d67e2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d67e2:	2100      	movs	r1, #0
   d67e4:	7c00      	ldrb	r0, [r0, #16]
   d67e6:	f7ff ba17 	b.w	d5c18 <HAL_I2C_Available_Data>

000d67ea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d67ea:	2100      	movs	r1, #0
   d67ec:	7c00      	ldrb	r0, [r0, #16]
   d67ee:	f7ff ba1b 	b.w	d5c28 <HAL_I2C_Read_Data>

000d67f2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d67f2:	2100      	movs	r1, #0
   d67f4:	7c00      	ldrb	r0, [r0, #16]
   d67f6:	f7ff ba1f 	b.w	d5c38 <HAL_I2C_Peek_Data>

000d67fa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d67fa:	2100      	movs	r1, #0
   d67fc:	7c00      	ldrb	r0, [r0, #16]
   d67fe:	f7ff ba23 	b.w	d5c48 <HAL_I2C_Flush_Data>

000d6802 <_ZN7TwoWireD0Ev>:
   d6802:	b510      	push	{r4, lr}
   d6804:	2114      	movs	r1, #20
   d6806:	4604      	mov	r4, r0
   d6808:	f000 fda8 	bl	d735c <_ZdlPvj>
   d680c:	4620      	mov	r0, r4
   d680e:	bd10      	pop	{r4, pc}

000d6810 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6810:	b510      	push	{r4, lr}
   d6812:	4604      	mov	r4, r0
   d6814:	2300      	movs	r3, #0
   d6816:	6063      	str	r3, [r4, #4]
   d6818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d681c:	60a3      	str	r3, [r4, #8]
   d681e:	4b04      	ldr	r3, [pc, #16]	; (d6830 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6820:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6822:	4608      	mov	r0, r1
   d6824:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6826:	4611      	mov	r1, r2
   d6828:	f7ff fa1e 	bl	d5c68 <HAL_I2C_Init>
}
   d682c:	4620      	mov	r0, r4
   d682e:	bd10      	pop	{r4, pc}
   d6830:	000d8a94 	.word	0x000d8a94

000d6834 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6834:	2300      	movs	r3, #0
   d6836:	461a      	mov	r2, r3
   d6838:	4619      	mov	r1, r3
   d683a:	7c00      	ldrb	r0, [r0, #16]
   d683c:	f7ff b9cc 	b.w	d5bd8 <HAL_I2C_Begin>

000d6840 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6840:	b570      	push	{r4, r5, r6, lr}
   d6842:	460c      	mov	r4, r1
   d6844:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d6846:	2514      	movs	r5, #20
   d6848:	4606      	mov	r6, r0
   d684a:	462a      	mov	r2, r5
   d684c:	2100      	movs	r1, #0
   d684e:	a801      	add	r0, sp, #4
   d6850:	f001 fb13 	bl	d7e7a <memset>
   d6854:	7823      	ldrb	r3, [r4, #0]
   d6856:	f88d 3008 	strb.w	r3, [sp, #8]
   d685a:	6863      	ldr	r3, [r4, #4]
   d685c:	9303      	str	r3, [sp, #12]
   d685e:	68e3      	ldr	r3, [r4, #12]
   d6860:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d6862:	2200      	movs	r2, #0
   d6864:	7a23      	ldrb	r3, [r4, #8]
   d6866:	7c30      	ldrb	r0, [r6, #16]
   d6868:	f8ad 5004 	strh.w	r5, [sp, #4]
   d686c:	a901      	add	r1, sp, #4
   d686e:	9305      	str	r3, [sp, #20]
   d6870:	f7ff fa02 	bl	d5c78 <HAL_I2C_Request_Data_Ex>
}
   d6874:	b006      	add	sp, #24
   d6876:	bd70      	pop	{r4, r5, r6, pc}

000d6878 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d6878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d687a:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d687c:	f88d 1000 	strb.w	r1, [sp]
   d6880:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6884:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6886:	bf18      	it	ne
   d6888:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d688a:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d688c:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d688e:	f88d 3008 	strb.w	r3, [sp, #8]
   d6892:	f7ff ffd5 	bl	d6840 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6896:	b005      	add	sp, #20
   d6898:	f85d fb04 	ldr.w	pc, [sp], #4

000d689c <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d689c:	2301      	movs	r3, #1
   d689e:	f7ff bfeb 	b.w	d6878 <_ZN7TwoWire11requestFromEhjh>

000d68a2 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d68a2:	2200      	movs	r2, #0
   d68a4:	7c00      	ldrb	r0, [r0, #16]
   d68a6:	f7ff b99f 	b.w	d5be8 <HAL_I2C_Begin_Transmission>

000d68aa <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d68aa:	b2c9      	uxtb	r1, r1
   d68ac:	f7ff bff9 	b.w	d68a2 <_ZN7TwoWire17beginTransmissionEh>

000d68b0 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d68b0:	2200      	movs	r2, #0
   d68b2:	7c00      	ldrb	r0, [r0, #16]
   d68b4:	f7ff b9a0 	b.w	d5bf8 <HAL_I2C_End_Transmission>

000d68b8 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d68b8:	2101      	movs	r1, #1
   d68ba:	f7ff bff9 	b.w	d68b0 <_ZN7TwoWire15endTransmissionEh>

000d68be <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d68be:	2100      	movs	r1, #0
   d68c0:	7c00      	ldrb	r0, [r0, #16]
   d68c2:	f7ff b9c9 	b.w	d5c58 <HAL_I2C_Is_Enabled>

000d68c6 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d68c6:	2200      	movs	r2, #0
   d68c8:	4611      	mov	r1, r2
   d68ca:	6840      	ldr	r0, [r0, #4]
   d68cc:	f7ff baa8 	b.w	d5e20 <network_listening>

000d68d0 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d68d0:	2200      	movs	r2, #0
   d68d2:	4611      	mov	r1, r2
   d68d4:	6840      	ldr	r0, [r0, #4]
   d68d6:	f7ff bab3 	b.w	d5e40 <network_get_listen_timeout>

000d68da <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d68da:	2200      	movs	r2, #0
   d68dc:	6840      	ldr	r0, [r0, #4]
   d68de:	f7ff baa7 	b.w	d5e30 <network_set_listen_timeout>

000d68e2 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d68e2:	2200      	movs	r2, #0
   d68e4:	f081 0101 	eor.w	r1, r1, #1
   d68e8:	6840      	ldr	r0, [r0, #4]
   d68ea:	f7ff ba91 	b.w	d5e10 <network_listen>

000d68ee <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d68ee:	2300      	movs	r3, #0
   d68f0:	461a      	mov	r2, r3
   d68f2:	2101      	movs	r1, #1
   d68f4:	6840      	ldr	r0, [r0, #4]
   d68f6:	f7ff ba83 	b.w	d5e00 <network_off>

000d68fa <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d68fa:	2300      	movs	r3, #0
   d68fc:	461a      	mov	r2, r3
   d68fe:	4619      	mov	r1, r3
   d6900:	6840      	ldr	r0, [r0, #4]
   d6902:	f7ff ba75 	b.w	d5df0 <network_on>

000d6906 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6906:	2200      	movs	r2, #0
   d6908:	4611      	mov	r1, r2
   d690a:	6840      	ldr	r0, [r0, #4]
   d690c:	f7ff ba68 	b.w	d5de0 <network_ready>

000d6910 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6910:	2200      	movs	r2, #0
   d6912:	4611      	mov	r1, r2
   d6914:	6840      	ldr	r0, [r0, #4]
   d6916:	f7ff ba53 	b.w	d5dc0 <network_connecting>

000d691a <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d691a:	2200      	movs	r2, #0
   d691c:	2102      	movs	r1, #2
   d691e:	6840      	ldr	r0, [r0, #4]
   d6920:	f7ff ba56 	b.w	d5dd0 <network_disconnect>

000d6924 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6924:	2300      	movs	r3, #0
   d6926:	461a      	mov	r2, r3
   d6928:	6840      	ldr	r0, [r0, #4]
   d692a:	f7ff ba41 	b.w	d5db0 <network_connect>

000d692e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d692e:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6930:	4605      	mov	r5, r0
   d6932:	b188      	cbz	r0, d6958 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6934:	6804      	ldr	r4, [r0, #0]
   d6936:	b14c      	cbz	r4, d694c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d6938:	68a3      	ldr	r3, [r4, #8]
   d693a:	b11b      	cbz	r3, d6944 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d693c:	2203      	movs	r2, #3
   d693e:	4621      	mov	r1, r4
   d6940:	4620      	mov	r0, r4
   d6942:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6944:	2110      	movs	r1, #16
   d6946:	4620      	mov	r0, r4
   d6948:	f000 fd08 	bl	d735c <_ZdlPvj>
   d694c:	4628      	mov	r0, r5
   d694e:	2114      	movs	r1, #20
      }
   d6950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6954:	f000 bd02 	b.w	d735c <_ZdlPvj>
   d6958:	bd38      	pop	{r3, r4, r5, pc}

000d695a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d695a:	b110      	cbz	r0, d6962 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d695c:	6803      	ldr	r3, [r0, #0]
   d695e:	685b      	ldr	r3, [r3, #4]
   d6960:	4718      	bx	r3
   d6962:	4770      	bx	lr

000d6964 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6964:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6966:	6803      	ldr	r3, [r0, #0]
   d6968:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d696a:	b1bb      	cbz	r3, d699c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d696c:	6858      	ldr	r0, [r3, #4]
   d696e:	f7ff f8b3 	bl	d5ad8 <os_thread_is_current>
   d6972:	b978      	cbnz	r0, d6994 <_ZN6ThreadD1Ev+0x30>
   d6974:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6976:	7c5a      	ldrb	r2, [r3, #17]
   d6978:	b912      	cbnz	r2, d6980 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d697a:	6858      	ldr	r0, [r3, #4]
   d697c:	f7ff f8b4 	bl	d5ae8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6980:	6823      	ldr	r3, [r4, #0]
   d6982:	6858      	ldr	r0, [r3, #4]
   d6984:	f7ff f8b8 	bl	d5af8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6988:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d698a:	2300      	movs	r3, #0
   d698c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d698e:	b128      	cbz	r0, d699c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6990:	f7ff ffcd 	bl	d692e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6994:	6820      	ldr	r0, [r4, #0]
   d6996:	b108      	cbz	r0, d699c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6998:	f7ff ffc9 	bl	d692e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d699c:	4620      	mov	r0, r4
   d699e:	bd10      	pop	{r4, pc}

000d69a0 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d69a0:	b538      	push	{r3, r4, r5, lr}
   d69a2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d69a4:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d69a8:	b108      	cbz	r0, d69ae <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d69aa:	f7fd fb7a 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d69ae:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d69b2:	b108      	cbz	r0, d69b8 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d69b4:	f7ff f8b0 	bl	d5b18 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d69b8:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d69bc:	b135      	cbz	r5, d69cc <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d69be:	4628      	mov	r0, r5
   d69c0:	f7ff ffd0 	bl	d6964 <_ZN6ThreadD1Ev>
   d69c4:	2104      	movs	r1, #4
   d69c6:	4628      	mov	r0, r5
   d69c8:	f000 fcc8 	bl	d735c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d69cc:	6820      	ldr	r0, [r4, #0]
   d69ce:	b108      	cbz	r0, d69d4 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d69d0:	f7ff ffc3 	bl	d695a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d69d4:	4620      	mov	r0, r4
   d69d6:	bd38      	pop	{r3, r4, r5, pc}

000d69d8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d69d8:	b510      	push	{r4, lr}
   d69da:	4b04      	ldr	r3, [pc, #16]	; (d69ec <_ZN5spark9MeshClassD1Ev+0x14>)
   d69dc:	4604      	mov	r4, r0
   d69de:	f840 3b08 	str.w	r3, [r0], #8
   d69e2:	f7ff ffdd 	bl	d69a0 <_ZN5spark11MeshPublishD1Ev>
   d69e6:	4620      	mov	r0, r4
   d69e8:	bd10      	pop	{r4, pc}
   d69ea:	bf00      	nop
   d69ec:	000d8abc 	.word	0x000d8abc

000d69f0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d69f0:	b538      	push	{r3, r4, r5, lr}
   d69f2:	4c0e      	ldr	r4, [pc, #56]	; (d6a2c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d69f4:	4b0e      	ldr	r3, [pc, #56]	; (d6a30 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d69f6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d69f8:	2500      	movs	r5, #0
   d69fa:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d69fc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6a00:	6063      	str	r3, [r4, #4]
   d6a02:	60a5      	str	r5, [r4, #8]
   d6a04:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6a08:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6a0c:	f7ff f87c 	bl	d5b08 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6a10:	4b08      	ldr	r3, [pc, #32]	; (d6a34 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6a12:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6a16:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6a1a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6a1c:	4620      	mov	r0, r4
   d6a1e:	4a06      	ldr	r2, [pc, #24]	; (d6a38 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6a20:	4906      	ldr	r1, [pc, #24]	; (d6a3c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6a26:	f000 bc8b 	b.w	d7340 <__aeabi_atexit>
   d6a2a:	bf00      	nop
   d6a2c:	2003e54c 	.word	0x2003e54c
   d6a30:	000d8ba4 	.word	0x000d8ba4
   d6a34:	000d8abc 	.word	0x000d8abc
   d6a38:	2003e1e0 	.word	0x2003e1e0
   d6a3c:	000d69d9 	.word	0x000d69d9

000d6a40 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6a42:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6a44:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6a46:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6a4a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6a4c:	2201      	movs	r2, #1
   d6a4e:	f04f 33ff 	mov.w	r3, #4294967295
   d6a52:	4621      	mov	r1, r4
   d6a54:	47a8      	blx	r5
}
   d6a56:	b003      	add	sp, #12
   d6a58:	bd30      	pop	{r4, r5, pc}

000d6a5a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6a5a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6a5c:	6803      	ldr	r3, [r0, #0]
   d6a5e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6a60:	f04f 33ff 	mov.w	r3, #4294967295
   d6a64:	46a4      	mov	ip, r4
}
   d6a66:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6a6a:	4760      	bx	ip

000d6a6c <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6a6e:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d6a70:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6a72:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d6a76:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6a78:	4621      	mov	r1, r4
   d6a7a:	4613      	mov	r3, r2
   d6a7c:	2201      	movs	r2, #1
   d6a7e:	47a8      	blx	r5
}
   d6a80:	b003      	add	sp, #12
   d6a82:	bd30      	pop	{r4, r5, pc}

000d6a84 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d6a84:	4770      	bx	lr

000d6a86 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6a86:	b538      	push	{r3, r4, r5, lr}
   d6a88:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6a8a:	681a      	ldr	r2, [r3, #0]
   d6a8c:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6a8e:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d6a90:	da05      	bge.n	d6a9e <_ZN9TCPClient9connectedEv+0x18>
   d6a92:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6a96:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6a9a:	429a      	cmp	r2, r3
   d6a9c:	d001      	beq.n	d6aa2 <_ZN9TCPClient9connectedEv+0x1c>
   d6a9e:	2501      	movs	r5, #1
   d6aa0:	e00b      	b.n	d6aba <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d6aa2:	6803      	ldr	r3, [r0, #0]
   d6aa4:	691b      	ldr	r3, [r3, #16]
   d6aa6:	4798      	blx	r3
   d6aa8:	2800      	cmp	r0, #0
   d6aaa:	bf14      	ite	ne
   d6aac:	2501      	movne	r5, #1
   d6aae:	2500      	moveq	r5, #0
        if (!rv) {
   d6ab0:	d103      	bne.n	d6aba <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d6ab2:	6823      	ldr	r3, [r4, #0]
   d6ab4:	4620      	mov	r0, r4
   d6ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6ab8:	4798      	blx	r3
        }
    }
    return rv;
}
   d6aba:	4628      	mov	r0, r5
   d6abc:	bd38      	pop	{r3, r4, r5, pc}

000d6abe <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d6abe:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d6ac0:	6818      	ldr	r0, [r3, #0]
}
   d6ac2:	43c0      	mvns	r0, r0
   d6ac4:	0fc0      	lsrs	r0, r0, #31
   d6ac6:	4770      	bx	lr

000d6ac8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6ac8:	4770      	bx	lr

000d6aca <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6aca:	2000      	movs	r0, #0
   d6acc:	4770      	bx	lr

000d6ace <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6ace:	b510      	push	{r4, lr}
   d6ad0:	2114      	movs	r1, #20
   d6ad2:	4604      	mov	r4, r0
   d6ad4:	f000 fc42 	bl	d735c <_ZdlPvj>
   d6ad8:	4620      	mov	r0, r4
   d6ada:	bd10      	pop	{r4, pc}

000d6adc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6adc:	f7fd badf 	b.w	d409e <_ZdlPv>

000d6ae0 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6ae0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6ae2:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d6ae4:	2200      	movs	r2, #0
   d6ae6:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d6ae8:	9202      	str	r2, [sp, #8]
   d6aea:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6aec:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6aee:	4604      	mov	r4, r0
   d6af0:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6af2:	d008      	beq.n	d6b06 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d6af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6af8:	fbb3 f1f2 	udiv	r1, r3, r2
   d6afc:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d6afe:	fb02 3111 	mls	r1, r2, r1, r3
   d6b02:	434a      	muls	r2, r1
   d6b04:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6b06:	6960      	ldr	r0, [r4, #20]
   d6b08:	2308      	movs	r3, #8
   d6b0a:	9300      	str	r3, [sp, #0]
   d6b0c:	f241 0205 	movw	r2, #4101	; 0x1005
   d6b10:	446b      	add	r3, sp
   d6b12:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6b16:	6800      	ldr	r0, [r0, #0]
   d6b18:	f7ff f8b6 	bl	d5c88 <sock_setsockopt>
    if (ret < 0) {
   d6b1c:	2800      	cmp	r0, #0
   d6b1e:	db08      	blt.n	d6b32 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d6b20:	6960      	ldr	r0, [r4, #20]
   d6b22:	2300      	movs	r3, #0
   d6b24:	4632      	mov	r2, r6
   d6b26:	4629      	mov	r1, r5
   d6b28:	6800      	ldr	r0, [r0, #0]
   d6b2a:	f7ff f8cd 	bl	d5cc8 <sock_send>
    if (ret < 0) {
   d6b2e:	2800      	cmp	r0, #0
   d6b30:	da04      	bge.n	d6b3c <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d6b32:	f7ff f9ad 	bl	d5e90 <__errno>
   d6b36:	6803      	ldr	r3, [r0, #0]
   d6b38:	6063      	str	r3, [r4, #4]
   d6b3a:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d6b3c:	b004      	add	sp, #16
   d6b3e:	bd70      	pop	{r4, r5, r6, pc}

000d6b40 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6b40:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6b42:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6b44:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6b46:	689b      	ldr	r3, [r3, #8]
   d6b48:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6b4a:	68a3      	ldr	r3, [r4, #8]
   d6b4c:	3b01      	subs	r3, #1
   d6b4e:	60a3      	str	r3, [r4, #8]
   d6b50:	b92b      	cbnz	r3, d6b5e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d6b52:	6823      	ldr	r3, [r4, #0]
   d6b54:	4620      	mov	r0, r4
   d6b56:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6b5c:	4718      	bx	r3
   d6b5e:	bd10      	pop	{r4, pc}

000d6b60 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d6b60:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6b62:	4604      	mov	r4, r0
   d6b64:	694d      	ldr	r5, [r1, #20]
   d6b66:	4b05      	ldr	r3, [pc, #20]	; (d6b7c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6b68:	f844 3b04 	str.w	r3, [r4], #4
   d6b6c:	358c      	adds	r5, #140	; 0x8c
   d6b6e:	4606      	mov	r6, r0
   d6b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b74:	682b      	ldr	r3, [r5, #0]
   d6b76:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d6b78:	4630      	mov	r0, r6
   d6b7a:	bd70      	pop	{r4, r5, r6, pc}
   d6b7c:	000d8a20 	.word	0x000d8a20

000d6b80 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6b80:	b510      	push	{r4, lr}
   d6b82:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6b84:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6b88:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6b8c:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6b8e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6b90:	d005      	beq.n	d6b9e <_ZN9TCPClient4peekEv+0x1e>
   d6b92:	6962      	ldr	r2, [r4, #20]
   d6b94:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6b98:	4413      	add	r3, r2
   d6b9a:	7918      	ldrb	r0, [r3, #4]
   d6b9c:	bd10      	pop	{r4, pc}
   d6b9e:	6803      	ldr	r3, [r0, #0]
   d6ba0:	691b      	ldr	r3, [r3, #16]
   d6ba2:	4798      	blx	r3
   d6ba4:	2800      	cmp	r0, #0
   d6ba6:	d1f4      	bne.n	d6b92 <_ZN9TCPClient4peekEv+0x12>
   d6ba8:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6bac:	bd10      	pop	{r4, pc}

000d6bae <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6bae:	b510      	push	{r4, lr}
   d6bb0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6bb2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6bb6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6bba:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6bbc:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6bbe:	d008      	beq.n	d6bd2 <_ZN9TCPClient4readEv+0x24>
   d6bc0:	6962      	ldr	r2, [r4, #20]
   d6bc2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6bc6:	1c59      	adds	r1, r3, #1
   d6bc8:	4413      	add	r3, r2
   d6bca:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d6bce:	7918      	ldrb	r0, [r3, #4]
   d6bd0:	bd10      	pop	{r4, pc}
   d6bd2:	6803      	ldr	r3, [r0, #0]
   d6bd4:	691b      	ldr	r3, [r3, #16]
   d6bd6:	4798      	blx	r3
   d6bd8:	2800      	cmp	r0, #0
   d6bda:	d1f1      	bne.n	d6bc0 <_ZN9TCPClient4readEv+0x12>
   d6bdc:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6be0:	bd10      	pop	{r4, pc}

000d6be2 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d6be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6be4:	6943      	ldr	r3, [r0, #20]
   d6be6:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d6be8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6bec:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6bf0:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d6bf2:	4605      	mov	r5, r0
   d6bf4:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d6bf6:	d106      	bne.n	d6c06 <_ZN9TCPClient4readEPhj+0x24>
   d6bf8:	6803      	ldr	r3, [r0, #0]
   d6bfa:	691b      	ldr	r3, [r3, #16]
   d6bfc:	4798      	blx	r3
   d6bfe:	b910      	cbnz	r0, d6c06 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d6c00:	f04f 34ff 	mov.w	r4, #4294967295
   d6c04:	e014      	b.n	d6c30 <_ZN9TCPClient4readEPhj+0x4e>
   d6c06:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d6c08:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d6c0c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d6c10:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d6c12:	42bc      	cmp	r4, r7
   d6c14:	bf28      	it	cs
   d6c16:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6c18:	4419      	add	r1, r3
   d6c1a:	4622      	mov	r2, r4
   d6c1c:	3104      	adds	r1, #4
   d6c1e:	4630      	mov	r0, r6
   d6c20:	f001 f920 	bl	d7e64 <memcpy>
   d6c24:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6c26:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6c2a:	4423      	add	r3, r4
   d6c2c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d6c30:	4620      	mov	r0, r4
   d6c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c34 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6c38:	4698      	mov	r8, r3
    stop();
   d6c3a:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6c3c:	b093      	sub	sp, #76	; 0x4c
    stop();
   d6c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6c40:	460d      	mov	r5, r1
   d6c42:	4606      	mov	r6, r0
   d6c44:	4617      	mov	r7, r2
    stop();
   d6c46:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d6c48:	ab12      	add	r3, sp, #72	; 0x48
   d6c4a:	2400      	movs	r4, #0
   d6c4c:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6c50:	4622      	mov	r2, r4
   d6c52:	4621      	mov	r1, r4
   d6c54:	4628      	mov	r0, r5
   d6c56:	f7fe fe97 	bl	d5988 <netdb_getaddrinfo>
   d6c5a:	4681      	mov	r9, r0
   d6c5c:	2800      	cmp	r0, #0
   d6c5e:	d13d      	bne.n	d6cdc <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6c60:	9b00      	ldr	r3, [sp, #0]
   d6c62:	2b00      	cmp	r3, #0
   d6c64:	d056      	beq.n	d6d14 <_ZN9TCPClient7connectEPKctm+0xe0>
   d6c66:	695b      	ldr	r3, [r3, #20]
   d6c68:	2b00      	cmp	r3, #0
   d6c6a:	d053      	beq.n	d6d14 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d6c6c:	a806      	add	r0, sp, #24
   d6c6e:	f7ff fc4f 	bl	d6510 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6c72:	9b00      	ldr	r3, [sp, #0]
   d6c74:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6c76:	7863      	ldrb	r3, [r4, #1]
   d6c78:	2b02      	cmp	r3, #2
   d6c7a:	d101      	bne.n	d6c80 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6c7c:	1d21      	adds	r1, r4, #4
   d6c7e:	e013      	b.n	d6ca8 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d6c80:	2b0a      	cmp	r3, #10
   d6c82:	d114      	bne.n	d6cae <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d6c84:	2211      	movs	r2, #17
   d6c86:	4649      	mov	r1, r9
   d6c88:	a801      	add	r0, sp, #4
   d6c8a:	f001 f8f6 	bl	d7e7a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6c8e:	68a3      	ldr	r3, [r4, #8]
   d6c90:	bb33      	cbnz	r3, d6ce0 <_ZN9TCPClient7connectEPKctm+0xac>
   d6c92:	68e3      	ldr	r3, [r4, #12]
   d6c94:	bb23      	cbnz	r3, d6ce0 <_ZN9TCPClient7connectEPKctm+0xac>
   d6c96:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6c9a:	6925      	ldr	r5, [r4, #16]
   d6c9c:	f7fe ff4c 	bl	d5b38 <inet_htonl>
   d6ca0:	4285      	cmp	r5, r0
   d6ca2:	d11d      	bne.n	d6ce0 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6ca4:	f104 0114 	add.w	r1, r4, #20
   d6ca8:	a806      	add	r0, sp, #24
   d6caa:	f7ff fc74 	bl	d6596 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6cae:	a806      	add	r0, sp, #24
   d6cb0:	f7ff fc4e 	bl	d6550 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6cb4:	2800      	cmp	r0, #0
   d6cb6:	d02d      	beq.n	d6d14 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d6cb8:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6cba:	ad07      	add	r5, sp, #28
   d6cbc:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6cc0:	4b18      	ldr	r3, [pc, #96]	; (d6d24 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d6cc2:	930c      	str	r3, [sp, #48]	; 0x30
   d6cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6cc6:	ac0d      	add	r4, sp, #52	; 0x34
   d6cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6cca:	682b      	ldr	r3, [r5, #0]
   d6ccc:	7023      	strb	r3, [r4, #0]
   d6cce:	463a      	mov	r2, r7
   d6cd0:	4643      	mov	r3, r8
   d6cd2:	a90c      	add	r1, sp, #48	; 0x30
   d6cd4:	4630      	mov	r0, r6
   d6cd6:	47c8      	blx	r9
   d6cd8:	4681      	mov	r9, r0
   d6cda:	e01b      	b.n	d6d14 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6cdc:	46a1      	mov	r9, r4
   d6cde:	e019      	b.n	d6d14 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6ce0:	f104 0308 	add.w	r3, r4, #8
   d6ce4:	ad01      	add	r5, sp, #4
   d6ce6:	3418      	adds	r4, #24
   d6ce8:	6818      	ldr	r0, [r3, #0]
   d6cea:	6859      	ldr	r1, [r3, #4]
   d6cec:	462a      	mov	r2, r5
   d6cee:	c203      	stmia	r2!, {r0, r1}
   d6cf0:	3308      	adds	r3, #8
   d6cf2:	42a3      	cmp	r3, r4
   d6cf4:	4615      	mov	r5, r2
   d6cf6:	d1f7      	bne.n	d6ce8 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d6cf8:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6cfa:	a901      	add	r1, sp, #4
   d6cfc:	a80c      	add	r0, sp, #48	; 0x30
   d6cfe:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d6d00:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6d04:	f7ff fc12 	bl	d652c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6d0a:	ac07      	add	r4, sp, #28
   d6d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6d0e:	682b      	ldr	r3, [r5, #0]
   d6d10:	7023      	strb	r3, [r4, #0]
   d6d12:	e7cc      	b.n	d6cae <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6d14:	9800      	ldr	r0, [sp, #0]
   d6d16:	f7fe fe2f 	bl	d5978 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d6d1a:	4648      	mov	r0, r9
   d6d1c:	b013      	add	sp, #76	; 0x4c
   d6d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6d22:	bf00      	nop
   d6d24:	000d8a20 	.word	0x000d8a20

000d6d28 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d6d28:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6d2a:	2300      	movs	r3, #0
   d6d2c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d6d30:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d6d32:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d6d36:	4770      	bx	lr

000d6d38 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6d3c:	461e      	mov	r6, r3
    stop();
   d6d3e:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6d40:	460c      	mov	r4, r1
   d6d42:	b08a      	sub	sp, #40	; 0x28
    stop();
   d6d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6d46:	4605      	mov	r5, r0
   d6d48:	4617      	mov	r7, r2
    stop();
   d6d4a:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6d4c:	7d23      	ldrb	r3, [r4, #20]
   d6d4e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d6d52:	2b04      	cmp	r3, #4
   d6d54:	bf0c      	ite	eq
   d6d56:	2002      	moveq	r0, #2
   d6d58:	200a      	movne	r0, #10
   d6d5a:	2206      	movs	r2, #6
   d6d5c:	2101      	movs	r1, #1
   d6d5e:	f7fe ffbb 	bl	d5cd8 <sock_socket>
   d6d62:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d6d66:	696b      	ldr	r3, [r5, #20]
   d6d68:	681b      	ldr	r3, [r3, #0]
   d6d6a:	2b00      	cmp	r3, #0
   d6d6c:	db18      	blt.n	d6da0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d6d6e:	4628      	mov	r0, r5
   d6d70:	f7ff ffda 	bl	d6d28 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d6d74:	b1d6      	cbz	r6, d6dac <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d6d76:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6d78:	a903      	add	r1, sp, #12
   d6d7a:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d6d7c:	9303      	str	r3, [sp, #12]
   d6d7e:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6d82:	f7fe fe89 	bl	d5a98 <if_index_to_name>
   d6d86:	b958      	cbnz	r0, d6da0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d6d88:	6968      	ldr	r0, [r5, #20]
   d6d8a:	2306      	movs	r3, #6
   d6d8c:	9300      	str	r3, [sp, #0]
   d6d8e:	f241 020b 	movw	r2, #4107	; 0x100b
   d6d92:	ab03      	add	r3, sp, #12
   d6d94:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6d98:	6800      	ldr	r0, [r0, #0]
   d6d9a:	f7fe ff75 	bl	d5c88 <sock_setsockopt>
   d6d9e:	b128      	cbz	r0, d6dac <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d6da0:	682b      	ldr	r3, [r5, #0]
   d6da2:	4628      	mov	r0, r5
   d6da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6da6:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d6da8:	4798      	blx	r3
   d6daa:	e03b      	b.n	d6e24 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d6dac:	261c      	movs	r6, #28
   d6dae:	4632      	mov	r2, r6
   d6db0:	2100      	movs	r1, #0
   d6db2:	a803      	add	r0, sp, #12
   d6db4:	f001 f861 	bl	d7e7a <memset>
    if (ip.version() == 4) {
   d6db8:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d6dba:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d6dbe:	2b04      	cmp	r3, #4
   d6dc0:	d10c      	bne.n	d6ddc <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6dc2:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d6dc4:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6dc6:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d6dca:	f7fe febd 	bl	d5b48 <inet_htons>
   d6dce:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6dd2:	6860      	ldr	r0, [r4, #4]
   d6dd4:	f7fe feb0 	bl	d5b38 <inet_htonl>
   d6dd8:	9004      	str	r0, [sp, #16]
   d6dda:	e013      	b.n	d6e04 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6ddc:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d6dde:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6de0:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d6de4:	f7fe feb0 	bl	d5b48 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6de8:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d6dea:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6dee:	1d23      	adds	r3, r4, #4
   d6df0:	f104 0714 	add.w	r7, r4, #20
   d6df4:	6818      	ldr	r0, [r3, #0]
   d6df6:	6859      	ldr	r1, [r3, #4]
   d6df8:	4632      	mov	r2, r6
   d6dfa:	c203      	stmia	r2!, {r0, r1}
   d6dfc:	3308      	adds	r3, #8
   d6dfe:	42bb      	cmp	r3, r7
   d6e00:	4616      	mov	r6, r2
   d6e02:	d1f7      	bne.n	d6df4 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d6e04:	696b      	ldr	r3, [r5, #20]
   d6e06:	221c      	movs	r2, #28
   d6e08:	a903      	add	r1, sp, #12
   d6e0a:	6818      	ldr	r0, [r3, #0]
   d6e0c:	f7fe ff4c 	bl	d5ca8 <sock_connect>
   d6e10:	2800      	cmp	r0, #0
   d6e12:	d1c5      	bne.n	d6da0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d6e14:	3404      	adds	r4, #4
   d6e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6e18:	696d      	ldr	r5, [r5, #20]
   d6e1a:	358c      	adds	r5, #140	; 0x8c
   d6e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6e1e:	6823      	ldr	r3, [r4, #0]
   d6e20:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d6e22:	2401      	movs	r4, #1
}
   d6e24:	4620      	mov	r0, r4
   d6e26:	b00a      	add	sp, #40	; 0x28
   d6e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6e2c <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6e2c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6e2e:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6e30:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6e32:	6818      	ldr	r0, [r3, #0]
   d6e34:	2800      	cmp	r0, #0
   d6e36:	db01      	blt.n	d6e3c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6e38:	f7fe ff2e 	bl	d5c98 <sock_close>
   d6e3c:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d6e3e:	f04f 32ff 	mov.w	r2, #4294967295
   d6e42:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6e44:	6960      	ldr	r0, [r4, #20]
   d6e46:	2211      	movs	r2, #17
   d6e48:	2100      	movs	r1, #0
   d6e4a:	308c      	adds	r0, #140	; 0x8c
   d6e4c:	f001 f815 	bl	d7e7a <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d6e50:	4620      	mov	r0, r4
}
   d6e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d6e56:	f7ff bf67 	b.w	d6d28 <_ZN9TCPClient12flush_bufferEv>
	...

000d6e5c <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6e5c:	b530      	push	{r4, r5, lr}
   d6e5e:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6e60:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6e64:	b08b      	sub	sp, #44	; 0x2c
   d6e66:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6e68:	b11b      	cbz	r3, d6e72 <_ZN9TCPClient9availableEv+0x16>
   d6e6a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d6e6e:	429a      	cmp	r2, r3
   d6e70:	d040      	beq.n	d6ef4 <_ZN9TCPClient9availableEv+0x98>
   d6e72:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d6e74:	6818      	ldr	r0, [r3, #0]
   d6e76:	2800      	cmp	r0, #0
   d6e78:	db3f      	blt.n	d6efa <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d6e7a:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d6e7e:	2d7f      	cmp	r5, #127	; 0x7f
   d6e80:	d83b      	bhi.n	d6efa <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d6e82:	1d19      	adds	r1, r3, #4
   d6e84:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d6e88:	2308      	movs	r3, #8
   d6e8a:	4429      	add	r1, r5
   d6e8c:	f7fe ff14 	bl	d5cb8 <sock_recv>
            if (ret > 0) {
   d6e90:	2800      	cmp	r0, #0
   d6e92:	dd0c      	ble.n	d6eae <_ZN9TCPClient9availableEv+0x52>
   d6e94:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d6e96:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6e9a:	b90a      	cbnz	r2, d6ea0 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d6e9c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6ea0:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d6ea2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6ea6:	4418      	add	r0, r3
   d6ea8:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d6eac:	e025      	b.n	d6efa <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d6eae:	f7fe ffef 	bl	d5e90 <__errno>
   d6eb2:	6803      	ldr	r3, [r0, #0]
   d6eb4:	2b0b      	cmp	r3, #11
   d6eb6:	d020      	beq.n	d6efa <_ZN9TCPClient9availableEv+0x9e>
   d6eb8:	f7fe ffea 	bl	d5e90 <__errno>
   d6ebc:	6803      	ldr	r3, [r0, #0]
   d6ebe:	2b0b      	cmp	r3, #11
   d6ec0:	d01b      	beq.n	d6efa <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d6ec2:	2320      	movs	r3, #32
   d6ec4:	2500      	movs	r5, #0
   d6ec6:	9302      	str	r3, [sp, #8]
   d6ec8:	9503      	str	r5, [sp, #12]
   d6eca:	f7fe ffe1 	bl	d5e90 <__errno>
   d6ece:	6803      	ldr	r3, [r0, #0]
   d6ed0:	9301      	str	r3, [sp, #4]
   d6ed2:	4b0e      	ldr	r3, [pc, #56]	; (d6f0c <_ZN9TCPClient9availableEv+0xb0>)
   d6ed4:	9300      	str	r3, [sp, #0]
   d6ed6:	aa02      	add	r2, sp, #8
   d6ed8:	462b      	mov	r3, r5
   d6eda:	490d      	ldr	r1, [pc, #52]	; (d6f10 <_ZN9TCPClient9availableEv+0xb4>)
   d6edc:	2032      	movs	r0, #50	; 0x32
   d6ede:	f7fe ff3b 	bl	d5d58 <log_message>
                    sock_close(d_->sock);
   d6ee2:	6963      	ldr	r3, [r4, #20]
   d6ee4:	6818      	ldr	r0, [r3, #0]
   d6ee6:	f7fe fed7 	bl	d5c98 <sock_close>
   d6eea:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6eec:	f04f 32ff 	mov.w	r2, #4294967295
   d6ef0:	601a      	str	r2, [r3, #0]
   d6ef2:	e002      	b.n	d6efa <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d6ef4:	f7ff ff18 	bl	d6d28 <_ZN9TCPClient12flush_bufferEv>
   d6ef8:	e7bb      	b.n	d6e72 <_ZN9TCPClient9availableEv+0x16>
   d6efa:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d6efc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6f00:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d6f04:	1a18      	subs	r0, r3, r0
}
   d6f06:	b00b      	add	sp, #44	; 0x2c
   d6f08:	bd30      	pop	{r4, r5, pc}
   d6f0a:	bf00      	nop
   d6f0c:	000d8b57 	.word	0x000d8b57
   d6f10:	000d8b50 	.word	0x000d8b50

000d6f14 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6f14:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6f16:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6f18:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d6f1a:	6001      	str	r1, [r0, #0]
   d6f1c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d6f20:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d6f24:	3088      	adds	r0, #136	; 0x88
   d6f26:	f7ff faf3 	bl	d6510 <_ZN9IPAddressC1Ev>
}
   d6f2a:	4620      	mov	r0, r4
   d6f2c:	bd10      	pop	{r4, pc}
	...

000d6f30 <_ZN9TCPClientC1Ei>:
   d6f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6f34:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6f36:	2300      	movs	r3, #0
   d6f38:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d6f3a:	4a14      	ldr	r2, [pc, #80]	; (d6f8c <_ZN9TCPClientC1Ei+0x5c>)
   d6f3c:	6043      	str	r3, [r0, #4]
   d6f3e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6f40:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6f42:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6f44:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6f46:	20a0      	movs	r0, #160	; 0xa0
   d6f48:	460e      	mov	r6, r1
   d6f4a:	f7fd f8a6 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6f4e:	4605      	mov	r5, r0
   d6f50:	b110      	cbz	r0, d6f58 <_ZN9TCPClientC1Ei+0x28>
   d6f52:	4631      	mov	r1, r6
   d6f54:	f7ff ffde 	bl	d6f14 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6f58:	2014      	movs	r0, #20
   d6f5a:	f7fd f89e 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6f5e:	4603      	mov	r3, r0
   d6f60:	b128      	cbz	r0, d6f6e <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6f62:	2201      	movs	r2, #1
   d6f64:	6042      	str	r2, [r0, #4]
   d6f66:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6f68:	4a09      	ldr	r2, [pc, #36]	; (d6f90 <_ZN9TCPClientC1Ei+0x60>)
   d6f6a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6f6c:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6f6e:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6f70:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6f72:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d6f74:	b128      	cbz	r0, d6f82 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6f76:	6843      	ldr	r3, [r0, #4]
   d6f78:	3b01      	subs	r3, #1
   d6f7a:	6043      	str	r3, [r0, #4]
   d6f7c:	b90b      	cbnz	r3, d6f82 <_ZN9TCPClientC1Ei+0x52>
   d6f7e:	f7ff fddf 	bl	d6b40 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d6f82:	4620      	mov	r0, r4
   d6f84:	f7ff fed0 	bl	d6d28 <_ZN9TCPClient12flush_bufferEv>
}
   d6f88:	4620      	mov	r0, r4
   d6f8a:	bd70      	pop	{r4, r5, r6, pc}
   d6f8c:	000d8b0c 	.word	0x000d8b0c
   d6f90:	000d8af0 	.word	0x000d8af0

000d6f94 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6f94:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6f96:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6f9a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6f9c:	f7ff ffc8 	bl	d6f30 <_ZN9TCPClientC1Ei>
}
   d6fa0:	4620      	mov	r0, r4
   d6fa2:	bd10      	pop	{r4, pc}

000d6fa4 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d6fa4:	b510      	push	{r4, lr}
   d6fa6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6fa8:	6800      	ldr	r0, [r0, #0]
   d6faa:	2800      	cmp	r0, #0
   d6fac:	db01      	blt.n	d6fb2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d6fae:	f7fe fe73 	bl	d5c98 <sock_close>
    }
}
   d6fb2:	4620      	mov	r0, r4
   d6fb4:	bd10      	pop	{r4, pc}

000d6fb6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6fb6:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6fb8:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d6fba:	4620      	mov	r0, r4
   d6fbc:	f7ff fff2 	bl	d6fa4 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d6fc0:	b124      	cbz	r4, d6fcc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6fc2:	4620      	mov	r0, r4
   d6fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6fc8:	f7fd b869 	b.w	d409e <_ZdlPv>
   d6fcc:	bd10      	pop	{r4, pc}

000d6fce <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6fce:	2200      	movs	r2, #0
   d6fd0:	4611      	mov	r1, r2
   d6fd2:	6840      	ldr	r0, [r0, #4]
   d6fd4:	f7fe bf04 	b.w	d5de0 <network_ready>

000d6fd8 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6fd8:	2200      	movs	r2, #0
   d6fda:	4611      	mov	r1, r2
   d6fdc:	6840      	ldr	r0, [r0, #4]
   d6fde:	f7fe bf1f 	b.w	d5e20 <network_listening>

000d6fe2 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6fe2:	2200      	movs	r2, #0
   d6fe4:	4611      	mov	r1, r2
   d6fe6:	6840      	ldr	r0, [r0, #4]
   d6fe8:	f7fe bf2a 	b.w	d5e40 <network_get_listen_timeout>

000d6fec <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6fec:	2200      	movs	r2, #0
   d6fee:	6840      	ldr	r0, [r0, #4]
   d6ff0:	f7fe bf1e 	b.w	d5e30 <network_set_listen_timeout>

000d6ff4 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6ff4:	2200      	movs	r2, #0
   d6ff6:	f081 0101 	eor.w	r1, r1, #1
   d6ffa:	6840      	ldr	r0, [r0, #4]
   d6ffc:	f7fe bf08 	b.w	d5e10 <network_listen>

000d7000 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7000:	2300      	movs	r3, #0
   d7002:	461a      	mov	r2, r3
   d7004:	4619      	mov	r1, r3
   d7006:	6840      	ldr	r0, [r0, #4]
   d7008:	f7fe befa 	b.w	d5e00 <network_off>

000d700c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d700c:	2300      	movs	r3, #0
   d700e:	461a      	mov	r2, r3
   d7010:	4619      	mov	r1, r3
   d7012:	6840      	ldr	r0, [r0, #4]
   d7014:	f7fe beec 	b.w	d5df0 <network_on>

000d7018 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7018:	2200      	movs	r2, #0
   d701a:	4611      	mov	r1, r2
   d701c:	6840      	ldr	r0, [r0, #4]
   d701e:	f7fe becf 	b.w	d5dc0 <network_connecting>

000d7022 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7022:	2200      	movs	r2, #0
   d7024:	2102      	movs	r1, #2
   d7026:	6840      	ldr	r0, [r0, #4]
   d7028:	f7fe bed2 	b.w	d5dd0 <network_disconnect>

000d702c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d702c:	2300      	movs	r3, #0
   d702e:	461a      	mov	r2, r3
   d7030:	6840      	ldr	r0, [r0, #4]
   d7032:	f7fe bebd 	b.w	d5db0 <network_connect>
	...

000d7038 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7038:	4b02      	ldr	r3, [pc, #8]	; (d7044 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d703a:	2204      	movs	r2, #4
   d703c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d703e:	4a02      	ldr	r2, [pc, #8]	; (d7048 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7040:	601a      	str	r2, [r3, #0]
   d7042:	4770      	bx	lr
   d7044:	2003e720 	.word	0x2003e720
   d7048:	000d8b70 	.word	0x000d8b70

000d704c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d704c:	2300      	movs	r3, #0
   d704e:	461a      	mov	r2, r3
   d7050:	6840      	ldr	r0, [r0, #4]
   d7052:	f7fe bead 	b.w	d5db0 <network_connect>

000d7056 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7056:	2200      	movs	r2, #0
   d7058:	2102      	movs	r1, #2
   d705a:	6840      	ldr	r0, [r0, #4]
   d705c:	f7fe beb8 	b.w	d5dd0 <network_disconnect>

000d7060 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7060:	2200      	movs	r2, #0
   d7062:	4611      	mov	r1, r2
   d7064:	6840      	ldr	r0, [r0, #4]
   d7066:	f7fe beab 	b.w	d5dc0 <network_connecting>

000d706a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d706a:	2200      	movs	r2, #0
   d706c:	4611      	mov	r1, r2
   d706e:	6840      	ldr	r0, [r0, #4]
   d7070:	f7fe beb6 	b.w	d5de0 <network_ready>

000d7074 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7074:	2300      	movs	r3, #0
   d7076:	461a      	mov	r2, r3
   d7078:	4619      	mov	r1, r3
   d707a:	6840      	ldr	r0, [r0, #4]
   d707c:	f7fe beb8 	b.w	d5df0 <network_on>

000d7080 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7080:	2300      	movs	r3, #0
   d7082:	461a      	mov	r2, r3
   d7084:	4619      	mov	r1, r3
   d7086:	6840      	ldr	r0, [r0, #4]
   d7088:	f7fe beba 	b.w	d5e00 <network_off>

000d708c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d708c:	2200      	movs	r2, #0
   d708e:	f081 0101 	eor.w	r1, r1, #1
   d7092:	6840      	ldr	r0, [r0, #4]
   d7094:	f7fe bebc 	b.w	d5e10 <network_listen>

000d7098 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7098:	2200      	movs	r2, #0
   d709a:	6840      	ldr	r0, [r0, #4]
   d709c:	f7fe bec8 	b.w	d5e30 <network_set_listen_timeout>

000d70a0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d70a0:	2200      	movs	r2, #0
   d70a2:	4611      	mov	r1, r2
   d70a4:	6840      	ldr	r0, [r0, #4]
   d70a6:	f7fe becb 	b.w	d5e40 <network_get_listen_timeout>

000d70aa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d70aa:	2200      	movs	r2, #0
   d70ac:	4611      	mov	r1, r2
   d70ae:	6840      	ldr	r0, [r0, #4]
   d70b0:	f7fe beb6 	b.w	d5e20 <network_listening>

000d70b4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d70b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d70b8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d70ba:	b095      	sub	sp, #84	; 0x54
   d70bc:	4616      	mov	r6, r2
   d70be:	460d      	mov	r5, r1
   d70c0:	4607      	mov	r7, r0
    IPAddress addr;
   d70c2:	f7ff fa25 	bl	d6510 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d70c6:	4621      	mov	r1, r4
   d70c8:	2220      	movs	r2, #32
   d70ca:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d70cc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d70ce:	f000 fed4 	bl	d7e7a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d70d2:	2340      	movs	r3, #64	; 0x40
   d70d4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d70d6:	4621      	mov	r1, r4
   d70d8:	466b      	mov	r3, sp
   d70da:	aa0c      	add	r2, sp, #48	; 0x30
   d70dc:	4630      	mov	r0, r6
   d70de:	f7fe fc53 	bl	d5988 <netdb_getaddrinfo>
    if (!r) {
   d70e2:	4604      	mov	r4, r0
   d70e4:	2800      	cmp	r0, #0
   d70e6:	d144      	bne.n	d7172 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d70e8:	4602      	mov	r2, r0
   d70ea:	2101      	movs	r1, #1
   d70ec:	6868      	ldr	r0, [r5, #4]
   d70ee:	f7fe fe77 	bl	d5de0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d70f2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d70f4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d70f6:	4622      	mov	r2, r4
   d70f8:	6868      	ldr	r0, [r5, #4]
   d70fa:	f7fe fe71 	bl	d5de0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d70fe:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7100:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7102:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7104:	2e00      	cmp	r6, #0
   d7106:	d034      	beq.n	d7172 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7108:	2900      	cmp	r1, #0
   d710a:	d132      	bne.n	d7172 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d710c:	6873      	ldr	r3, [r6, #4]
   d710e:	2b02      	cmp	r3, #2
   d7110:	d002      	beq.n	d7118 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7112:	2b0a      	cmp	r3, #10
   d7114:	d009      	beq.n	d712a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7116:	e02a      	b.n	d716e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7118:	f1b8 0f00 	cmp.w	r8, #0
   d711c:	d027      	beq.n	d716e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d711e:	6971      	ldr	r1, [r6, #20]
   d7120:	4638      	mov	r0, r7
   d7122:	3104      	adds	r1, #4
   d7124:	f7ff fa37 	bl	d6596 <_ZN9IPAddressaSEPKh>
   d7128:	e020      	b.n	d716c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d712a:	f1b9 0f00 	cmp.w	r9, #0
   d712e:	d01e      	beq.n	d716e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7130:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7132:	2211      	movs	r2, #17
   d7134:	a801      	add	r0, sp, #4
   d7136:	f000 fea0 	bl	d7e7a <memset>
                    a.v = 6;
   d713a:	2306      	movs	r3, #6
   d713c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7140:	ad01      	add	r5, sp, #4
   d7142:	f104 0308 	add.w	r3, r4, #8
   d7146:	3418      	adds	r4, #24
   d7148:	6818      	ldr	r0, [r3, #0]
   d714a:	6859      	ldr	r1, [r3, #4]
   d714c:	462a      	mov	r2, r5
   d714e:	c203      	stmia	r2!, {r0, r1}
   d7150:	3308      	adds	r3, #8
   d7152:	42a3      	cmp	r3, r4
   d7154:	4615      	mov	r5, r2
   d7156:	d1f7      	bne.n	d7148 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7158:	a901      	add	r1, sp, #4
   d715a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d715c:	ad07      	add	r5, sp, #28
   d715e:	f7ff f9e5 	bl	d652c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7164:	1d3c      	adds	r4, r7, #4
   d7166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7168:	682b      	ldr	r3, [r5, #0]
   d716a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d716c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d716e:	69f6      	ldr	r6, [r6, #28]
   d7170:	e7c8      	b.n	d7104 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7172:	9800      	ldr	r0, [sp, #0]
   d7174:	f7fe fc00 	bl	d5978 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7178:	4638      	mov	r0, r7
   d717a:	b015      	add	sp, #84	; 0x54
   d717c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7180 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7180:	4b02      	ldr	r3, [pc, #8]	; (d718c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7182:	4a03      	ldr	r2, [pc, #12]	; (d7190 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7184:	601a      	str	r2, [r3, #0]
   d7186:	2200      	movs	r2, #0
   d7188:	605a      	str	r2, [r3, #4]
   d718a:	4770      	bx	lr
   d718c:	2003e728 	.word	0x2003e728
   d7190:	000d8ba4 	.word	0x000d8ba4

000d7194 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7194:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7196:	4e18      	ldr	r6, [pc, #96]	; (d71f8 <pinAvailable+0x64>)
   d7198:	6831      	ldr	r1, [r6, #0]
   d719a:	f011 0501 	ands.w	r5, r1, #1
   d719e:	4604      	mov	r4, r0
   d71a0:	d10a      	bne.n	d71b8 <pinAvailable+0x24>
   d71a2:	4630      	mov	r0, r6
   d71a4:	f7fc ff8a 	bl	d40bc <__cxa_guard_acquire>
   d71a8:	b130      	cbz	r0, d71b8 <pinAvailable+0x24>
   d71aa:	4629      	mov	r1, r5
   d71ac:	4813      	ldr	r0, [pc, #76]	; (d71fc <pinAvailable+0x68>)
   d71ae:	f7fe febb 	bl	d5f28 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d71b2:	4630      	mov	r0, r6
   d71b4:	f7fc ff87 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d71b8:	4810      	ldr	r0, [pc, #64]	; (d71fc <pinAvailable+0x68>)
   d71ba:	f7fe ffd7 	bl	d616c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d71be:	b128      	cbz	r0, d71cc <pinAvailable+0x38>
   d71c0:	f1a4 030b 	sub.w	r3, r4, #11
   d71c4:	2b02      	cmp	r3, #2
   d71c6:	d801      	bhi.n	d71cc <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d71c8:	2000      	movs	r0, #0
   d71ca:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d71cc:	f000 f892 	bl	d72f4 <_Z19__fetch_global_Wirev>
   d71d0:	f7ff fb75 	bl	d68be <_ZN7TwoWire9isEnabledEv>
   d71d4:	b108      	cbz	r0, d71da <pinAvailable+0x46>
   d71d6:	2c01      	cmp	r4, #1
   d71d8:	d9f6      	bls.n	d71c8 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d71da:	f7ff fac7 	bl	d676c <_Z22__fetch_global_Serial1v>
   d71de:	f7ff fac1 	bl	d6764 <_ZN11USARTSerial9isEnabledEv>
   d71e2:	b118      	cbz	r0, d71ec <pinAvailable+0x58>
   d71e4:	f1a4 0309 	sub.w	r3, r4, #9
   d71e8:	2b01      	cmp	r3, #1
   d71ea:	d9ed      	bls.n	d71c8 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d71ec:	2c23      	cmp	r4, #35	; 0x23
   d71ee:	bf8c      	ite	hi
   d71f0:	2000      	movhi	r0, #0
   d71f2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d71f4:	bd70      	pop	{r4, r5, r6, pc}
   d71f6:	bf00      	nop
   d71f8:	2003e3b0 	.word	0x2003e3b0
   d71fc:	2003e3b4 	.word	0x2003e3b4

000d7200 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7200:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7202:	b538      	push	{r3, r4, r5, lr}
   d7204:	4604      	mov	r4, r0
   d7206:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7208:	d80a      	bhi.n	d7220 <pinMode+0x20>
   d720a:	29ff      	cmp	r1, #255	; 0xff
   d720c:	d008      	beq.n	d7220 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d720e:	f7ff ffc1 	bl	d7194 <pinAvailable>
   d7212:	b128      	cbz	r0, d7220 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7214:	4629      	mov	r1, r5
   d7216:	4620      	mov	r0, r4
}
   d7218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d721c:	f7fe bbc4 	b.w	d59a8 <HAL_Pin_Mode>
   d7220:	bd38      	pop	{r3, r4, r5, pc}

000d7222 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7222:	b538      	push	{r3, r4, r5, lr}
   d7224:	4604      	mov	r4, r0
   d7226:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7228:	f7fe fbc6 	bl	d59b8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d722c:	28ff      	cmp	r0, #255	; 0xff
   d722e:	d010      	beq.n	d7252 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7230:	2806      	cmp	r0, #6
   d7232:	d804      	bhi.n	d723e <digitalWrite+0x1c>
   d7234:	234d      	movs	r3, #77	; 0x4d
   d7236:	fa23 f000 	lsr.w	r0, r3, r0
   d723a:	07c3      	lsls	r3, r0, #31
   d723c:	d409      	bmi.n	d7252 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d723e:	4620      	mov	r0, r4
   d7240:	f7ff ffa8 	bl	d7194 <pinAvailable>
   d7244:	b128      	cbz	r0, d7252 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7246:	4629      	mov	r1, r5
   d7248:	4620      	mov	r0, r4
}
   d724a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d724e:	f7fe bbbb 	b.w	d59c8 <HAL_GPIO_Write>
   d7252:	bd38      	pop	{r3, r4, r5, pc}

000d7254 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7254:	b510      	push	{r4, lr}
   d7256:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7258:	f7fe fbae 	bl	d59b8 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d725c:	3804      	subs	r0, #4
   d725e:	b2c0      	uxtb	r0, r0
   d7260:	2801      	cmp	r0, #1
   d7262:	d908      	bls.n	d7276 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7264:	4620      	mov	r0, r4
   d7266:	f7ff ff95 	bl	d7194 <pinAvailable>
   d726a:	b120      	cbz	r0, d7276 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d726c:	4620      	mov	r0, r4
}
   d726e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7272:	f7fe bbb1 	b.w	d59d8 <HAL_GPIO_Read>
}
   d7276:	2000      	movs	r0, #0
   d7278:	bd10      	pop	{r4, pc}

000d727a <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d727a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d727e:	4690      	mov	r8, r2
   d7280:	461e      	mov	r6, r3
   d7282:	2407      	movs	r4, #7
   d7284:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d7286:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d7288:	f1b8 0f00 	cmp.w	r8, #0
   d728c:	d104      	bne.n	d7298 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d728e:	f1c4 0107 	rsb	r1, r4, #7
   d7292:	fa46 f101 	asr.w	r1, r6, r1
   d7296:	e001      	b.n	d729c <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d7298:	fa46 f104 	asr.w	r1, r6, r4
   d729c:	f001 0101 	and.w	r1, r1, #1
   d72a0:	4638      	mov	r0, r7
   d72a2:	f7ff ffbe 	bl	d7222 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d72a6:	2101      	movs	r1, #1
   d72a8:	4628      	mov	r0, r5
   d72aa:	f7ff ffba 	bl	d7222 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d72ae:	2100      	movs	r1, #0
   d72b0:	4628      	mov	r0, r5
   d72b2:	f7ff ffb6 	bl	d7222 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d72b6:	f114 34ff 	adds.w	r4, r4, #4294967295
   d72ba:	d2e5      	bcs.n	d7288 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d72bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d72c0 <_Z17acquireWireBufferv>:
   d72c0:	b570      	push	{r4, r5, r6, lr}
   d72c2:	4604      	mov	r4, r0
   d72c4:	2514      	movs	r5, #20
   d72c6:	462a      	mov	r2, r5
   d72c8:	4e09      	ldr	r6, [pc, #36]	; (d72f0 <_Z17acquireWireBufferv+0x30>)
   d72ca:	2100      	movs	r1, #0
   d72cc:	f000 fdd5 	bl	d7e7a <memset>
   d72d0:	8025      	strh	r5, [r4, #0]
   d72d2:	2520      	movs	r5, #32
   d72d4:	4631      	mov	r1, r6
   d72d6:	60a5      	str	r5, [r4, #8]
   d72d8:	6125      	str	r5, [r4, #16]
   d72da:	4628      	mov	r0, r5
   d72dc:	f000 f840 	bl	d7360 <_ZnajRKSt9nothrow_t>
   d72e0:	4631      	mov	r1, r6
   d72e2:	6060      	str	r0, [r4, #4]
   d72e4:	4628      	mov	r0, r5
   d72e6:	f000 f83b 	bl	d7360 <_ZnajRKSt9nothrow_t>
   d72ea:	60e0      	str	r0, [r4, #12]
   d72ec:	4620      	mov	r0, r4
   d72ee:	bd70      	pop	{r4, r5, r6, pc}
   d72f0:	000d8bd0 	.word	0x000d8bd0

000d72f4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d72f4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d72f6:	4d0e      	ldr	r5, [pc, #56]	; (d7330 <_Z19__fetch_global_Wirev+0x3c>)
   d72f8:	6829      	ldr	r1, [r5, #0]
   d72fa:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d72fe:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7300:	d113      	bne.n	d732a <_Z19__fetch_global_Wirev+0x36>
   d7302:	4628      	mov	r0, r5
   d7304:	f7fc feda 	bl	d40bc <__cxa_guard_acquire>
   d7308:	b178      	cbz	r0, d732a <_Z19__fetch_global_Wirev+0x36>
   d730a:	a801      	add	r0, sp, #4
   d730c:	f7ff ffd8 	bl	d72c0 <_Z17acquireWireBufferv>
   d7310:	aa01      	add	r2, sp, #4
   d7312:	4621      	mov	r1, r4
   d7314:	4807      	ldr	r0, [pc, #28]	; (d7334 <_Z19__fetch_global_Wirev+0x40>)
   d7316:	f7ff fa7b 	bl	d6810 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d731a:	4628      	mov	r0, r5
   d731c:	f7fc fed3 	bl	d40c6 <__cxa_guard_release>
   d7320:	4a05      	ldr	r2, [pc, #20]	; (d7338 <_Z19__fetch_global_Wirev+0x44>)
   d7322:	4906      	ldr	r1, [pc, #24]	; (d733c <_Z19__fetch_global_Wirev+0x48>)
   d7324:	4803      	ldr	r0, [pc, #12]	; (d7334 <_Z19__fetch_global_Wirev+0x40>)
   d7326:	f000 f80b 	bl	d7340 <__aeabi_atexit>
	return wire;
}
   d732a:	4802      	ldr	r0, [pc, #8]	; (d7334 <_Z19__fetch_global_Wirev+0x40>)
   d732c:	b007      	add	sp, #28
   d732e:	bd30      	pop	{r4, r5, pc}
   d7330:	2003e734 	.word	0x2003e734
   d7334:	2003e738 	.word	0x2003e738
   d7338:	2003e1e0 	.word	0x2003e1e0
   d733c:	000d67b9 	.word	0x000d67b9

000d7340 <__aeabi_atexit>:
   d7340:	460b      	mov	r3, r1
   d7342:	4601      	mov	r1, r0
   d7344:	4618      	mov	r0, r3
   d7346:	f000 bd7f 	b.w	d7e48 <__cxa_atexit>
	...

000d734c <_ZSt15get_new_handlerv>:
   d734c:	4b02      	ldr	r3, [pc, #8]	; (d7358 <_ZSt15get_new_handlerv+0xc>)
   d734e:	6818      	ldr	r0, [r3, #0]
   d7350:	f3bf 8f5f 	dmb	sy
   d7354:	4770      	bx	lr
   d7356:	bf00      	nop
   d7358:	2003e74c 	.word	0x2003e74c

000d735c <_ZdlPvj>:
   d735c:	f7fc be9f 	b.w	d409e <_ZdlPv>

000d7360 <_ZnajRKSt9nothrow_t>:
   d7360:	f000 b800 	b.w	d7364 <_ZnwjRKSt9nothrow_t>

000d7364 <_ZnwjRKSt9nothrow_t>:
   d7364:	b510      	push	{r4, lr}
   d7366:	2800      	cmp	r0, #0
   d7368:	bf14      	ite	ne
   d736a:	4604      	movne	r4, r0
   d736c:	2401      	moveq	r4, #1
   d736e:	4620      	mov	r0, r4
   d7370:	f7fe fd76 	bl	d5e60 <malloc>
   d7374:	b920      	cbnz	r0, d7380 <_ZnwjRKSt9nothrow_t+0x1c>
   d7376:	f7ff ffe9 	bl	d734c <_ZSt15get_new_handlerv>
   d737a:	b108      	cbz	r0, d7380 <_ZnwjRKSt9nothrow_t+0x1c>
   d737c:	4780      	blx	r0
   d737e:	e7f6      	b.n	d736e <_ZnwjRKSt9nothrow_t+0xa>
   d7380:	bd10      	pop	{r4, pc}
	...

000d7384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7384:	4b18      	ldr	r3, [pc, #96]	; (d73e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7386:	681a      	ldr	r2, [r3, #0]
   d7388:	07d1      	lsls	r1, r2, #31
   d738a:	bf5c      	itt	pl
   d738c:	2201      	movpl	r2, #1
   d738e:	601a      	strpl	r2, [r3, #0]
   d7390:	4b16      	ldr	r3, [pc, #88]	; (d73ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7392:	681a      	ldr	r2, [r3, #0]
   d7394:	07d2      	lsls	r2, r2, #31
   d7396:	bf5c      	itt	pl
   d7398:	2201      	movpl	r2, #1
   d739a:	601a      	strpl	r2, [r3, #0]
   d739c:	4b14      	ldr	r3, [pc, #80]	; (d73f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d739e:	681a      	ldr	r2, [r3, #0]
   d73a0:	07d0      	lsls	r0, r2, #31
   d73a2:	bf5c      	itt	pl
   d73a4:	2201      	movpl	r2, #1
   d73a6:	601a      	strpl	r2, [r3, #0]
   d73a8:	4b12      	ldr	r3, [pc, #72]	; (d73f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d73aa:	681a      	ldr	r2, [r3, #0]
   d73ac:	07d1      	lsls	r1, r2, #31
   d73ae:	bf5c      	itt	pl
   d73b0:	2201      	movpl	r2, #1
   d73b2:	601a      	strpl	r2, [r3, #0]
   d73b4:	4b10      	ldr	r3, [pc, #64]	; (d73f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d73b6:	681a      	ldr	r2, [r3, #0]
   d73b8:	07d2      	lsls	r2, r2, #31
   d73ba:	bf5c      	itt	pl
   d73bc:	2201      	movpl	r2, #1
   d73be:	601a      	strpl	r2, [r3, #0]
   d73c0:	4b0e      	ldr	r3, [pc, #56]	; (d73fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d73c2:	681a      	ldr	r2, [r3, #0]
   d73c4:	07d0      	lsls	r0, r2, #31
   d73c6:	bf5c      	itt	pl
   d73c8:	2201      	movpl	r2, #1
   d73ca:	601a      	strpl	r2, [r3, #0]
   d73cc:	4b0c      	ldr	r3, [pc, #48]	; (d7400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d73ce:	681a      	ldr	r2, [r3, #0]
   d73d0:	07d1      	lsls	r1, r2, #31
   d73d2:	bf5c      	itt	pl
   d73d4:	2201      	movpl	r2, #1
   d73d6:	601a      	strpl	r2, [r3, #0]
   d73d8:	4b0a      	ldr	r3, [pc, #40]	; (d7404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d73da:	681a      	ldr	r2, [r3, #0]
   d73dc:	07d2      	lsls	r2, r2, #31
   d73de:	bf5c      	itt	pl
   d73e0:	2201      	movpl	r2, #1
   d73e2:	601a      	strpl	r2, [r3, #0]
   d73e4:	4770      	bx	lr
   d73e6:	bf00      	nop
   d73e8:	2003e76c 	.word	0x2003e76c
   d73ec:	2003e768 	.word	0x2003e768
   d73f0:	2003e764 	.word	0x2003e764
   d73f4:	2003e760 	.word	0x2003e760
   d73f8:	2003e75c 	.word	0x2003e75c
   d73fc:	2003e758 	.word	0x2003e758
   d7400:	2003e754 	.word	0x2003e754
   d7404:	2003e750 	.word	0x2003e750

000d7408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7408:	4b24      	ldr	r3, [pc, #144]	; (d749c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d740a:	681a      	ldr	r2, [r3, #0]
   d740c:	07d0      	lsls	r0, r2, #31
   d740e:	bf5c      	itt	pl
   d7410:	2201      	movpl	r2, #1
   d7412:	601a      	strpl	r2, [r3, #0]
   d7414:	4b22      	ldr	r3, [pc, #136]	; (d74a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7416:	681a      	ldr	r2, [r3, #0]
   d7418:	07d1      	lsls	r1, r2, #31
   d741a:	bf5c      	itt	pl
   d741c:	2201      	movpl	r2, #1
   d741e:	601a      	strpl	r2, [r3, #0]
   d7420:	4b20      	ldr	r3, [pc, #128]	; (d74a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7422:	681a      	ldr	r2, [r3, #0]
   d7424:	07d2      	lsls	r2, r2, #31
   d7426:	bf5c      	itt	pl
   d7428:	2201      	movpl	r2, #1
   d742a:	601a      	strpl	r2, [r3, #0]
   d742c:	4b1e      	ldr	r3, [pc, #120]	; (d74a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d742e:	681a      	ldr	r2, [r3, #0]
   d7430:	07d0      	lsls	r0, r2, #31
   d7432:	bf5c      	itt	pl
   d7434:	2201      	movpl	r2, #1
   d7436:	601a      	strpl	r2, [r3, #0]
   d7438:	4b1c      	ldr	r3, [pc, #112]	; (d74ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d743a:	681a      	ldr	r2, [r3, #0]
   d743c:	07d1      	lsls	r1, r2, #31
   d743e:	bf5c      	itt	pl
   d7440:	2201      	movpl	r2, #1
   d7442:	601a      	strpl	r2, [r3, #0]
   d7444:	4b1a      	ldr	r3, [pc, #104]	; (d74b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7446:	681a      	ldr	r2, [r3, #0]
   d7448:	07d2      	lsls	r2, r2, #31
   d744a:	bf5c      	itt	pl
   d744c:	2201      	movpl	r2, #1
   d744e:	601a      	strpl	r2, [r3, #0]
   d7450:	4b18      	ldr	r3, [pc, #96]	; (d74b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7452:	681a      	ldr	r2, [r3, #0]
   d7454:	07d0      	lsls	r0, r2, #31
   d7456:	bf5c      	itt	pl
   d7458:	2201      	movpl	r2, #1
   d745a:	601a      	strpl	r2, [r3, #0]
   d745c:	4b16      	ldr	r3, [pc, #88]	; (d74b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d745e:	681a      	ldr	r2, [r3, #0]
   d7460:	07d1      	lsls	r1, r2, #31
   d7462:	bf5c      	itt	pl
   d7464:	2201      	movpl	r2, #1
   d7466:	601a      	strpl	r2, [r3, #0]
   d7468:	4b14      	ldr	r3, [pc, #80]	; (d74bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d746a:	681a      	ldr	r2, [r3, #0]
   d746c:	07d2      	lsls	r2, r2, #31
   d746e:	bf5c      	itt	pl
   d7470:	2201      	movpl	r2, #1
   d7472:	601a      	strpl	r2, [r3, #0]
   d7474:	4b12      	ldr	r3, [pc, #72]	; (d74c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7476:	681a      	ldr	r2, [r3, #0]
   d7478:	07d0      	lsls	r0, r2, #31
   d747a:	bf5c      	itt	pl
   d747c:	2201      	movpl	r2, #1
   d747e:	601a      	strpl	r2, [r3, #0]
   d7480:	4b10      	ldr	r3, [pc, #64]	; (d74c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7482:	681a      	ldr	r2, [r3, #0]
   d7484:	07d1      	lsls	r1, r2, #31
   d7486:	bf5c      	itt	pl
   d7488:	2201      	movpl	r2, #1
   d748a:	601a      	strpl	r2, [r3, #0]
   d748c:	4b0e      	ldr	r3, [pc, #56]	; (d74c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d748e:	681a      	ldr	r2, [r3, #0]
   d7490:	07d2      	lsls	r2, r2, #31
   d7492:	bf5c      	itt	pl
   d7494:	2201      	movpl	r2, #1
   d7496:	601a      	strpl	r2, [r3, #0]
   d7498:	4770      	bx	lr
   d749a:	bf00      	nop
   d749c:	2003e79c 	.word	0x2003e79c
   d74a0:	2003e798 	.word	0x2003e798
   d74a4:	2003e794 	.word	0x2003e794
   d74a8:	2003e790 	.word	0x2003e790
   d74ac:	2003e78c 	.word	0x2003e78c
   d74b0:	2003e788 	.word	0x2003e788
   d74b4:	2003e784 	.word	0x2003e784
   d74b8:	2003e780 	.word	0x2003e780
   d74bc:	2003e77c 	.word	0x2003e77c
   d74c0:	2003e778 	.word	0x2003e778
   d74c4:	2003e774 	.word	0x2003e774
   d74c8:	2003e770 	.word	0x2003e770

000d74cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d74cc:	4b24      	ldr	r3, [pc, #144]	; (d7560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d74ce:	681a      	ldr	r2, [r3, #0]
   d74d0:	07d0      	lsls	r0, r2, #31
   d74d2:	bf5c      	itt	pl
   d74d4:	2201      	movpl	r2, #1
   d74d6:	601a      	strpl	r2, [r3, #0]
   d74d8:	4b22      	ldr	r3, [pc, #136]	; (d7564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d74da:	681a      	ldr	r2, [r3, #0]
   d74dc:	07d1      	lsls	r1, r2, #31
   d74de:	bf5c      	itt	pl
   d74e0:	2201      	movpl	r2, #1
   d74e2:	601a      	strpl	r2, [r3, #0]
   d74e4:	4b20      	ldr	r3, [pc, #128]	; (d7568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d74e6:	681a      	ldr	r2, [r3, #0]
   d74e8:	07d2      	lsls	r2, r2, #31
   d74ea:	bf5c      	itt	pl
   d74ec:	2201      	movpl	r2, #1
   d74ee:	601a      	strpl	r2, [r3, #0]
   d74f0:	4b1e      	ldr	r3, [pc, #120]	; (d756c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d74f2:	681a      	ldr	r2, [r3, #0]
   d74f4:	07d0      	lsls	r0, r2, #31
   d74f6:	bf5c      	itt	pl
   d74f8:	2201      	movpl	r2, #1
   d74fa:	601a      	strpl	r2, [r3, #0]
   d74fc:	4b1c      	ldr	r3, [pc, #112]	; (d7570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d74fe:	681a      	ldr	r2, [r3, #0]
   d7500:	07d1      	lsls	r1, r2, #31
   d7502:	bf5c      	itt	pl
   d7504:	2201      	movpl	r2, #1
   d7506:	601a      	strpl	r2, [r3, #0]
   d7508:	4b1a      	ldr	r3, [pc, #104]	; (d7574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d750a:	681a      	ldr	r2, [r3, #0]
   d750c:	07d2      	lsls	r2, r2, #31
   d750e:	bf5c      	itt	pl
   d7510:	2201      	movpl	r2, #1
   d7512:	601a      	strpl	r2, [r3, #0]
   d7514:	4b18      	ldr	r3, [pc, #96]	; (d7578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7516:	681a      	ldr	r2, [r3, #0]
   d7518:	07d0      	lsls	r0, r2, #31
   d751a:	bf5c      	itt	pl
   d751c:	2201      	movpl	r2, #1
   d751e:	601a      	strpl	r2, [r3, #0]
   d7520:	4b16      	ldr	r3, [pc, #88]	; (d757c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7522:	681a      	ldr	r2, [r3, #0]
   d7524:	07d1      	lsls	r1, r2, #31
   d7526:	bf5c      	itt	pl
   d7528:	2201      	movpl	r2, #1
   d752a:	601a      	strpl	r2, [r3, #0]
   d752c:	4b14      	ldr	r3, [pc, #80]	; (d7580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d752e:	681a      	ldr	r2, [r3, #0]
   d7530:	07d2      	lsls	r2, r2, #31
   d7532:	bf5c      	itt	pl
   d7534:	2201      	movpl	r2, #1
   d7536:	601a      	strpl	r2, [r3, #0]
   d7538:	4b12      	ldr	r3, [pc, #72]	; (d7584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d753a:	681a      	ldr	r2, [r3, #0]
   d753c:	07d0      	lsls	r0, r2, #31
   d753e:	bf5c      	itt	pl
   d7540:	2201      	movpl	r2, #1
   d7542:	601a      	strpl	r2, [r3, #0]
   d7544:	4b10      	ldr	r3, [pc, #64]	; (d7588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7546:	681a      	ldr	r2, [r3, #0]
   d7548:	07d1      	lsls	r1, r2, #31
   d754a:	bf5c      	itt	pl
   d754c:	2201      	movpl	r2, #1
   d754e:	601a      	strpl	r2, [r3, #0]
   d7550:	4b0e      	ldr	r3, [pc, #56]	; (d758c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7552:	681a      	ldr	r2, [r3, #0]
   d7554:	07d2      	lsls	r2, r2, #31
   d7556:	bf5c      	itt	pl
   d7558:	2201      	movpl	r2, #1
   d755a:	601a      	strpl	r2, [r3, #0]
   d755c:	4770      	bx	lr
   d755e:	bf00      	nop
   d7560:	2003e7cc 	.word	0x2003e7cc
   d7564:	2003e7c8 	.word	0x2003e7c8
   d7568:	2003e7c4 	.word	0x2003e7c4
   d756c:	2003e7c0 	.word	0x2003e7c0
   d7570:	2003e7bc 	.word	0x2003e7bc
   d7574:	2003e7b8 	.word	0x2003e7b8
   d7578:	2003e7b4 	.word	0x2003e7b4
   d757c:	2003e7b0 	.word	0x2003e7b0
   d7580:	2003e7ac 	.word	0x2003e7ac
   d7584:	2003e7a8 	.word	0x2003e7a8
   d7588:	2003e7a4 	.word	0x2003e7a4
   d758c:	2003e7a0 	.word	0x2003e7a0

000d7590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7590:	4b18      	ldr	r3, [pc, #96]	; (d75f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7592:	681a      	ldr	r2, [r3, #0]
   d7594:	07d1      	lsls	r1, r2, #31
   d7596:	bf5c      	itt	pl
   d7598:	2201      	movpl	r2, #1
   d759a:	601a      	strpl	r2, [r3, #0]
   d759c:	4b16      	ldr	r3, [pc, #88]	; (d75f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d759e:	681a      	ldr	r2, [r3, #0]
   d75a0:	07d2      	lsls	r2, r2, #31
   d75a2:	bf5c      	itt	pl
   d75a4:	2201      	movpl	r2, #1
   d75a6:	601a      	strpl	r2, [r3, #0]
   d75a8:	4b14      	ldr	r3, [pc, #80]	; (d75fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d75aa:	681a      	ldr	r2, [r3, #0]
   d75ac:	07d0      	lsls	r0, r2, #31
   d75ae:	bf5c      	itt	pl
   d75b0:	2201      	movpl	r2, #1
   d75b2:	601a      	strpl	r2, [r3, #0]
   d75b4:	4b12      	ldr	r3, [pc, #72]	; (d7600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d75b6:	681a      	ldr	r2, [r3, #0]
   d75b8:	07d1      	lsls	r1, r2, #31
   d75ba:	bf5c      	itt	pl
   d75bc:	2201      	movpl	r2, #1
   d75be:	601a      	strpl	r2, [r3, #0]
   d75c0:	4b10      	ldr	r3, [pc, #64]	; (d7604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d75c2:	681a      	ldr	r2, [r3, #0]
   d75c4:	07d2      	lsls	r2, r2, #31
   d75c6:	bf5c      	itt	pl
   d75c8:	2201      	movpl	r2, #1
   d75ca:	601a      	strpl	r2, [r3, #0]
   d75cc:	4b0e      	ldr	r3, [pc, #56]	; (d7608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d75ce:	681a      	ldr	r2, [r3, #0]
   d75d0:	07d0      	lsls	r0, r2, #31
   d75d2:	bf5c      	itt	pl
   d75d4:	2201      	movpl	r2, #1
   d75d6:	601a      	strpl	r2, [r3, #0]
   d75d8:	4b0c      	ldr	r3, [pc, #48]	; (d760c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d75da:	681a      	ldr	r2, [r3, #0]
   d75dc:	07d1      	lsls	r1, r2, #31
   d75de:	bf5c      	itt	pl
   d75e0:	2201      	movpl	r2, #1
   d75e2:	601a      	strpl	r2, [r3, #0]
   d75e4:	4b0a      	ldr	r3, [pc, #40]	; (d7610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d75e6:	681a      	ldr	r2, [r3, #0]
   d75e8:	07d2      	lsls	r2, r2, #31
   d75ea:	bf5c      	itt	pl
   d75ec:	2201      	movpl	r2, #1
   d75ee:	601a      	strpl	r2, [r3, #0]
   d75f0:	4770      	bx	lr
   d75f2:	bf00      	nop
   d75f4:	2003e7ec 	.word	0x2003e7ec
   d75f8:	2003e7e8 	.word	0x2003e7e8
   d75fc:	2003e7e4 	.word	0x2003e7e4
   d7600:	2003e7e0 	.word	0x2003e7e0
   d7604:	2003e7dc 	.word	0x2003e7dc
   d7608:	2003e7d8 	.word	0x2003e7d8
   d760c:	2003e7d4 	.word	0x2003e7d4
   d7610:	2003e7d0 	.word	0x2003e7d0

000d7614 <__aeabi_drsub>:
   d7614:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7618:	e002      	b.n	d7620 <__adddf3>
   d761a:	bf00      	nop

000d761c <__aeabi_dsub>:
   d761c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7620 <__adddf3>:
   d7620:	b530      	push	{r4, r5, lr}
   d7622:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7626:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d762a:	ea94 0f05 	teq	r4, r5
   d762e:	bf08      	it	eq
   d7630:	ea90 0f02 	teqeq	r0, r2
   d7634:	bf1f      	itttt	ne
   d7636:	ea54 0c00 	orrsne.w	ip, r4, r0
   d763a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d763e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7642:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7646:	f000 80e2 	beq.w	d780e <__adddf3+0x1ee>
   d764a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d764e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7652:	bfb8      	it	lt
   d7654:	426d      	neglt	r5, r5
   d7656:	dd0c      	ble.n	d7672 <__adddf3+0x52>
   d7658:	442c      	add	r4, r5
   d765a:	ea80 0202 	eor.w	r2, r0, r2
   d765e:	ea81 0303 	eor.w	r3, r1, r3
   d7662:	ea82 0000 	eor.w	r0, r2, r0
   d7666:	ea83 0101 	eor.w	r1, r3, r1
   d766a:	ea80 0202 	eor.w	r2, r0, r2
   d766e:	ea81 0303 	eor.w	r3, r1, r3
   d7672:	2d36      	cmp	r5, #54	; 0x36
   d7674:	bf88      	it	hi
   d7676:	bd30      	pophi	{r4, r5, pc}
   d7678:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d767c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7680:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7684:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7688:	d002      	beq.n	d7690 <__adddf3+0x70>
   d768a:	4240      	negs	r0, r0
   d768c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7690:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7694:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7698:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d769c:	d002      	beq.n	d76a4 <__adddf3+0x84>
   d769e:	4252      	negs	r2, r2
   d76a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d76a4:	ea94 0f05 	teq	r4, r5
   d76a8:	f000 80a7 	beq.w	d77fa <__adddf3+0x1da>
   d76ac:	f1a4 0401 	sub.w	r4, r4, #1
   d76b0:	f1d5 0e20 	rsbs	lr, r5, #32
   d76b4:	db0d      	blt.n	d76d2 <__adddf3+0xb2>
   d76b6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d76ba:	fa22 f205 	lsr.w	r2, r2, r5
   d76be:	1880      	adds	r0, r0, r2
   d76c0:	f141 0100 	adc.w	r1, r1, #0
   d76c4:	fa03 f20e 	lsl.w	r2, r3, lr
   d76c8:	1880      	adds	r0, r0, r2
   d76ca:	fa43 f305 	asr.w	r3, r3, r5
   d76ce:	4159      	adcs	r1, r3
   d76d0:	e00e      	b.n	d76f0 <__adddf3+0xd0>
   d76d2:	f1a5 0520 	sub.w	r5, r5, #32
   d76d6:	f10e 0e20 	add.w	lr, lr, #32
   d76da:	2a01      	cmp	r2, #1
   d76dc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d76e0:	bf28      	it	cs
   d76e2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d76e6:	fa43 f305 	asr.w	r3, r3, r5
   d76ea:	18c0      	adds	r0, r0, r3
   d76ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d76f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d76f4:	d507      	bpl.n	d7706 <__adddf3+0xe6>
   d76f6:	f04f 0e00 	mov.w	lr, #0
   d76fa:	f1dc 0c00 	rsbs	ip, ip, #0
   d76fe:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7702:	eb6e 0101 	sbc.w	r1, lr, r1
   d7706:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d770a:	d31b      	bcc.n	d7744 <__adddf3+0x124>
   d770c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7710:	d30c      	bcc.n	d772c <__adddf3+0x10c>
   d7712:	0849      	lsrs	r1, r1, #1
   d7714:	ea5f 0030 	movs.w	r0, r0, rrx
   d7718:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d771c:	f104 0401 	add.w	r4, r4, #1
   d7720:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7724:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7728:	f080 809a 	bcs.w	d7860 <__adddf3+0x240>
   d772c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7730:	bf08      	it	eq
   d7732:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7736:	f150 0000 	adcs.w	r0, r0, #0
   d773a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d773e:	ea41 0105 	orr.w	r1, r1, r5
   d7742:	bd30      	pop	{r4, r5, pc}
   d7744:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7748:	4140      	adcs	r0, r0
   d774a:	eb41 0101 	adc.w	r1, r1, r1
   d774e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7752:	f1a4 0401 	sub.w	r4, r4, #1
   d7756:	d1e9      	bne.n	d772c <__adddf3+0x10c>
   d7758:	f091 0f00 	teq	r1, #0
   d775c:	bf04      	itt	eq
   d775e:	4601      	moveq	r1, r0
   d7760:	2000      	moveq	r0, #0
   d7762:	fab1 f381 	clz	r3, r1
   d7766:	bf08      	it	eq
   d7768:	3320      	addeq	r3, #32
   d776a:	f1a3 030b 	sub.w	r3, r3, #11
   d776e:	f1b3 0220 	subs.w	r2, r3, #32
   d7772:	da0c      	bge.n	d778e <__adddf3+0x16e>
   d7774:	320c      	adds	r2, #12
   d7776:	dd08      	ble.n	d778a <__adddf3+0x16a>
   d7778:	f102 0c14 	add.w	ip, r2, #20
   d777c:	f1c2 020c 	rsb	r2, r2, #12
   d7780:	fa01 f00c 	lsl.w	r0, r1, ip
   d7784:	fa21 f102 	lsr.w	r1, r1, r2
   d7788:	e00c      	b.n	d77a4 <__adddf3+0x184>
   d778a:	f102 0214 	add.w	r2, r2, #20
   d778e:	bfd8      	it	le
   d7790:	f1c2 0c20 	rsble	ip, r2, #32
   d7794:	fa01 f102 	lsl.w	r1, r1, r2
   d7798:	fa20 fc0c 	lsr.w	ip, r0, ip
   d779c:	bfdc      	itt	le
   d779e:	ea41 010c 	orrle.w	r1, r1, ip
   d77a2:	4090      	lslle	r0, r2
   d77a4:	1ae4      	subs	r4, r4, r3
   d77a6:	bfa2      	ittt	ge
   d77a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d77ac:	4329      	orrge	r1, r5
   d77ae:	bd30      	popge	{r4, r5, pc}
   d77b0:	ea6f 0404 	mvn.w	r4, r4
   d77b4:	3c1f      	subs	r4, #31
   d77b6:	da1c      	bge.n	d77f2 <__adddf3+0x1d2>
   d77b8:	340c      	adds	r4, #12
   d77ba:	dc0e      	bgt.n	d77da <__adddf3+0x1ba>
   d77bc:	f104 0414 	add.w	r4, r4, #20
   d77c0:	f1c4 0220 	rsb	r2, r4, #32
   d77c4:	fa20 f004 	lsr.w	r0, r0, r4
   d77c8:	fa01 f302 	lsl.w	r3, r1, r2
   d77cc:	ea40 0003 	orr.w	r0, r0, r3
   d77d0:	fa21 f304 	lsr.w	r3, r1, r4
   d77d4:	ea45 0103 	orr.w	r1, r5, r3
   d77d8:	bd30      	pop	{r4, r5, pc}
   d77da:	f1c4 040c 	rsb	r4, r4, #12
   d77de:	f1c4 0220 	rsb	r2, r4, #32
   d77e2:	fa20 f002 	lsr.w	r0, r0, r2
   d77e6:	fa01 f304 	lsl.w	r3, r1, r4
   d77ea:	ea40 0003 	orr.w	r0, r0, r3
   d77ee:	4629      	mov	r1, r5
   d77f0:	bd30      	pop	{r4, r5, pc}
   d77f2:	fa21 f004 	lsr.w	r0, r1, r4
   d77f6:	4629      	mov	r1, r5
   d77f8:	bd30      	pop	{r4, r5, pc}
   d77fa:	f094 0f00 	teq	r4, #0
   d77fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7802:	bf06      	itte	eq
   d7804:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7808:	3401      	addeq	r4, #1
   d780a:	3d01      	subne	r5, #1
   d780c:	e74e      	b.n	d76ac <__adddf3+0x8c>
   d780e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7812:	bf18      	it	ne
   d7814:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7818:	d029      	beq.n	d786e <__adddf3+0x24e>
   d781a:	ea94 0f05 	teq	r4, r5
   d781e:	bf08      	it	eq
   d7820:	ea90 0f02 	teqeq	r0, r2
   d7824:	d005      	beq.n	d7832 <__adddf3+0x212>
   d7826:	ea54 0c00 	orrs.w	ip, r4, r0
   d782a:	bf04      	itt	eq
   d782c:	4619      	moveq	r1, r3
   d782e:	4610      	moveq	r0, r2
   d7830:	bd30      	pop	{r4, r5, pc}
   d7832:	ea91 0f03 	teq	r1, r3
   d7836:	bf1e      	ittt	ne
   d7838:	2100      	movne	r1, #0
   d783a:	2000      	movne	r0, #0
   d783c:	bd30      	popne	{r4, r5, pc}
   d783e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7842:	d105      	bne.n	d7850 <__adddf3+0x230>
   d7844:	0040      	lsls	r0, r0, #1
   d7846:	4149      	adcs	r1, r1
   d7848:	bf28      	it	cs
   d784a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d784e:	bd30      	pop	{r4, r5, pc}
   d7850:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7854:	bf3c      	itt	cc
   d7856:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d785a:	bd30      	popcc	{r4, r5, pc}
   d785c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7860:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7864:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7868:	f04f 0000 	mov.w	r0, #0
   d786c:	bd30      	pop	{r4, r5, pc}
   d786e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7872:	bf1a      	itte	ne
   d7874:	4619      	movne	r1, r3
   d7876:	4610      	movne	r0, r2
   d7878:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d787c:	bf1c      	itt	ne
   d787e:	460b      	movne	r3, r1
   d7880:	4602      	movne	r2, r0
   d7882:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7886:	bf06      	itte	eq
   d7888:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d788c:	ea91 0f03 	teqeq	r1, r3
   d7890:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7894:	bd30      	pop	{r4, r5, pc}
   d7896:	bf00      	nop

000d7898 <__aeabi_ui2d>:
   d7898:	f090 0f00 	teq	r0, #0
   d789c:	bf04      	itt	eq
   d789e:	2100      	moveq	r1, #0
   d78a0:	4770      	bxeq	lr
   d78a2:	b530      	push	{r4, r5, lr}
   d78a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d78a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d78ac:	f04f 0500 	mov.w	r5, #0
   d78b0:	f04f 0100 	mov.w	r1, #0
   d78b4:	e750      	b.n	d7758 <__adddf3+0x138>
   d78b6:	bf00      	nop

000d78b8 <__aeabi_i2d>:
   d78b8:	f090 0f00 	teq	r0, #0
   d78bc:	bf04      	itt	eq
   d78be:	2100      	moveq	r1, #0
   d78c0:	4770      	bxeq	lr
   d78c2:	b530      	push	{r4, r5, lr}
   d78c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d78c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d78cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d78d0:	bf48      	it	mi
   d78d2:	4240      	negmi	r0, r0
   d78d4:	f04f 0100 	mov.w	r1, #0
   d78d8:	e73e      	b.n	d7758 <__adddf3+0x138>
   d78da:	bf00      	nop

000d78dc <__aeabi_f2d>:
   d78dc:	0042      	lsls	r2, r0, #1
   d78de:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d78e2:	ea4f 0131 	mov.w	r1, r1, rrx
   d78e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d78ea:	bf1f      	itttt	ne
   d78ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d78f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d78f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d78f8:	4770      	bxne	lr
   d78fa:	f092 0f00 	teq	r2, #0
   d78fe:	bf14      	ite	ne
   d7900:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7904:	4770      	bxeq	lr
   d7906:	b530      	push	{r4, r5, lr}
   d7908:	f44f 7460 	mov.w	r4, #896	; 0x380
   d790c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7910:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7914:	e720      	b.n	d7758 <__adddf3+0x138>
   d7916:	bf00      	nop

000d7918 <__aeabi_ul2d>:
   d7918:	ea50 0201 	orrs.w	r2, r0, r1
   d791c:	bf08      	it	eq
   d791e:	4770      	bxeq	lr
   d7920:	b530      	push	{r4, r5, lr}
   d7922:	f04f 0500 	mov.w	r5, #0
   d7926:	e00a      	b.n	d793e <__aeabi_l2d+0x16>

000d7928 <__aeabi_l2d>:
   d7928:	ea50 0201 	orrs.w	r2, r0, r1
   d792c:	bf08      	it	eq
   d792e:	4770      	bxeq	lr
   d7930:	b530      	push	{r4, r5, lr}
   d7932:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7936:	d502      	bpl.n	d793e <__aeabi_l2d+0x16>
   d7938:	4240      	negs	r0, r0
   d793a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d793e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7942:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7946:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d794a:	f43f aedc 	beq.w	d7706 <__adddf3+0xe6>
   d794e:	f04f 0203 	mov.w	r2, #3
   d7952:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7956:	bf18      	it	ne
   d7958:	3203      	addne	r2, #3
   d795a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d795e:	bf18      	it	ne
   d7960:	3203      	addne	r2, #3
   d7962:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7966:	f1c2 0320 	rsb	r3, r2, #32
   d796a:	fa00 fc03 	lsl.w	ip, r0, r3
   d796e:	fa20 f002 	lsr.w	r0, r0, r2
   d7972:	fa01 fe03 	lsl.w	lr, r1, r3
   d7976:	ea40 000e 	orr.w	r0, r0, lr
   d797a:	fa21 f102 	lsr.w	r1, r1, r2
   d797e:	4414      	add	r4, r2
   d7980:	e6c1      	b.n	d7706 <__adddf3+0xe6>
   d7982:	bf00      	nop

000d7984 <__aeabi_dmul>:
   d7984:	b570      	push	{r4, r5, r6, lr}
   d7986:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d798a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d798e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7992:	bf1d      	ittte	ne
   d7994:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7998:	ea94 0f0c 	teqne	r4, ip
   d799c:	ea95 0f0c 	teqne	r5, ip
   d79a0:	f000 f8de 	bleq	d7b60 <__aeabi_dmul+0x1dc>
   d79a4:	442c      	add	r4, r5
   d79a6:	ea81 0603 	eor.w	r6, r1, r3
   d79aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d79ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d79b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d79b6:	bf18      	it	ne
   d79b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d79bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d79c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d79c4:	d038      	beq.n	d7a38 <__aeabi_dmul+0xb4>
   d79c6:	fba0 ce02 	umull	ip, lr, r0, r2
   d79ca:	f04f 0500 	mov.w	r5, #0
   d79ce:	fbe1 e502 	umlal	lr, r5, r1, r2
   d79d2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d79d6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d79da:	f04f 0600 	mov.w	r6, #0
   d79de:	fbe1 5603 	umlal	r5, r6, r1, r3
   d79e2:	f09c 0f00 	teq	ip, #0
   d79e6:	bf18      	it	ne
   d79e8:	f04e 0e01 	orrne.w	lr, lr, #1
   d79ec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d79f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d79f4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d79f8:	d204      	bcs.n	d7a04 <__aeabi_dmul+0x80>
   d79fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d79fe:	416d      	adcs	r5, r5
   d7a00:	eb46 0606 	adc.w	r6, r6, r6
   d7a04:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7a08:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7a0c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7a10:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7a14:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7a18:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7a1c:	bf88      	it	hi
   d7a1e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7a22:	d81e      	bhi.n	d7a62 <__aeabi_dmul+0xde>
   d7a24:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7a28:	bf08      	it	eq
   d7a2a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7a2e:	f150 0000 	adcs.w	r0, r0, #0
   d7a32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7a36:	bd70      	pop	{r4, r5, r6, pc}
   d7a38:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7a3c:	ea46 0101 	orr.w	r1, r6, r1
   d7a40:	ea40 0002 	orr.w	r0, r0, r2
   d7a44:	ea81 0103 	eor.w	r1, r1, r3
   d7a48:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7a4c:	bfc2      	ittt	gt
   d7a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7a56:	bd70      	popgt	{r4, r5, r6, pc}
   d7a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7a5c:	f04f 0e00 	mov.w	lr, #0
   d7a60:	3c01      	subs	r4, #1
   d7a62:	f300 80ab 	bgt.w	d7bbc <__aeabi_dmul+0x238>
   d7a66:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7a6a:	bfde      	ittt	le
   d7a6c:	2000      	movle	r0, #0
   d7a6e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7a72:	bd70      	pople	{r4, r5, r6, pc}
   d7a74:	f1c4 0400 	rsb	r4, r4, #0
   d7a78:	3c20      	subs	r4, #32
   d7a7a:	da35      	bge.n	d7ae8 <__aeabi_dmul+0x164>
   d7a7c:	340c      	adds	r4, #12
   d7a7e:	dc1b      	bgt.n	d7ab8 <__aeabi_dmul+0x134>
   d7a80:	f104 0414 	add.w	r4, r4, #20
   d7a84:	f1c4 0520 	rsb	r5, r4, #32
   d7a88:	fa00 f305 	lsl.w	r3, r0, r5
   d7a8c:	fa20 f004 	lsr.w	r0, r0, r4
   d7a90:	fa01 f205 	lsl.w	r2, r1, r5
   d7a94:	ea40 0002 	orr.w	r0, r0, r2
   d7a98:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7a9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7aa0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7aa4:	fa21 f604 	lsr.w	r6, r1, r4
   d7aa8:	eb42 0106 	adc.w	r1, r2, r6
   d7aac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7ab0:	bf08      	it	eq
   d7ab2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7ab6:	bd70      	pop	{r4, r5, r6, pc}
   d7ab8:	f1c4 040c 	rsb	r4, r4, #12
   d7abc:	f1c4 0520 	rsb	r5, r4, #32
   d7ac0:	fa00 f304 	lsl.w	r3, r0, r4
   d7ac4:	fa20 f005 	lsr.w	r0, r0, r5
   d7ac8:	fa01 f204 	lsl.w	r2, r1, r4
   d7acc:	ea40 0002 	orr.w	r0, r0, r2
   d7ad0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7ad4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7ad8:	f141 0100 	adc.w	r1, r1, #0
   d7adc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7ae0:	bf08      	it	eq
   d7ae2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7ae6:	bd70      	pop	{r4, r5, r6, pc}
   d7ae8:	f1c4 0520 	rsb	r5, r4, #32
   d7aec:	fa00 f205 	lsl.w	r2, r0, r5
   d7af0:	ea4e 0e02 	orr.w	lr, lr, r2
   d7af4:	fa20 f304 	lsr.w	r3, r0, r4
   d7af8:	fa01 f205 	lsl.w	r2, r1, r5
   d7afc:	ea43 0302 	orr.w	r3, r3, r2
   d7b00:	fa21 f004 	lsr.w	r0, r1, r4
   d7b04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7b08:	fa21 f204 	lsr.w	r2, r1, r4
   d7b0c:	ea20 0002 	bic.w	r0, r0, r2
   d7b10:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7b14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7b18:	bf08      	it	eq
   d7b1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7b1e:	bd70      	pop	{r4, r5, r6, pc}
   d7b20:	f094 0f00 	teq	r4, #0
   d7b24:	d10f      	bne.n	d7b46 <__aeabi_dmul+0x1c2>
   d7b26:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7b2a:	0040      	lsls	r0, r0, #1
   d7b2c:	eb41 0101 	adc.w	r1, r1, r1
   d7b30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7b34:	bf08      	it	eq
   d7b36:	3c01      	subeq	r4, #1
   d7b38:	d0f7      	beq.n	d7b2a <__aeabi_dmul+0x1a6>
   d7b3a:	ea41 0106 	orr.w	r1, r1, r6
   d7b3e:	f095 0f00 	teq	r5, #0
   d7b42:	bf18      	it	ne
   d7b44:	4770      	bxne	lr
   d7b46:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7b4a:	0052      	lsls	r2, r2, #1
   d7b4c:	eb43 0303 	adc.w	r3, r3, r3
   d7b50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7b54:	bf08      	it	eq
   d7b56:	3d01      	subeq	r5, #1
   d7b58:	d0f7      	beq.n	d7b4a <__aeabi_dmul+0x1c6>
   d7b5a:	ea43 0306 	orr.w	r3, r3, r6
   d7b5e:	4770      	bx	lr
   d7b60:	ea94 0f0c 	teq	r4, ip
   d7b64:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7b68:	bf18      	it	ne
   d7b6a:	ea95 0f0c 	teqne	r5, ip
   d7b6e:	d00c      	beq.n	d7b8a <__aeabi_dmul+0x206>
   d7b70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7b74:	bf18      	it	ne
   d7b76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7b7a:	d1d1      	bne.n	d7b20 <__aeabi_dmul+0x19c>
   d7b7c:	ea81 0103 	eor.w	r1, r1, r3
   d7b80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7b84:	f04f 0000 	mov.w	r0, #0
   d7b88:	bd70      	pop	{r4, r5, r6, pc}
   d7b8a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7b8e:	bf06      	itte	eq
   d7b90:	4610      	moveq	r0, r2
   d7b92:	4619      	moveq	r1, r3
   d7b94:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7b98:	d019      	beq.n	d7bce <__aeabi_dmul+0x24a>
   d7b9a:	ea94 0f0c 	teq	r4, ip
   d7b9e:	d102      	bne.n	d7ba6 <__aeabi_dmul+0x222>
   d7ba0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7ba4:	d113      	bne.n	d7bce <__aeabi_dmul+0x24a>
   d7ba6:	ea95 0f0c 	teq	r5, ip
   d7baa:	d105      	bne.n	d7bb8 <__aeabi_dmul+0x234>
   d7bac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7bb0:	bf1c      	itt	ne
   d7bb2:	4610      	movne	r0, r2
   d7bb4:	4619      	movne	r1, r3
   d7bb6:	d10a      	bne.n	d7bce <__aeabi_dmul+0x24a>
   d7bb8:	ea81 0103 	eor.w	r1, r1, r3
   d7bbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7bc0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7bc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7bc8:	f04f 0000 	mov.w	r0, #0
   d7bcc:	bd70      	pop	{r4, r5, r6, pc}
   d7bce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7bd2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7bd6:	bd70      	pop	{r4, r5, r6, pc}

000d7bd8 <__aeabi_ddiv>:
   d7bd8:	b570      	push	{r4, r5, r6, lr}
   d7bda:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7bde:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7be2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7be6:	bf1d      	ittte	ne
   d7be8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7bec:	ea94 0f0c 	teqne	r4, ip
   d7bf0:	ea95 0f0c 	teqne	r5, ip
   d7bf4:	f000 f8a7 	bleq	d7d46 <__aeabi_ddiv+0x16e>
   d7bf8:	eba4 0405 	sub.w	r4, r4, r5
   d7bfc:	ea81 0e03 	eor.w	lr, r1, r3
   d7c00:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7c04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7c08:	f000 8088 	beq.w	d7d1c <__aeabi_ddiv+0x144>
   d7c0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7c10:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7c14:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7c18:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7c1c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7c20:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7c24:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7c28:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7c2c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7c30:	429d      	cmp	r5, r3
   d7c32:	bf08      	it	eq
   d7c34:	4296      	cmpeq	r6, r2
   d7c36:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7c3a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7c3e:	d202      	bcs.n	d7c46 <__aeabi_ddiv+0x6e>
   d7c40:	085b      	lsrs	r3, r3, #1
   d7c42:	ea4f 0232 	mov.w	r2, r2, rrx
   d7c46:	1ab6      	subs	r6, r6, r2
   d7c48:	eb65 0503 	sbc.w	r5, r5, r3
   d7c4c:	085b      	lsrs	r3, r3, #1
   d7c4e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7c52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7c56:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7c5a:	ebb6 0e02 	subs.w	lr, r6, r2
   d7c5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7c62:	bf22      	ittt	cs
   d7c64:	1ab6      	subcs	r6, r6, r2
   d7c66:	4675      	movcs	r5, lr
   d7c68:	ea40 000c 	orrcs.w	r0, r0, ip
   d7c6c:	085b      	lsrs	r3, r3, #1
   d7c6e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7c72:	ebb6 0e02 	subs.w	lr, r6, r2
   d7c76:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7c7a:	bf22      	ittt	cs
   d7c7c:	1ab6      	subcs	r6, r6, r2
   d7c7e:	4675      	movcs	r5, lr
   d7c80:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7c84:	085b      	lsrs	r3, r3, #1
   d7c86:	ea4f 0232 	mov.w	r2, r2, rrx
   d7c8a:	ebb6 0e02 	subs.w	lr, r6, r2
   d7c8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7c92:	bf22      	ittt	cs
   d7c94:	1ab6      	subcs	r6, r6, r2
   d7c96:	4675      	movcs	r5, lr
   d7c98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7c9c:	085b      	lsrs	r3, r3, #1
   d7c9e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7ca2:	ebb6 0e02 	subs.w	lr, r6, r2
   d7ca6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7caa:	bf22      	ittt	cs
   d7cac:	1ab6      	subcs	r6, r6, r2
   d7cae:	4675      	movcs	r5, lr
   d7cb0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7cb4:	ea55 0e06 	orrs.w	lr, r5, r6
   d7cb8:	d018      	beq.n	d7cec <__aeabi_ddiv+0x114>
   d7cba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7cbe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7cc2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7cc6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7cca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7cce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7cd2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7cd6:	d1c0      	bne.n	d7c5a <__aeabi_ddiv+0x82>
   d7cd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7cdc:	d10b      	bne.n	d7cf6 <__aeabi_ddiv+0x11e>
   d7cde:	ea41 0100 	orr.w	r1, r1, r0
   d7ce2:	f04f 0000 	mov.w	r0, #0
   d7ce6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7cea:	e7b6      	b.n	d7c5a <__aeabi_ddiv+0x82>
   d7cec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7cf0:	bf04      	itt	eq
   d7cf2:	4301      	orreq	r1, r0
   d7cf4:	2000      	moveq	r0, #0
   d7cf6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7cfa:	bf88      	it	hi
   d7cfc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7d00:	f63f aeaf 	bhi.w	d7a62 <__aeabi_dmul+0xde>
   d7d04:	ebb5 0c03 	subs.w	ip, r5, r3
   d7d08:	bf04      	itt	eq
   d7d0a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7d0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7d12:	f150 0000 	adcs.w	r0, r0, #0
   d7d16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7d1a:	bd70      	pop	{r4, r5, r6, pc}
   d7d1c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7d20:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7d24:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7d28:	bfc2      	ittt	gt
   d7d2a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7d2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7d32:	bd70      	popgt	{r4, r5, r6, pc}
   d7d34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7d38:	f04f 0e00 	mov.w	lr, #0
   d7d3c:	3c01      	subs	r4, #1
   d7d3e:	e690      	b.n	d7a62 <__aeabi_dmul+0xde>
   d7d40:	ea45 0e06 	orr.w	lr, r5, r6
   d7d44:	e68d      	b.n	d7a62 <__aeabi_dmul+0xde>
   d7d46:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7d4a:	ea94 0f0c 	teq	r4, ip
   d7d4e:	bf08      	it	eq
   d7d50:	ea95 0f0c 	teqeq	r5, ip
   d7d54:	f43f af3b 	beq.w	d7bce <__aeabi_dmul+0x24a>
   d7d58:	ea94 0f0c 	teq	r4, ip
   d7d5c:	d10a      	bne.n	d7d74 <__aeabi_ddiv+0x19c>
   d7d5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7d62:	f47f af34 	bne.w	d7bce <__aeabi_dmul+0x24a>
   d7d66:	ea95 0f0c 	teq	r5, ip
   d7d6a:	f47f af25 	bne.w	d7bb8 <__aeabi_dmul+0x234>
   d7d6e:	4610      	mov	r0, r2
   d7d70:	4619      	mov	r1, r3
   d7d72:	e72c      	b.n	d7bce <__aeabi_dmul+0x24a>
   d7d74:	ea95 0f0c 	teq	r5, ip
   d7d78:	d106      	bne.n	d7d88 <__aeabi_ddiv+0x1b0>
   d7d7a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7d7e:	f43f aefd 	beq.w	d7b7c <__aeabi_dmul+0x1f8>
   d7d82:	4610      	mov	r0, r2
   d7d84:	4619      	mov	r1, r3
   d7d86:	e722      	b.n	d7bce <__aeabi_dmul+0x24a>
   d7d88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7d8c:	bf18      	it	ne
   d7d8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7d92:	f47f aec5 	bne.w	d7b20 <__aeabi_dmul+0x19c>
   d7d96:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7d9a:	f47f af0d 	bne.w	d7bb8 <__aeabi_dmul+0x234>
   d7d9e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7da2:	f47f aeeb 	bne.w	d7b7c <__aeabi_dmul+0x1f8>
   d7da6:	e712      	b.n	d7bce <__aeabi_dmul+0x24a>

000d7da8 <__aeabi_d2f>:
   d7da8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7dac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7db0:	bf24      	itt	cs
   d7db2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7db6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7dba:	d90d      	bls.n	d7dd8 <__aeabi_d2f+0x30>
   d7dbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7dc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7dc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7dc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7dcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7dd0:	bf08      	it	eq
   d7dd2:	f020 0001 	biceq.w	r0, r0, #1
   d7dd6:	4770      	bx	lr
   d7dd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7ddc:	d121      	bne.n	d7e22 <__aeabi_d2f+0x7a>
   d7dde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7de2:	bfbc      	itt	lt
   d7de4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7de8:	4770      	bxlt	lr
   d7dea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7dee:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7df2:	f1c2 0218 	rsb	r2, r2, #24
   d7df6:	f1c2 0c20 	rsb	ip, r2, #32
   d7dfa:	fa10 f30c 	lsls.w	r3, r0, ip
   d7dfe:	fa20 f002 	lsr.w	r0, r0, r2
   d7e02:	bf18      	it	ne
   d7e04:	f040 0001 	orrne.w	r0, r0, #1
   d7e08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7e0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7e10:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7e14:	ea40 000c 	orr.w	r0, r0, ip
   d7e18:	fa23 f302 	lsr.w	r3, r3, r2
   d7e1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7e20:	e7cc      	b.n	d7dbc <__aeabi_d2f+0x14>
   d7e22:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7e26:	d107      	bne.n	d7e38 <__aeabi_d2f+0x90>
   d7e28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7e2c:	bf1e      	ittt	ne
   d7e2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7e32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7e36:	4770      	bxne	lr
   d7e38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7e3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7e40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7e44:	4770      	bx	lr
   d7e46:	bf00      	nop

000d7e48 <__cxa_atexit>:
   d7e48:	b510      	push	{r4, lr}
   d7e4a:	4c05      	ldr	r4, [pc, #20]	; (d7e60 <__cxa_atexit+0x18>)
   d7e4c:	4613      	mov	r3, r2
   d7e4e:	b12c      	cbz	r4, d7e5c <__cxa_atexit+0x14>
   d7e50:	460a      	mov	r2, r1
   d7e52:	4601      	mov	r1, r0
   d7e54:	2002      	movs	r0, #2
   d7e56:	f3af 8000 	nop.w
   d7e5a:	bd10      	pop	{r4, pc}
   d7e5c:	4620      	mov	r0, r4
   d7e5e:	bd10      	pop	{r4, pc}
   d7e60:	00000000 	.word	0x00000000

000d7e64 <memcpy>:
   d7e64:	b510      	push	{r4, lr}
   d7e66:	1e43      	subs	r3, r0, #1
   d7e68:	440a      	add	r2, r1
   d7e6a:	4291      	cmp	r1, r2
   d7e6c:	d004      	beq.n	d7e78 <memcpy+0x14>
   d7e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7e72:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7e76:	e7f8      	b.n	d7e6a <memcpy+0x6>
   d7e78:	bd10      	pop	{r4, pc}

000d7e7a <memset>:
   d7e7a:	4402      	add	r2, r0
   d7e7c:	4603      	mov	r3, r0
   d7e7e:	4293      	cmp	r3, r2
   d7e80:	d002      	beq.n	d7e88 <memset+0xe>
   d7e82:	f803 1b01 	strb.w	r1, [r3], #1
   d7e86:	e7fa      	b.n	d7e7e <memset+0x4>
   d7e88:	4770      	bx	lr
	...

000d7e8c <srand>:
   d7e8c:	b538      	push	{r3, r4, r5, lr}
   d7e8e:	4b12      	ldr	r3, [pc, #72]	; (d7ed8 <srand+0x4c>)
   d7e90:	681c      	ldr	r4, [r3, #0]
   d7e92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7e94:	4605      	mov	r5, r0
   d7e96:	b9d3      	cbnz	r3, d7ece <srand+0x42>
   d7e98:	2018      	movs	r0, #24
   d7e9a:	f7fd ffe1 	bl	d5e60 <malloc>
   d7e9e:	f243 330e 	movw	r3, #13070	; 0x330e
   d7ea2:	63a0      	str	r0, [r4, #56]	; 0x38
   d7ea4:	8003      	strh	r3, [r0, #0]
   d7ea6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7eaa:	8043      	strh	r3, [r0, #2]
   d7eac:	f241 2334 	movw	r3, #4660	; 0x1234
   d7eb0:	8083      	strh	r3, [r0, #4]
   d7eb2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7eb6:	80c3      	strh	r3, [r0, #6]
   d7eb8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7ebc:	8103      	strh	r3, [r0, #8]
   d7ebe:	2305      	movs	r3, #5
   d7ec0:	8143      	strh	r3, [r0, #10]
   d7ec2:	230b      	movs	r3, #11
   d7ec4:	8183      	strh	r3, [r0, #12]
   d7ec6:	2201      	movs	r2, #1
   d7ec8:	2300      	movs	r3, #0
   d7eca:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7ece:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7ed0:	2200      	movs	r2, #0
   d7ed2:	611d      	str	r5, [r3, #16]
   d7ed4:	615a      	str	r2, [r3, #20]
   d7ed6:	bd38      	pop	{r3, r4, r5, pc}
   d7ed8:	2003e1dc 	.word	0x2003e1dc

000d7edc <strcpy>:
   d7edc:	4603      	mov	r3, r0
   d7ede:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7ee2:	f803 2b01 	strb.w	r2, [r3], #1
   d7ee6:	2a00      	cmp	r2, #0
   d7ee8:	d1f9      	bne.n	d7ede <strcpy+0x2>
   d7eea:	4770      	bx	lr

000d7eec <strlen>:
   d7eec:	4603      	mov	r3, r0
   d7eee:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7ef2:	2a00      	cmp	r2, #0
   d7ef4:	d1fb      	bne.n	d7eee <strlen+0x2>
   d7ef6:	1a18      	subs	r0, r3, r0
   d7ef8:	3801      	subs	r0, #1
   d7efa:	4770      	bx	lr

000d7efc <strncpy>:
   d7efc:	b510      	push	{r4, lr}
   d7efe:	4603      	mov	r3, r0
   d7f00:	b142      	cbz	r2, d7f14 <strncpy+0x18>
   d7f02:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7f06:	f803 4b01 	strb.w	r4, [r3], #1
   d7f0a:	3a01      	subs	r2, #1
   d7f0c:	2c00      	cmp	r4, #0
   d7f0e:	d1f7      	bne.n	d7f00 <strncpy+0x4>
   d7f10:	441a      	add	r2, r3
   d7f12:	e000      	b.n	d7f16 <strncpy+0x1a>
   d7f14:	bd10      	pop	{r4, pc}
   d7f16:	4293      	cmp	r3, r2
   d7f18:	d002      	beq.n	d7f20 <strncpy+0x24>
   d7f1a:	f803 4b01 	strb.w	r4, [r3], #1
   d7f1e:	e7fa      	b.n	d7f16 <strncpy+0x1a>
   d7f20:	bd10      	pop	{r4, pc}

000d7f22 <link_code_end>:
	...

000d7f24 <dynalib_user>:
   d7f24:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d7f34:	0000 0000 6f43 6e6e 6365 6974 676e 7420     ....Connecting t
   d7f44:	206f 514d 5454 2e2e 202e 5200 7465 7972     o MQTT... .Retry
   d7f54:	6e69 2067 514d 5454 6320 6e6f 656e 7463     ing MQTT connect
   d7f64:	6f69 206e 6e69 3520 7320 6365 6e6f 7364     ion in 5 seconds
   d7f74:	2e2e 002e 514d 5454 4320 6e6f 656e 7463     ....MQTT Connect
   d7f84:	6465 0021 6950 676e 6e69 2067 514d 5454     ed!.Pinging MQTT
   d7f94:	0a20 4400 7369 6f63 6e6e 6365 6974 676e      ..Disconnecting
   d7fa4:	0a20 6800 6c65 6f6c 7720 726f 646c 6e00      ..hello world.n
   d7fb4:	6369 736b 796b 6968 6867 6900 2e6f 6461     ickskyhigh.io.ad
   d7fc4:	6661 7572 7469 632e 6d6f 6100 6f69 5a5f     afruit.com.aio_Z
   d7fd4:	436a 3644 7435 7578 6a72 5363 5466 3758     jCD65txurjcSfTX7
   d7fe4:	4c43 6f70 6b6e 725a 6d67 0030 696e 6b63     CLponkZrgm0.nick
   d7ff4:	6b73 6879 6769 2f68 6566 6465 2f73 6361     skyhigh/feeds/ac
   d8004:	6974 6176 6574 6e00 6369 736b 796b 6968     tivate.nickskyhi
   d8014:	6867 662f 6565 7364 742f 7275 6f6e 006e     gh/feeds/turnon.

000d8024 <_ZTVN8particle13__SPISettingsE>:
	...
   d802c:	4381 000d 6564 6166 6c75 2074 4d00 4253     .C..default .MSB
   d803c:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d804c:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d805c:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   d806c:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000d8078 <_ZTV18DHTSensorTypeDHT22>:
	...
   d8080:	49c9 000d 49cd 000d 4939 000d 4991 000d     .I...I..9I...I..
   d8090:	4844 3154 0031 4844 3254 0032 726e 7866     DHT11.DHT22.nrfx
   d80a0:	695f 7332 695f 696e 2074 7265 6f72 3d72     _i2s_init error=
   d80b0:	6c25 0075 726e 7866 695f 7332 735f 6174     %lu.nrfx_i2s_sta
   d80c0:	7472 6520 7272 726f 253d 756c 6200 6461     rt error=%lu.bad
   d80d0:	6320 6568 6b63 7573 006d 6170 7269 3d73      checksum.pairs=
   d80e0:	6425 6520 7078 6365 6574 2064 3034 7200     %d expected 40.r
   d80f0:	7465 7972 6e69 0067                         etrying.

000d80f8 <_ZTV18DHTSensorTypeDHT11>:
	...
   d8100:	49cb 000d 49db 000d 4917 000d 4925 000d     .I...I...I..%I..

000d8110 <_ZTV16Adafruit_SSD1306>:
	...
   d8118:	40cd 000d 42ad 000d 5469 000d 61fd 000d     .@...B..iT...a..
   d8128:	4d65 000d 5169 000d 4bed 000d 4a79 000d     eM..iQ...K..yJ..
   d8138:	5229 000d 52bf 000d 52f7 000d 5313 000d     )R...R...R...S..

000d8148 <_ZTV12Adafruit_GFX>:
	...
   d8158:	5469 000d 61fd 000d 40a9 000d 5169 000d     iT...a...@..iQ..
   d8168:	5289 000d 52a5 000d 5229 000d 52bf 000d     .R...R..)R...R..
   d8178:	52f7 000d 5313 000d                         .R...S..

000d8180 <_ZL4font>:
   d8180:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d8190:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d81a0:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d81b0:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d81c0:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d81d0:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d81e0:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d81f0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d8200:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d8210:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d8220:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d8230:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d8240:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d8250:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d8260:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d8270:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d8280:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d8290:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d82a0:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d82b0:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d82c0:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d82d0:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d82e0:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d82f0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d8300:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d8310:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d8320:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d8330:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d8340:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d8350:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d8360:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d8370:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d8380:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d8390:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d83a0:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d83b0:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d83c0:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d83d0:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d83e0:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d83f0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d8400:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d8410:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d8420:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d8430:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d8440:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d8450:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d8460:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d8470:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d8480:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d8490:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d84a0:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d84b0:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d84c0:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d84d0:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d84e0:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d84f0:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d8500:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d8510:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d8520:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d8530:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d8540:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d8550:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d8560:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d8570:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d8580:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d8590:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d85a0:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d85b0:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d85c0:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d85d0:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d85e0:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d85f0:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d8600:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d8610:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d8620:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d8630:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d8640:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d8650:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d8660:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d8670:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d867c <_ZTV19Adafruit_MQTT_SPARK>:
	...
   d8684:	40cf 000d 42bb 000d 54ed 000d 5599 000d     .@...B...T...U..
   d8694:	55cb 000d 5501 000d 5541 000d               .U...U..AU..

000d86a0 <_ZTV13Adafruit_MQTT>:
	...
   d86b0:	40a9 000d 40a9 000d 40a9 000d 40a9 000d     .@...@...@...@..
   d86c0:	40a9 000d                                   .@..

000d86c4 <CSWTCH.52>:
   d86c4:	8725 000d 8739 000d 8709 000d 874b 000d     %...9.......K...
   d86d4:	8790 000d 87d5 000d 87f5 000d 8828 000d     ............(...
   d86e4:	8842 000d 8879 000d 5b20 7830 5d00 202c     B...y... [0x.], 
   d86f4:	0a00 0009 7244 706f 6570 2064 2061 6170     ....Dropped a pa
   d8704:	6b63 7465 5500 6b6e 6f6e 6e77 6520 7272     cket.Unknown err
   d8714:	726f 4d00 5451 0054 2525 6425 252e 6664     or.MQTT.%%%d.%df
   d8724:	4600 6961 656c 2064 6f74 7320 6275 6373     .Failed to subsc
   d8734:	6972 6562 4300 6e6f 656e 7463 6f69 206e     ribe.Connection 
   d8744:	6166 6c69 6465 5400 6568 5320 7265 6576     failed.The Serve
   d8754:	2072 6f64 7365 6e20 746f 7320 7075 6f70     r does not suppo
   d8764:	7472 7420 6568 6c20 7665 6c65 6f20 2066     rt the level of 
   d8774:	6874 2065 514d 5454 7020 6f72 6f74 6f63     the MQTT protoco
   d8784:	206c 6572 7571 7365 6574 0064 6854 2065     l requested.The 
   d8794:	6c43 6569 746e 6920 6564 746e 6669 6569     Client identifie
   d87a4:	2072 7369 6320 726f 6572 7463 5520 4654     r is correct UTF
   d87b4:	382d 6220 7475 6e20 746f 6120 6c6c 776f     -8 but not allow
   d87c4:	6465 6220 2079 6874 2065 6553 7672 7265     ed by the Server
   d87d4:	5400 6568 4d20 5451 2054 6573 7672 6369     .The MQTT servic
   d87e4:	2065 7369 7520 616e 6176 6c69 6261 656c     e is unavailable
   d87f4:	5400 6568 6420 7461 2061 6e69 7420 6568     .The data in the
   d8804:	7520 6573 2072 616e 656d 6f20 2072 6170      user name or pa
   d8814:	7373 6f77 6472 6920 2073 616d 666c 726f     ssword is malfor
   d8824:	656d 0064 6f4e 2074 7561 6874 726f 7a69     med.Not authoriz
   d8834:	6465 7420 206f 6f63 6e6e 6365 0074 7845     ed to connect.Ex
   d8844:	6563 6465 6465 7220 6365 6e6f 656e 7463     ceeded reconnect
   d8854:	7220 7461 2065 696c 696d 2e74 5020 656c      rate limit. Ple
   d8864:	7361 2065 7274 2079 6761 6961 206e 616c     ase try again la
   d8874:	6574 2e72 5900 756f 6820 7661 2065 6562     ter..You have be
   d8884:	6e65 6220 6e61 656e 2064 7266 6d6f 6320     en banned from c
   d8894:	6e6f 656e 7463 6e69 2e67 5020 656c 7361     onnecting. Pleas
   d88a4:	2065 6f63 746e 6361 2074 6874 2065 514d     e contact the MQ
   d88b4:	5454 7320 7265 6576 2072 6461 696d 696e     TT server admini
   d88c4:	7473 6172 6f74 2072 6f66 2072 6f6d 6572     strator for more
   d88d4:	6420 7465 6961 736c 002e 0000                details....

000d88e0 <_ZTVN5spark13EthernetClassE>:
	...
   d88e8:	5eff 000d 5ef5 000d 5eeb 000d 5ee1 000d     .^...^...^...^..
   d88f8:	5ed5 000d 5ec9 000d 5ebd 000d 5eb5 000d     .^...^...^...^..
   d8908:	5eab 000d 5ea1 000d 70b5 000d               .^...^...p..

000d8914 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d8914:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d8924:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d8934:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d8944:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d8954:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d8964:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d8974:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d8984:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d8994:	3130 7530 0020 205d 2800 3a29 0020 5b20     010u .] .(): . [
   d89a4:	6300 646f 2065 203d 2500 0069 6564 6174     .code = .%i.deta
   d89b4:	6c69 2073 203d 0d00 000a 6e6c 6600 006e     ils = ....ln.fn.
   d89c4:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   d89d4:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   d89e4:	7000 6e61 6369 6100 6c6c 5a00 2500 302b     .panic.all.Z.%+0
   d89f4:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
   d8a04:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d8a14:	6d69 0065                                   ime.

000d8a18 <_ZTV9IPAddress>:
	...
   d8a20:	64ad 000d 649d 000d 649f 000d               .d...d...d..

000d8a2c <_ZTV9USBSerial>:
	...
   d8a34:	65b1 000d 6601 000d 660f 000d 61fd 000d     .e...f...f...a..
   d8a44:	65ed 000d 65b3 000d 65c9 000d 65fb 000d     .e...e...e...e..
   d8a54:	65df 000d 65ad 000d                         .e...e..

000d8a5c <_ZTV11USARTSerial>:
	...
   d8a64:	66b5 000d 6705 000d 6713 000d 61fd 000d     .f...g...g...a..
   d8a74:	66c9 000d 66eb 000d 66d7 000d 66ff 000d     .f...f...f...f..
   d8a84:	66b7 000d 66bb 000d                         .f...f..

000d8a8c <_ZTV7TwoWire>:
	...
   d8a94:	67b9 000d 6803 000d 67db 000d 67bb 000d     .g...h...g...g..
   d8aa4:	67e3 000d 67eb 000d 67f3 000d 67fb 000d     .g...g...g...g..

000d8ab4 <_ZTVN5spark9MeshClassE>:
	...
   d8abc:	6925 000d 691b 000d 6911 000d 6907 000d     %i...i...i...i..
   d8acc:	68fb 000d 68ef 000d 68e3 000d 68db 000d     .h...h...h...h..
   d8adc:	68d1 000d 68c7 000d 70b5 000d               .h...h...p..

000d8ae8 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8af0:	6ac9 000d 6acf 000d 6fb7 000d 6add 000d     .j...j...o...j..
   d8b00:	6acb 000d                                   .j..

000d8b04 <_ZTV9TCPClient>:
	...
   d8b0c:	40d1 000d 4105 000d 6a41 000d 6a5b 000d     .@...A..Aj..[j..
   d8b1c:	6e5d 000d 6baf 000d 6b81 000d 6a85 000d     ]n...k...k...j..
   d8b2c:	6d39 000d 6c35 000d 6be3 000d 6e2d 000d     9m..5l...k..-n..
   d8b3c:	6a87 000d 6abf 000d 6a6d 000d 6ae1 000d     .j...j..mj...j..
   d8b4c:	6b61 000d 6977 6972 676e 7200 6365 2076     ak..wiring.recv 
   d8b5c:	7265 6f72 2072 203d 6425 0000               error = %d..

000d8b68 <_ZTVN5spark9WiFiClassE>:
	...
   d8b70:	702d 000d 7023 000d 7019 000d 6fcf 000d     -p..#p...p...o..
   d8b80:	700d 000d 7001 000d 6ff5 000d 6fed 000d     .p...p...o...o..
   d8b90:	6fe3 000d 6fd9 000d 70b5 000d               .o...o...p..

000d8b9c <_ZTVN5spark12NetworkClassE>:
	...
   d8ba4:	704d 000d 7057 000d 7061 000d 706b 000d     Mp..Wp..ap..kp..
   d8bb4:	7075 000d 7081 000d 708d 000d 7099 000d     up...p...p...p..
   d8bc4:	70a1 000d 70ab 000d 70b5 000d               .p...p...p..

000d8bd0 <_ZSt7nothrow>:
   d8bd0:	0000 0000                                   ....

000d8bd4 <__sf_fake_stdin>:
	...

000d8bf4 <__sf_fake_stdout>:
	...

000d8c14 <__sf_fake_stderr>:
	...
   d8c34:	0043                                        C.

000d8c36 <link_const_variable_data_end>:
	...

000d8c38 <link_constructors_location>:
   d8c38:	000d42c9 	.word	0x000d42c9
   d8c3c:	000d4913 	.word	0x000d4913
   d8c40:	000d4a35 	.word	0x000d4a35
   d8c44:	000d5165 	.word	0x000d5165
   d8c48:	000d54e9 	.word	0x000d54e9
   d8c4c:	000d55e9 	.word	0x000d55e9
   d8c50:	000d5971 	.word	0x000d5971
   d8c54:	000d5975 	.word	0x000d5975
   d8c58:	000d5f09 	.word	0x000d5f09
   d8c5c:	000d6191 	.word	0x000d6191
   d8c60:	000d61d5 	.word	0x000d61d5
   d8c64:	000d6339 	.word	0x000d6339
   d8c68:	000d6349 	.word	0x000d6349
   d8c6c:	000d6371 	.word	0x000d6371
   d8c70:	000d69f1 	.word	0x000d69f1
   d8c74:	000d7039 	.word	0x000d7039
   d8c78:	000d7181 	.word	0x000d7181
   d8c7c:	000d7385 	.word	0x000d7385
   d8c80:	000d7409 	.word	0x000d7409
   d8c84:	000d74cd 	.word	0x000d74cd
   d8c88:	000d7591 	.word	0x000d7591

000d8c8c <link_constructors_end>:
   d8c8c:	00000000 	.word	0x00000000
